Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History 2 Effect on software development 3 Examples 4 See also 5 References Toggle the table of contents Leaky abstraction 1 language 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Faulty software abstraction This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Leaky abstraction" – news · newspapers · books · scholar · JSTOR ( March 2011 ) ( Learn how and when to remove this message ) A leaky abstraction in software development refers to a design flaw where an abstraction , intended to simplify and hide the underlying complexity of a system, fails to completely do so. This results in some of the implementation details becoming exposed or 'leaking' through the abstraction, forcing users to have knowledge of these underlying complexities to effectively use or troubleshoot the system.

[ 1 ] The concept was popularized by Joel Spolsky , who coined the term Law of Leaky Abstractions which states: [ 2 ] All non-trivial abstractions, to some degree, are leaky.

This means that even well-designed abstractions may not fully conceal their inner workings, and as computer systems grow more complex, the likelihood of such leaks increases. These leaks can lead to performance issues, unexpected behavior, and increased cognitive load on software developers , who are forced to understand both the abstraction and the underlying details it was meant to hide. This highlights a cause of software defects: the reliance of the software developer on an abstraction's infallibility. Despite their imperfections, abstractions are crucial in software development for managing complexity, even though they are not always flawless.

History [ edit ] The term "leaky abstraction" was popularized in 2002 by Joel Spolsky .

[ 2 ] [ 3 ] A 1992 paper by Kiczales describes some of the issues with imperfect abstractions and presents a potential solution to the problem by allowing for the customization of the abstraction itself.

[ 4 ] Effect on software development [ edit ] As systems become more complex, software developers must rely upon more abstractions. Each abstraction tries to hide complexity, letting a developer write software that "handles" the many variations of modern computing.

However, this law claims that developers of reliable software must learn the abstraction's underlying details anyway.

Examples [ edit ] Spolsky's article cites many examples of leaky abstractions that create problems for software development: The TCP/IP protocol stack is the combination of TCP , which tries to provide reliable delivery of information, running on top of IP , which provides only 'best-effort' service. When IP loses a packet, TCP has to retransmit it, which takes additional time. Thus TCP provides the abstraction of a reliable connection, but the implementation details leak through in the form of potentially variable performance (throughput and latency both suffer when data has to be retransmitted), and the connection can still break entirely.

Iterating over a large two-dimensional array can have radically different performance if done horizontally rather than vertically, depending on the order in which elements are stored in memory. One direction may vastly increase cache misses and page faults , both of which greatly delay access to memory.

The SQL language abstracts away the procedural steps for querying a database , allowing one to merely define what one wants. But certain SQL queries are thousands of times slower than other logically equivalent queries. On an even higher level of abstraction, ORM systems, which isolate object-oriented code from the implementation of object persistence using a relational database, still force the programmer to think in terms of databases, tables, and native SQL queries as soon as performance of ORM-generated queries becomes a concern.

Although network file systems like NFS and SMB let one treat files on remote machines as if they were local, the connection to the remote machine may slow down or break, and the file stops acting as if it were local.

The ASP.NET web forms programming platform, not to be confused with ASP.NET MVC, abstracts away the difference between compiled back-end code to handle clicking on a hyperlink ( <a> ) and code to handle clicking on a button. However, ASP.NET needs to hide the fact that in HTML there is no way to submit a form from a hyperlink. It does this by generating a few lines of JavaScript and attaching an onclick handler to the hyperlink. However, if the end user has JavaScript disabled, the ASP.NET application malfunctions. Furthermore, one cannot naively think of event handlers in ASP.NET in the same way as in a desktop GUI framework such as Windows Forms ; due to the asynchronous nature of the Web, processing event handlers in ASP.NET requires exchanging data with the server and reloading the form.

In 2020, Massachusetts Institute of Technology computing science teaching staff Anish, Jose, and Jon argued that the command line interface for git is a leaky abstraction, in which the underlying "beautiful design" of the git data model needs to be understood for effective usage of git.

[ 5 ] See also [ edit ] Abstraction inversion Dependency inversion principle Essential complexity Modular programming Separation of concerns References [ edit ] ^ Seibel, Peter (1 November 2006).

Practical Common Lisp . Apress. p. 96.

ISBN 978-1-4302-0017-8 .

^ a b Spolsky, Joel (2002).

"The Law of Leaky Abstractions" . Retrieved 2010-09-22 .

^ arvindpdmn (2019-08-23).

"Leaky Abstractions" .

Devopedia . Retrieved 2020-07-07 .

^ Kiczales, Gregor (1992).

"Towards a New Model of Abstraction in the Engineering of Software" (PDF) . Archived from the original (PDF) on 2011-06-04 . Retrieved 2010-02-03 .

^ "Version Control (Git)" .

the missing semester of your cs education . Retrieved 2020-07-31 .

Retrieved from " https://en.wikipedia.org/w/index.php?title=Leaky_abstraction&oldid=1248844365 " Category : Abstraction Hidden categories: Articles with short description Short description is different from Wikidata Articles needing additional references from March 2011 All articles needing additional references This page was last edited on 1 October 2024, at 19:28 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Leaky abstraction 1 language Add topic

