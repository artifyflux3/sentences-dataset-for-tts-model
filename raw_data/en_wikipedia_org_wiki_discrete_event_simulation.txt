Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Example 2 Components Toggle Components subsection 2.1 State 2.2 Clock 2.3 Events list 2.4 Random-number generators 2.5 Statistics 2.6 Ending condition 2.7 Three-Phased Approach 3 Common uses Toggle Common uses subsection 3.1 Diagnosing process issues 3.2 Hospital applications 3.3 Lab test performance improvement ideas 3.4 Evaluating capital investment decisions 3.5 Network simulators 4 See also 5 References 6 Further reading Toggle the table of contents Discrete-event simulation 13 languages Català Čeština Deutsch Eesti Español فارسی Français Português Русский Türkçe Українська 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from Discrete event simulation ) Type of simulation A discrete-event simulation ( DES ) models the operation of a system as a ( discrete ) sequence of events in time. Each event occurs at a particular instant in time and marks a change of state in the system.

[ 1 ] Between consecutive events, no change in the system is assumed to occur; thus the simulation time can directly jump to the occurrence time of the next event, which is called next-event time progression .

In addition to next-event time progression, there is also an alternative approach, called incremental time progression , where time is broken up into small time slices and the system state is updated according to the set of events/activities happening in the time slice.

[ 2 ] Because not every time slice has to be simulated, a next-event time simulation can typically run faster than a corresponding incremental time simulation.

Both forms of DES contrast with continuous simulation in which the system state is changed continuously over time on the basis of a set of differential equations defining the rates of change for state variables.

In the past, these three types of simulation have also been referred to, respectively, as: event scheduling simulation, activity scanning simulation, and process interaction simulation. It can also be noted that there are similarities between the implementation of the event queue in event scheduling, and the scheduling queue used in operating systems.

Example [ edit ] A common exercise in learning how to build discrete-event simulations is to model a queueing system , such as customers arriving at a bank teller to be served by a clerk.  In this example, the system objects are Customer and Teller , while the system events are Customer-Arrival , Service-Start and Service-End . Each of these events comes with its own dynamics defined by the following event routines: When a Customer-Arrival event occurs, the state variable queue-length is incremented by 1, and if the state variable teller-status has the value "available", a Service-Start follow-up event is scheduled to happen without any delay, such that the newly arrived customer will be served immediately.

When a Service-Start event occurs, the state variable teller-status is set to "busy" and a Service-End follow-up event is scheduled with a delay (obtained from sampling a service-time random variable).

When a Service-End event occurs, the state variable queue-length is decremented by 1 (representing the customer's departure). If the state variable queue-length is still greater than zero, a Service-Start follow-up event is scheduled to happen without any delay. Otherwise, the state variable teller-status is set to "available".

The random variables that need to be characterized to model this system stochastically are the interarrival-time for recurrent Customer-Arrival events and the service-time for the delays of Service-End events.

Components [ edit ] State [ edit ] A system state is a set of variables that captures the salient properties of the system to be studied. The state trajectory over time S(t) can be mathematically represented by a step function whose value can change whenever an event occurs.

Clock [ edit ] The simulation must keep track of the current simulation time, in whatever measurement units are suitable for the system being modeled. In discrete-event simulations, as opposed to continuous simulations, time 'hops' because events are instantaneous – the clock skips to the next event start time as the simulation proceeds.

Events list [ edit ] "Future event list" redirects here. For lists of future events, see Timelines of the future .

The simulation maintains at least one list of simulation events.  This is sometimes called the pending event set because it lists events that are pending as a result of previously simulated event but have yet to be simulated themselves. An event is described by the time at which it occurs and a type, indicating the code that will be used to simulate that event.  It is common for the event code to be parametrized, in which case, the event description also contains parameters to the event code.

[ citation needed ] The event list is also referred to as the future event list (FEL) or future event set (FES).

[ 3 ] [ 4 ] [ 5 ] [ 6 ] When events are instantaneous, activities that extend over time are modeled as sequences of events.  Some simulation frameworks allow the time of an event to be specified as an interval, giving the start time and the end time of each event.

[ citation needed ] Single-threaded simulation engines based on instantaneous events have just one current event.  In contrast, multi-threaded simulation engines and simulation engines supporting an interval-based event model may have multiple current events.  In both cases, there are significant problems with synchronization between current events.

[ citation needed ] The pending event set is typically organized as a priority queue , sorted by event time.

[ 7 ] That is, regardless of the order in which events are added to the event set, they are removed in strictly chronological order.  Various priority queue implementations have been studied in the context of discrete event simulation; [ 8 ] alternatives studied have included splay trees , skip lists , calendar queues , [ 9 ] and ladder queues.

[ 10 ] [ 11 ] On massively-parallel machines , such as multi-core or many-core CPUs, the pending event set can be implemented by relying on non-blocking algorithms , in order to reduce the cost of synchronization among the concurrent threads.

[ 12 ] [ 13 ] Typically, events are scheduled dynamically as the simulation proceeds. For example, in the bank example noted above, the event CUSTOMER-ARRIVAL at time t would, if the CUSTOMER_QUEUE was empty and TELLER was idle, include the creation of the subsequent event CUSTOMER-DEPARTURE to occur at time t+s, where s is a number generated from the SERVICE-TIME distribution.

[ citation needed ] Random-number generators [ edit ] The simulation needs to generate random variables of various kinds, depending on the system model. This is accomplished by one or more Pseudorandom number generators . The use of pseudo-random numbers as opposed to true random numbers is a benefit should a simulation need a rerun with exactly the same behavior.

One of the problems with the random number distributions used in discrete-event simulation is that the steady-state distributions of event times may not be known in advance.  As a result, the initial set of events placed into the pending event set will not have arrival times representative of the steady-state distribution.  This problem is typically solved by bootstrapping the simulation model.  Only a limited effort is made to assign realistic times to the initial set of pending events.  These events, however, schedule additional events, and with time, the distribution of event times approaches its steady state.  This is called bootstrapping the simulation model.  In gathering statistics from the running model, it is important to either disregard events that occur before the steady state is reached or to run the simulation for long enough that the bootstrapping behavior is overwhelmed by steady-state behavior.  (This use of the term bootstrapping can be contrasted with its use in both statistics and computing ).

Statistics [ edit ] The simulation typically keeps track of the system's statistics , which quantify the aspects of interest. In the bank example, it is of interest to track the mean waiting times. In a simulation model, performance metrics are not analytically derived from probability distributions , but rather as averages over replications , that is different runs of the model.

Confidence intervals are usually constructed to help assess the quality of the output.

Ending condition [ edit ] Because events are bootstrapped, theoretically a discrete-event simulation could run forever. So the simulation designer must decide when the simulation will end.  Typical choices are "at time t" or "after processing n number of events" or, more generally, "when statistical measure X reaches the value x".

Three-Phased Approach [ edit ] Pidd (1998) has proposed the three-phased approach to discrete event simulation. In this approach, the first phase is to jump to the next chronological event. The second phase is to execute all events that unconditionally occur at that time (these are called B-events). The third phase is to execute all events that conditionally occur at that time (these are called C-events). The three phase approach is a refinement of the event-based approach in which simultaneous events are ordered so as to make the most efficient use of computer resources.  The three-phase approach is used by a number of commercial simulation software packages, but from the user's point of view, the specifics of the underlying simulation method are generally hidden.

Common uses [ edit ] Diagnosing process issues [ edit ] Simulation approaches are particularly well equipped to help users diagnose issues in complex environments.  The theory of constraints illustrates the importance of understanding bottlenecks in a system. Identifying and removing bottlenecks allows improving processes and the overall system.  For instance, in manufacturing enterprises bottlenecks may be created by excess inventory, overproduction , variability in processes and variability in routing or sequencing.  By accurately documenting the system with the help of a simulation model it is possible to gain a bird’s eye view of the entire system.

A working model of a system allows management to understand performance drivers.  A simulation can be built to include any number of performance indicators such as worker utilization, on-time delivery rate, scrap rate, cash cycles, and so on.

Hospital applications [ edit ] An operating theater is generally shared between several surgical disciplines.  Through better understanding the nature of these procedures it may be possible to increase the patient throughput.

[ 14 ] Example: If a heart surgery takes on average four hours, changing an operating room schedule from eight available hours to nine will not increase patient throughput.  On the other hand, if a hernia procedure takes on average twenty minutes providing an extra hour may also not yield any increased throughput if the capacity and average time spent in the recovery room is not considered.

Lab test performance improvement ideas [ edit ] Many systems improvement ideas are built on sound principles, proven methodologies ( Lean , Six Sigma , TQM , etc.) yet fail to improve the overall system.  A simulation model allows the user to understand and test a performance improvement idea in the context of the overall system.

Evaluating capital investment decisions [ edit ] See also: Monte Carlo methods in finance , Corporate finance § Capital investment decisions , and Corporate finance § Quantifying uncertainty Simulation modeling is commonly used to model potential investments.  Through modeling investments decision-makers can make informed decisions and evaluate potential alternatives.

Network simulators [ edit ] Main article: Network simulation Discrete event simulation is used in computer network to simulate new protocols, different system architectures (distributed, hierarchical, centralised, P2P) before actual deployment. It is possible to define different evaluation metrics, such as service time, bandwidth, dropped packets, resource consumption, and so on.

See also [ edit ] System modeling approaches: Finite-state machines and Markov chains Stochastic process and a special case, Markov process Queueing theory and in particular birth–death process Discrete Event System Specification Transaction-level modeling (TLM) Computational techniques: Computer experiment Computer simulation Monte Carlo method Variance reduction Pseudo-random number generator Software: List of computer simulation software List of discrete event simulation software Disciplines: Industrial engineering Network simulation References [ edit ] ^ Stewart Robinson (2004).

Simulation – The practice of model development and use . Wiley.

^ Matloff, Norm.

"Introduction to Discrete-Event Simulation and the SimPy Language" (PDF) . Retrieved 24 January 2013 .

^ Park, Hyungwook; Fishwick, Paul A. (2010).

"A GPU-Based Application Framework Supporting Fast Discrete-Event Simulation" .

Simulation .

86 (10): 613– 628.

doi : 10.1177/0037549709340781 .

ISSN 0037-5497 .

S2CID 9731021 .

^ Dannenberg, Roger.

"An Introduction to Discrete-Event Simulation" .

Carnegie Mellon School of Computer Science . Retrieved 2022-03-11 .

^ Güneş, Mesut.

"Chapter 3: General Principles" (PDF) .

Freie Universität Berlin . Retrieved 2022-03-11 .

^ Damerdji, Halim; Glynn, Peter W. (1998).

"Limit Theory for Performance Modeling of Future Event Set Algorithms" .

Management Science .

44 (12): 1709– 1722.

doi : 10.1287/mnsc.44.12.1709 .

ISSN 0025-1909 .

JSTOR 2634704 .

^ Douglas W. Jones , ed.

Implementations of Time , Proceedings of the 18th Winter Simulation Conference, 1986.

^ Douglas W. Jones , Empirical Comparison of Priority Queue and Event Set Implementations , Communications of the ACM, 29, April 1986, pages 300–311.

^ Kah Leong Tan and Li-Jin Thng, SNOOPy Calendar Queue , Proceedings of the 32nd Winter Simulation Conference, 2000 ^ Dickman, Tom; Gupta, Sounak; Wilsey, Philip A. (2013). "Event pool structures for PDES on many-core Beowulf clusters".

Proceedings of the 2013 ACM SIGSIM conference on Principles of advanced discrete simulation - SIGSIM-PADS '13 . p. 103.

doi : 10.1145/2486092.2486106 .

ISBN 9781450319201 .

S2CID 17572839 .

^ Furfaro, Angelo; Sacco, Ludovica (2018). "Adaptive Ladder Queue".

Proceedings of the 2018 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation - SIGSIM-PADS '18 . pp.

101– 104.

doi : 10.1145/3200921.3200925 .

ISBN 9781450350921 .

S2CID 21699926 .

^ Marotta, Romolo; Ianni, Mauro; Pellegrini, Alessandro; Quaglia, Francesco (2017). "A Conflict-Resilient Lock-Free Calendar Queue for Scalable Share-Everything PDES Platforms".

Proceedings of the 2017 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation - SIGSIM-PADS '17 . pp.

15– 26.

doi : 10.1145/3064911.3064926 .

hdl : 11573/974295 .

ISBN 9781450344890 .

S2CID 30460497 .

^ Lindén, Jonatan; Jonsson, Bengt (2013). "A Skiplist-Based Concurrent Priority Queue with Minimal Memory Contention".

Proceedings of the 2013 Conference on Principles of Distributed Systems - OPODIS 2013 . pp.

206– 220.

doi : 10.1007/978-3-319-03850-6_15 .

ISBN 9783319038490 .

^ John J. Forbus; Daniel Berleant (2022).

"Discrete-Event Simulation in Healthcare Settings: A Review" .

Modelling .

3 (4): 417– 433.

arXiv : 2211.00061 .

doi : 10.3390/modelling3040027 .

Further reading [ edit ] Myron H. MacDougall (1987).

Simulating Computer Systems: Techniques and Tools . MIT Press.

ISBN 9780262132299 .

William Delaney; Erminia Vaccari (1988).

Dynamic Models and Discrete Event Simulation . Dekker INC.

Roger W. McHaney (1991).

Computer Simulation: A Practical Perspective . Academic Press.

Michael Pidd (1998).

Computer simulation in management science – fourth edition . Wiley.

A, Alan Pritsker, Jean J. O'Reilly (1999).

Simulation with Visual SLAM and AweSim . Wiley.

{{ cite book }} :  CS1 maint: multiple names: authors list ( link ) Averill M. Law; W. David Kelton (2000).

Simulation modeling and analysis – third edition . McGraw–Hill.

Bernard P. Zeigler; Herbert Praehofer; Tag Gon Kim (2000).

Theory of modeling and simulation: Integrating discrete event and continuous complex dynamic systems – second edition . Academic Press.

Jerry Banks; John Carson; Barry Nelson; David Nicol (2005).

Discrete-event system simulation – fourth edition . Pearson.

James J. Nutaro (2010).

Building software for simulation: theory and algorithms, with applications in C++ . Wiley.

NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐zxjfk
Cached time: 20250812004358
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.327 seconds
Real time usage: 0.393 seconds
Preprocessor visited node count: 1869/1000000
Revision size: 18449/2097152 bytes
Post‐expand include size: 47172/2097152 bytes
Template argument size: 2720/2097152 bytes
Highest expansion depth: 12/100
Expensive parser function count: 7/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 64759/5000000 bytes
Lua time usage: 0.215/10.000 seconds
Lua memory usage: 6453802/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  360.031      1 -total
 41.46%  149.271      1 Template:Reflist
 39.13%  140.870     14 Template:Cite_book
 18.26%   65.727      4 Template:Cn
 17.18%   61.845      1 Template:Short_description
 14.90%   53.633      4 Template:Fix
  9.13%   32.876      2 Template:Pagetype
  8.23%   29.648      8 Template:Category_handler
  7.04%   25.346      1 Template:Redirect
  5.45%   19.634      7 Template:Main_other Saved in parser cache with key enwiki:pcache:5920634:|#|:idhash:canonical and timestamp 20250812004358 and revision id 1292076042. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Discrete-event_simulation&oldid=1292076042 " Categories : Stochastic simulation Events (computing) Hidden categories: Articles with short description Short description matches Wikidata All articles with unsourced statements Articles with unsourced statements from March 2022 CS1 maint: multiple names: authors list This page was last edited on 25 May 2025, at 02:30 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Discrete-event simulation 13 languages Add topic

