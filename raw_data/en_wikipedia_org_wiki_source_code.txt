Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Background 2 Organization 3 Purposes Toggle Purposes subsection 3.1 Estimation 3.2 Communication 3.3 Modification 3.4 Compilation and execution 3.5 Portability 4 Quality 5 Copyright and licensing 6 See also 7 References Toggle References subsection 7.1 Sources 8 External links Toggle the table of contents Source code 80 languages Afrikaans العربية Asturianu Azərbaycanca বাংলা 閩南語 / Bân-lâm-gí Беларуская Беларуская (тарашкевіца) Български Bosanski Català Čeština ChiTumbuka Cymraeg Dansk الدارجة Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego 客家語 / Hak-kâ-ngî 한국어 Հայերեն हिन्दी Hrvatski Ido Ilokano Bahasa Indonesia IsiZulu Italiano עברית ಕನ್ನಡ Kiswahili Кыргызча Latviešu Lëtzebuergesch Lietuvių Magyar മലയാളം Bahasa Melayu 閩東語 / Mìng-dĕ̤ng-ngṳ̄ Mirandés Монгол မြန်မာဘာသာ Nederlands 日本語 Norsk bokmål Norsk nynorsk Олык марий Pälzisch Polski Português Qaraqalpaqsha Română Runa Simi Русский Simple English Slovenčina Slovenščina کوردی Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska தமிழ் ไทย Тоҷикӣ Türkçe Українська اردو Vèneto Tiếng Việt 吴语 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons MediaWiki Wikifunctions Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Human-readable instructions a computer can execute This article is about the software concept. For the film, see Source Code .

Simple C-language source code example, a procedural programming language . The resulting program prints "hello, world" on the computer screen. This first known " Hello world " snippet from the seminal book The C Programming Language originates from Brian Kernighan in the Bell Laboratories in 1974.

[ 1 ] Program execution General concepts Code Translation Compiler Compile time Optimizing compiler Linking Execution Runtime system Executable Interpreter Virtual machine Intermediate representation (IR) Types of code Source code Object code Bytecode Machine code Microcode Compilation strategies Ahead-of-time (AOT) Just-in-time (JIT) Tracing just-in-time Compile and go system Precompilation Transcompilation Recompilation Notable runtimes Android Runtime (ART) BEAM (Erlang) Common Language Runtime (CLR) and Mono CPython and PyPy crt0 ( C target-specific initializer) Java virtual machine (JVM) LuaJIT Objective-C and Swift 's V8 and Node.js Zend Engine (PHP) Notable compilers & toolchains GNU Compiler Collection (GCC) LLVM and Clang MSVC Glasgow Haskell Compiler (GHC) v t e In computing , source code , or simply code or source , is a plain text computer program written in a programming language . A programmer writes the human readable source code to control the behavior of a computer .

Since a computer, at base, only understands machine code , source code must be translated before a computer can execute it. The translation process can be implemented three ways. Source code can be converted into machine code by a compiler or an assembler . The resulting executable is machine code ready for the computer. Alternatively, source code can be executed without conversion via an interpreter . An interpreter loads the source code into memory. It simultaneously translates and executes each statement . A method that combines compiling and interpreting is to first produce bytecode , which is an intermediate representation of source code that is quickly interpreted.

Background [ edit ] The first programmable computers, which appeared at the end of the 1940s, [ 2 ] were programmed in machine language (simple instructions that could be directly executed by the processor). Machine language was difficult to debug and was not portable between different computer systems.

[ 3 ] Initially, hardware resources were scarce and expensive, while human resources were cheaper.

[ 4 ] As programs grew more complex, programmer productivity became a bottleneck. This led to the introduction of high-level programming languages such as Fortran in the mid-1950s. These languages abstracted away the details of the hardware, instead being designed to express algorithms that could be understood more easily by humans.

[ 5 ] [ 6 ] As instructions distinct from the underlying computer hardware , software is therefore relatively recent, dating to these early high-level programming languages such as Fortran , Lisp , and Cobol .

[ 6 ] The invention of high-level programming languages was simultaneous with the compilers needed to translate the source code automatically into machine code that can be directly executed on the computer hardware .

[ 7 ] Source code is the form of code that is modified directly by humans, typically in a high-level programming language.

Object code can be directly executed by the machine and is generated automatically from the source code, often via an intermediate step, assembly language . While object code will only work on a specific platform, source code can be ported to a different machine and recompiled there. For the same source code, object code can vary significantly—not only based on the machine for which it is compiled, but also based on performance optimization from the compiler.

[ 8 ] [ 9 ] Organization [ edit ] Further information: Software configuration management Most programs do not contain all the resources needed to run them and rely on external libraries . Part of the compiler's function is to link these files in such a way that the program can be executed by the hardware.

[ 10 ] A more complex Java source code example. Written in object-oriented programming style, it demonstrates boilerplate code . With prologue comments indicated in red, inline comments indicated in green, and program statements indicated in blue.

Software developers often use configuration management to track changes to source code files ( version control ). The configuration management system also keeps track of which object code file corresponds to which version of the source code file.

[ 11 ] Purposes [ edit ] Estimation [ edit ] The number of source lines of code (SLOC) is often used as a metric when evaluating the productivity of computer programmers, the economic value of a code base, effort estimation for projects in development, and the ongoing cost of software maintenance after release.

[ 12 ] Communication [ edit ] Source code is also used to communicate algorithms between parties, e.g., code snippets online or in books.

[ 13 ] Computer programmers can find it helpful to review extant source code to learn about programming techniques.

[ 13 ] The sharing of source code between developers is often cited as a contributing factor to the maturing of their programming skills.

[ 13 ] Some consider source code an expressive artistic medium .

[ 14 ] Source code often contains comments —blocks of text marked for the compiler to ignore. This content is not part of the program logic, but is instead intended to help readers understand the program.

[ 15 ] Companies often keep the source code confidential in order to hide algorithms considered a trade secret . Proprietary, secret source code and algorithms are widely used for sensitive government applications such as criminal justice , which results in black box behavior with a lack of transparency into the algorithm's methodology. The result is avoidance of public scrutiny of issues such as bias.

[ 16 ] Modification [ edit ] See also: Software development and Software maintenance Access to the source code (not just the object code ) is essential to modifying it.

[ 17 ] Understanding extant code is necessary to understand how it works [ 17 ] and before modifying it.

[ 18 ] The rate of understanding depends both on the code base as well as the skill of the programmer.

[ 19 ] Experienced programmers have an easier time understanding what the code does at a high level.

[ 20 ] Software visualization is sometimes used to speed up this process.

[ 21 ] Many software programmers use an integrated development environment (IDE) to improve their productivity. IDEs typically have several features built in, including a source-code editor that can alert the programmer to common errors.

[ 22 ] Modification often includes code refactoring (improving structure without changing function) and restructuring (improving structure and function simultaneously).

[ 23 ] Nearly every change to code introduces new bugs or unexpected ripple effects , which require another round of fixes.

[ 18 ] Code reviews by other developers are often used to scrutinize new code added to a project.

[ 24 ] The purpose of this phase is often to verify that the code meets style and maintainability standards and that it is a correct implementation of the software design .

[ 25 ] According to some estimates, code review dramatically reduce the number of bugs persisting after software testing is complete.

[ 24 ] Along with software testing that works by executing the code, static program analysis uses automated tools to detect problems with the source code. Many IDEs support code analysis tools, which might provide metrics on the clarity and maintainability of the code.

[ 26 ] Debuggers are tools that often enable programmers to step through execution while keeping track of which source code corresponds to each change of state.

[ 27 ] Compilation and execution [ edit ] Source code files in a high-level programming language must go through a stage of preprocessing into machine code before the instructions can be carried out.

[ 7 ] After being compiled, the program can be saved as an object file and the loader (part of the operating system) can take this saved file and execute it as a process on the computer hardware.

[ 10 ] Some programming languages use an interpreter instead of a compiler. An interpreter converts the program into machine code at run time , which makes them 10 to 100 times slower than compiled programming languages.

[ 22 ] [ 28 ] Portability [ edit ] Further information: software portability Another reason many programs are distributed in source code form, instead of as executable binary files , is that (often) a single source code file can be written once and will run on a variety of different end-user machines (each with their own localized compiler or interpreter), unlike an executable code file which generally only works on nearly-identical machines. Source code was used this way to distribute the Unix operating system early in the history of Unix , and later to allow programs written in scripting languages (in particular the JavaScript client-side scripting language) to run on a wide variety of machines.

For this goal, minified , obfuscated , or decompiled source code files (all of which eliminate the comments in the original code) are generally just as portable as the original source code files (which nearly always include commments), even though they are far less useful for modification, and therefore don't meet the definition of source code in the GNU General Public License , version 2 (GPL2).

Quality [ edit ] Further information: Software quality Software quality is an overarching term that can refer to a code's correct and efficient behavior, its reusability and portability , or the ease of modification.

[ 29 ] It is usually more cost-effective to build quality into a product from the start rather than try to add it later in a development process.

[ 30 ] Higher quality code reduces lifetime cost to both suppliers and customers as via higher reliability and maintainability .

[ 31 ] [ 32 ] Maintainability is the quality of software enabling it to be easily modified without breaking extant functions.

[ 33 ] Following coding conventions such as using clear function and variable names that correspond to their purpose makes maintenance easier.

[ 34 ] Use of conditional loop statements only if the code could execute more than once, and eliminating code that will never execute can also increase understandability.

[ 35 ] Many software development organizations neglect maintainability during the development phase, even though it will increase long-term costs.

[ 32 ] Technical debt is incurred when programmers, often out of laziness or urgency to meet a deadline, choose quick and dirty solutions rather than build maintainability into their code.

[ 36 ] A common cause is underestimates in software development effort estimation , leading to insufficient resources allocated to development.

[ 37 ] A challenge with maintainability is that many software engineering courses do not emphasize it.

[ 38 ] Development engineers who know that they will not be responsible for maintaining the software do not have an incentive to build in maintainability.

[ 18 ] Copyright and licensing [ edit ] Further information: Software copyright and Software license See also: History of free and open-source software The situation varies worldwide, but in the United States before 1974, software and its source code was not copyrightable and therefore always public domain software .

[ 39 ] In 1974, the US Commission on New Technological Uses of Copyrighted Works ( CONTU ) decided that "computer programs, to the extent that they embody an author's original creation, are proper subject matter of copyright".

[ 40 ] [ 41 ] Proprietary software is rarely distributed as source code.

[ 42 ] Although the term open-source software literally refers to public access to the source code , [ 43 ] open-source software has additional requirements: free redistribution, permission to modify the source code and release derivative works under the same license, and nondiscrimination between different uses—including commercial use.

[ 44 ] [ 45 ] The free reusability of open-source software can speed up development.

[ 46 ] See also [ edit ] Bytecode Code as data Coding conventions Free software Legacy code Machine code Markup language Obfuscated code Object code Open-source software Package manager Programming language Source code repository Syntax highlighting Visual programming language References [ edit ] ^ Kernighan, Brian W.

"Programming in C: A Tutorial" (PDF) . Bell Laboratories, Murray Hill, N. J. Archived from the original (PDF) on 23 February 2015.

^ Gabbrielli & Martini 2023 , p. 519.

^ Gabbrielli & Martini 2023 , pp. 520–521.

^ Gabbrielli & Martini 2023 , p. 522.

^ Gabbrielli & Martini 2023 , p. 521.

^ a b Tracy 2021 , p. 1.

^ a b Tracy 2021 , p. 121.

^ Lin et al.

2001 , pp. 238–239.

^ Katyal 2019 , p. 1194.

^ a b Tracy 2021 , pp. 122–123.

^ O'Regan 2022 , pp. 230–231, 233, 377.

^ Foster 2014 , pp. 249, 274, 280, 305.

^ a b c Spinellis, D: Code Reading: The Open Source Perspective . Addison-Wesley Professional, 2003.

ISBN 0-201-79940-5 ^ " Art and Computer Programming " ONLamp.com Archived 20 February 2018 at the Wayback Machine , (2005) ^ Kaczmarek et al.

2018 , p. 68.

^ Katyal 2019 , pp. 1186–1187.

^ a b Katyal 2019 , p. 1195.

^ a b c Offutt, Jeff (January 2018).

"Overview of Software Maintenance and Evolution" .

George Mason University Department of Computer Science . Retrieved 5 May 2024 .

^ Tripathy & Naik 2014 , p. 296.

^ Tripathy & Naik 2014 , p. 297.

^ Tripathy & Naik 2014 , pp. 318–319.

^ a b O'Regan 2022 , p. 375.

^ Tripathy & Naik 2014 , p. 94.

^ a b Dooley 2017 , p. 272.

^ O'Regan 2022 , pp. 18, 21.

^ O'Regan 2022 , p. 133.

^ Kaczmarek et al.

2018 , pp. 348–349.

^ Sebesta 2012 , p. 28.

^ Galin 2018 , p. 26.

^ O'Regan 2022 , pp. 68, 117.

^ O'Regan 2022 , pp. 3, 268.

^ a b Varga 2018 , p. 12.

^ Varga 2018 , p. 5.

^ Tripathy & Naik 2014 , pp. 296–297.

^ Tripathy & Naik 2014 , p. 309.

^ Varga 2018 , pp. 6–7.

^ Varga 2018 , p. 7.

^ Varga 2018 , pp. 7–8.

^ Liu, Joseph P.; Dogan, Stacey L. (2005).

"Copyright Law and Subject Matter Specificity: The Case of Computer Software" .

New York University Annual Survey of American Law .

61 (2). Archived from the original on 25 June 2021.

^ Apple Computer, Inc. v. Franklin Computer Corporation Puts the Byte Back into Copyright Protection for Computer Programs Archived 7 May 2017 at the Wayback Machine in Golden Gate University Law Review Volume 14, Issue 2, Article 3 by Jan L. Nussbaum (January 1984) ^ Lemley, Menell, Merges and Samuelson.

Software and Internet Law , p. 34.

^ Boyle 2003 , p. 45.

^ Morin et al.

2012 , Open Source versus Closed Source.

^ Sen et al.

2008 , p. 209.

^ Morin et al.

2012 , Free and Open Source Software (FOSS) Licensing.

^ O'Regan 2022 , p. 106.

Sources [ edit ] Ablon, Lillian; Bogart, Andy (2017).

Zero Days, Thousands of Nights: The Life and Times of Zero-Day Vulnerabilities and Their Exploits (PDF) . Rand Corporation.

ISBN 978-0-8330-9761-3 .

Boyle, James (2003).

"The Second Enclosure Movement and the Construction of the Public Domain" .

Law and Contemporary Problems .

66 (1): 33– 74.

ISSN 0023-9186 .

Campbell-Kelly, Martin; Garcia-Swartz, Daniel D. (2015).

From Mainframes to Smartphones: A History of the International Computer Industry . Harvard University Press.

ISBN 978-0-674-28655-9 .

Daswani, Neil ; Elbayadi, Moudy (2021).

Big Breaches: Cybersecurity Lessons for Everyone . Apress.

ISBN 978-1-4842-6654-0 .

Dooley, John F. (2017).

Software Development, Design and Coding: With Patterns, Debugging, Unit Testing, and Refactoring . Apress.

ISBN 978-1-4842-3153-1 .

Foster, Elvis C. (2014).

Software Engineering: A Methodical Approach . Apress.

ISBN 978-1-4842-0847-2 .

Gabbrielli, Maurizio; Martini, Simone (2023).

Programming Languages: Principles and Paradigms (2nd ed.). Springer.

ISBN 978-3-031-34144-1 .

Galin, Daniel (2018).

Software Quality: Concepts and Practice . John Wiley & Sons.

ISBN 978-1-119-13449-7 .

Haber, Morey J.; Hibbert, Brad (2018).

Asset Attack Vectors: Building Effective Vulnerability Management Strategies to Protect Organizations . Apress.

ISBN 978-1-4842-3627-7 .

Kaczmarek, Stefan; Lees, Brad; Bennett, Gary; Fisher, Mitch (2018).

Objective-C for Absolute Beginners: iPhone, iPad and Mac Programming Made Easy . Apress.

ISBN 978-1-4842-3428-0 .

Katyal, Sonia K. (2019).

"The Paradox of Source Code Secrecy" .

Cornell Law Review .

104 : 1183.

Kitchin, Rob; Dodge, Martin (2011).

Code/space: Software and Everyday Life . MIT Press.

ISBN 978-0-262-04248-2 .

Lin, Daniel; Sag, Matthew; Laurie, Ronald S. (2001).

"Source Code versus Object Code: Patent Implications for the Open Source Community" .

Santa Clara Computer and High Technology Law Journal .

18 : 235.

Morin, Andrew; Urban, Jennifer; Sliz, Piotr (2012).

"A Quick Guide to Software Licensing for the Scientist-Programmer" .

PLOS Computational Biology .

8 (7): e1002598.

Bibcode : 2012PLSCB...8E2598M .

doi : 10.1371/journal.pcbi.1002598 .

ISSN 1553-7358 .

PMC 3406002 .

PMID 22844236 .

O'Regan, Gerard (2022).

Concise Guide to Software Engineering: From Fundamentals to Application Methods . Springer Nature.

ISBN 978-3-031-07816-3 .

Sen, Ravi; Subramaniam, Chandrasekar; Nelson, Matthew L. (2008). "Determinants of the Choice of Open Source Software License".

Journal of Management Information Systems .

25 (3). Informa UK Limited: 207– 240.

doi : 10.2753/mis0742-1222250306 .

ISSN 0742-1222 .

Sebesta, Robert W. (2012).

Concepts of Programming Languages (10 ed.). Addison-Wesley.

ISBN 978-0-13-139531-2 .

Tracy, Kim W. (2021).

Software: A Technical History . Morgan & Claypool Publishers.

ISBN 978-1-4503-8724-8 .

Tripathy, Priyadarshi; Naik, Kshirasagar (2014).

Software Evolution and Maintenance: A Practitioner's Approach . John Wiley & Sons.

ISBN 978-0-470-60341-3 .

Varga, Ervin (2018).

Unraveling Software Maintenance and Evolution: Thinking Outside the Box . Springer.

ISBN 978-3-319-71303-8 .

External links [ edit ] Look up code or source code in Wiktionary, the free dictionary.

Wikimedia Commons has media related to Source code .

Authority control databases International FAST National Germany United States France BnF data Israel Other IdRef Yale LUX NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐j84l7
Cached time: 20250816211816
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.752 seconds
Real time usage: 0.878 seconds
Preprocessor visited node count: 4877/1000000
Revision size: 21802/2097152 bytes
Post‐expand include size: 68958/2097152 bytes
Template argument size: 4539/2097152 bytes
Highest expansion depth: 14/100
Expensive parser function count: 11/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 104141/5000000 bytes
Lua time usage: 0.516/10.000 seconds
Lua memory usage: 8358317/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  766.336      1 -total
 17.78%  136.276     46 Template:Sfn
 15.52%  118.932     15 Template:Cite_book
 14.96%  114.622      1 Template:Reflist
 12.21%   93.580      1 Template:Program_execution
  9.60%   73.543      2 Template:Cite_web
  8.91%   68.308      1 Template:Authority_control
  8.73%   66.931      1 Template:Short_description
  7.11%   54.475      2 Template:Sister_project
  6.90%   52.877      2 Template:Side_box Saved in parser cache with key enwiki:pcache:27661:|#|:idhash:canonical and timestamp 20250816211816 and revision id 1305411400. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Source_code&oldid=1305411400 " Category : Source code Hidden categories: Webarchive template wayback links Articles with short description Short description is different from Wikidata Use dmy dates from January 2016 Commons category link from Wikidata Articles with example code This page was last edited on 11 August 2025, at 22:36 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Source code 80 languages Add topic

