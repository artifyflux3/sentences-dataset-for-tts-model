Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Essential features 2 Mathematics of processes Toggle Mathematics of processes subsection 2.1 Parallel composition 2.2 Communication 2.3 Sequential composition 2.4 Reduction semantics 2.5 Hiding 2.6 Recursion and replication 2.7 Null process 3 Discrete and continuous process algebra 4 History 5 Current research 6 Software implementations 7 Relationship to other models of concurrency 8 See also 9 References 10 Further reading Toggle the table of contents Process calculus 10 languages Deutsch فارسی Français 한국어 Lietuvių 日本語 Polski Português Русский 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Family of approaches for modelling concurrent systems In computer science , the process calculi (or process algebras ) are a diverse family of related approaches for formally modelling concurrent systems . Process calculi provides a tool for high-level descriptions of interactions, communications, and synchronizations between a collection of independent agents or processes. They provide algebraic laws that allow process descriptions to be manipulated and analyzed, and they also permit formal reasoning about equivalences between processes (e.g., using bisimulation ). Leading examples of process calculi include CSP , CCS , ACP , and LOTOS .

[ 1 ] More recent additions to the family include the π-calculus , the ambient calculus , PEPA , the fusion calculus and the join-calculus .

Essential features [ edit ] While the variety of existing process calculi is very large (including variants that incorporate stochastic behaviour, timing information, and specializations for studying molecular interactions), there are several features that all process calculi have in common: [ 2 ] Representing interactions between independent processes as communication ( message-passing ), rather than as modification of shared variables.

Describing processes and systems using a small collection of primitives, and operators for combining those primitives.

Defining algebraic laws for the process operators, which allow process expressions to be manipulated using equational reasoning .

Mathematics of processes [ edit ] To define a process calculus , one starts with a set of names (or channels ) whose purpose is to provide means of communication.  In many implementations, channels have rich internal structure to improve efficiency, but this is abstracted away in  most theoretic models.  In addition to names, one needs a means to form new processes from old ones. The basic operators, always present in some form or other, allow: [ 3 ] parallel composition of processes specification of which channels to use for sending and receiving data sequentialization of interactions hiding of interaction points recursion or process replication Parallel composition [ edit ] Parallel composition of two processes P {\displaystyle {\mathit {P}}} and Q {\displaystyle {\mathit {Q}}} , usually written P | Q {\displaystyle P\vert Q} , is the key primitive distinguishing the process calculi from sequential models of computation. Parallel composition allows computation in P {\displaystyle {\mathit {P}}} and Q {\displaystyle {\mathit {Q}}} to proceed simultaneously and independently. But it also allows interaction, that is synchronisation and flow of information from P {\displaystyle {\mathit {P}}} to Q {\displaystyle {\mathit {Q}}} (or vice versa) on a channel shared by both. Crucially, an agent or process can be connected to more than one channel at a time.

Channels may be synchronous or asynchronous. In the case of a synchronous channel, the agent sending a message waits until another agent has received the message. Asynchronous channels do not require any such synchronization.  In some process calculi (notably the π-calculus ) channels themselves can be sent in messages through (other) channels, allowing the topology of process interconnections to change. Some process calculi also allow channels to be created during the execution of a computation.

Communication [ edit ] Interaction can be (but isn't always) a directed flow of information.  That is, input and output can be distinguished as dual interaction primitives. Process calculi that make such distinctions typically define an input operator ( e.g.

x ( v ) {\displaystyle x(v)} ) and an output operator ( e.g.

x ⟨ ⟨ y ⟩ ⟩ {\displaystyle x\langle y\rangle } ), both of which name an interaction point (here x {\displaystyle {\mathit {x}}} ) that is used to synchronise with a dual interaction primitive.

Should information be exchanged, it will flow from the outputting to the inputting process. The output primitive will specify the data to be sent. In x ⟨ ⟨ y ⟩ ⟩ {\displaystyle x\langle y\rangle } , this data is y {\displaystyle y} .  Similarly, if an input expects to receive data, one or more bound variables will act as place-holders to be substituted by data, when it arrives. In x ( v ) {\displaystyle x(v)} , v {\displaystyle v} plays that role. The choice of the kind of data that can be exchanged in an interaction is one of the key features that distinguishes different process calculi.

Sequential composition [ edit ] Sometimes interactions must be temporally ordered. For example, it might be desirable to specify algorithms such as: first receive some data on x {\displaystyle {\mathit {x}}} and then send that data on y {\displaystyle {\mathit {y}}} .

Sequential composition can be used for such purposes. It is well known from other models of computation. In process calculi, the sequentialisation operator is usually integrated with input or output, or both. For example, the process x ( v ) ⋅ ⋅ P {\displaystyle x(v)\cdot P} will wait for an input on x {\displaystyle {\mathit {x}}} . Only when this input has occurred will the process P {\displaystyle {\mathit {P}}} be activated, with the received data through x {\displaystyle {\mathit {x}}} substituted for identifier v {\displaystyle {\mathit {v}}} .

Reduction semantics [ edit ] The key operational reduction rule, containing the computational essence of process calculi, can be given solely in terms of parallel composition, sequentialization, input, and output. The details of this reduction vary among the calculi, but the essence remains roughly the same. The reduction rule is: x ⟨ ⟨ y ⟩ ⟩ ⋅ ⋅ P | x ( v ) ⋅ ⋅ Q ⟶ ⟶ P | Q [ y / v ] {\displaystyle x\langle y\rangle \cdot P\;\vert \;x(v)\cdot Q\longrightarrow P\;\vert \;Q[^{y}\!/\!_{v}]} The interpretation to this reduction rule is: The process x ⟨ ⟨ y ⟩ ⟩ ⋅ ⋅ P {\displaystyle x\langle y\rangle \cdot P} sends a message, here y {\displaystyle {\mathit {y}}} , along the channel x {\displaystyle {\mathit {x}}} . Dually, the process x ( v ) ⋅ ⋅ Q {\displaystyle x(v)\cdot Q} receives that message on channel x {\displaystyle {\mathit {x}}} .

Once the message has been sent, x ⟨ ⟨ y ⟩ ⟩ ⋅ ⋅ P {\displaystyle x\langle y\rangle \cdot P} becomes the process P {\displaystyle {\mathit {P}}} , while x ( v ) ⋅ ⋅ Q {\displaystyle x(v)\cdot Q} becomes the process Q [ y / v ] {\displaystyle Q[^{y}\!/\!_{v}]} , which is Q {\displaystyle {\mathit {Q}}} with the place-holder v {\displaystyle {\mathit {v}}} substituted by y {\displaystyle {\mathit {y}}} , the data received on x {\displaystyle {\mathit {x}}} .

The class of processes that P {\displaystyle {\mathit {P}}} is allowed to range over as the continuation of the output operation substantially influences the properties of the calculus.

Hiding [ edit ] Processes do not limit the number of connections that can be made at a given interaction point. But interaction points allow interference (i.e. interaction). For the
synthesis of compact, minimal and compositional systems, the ability to restrict interference is crucial.

Hiding operations allow control of the connections made between interaction points when composing
agents in parallel. Hiding can be denoted in a variety of ways. For example, in the π-calculus the hiding of a name x {\displaystyle {\mathit {x}}} in P {\displaystyle {\mathit {P}}} can be expressed as ( ν ν x ) P {\displaystyle (\nu \;x)P} , while in CSP it might be written as P ∖ ∖ { x } {\displaystyle P\setminus \{x\}} .

Recursion and replication [ edit ] The operations presented so far describe only finite interaction and are consequently insufficient for full computability, which includes non-terminating behaviour.

Recursion and replication are operations that allow finite descriptions of infinite behaviour.  Recursion is well known from the sequential world. Replication !

P {\displaystyle !P} can be understood as abbreviating the parallel composition of a countably infinite number of P {\displaystyle {\mathit {P}}} processes: !

P = P ∣ ∣ !

P {\displaystyle !P=P\mid !P} Null process [ edit ] Process calculi generally also include a null process (variously denoted as n i l {\displaystyle {\mathit {nil}}} , 0 {\displaystyle 0} , S T O P {\displaystyle {\mathit {STOP}}} , δ δ {\displaystyle \delta } , or some other appropriate symbol) which has no interaction points. It is utterly inactive and its sole purpose is to act as the inductive anchor on top of which more interesting processes can be generated.

Discrete and continuous process algebra [ edit ] Process algebra has been studied for discrete time and continuous time (real time or dense time).

[ 4 ] History [ edit ] In the first half of the 20th century, various formalisms were proposed to capture the informal concept of a computable function , with μ-recursive functions , Turing machines and the lambda calculus possibly being the best-known  examples today.  The surprising fact that they are essentially equivalent, in the sense that they are all encodable into each other, supports the Church-Turing thesis .  Another shared feature is more rarely commented on: they all are most readily understood as models of sequential computation. The subsequent consolidation of computer science required a more subtle formulation of the notion of computation, in particular explicit representations of concurrency and communication. Models of concurrency such as the process calculi, Petri nets in 1962, and the actor model in 1973 emerged from this line of inquiry.

Research on process calculi began in earnest with Robin Milner 's seminal work on the Calculus of Communicating Systems (CCS) during the period from 1973 to 1980.

C.A.R. Hoare 's Communicating Sequential Processes (CSP) first appeared in 1978, and was subsequently developed into a full-fledged process calculus during the early 1980s. There was much cross-fertilization of ideas between CCS and CSP as they developed. In 1982 Jan Bergstra and Jan Willem Klop began work on what came to be known as the Algebra of Communicating Processes (ACP), and introduced the term process algebra to describe their work.

[ 1 ] CCS, CSP, and ACP constitute the three major branches of the process calculi family: the majority of the other process calculi can trace their roots to one of these three calculi.

Current research [ edit ] Various process calculi have been studied and not all of them fit the paradigm sketched here. The most prominent example may be the ambient calculus . This is to be expected as process calculi are an active field of study. Currently research on process calculi focuses on the following problems.

Developing new process calculi for better modeling of computational phenomena.

Finding well-behaved subcalculi of a given process calculus. This is valuable because (1) most calculi are fairly wild in the sense that they are rather general and not much can be said about arbitrary processes; and (2) computational applications rarely exhaust the whole of a calculus. Rather they use only processes that are very constrained in form. Constraining the shape of processes is mostly studied by way of type systems .

Logics for processes that allow one to reason about (essentially) arbitrary properties of processes, following the ideas of Hoare logic .

Behavioural theory: what does it mean for two processes to be the same? How can we decide whether two processes are different or not? Can we find representatives for equivalence classes of processes? Generally, processes are considered to be the same if no context, that is other processes running in parallel, can detect a  difference. Unfortunately, making this intuition precise is subtle and mostly yields unwieldy characterisations of equality (which in most cases must also be undecidable, as a consequence of the halting problem ).

Bisimulations are a technical tool that aids reasoning about process equivalences.

Expressivity of calculi. Programming experience shows that certain problems are easier to solve in some languages than in others. This phenomenon calls for a more precise characterisation of the expressivity of calculi modeling computation than that afforded by the Church–Turing thesis . One way of doing this is to consider encodings between two formalisms and see what properties encodings can potentially preserve. The more properties can be preserved, the more expressive the target of the encoding is said to be. For process calculi, the celebrated results are that the synchronous π-calculus is more expressive than its asynchronous variant, has the same expressive power as the higher-order π-calculus , [ 5 ] but is less than the ambient calculus .

[ citation needed ] Using process calculus to model biological systems (stochastic π-calculus, BioAmbients, Beta Binders, BioPEPA, Brane calculus). It is thought by some that the compositionality offered by process-theoretic tools can help biologists to organise their knowledge more formally.

Software implementations [ edit ] The ideas behind process algebra have given rise to several tools including: CADP Concurrency Workbench mCRL2 toolset Relationship to other models of concurrency [ edit ] The history monoid is the free object that is generically able to represent the histories of individual communicating processes. A process calculus is then a formal language imposed on a history monoid in a consistent fashion.

[ 6 ] That is, a history monoid can only record a sequence of events, with synchronization, but does not specify the allowed state transitions. Thus, a process calculus is to a history monoid what a formal language is to a free monoid (a formal language is a subset of the set of all possible finite-length strings of an alphabet generated by the Kleene star ).

The use of channels for communication is one of the features distinguishing the process calculi from other models of concurrency , such as Petri nets and the actor model (see Actor model and process calculi ). One of the fundamental motivations for including channels in the process calculi was to enable certain algebraic techniques, thereby making it easier to reason about processes algebraically.

See also [ edit ] Communicating sequential processes ProVerif Stochastic probe Tamarin Prover Temporal Process Language π-calculus References [ edit ] ^ a b Baeten, J.C.M. (2004).

"A brief history of process algebra" (PDF) .

Rapport CSR 04-02 . Vakgroep Informatica, Technische Universiteit Eindhoven.

^ Pierce, Benjamin (1996-12-21). "Foundational Calculi for Programming Languages".

The Computer Science and Engineering Handbook . CRC Press. pp.

2190– 2207.

ISBN 0-8493-2909-4 .

^ Baeten, J.C.M.; Bravetti, M. (August 2005).

"A Generic Process Algebra" .

Algebraic Process Calculi: The First Twenty Five Years and Beyond (BRICS Notes Series NS-05-3) . Bertinoro, Forlì, Italy: BRICS, Department of Computer Science, University of Aarhus . Retrieved 2007-12-29 .

^ Baeten, J. C. M.; Middelburg, C. A. (2000). "Process algebra with timing: Real time and discrete time": 627– 684.

CiteSeerX 10.1.1.42.729 .

{{ cite journal }} : Cite journal requires |journal= ( help ) ^ Sangiorgi, Davide (1993). "From π-calculus to higher-order π-calculus — and back". In Gaudel, M. -C.; Jouannaud, J. -P. (eds.).

TAPSOFT'93: Theory and Practice of Software Development . Lecture Notes in Computer Science. Vol. 668. Springer Berlin Heidelberg. pp.

151– 166.

doi : 10.1007/3-540-56610-4_62 .

ISBN 9783540475989 .

^ Mazurkiewicz, Antoni (1995).

"Introduction to Trace Theory" . In Diekert, V.; Rozenberg, G. (eds.).

The Book of Traces . Singapore: World Scientific. pp.

3– 41.

ISBN 981-02-2058-8 . Archived from the original (PostScript) on 2011-06-13 . Retrieved 2009-04-29 .

Further reading [ edit ] Matthew Hennessy : Algebraic Theory of Processes , The MIT Press , ISBN 0-262-08171-7 .

C. A. R. Hoare : Communicating Sequential Processes , Prentice Hall , ISBN 0-13-153289-8 .

This book has been updated by Jim Davies at the Oxford University Computing Laboratory and the new edition is available for download as a PDF file at the Using CSP website.

Robin Milner : A Calculus of Communicating Systems , Springer Verlag, ISBN 0-387-10235-3 .

Robin Milner : Communicating and Mobile Systems: the Pi-Calculus , Springer Verlag, ISBN 0-521-65869-1 .

Valk, Rüdiger ; Moldt, Daniel; Köhler-Bußmeier, Michael, eds. (2011).

"Chapter 5: Prozessalgebra - Parallele und kommunizierende Prozesse" (PDF) .

Formale Grundlagen der Informatik II: Modellierung und Analyse von Informatiksystemen (in German). Vol. Part 2.

University of Hamburg . FGI2.

Archived (PDF) from the original on 2019-07-09 . Retrieved 2019-07-13 .

{{ cite book }} : |work= ignored ( help ) v t e Concurrent computing General Concurrency Concurrency control Concurrent data structures Concurrent hash tables Concurrent users Indeterminacy Linearizability Process calculi CSP CCS ACP LOTOS π-calculus Ambient calculus API-Calculus PEPA Join-calculus Classic problems ABA problem Cigarette smokers problem Deadlock Dining philosophers problem Producer–consumer problem Race condition Readers–writers problem Sleeping barber problem Category: Concurrent computing Retrieved from " https://en.wikipedia.org/w/index.php?title=Process_calculus&oldid=1302909896 " Category : Process calculi Hidden categories: CS1 errors: missing periodical Articles with short description Short description is different from Wikidata All articles with unsourced statements Articles with unsourced statements from December 2011 CS1 errors: periodical ignored CS1: long volume value CS1 German-language sources (de) This page was last edited on 28 July 2025, at 02:40 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Process calculus 10 languages Add topic

