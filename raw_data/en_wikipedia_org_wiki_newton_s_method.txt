Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Description 2 History 3 Practical considerations Toggle Practical considerations subsection 3.1 Difficulty in calculating the derivative of a function 3.2 Failure of the method to converge to the root 3.3 Slow convergence for roots of multiplicity greater than 1 3.4 Slow convergence 3.5 Convergence dependent on initialization 3.6 Divergence even when initialization is close to the root 3.7 Oscillatory behavior 3.8 Undefinedness of Newton's method 4 Analysis Toggle Analysis subsection 4.1 Proof of quadratic convergence for Newton's iterative method 4.2 Fourier conditions 4.3 Error for n>1 variables 5 Examples Toggle Examples subsection 5.1 Use of Newton's method to compute square roots 5.2 Solution of cos(x) = x 3 using Newton's method 6 Multidimensional formulations Toggle Multidimensional formulations subsection 6.1 Systems of equations 6.1.1 k variables, k functions 6.1.2 k variables, m equations, with m > k 6.1.3 Example 6.1.4 Iterations 6.2 Complex functions 6.3 In a Banach space 6.3.1 Nash–Moser iteration 7 Modifications Toggle Modifications subsection 7.1 Quasi-Newton methods 7.2 Chebyshev's third-order method 7.3 Over p -adic numbers 7.4 q -analog 7.5 Modified Newton methods 7.5.1 Maehly's procedure 7.5.2 Hirano's modified Newton method 7.5.3 Interval Newton's method 8 Applications Toggle Applications subsection 8.1 Minimization and maximization problems 8.2 Multiplicative inverses of numbers and power series 8.3 Solving transcendental equations 8.4 Numerical verification for solutions of nonlinear equations 9 Code 10 See also 11 Notes 12 References 13 Further reading 14 External links Toggle the table of contents Newton's method 42 languages Afrikaans العربية Azərbaycanca تۆرکجه Български Català Čeština Dansk Deutsch Ελληνικά Español Esperanto فارسی Français Galego 한국어 हिन्दी Bahasa Indonesia Italiano עברית Magyar Nederlands 日本語 Norsk bokmål Norsk nynorsk Polski Português Română Русский Shqip Simple English Slovenščina کوردی Српски / srpski Suomi Svenska Tagalog Türkçe Українська Tiếng Việt 文言 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikiversity Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Algorithm for finding zeros of functions This article is about Newton's method for finding roots. For Newton's method for finding minima, see Newton's method in optimization .

An illustration of Newton's method.

In numerical analysis , the Newton–Raphson method , also known simply as Newton's method , named after Isaac Newton and Joseph Raphson , is a root-finding algorithm which produces successively better approximations to the roots (or zeroes) of a real -valued function . The most basic version starts with a real-valued function f , its derivative f ′ , and an initial guess x 0 for a root of f . If f satisfies certain assumptions and the initial guess is close, then x 1 = x 0 − − f ( x 0 ) f ′ ( x 0 ) {\displaystyle x_{1}=x_{0}-{\frac {f(x_{0})}{f'(x_{0})}}} is a better approximation of the root than x 0 . Geometrically, ( x 1 , 0) is the x-intercept of the tangent of the graph of f at ( x 0 , f ( x 0 )) : that is, the improved guess, x 1 , is the unique root of the linear approximation of f at the initial guess, x 0 . The process is repeated as x n + 1 = x n − − f ( x n ) f ′ ( x n ) {\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}} until a sufficiently precise value is reached. The number of correct digits roughly doubles with each step. This algorithm is first in the class of Householder's methods , and was succeeded by Halley's method . The method can also be extended to complex functions and to systems of equations .

Description [ edit ] The purpose of Newton's method is to find a root of a function. The idea is to start with an initial guess at a root, approximate the function by its tangent line near the guess, and then take the root of the linear approximation as a next guess at the function's root. This will typically be closer to the function's root than the previous guess, and the method can be iterated .

x n +1 is a better approximation than x n for the root x of the function f (blue curve) The best linear approximation to an arbitrary differentiable function f ( x ) {\displaystyle f(x)} near the point x = x n {\displaystyle x=x_{n}} is the tangent line to the curve, with equation f ( x ) ≈ ≈ f ( x n ) + f ′ ( x n ) ( x − − x n ) .

{\displaystyle f(x)\approx f(x_{n})+f'(x_{n})(x-x_{n}).} The root of this linear function, the place where it intercepts the ⁠ x {\displaystyle x} ⁠ -axis, can be taken as a closer approximate root ⁠ x n + 1 {\displaystyle x_{n+1}} ⁠ : x n + 1 = x n − − f ( x n ) f ′ ( x n ) .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}.} Iteration typically improves the approximation The process can be started with any arbitrary initial guess ⁠ x 0 {\displaystyle x_{0}} ⁠ , though it will generally require fewer iterations to converge if the guess is close to one of the function's roots. The method will usually converge if ⁠ f ′ ( x 0 ) ≠ ≠ 0 {\displaystyle f'(x_{0})\neq 0} ⁠ . Furthermore, for a root of multiplicity 1, the convergence is at least quadratic (see Rate of convergence ) in some sufficiently small neighbourhood of the root: the number of correct digits of the approximation roughly doubles with each additional step. More details can be found in § Analysis below.

Householder's methods are similar but have higher order for even faster convergence. However, the extra computations required for each step can slow down the overall performance relative to Newton's method, particularly if ⁠ f {\displaystyle f} ⁠ or its derivatives are computationally expensive to evaluate.

History [ edit ] In the Old Babylonian period (19th–16th century BCE), the side of a square of known area could be effectively approximated, and this is conjectured to have been done using a special case of Newton's method, described algebraically below , by iteratively improving an initial estimate; an equivalent method can be found in Heron of Alexandria 's Metrica (1st–2nd century CE), so is often called Heron's method .

[ 1 ] The earliest known occurrence of a type of Newton-Raphson method can be traced back to the work of the Persian astronomer and mathematician Jamshīd al-Kāshī (1380–1429). In his notable 1427 publication, Miftāḥ al-Ḥisāb (The Key to Arithmetic), he described a variant of this iterative method.

[ 2 ] Jamshīd al-Kāshī used a method to solve x P − N = 0 to find roots of N , a method that was algebraically equivalent to Newton's method, and in which a similar method was found in Trigonometria Britannica , published by Henry Briggs in 1633.

[ 3 ] Al-Kāshī's work was founded on the earlier contributions of the polymath al-Bīrūnī (973–1048) and the mathematician Sharaf al-Dīn al-Ṭūsī (1135–1213). The contributions of al-Kāshī remained largely unknown to the Western scientific community for centuries, until the work of François Viète (1540–1603). In 1600, Viète rediscovered a technique similar to al-Kāshī's in the context of solving scalar polynomial equations of degree six.

[ 4 ] The earliest printed account of the method first appeared roughly in Isaac Newton 's work in De analysi per aequationes numero terminorum infinitas (written in 1669, published in 1711 by William Jones ) and in De metodis fluxionum et serierum infinitarum (written in 1671, translated and published as Method of Fluxions in 1736 by John Colson ).

[ 5 ] [ 6 ] However, while Newton gave the basic ideas, his method differs from the modern method given above. He applied the method only to polynomials, starting with an initial root estimate and extracting a sequence of error corrections. He used each correction to rewrite the polynomial in terms of the remaining error, and then solved for a new correction by neglecting higher-degree terms. He did not explicitly connect the method with derivatives or present a general formula. Newton applied this method to both numerical and algebraic problems, producing Taylor series in the latter case.

Newton may have derived his method from a similar, less precise method by mathematician François Viète , however, the two methods are not the same.

[ 5 ] The essence of Viète's own method can be found in the work of the mathematician Sharaf al-Din al-Tusi .

[ 7 ] The Japanese mathematician Seki Kōwa used a form of Newton's method in the 1680s to solve single-variable equations, though the connection with calculus was missing.

[ 8 ] Newton's method was first published in 1685 in A Treatise of Algebra both Historical and Practical by John Wallis .

[ 9 ] In 1690, Joseph Raphson published a simplified description in Analysis aequationum universalis .

[ 10 ] Raphson also applied the method only to polynomials, but he avoided Newton's tedious rewriting process by extracting each successive correction from the original polynomial. This allowed him to derive a reusable iterative expression for each problem. Finally, in 1740, Thomas Simpson described Newton's method as an iterative method for solving general nonlinear equations using calculus, essentially giving the description above. In the same publication, Simpson also gives the generalization to systems of two equations and notes that Newton's method can be used for solving optimization problems by setting the gradient to zero.

Arthur Cayley in 1879 in The Newton–Fourier imaginary problem was the first to notice the difficulties in generalizing Newton's method to complex roots of polynomials with degree greater than 2 and complex initial values. This opened the way to the study of the theory of iterations of rational functions.

Practical considerations [ edit ] Newton's method is a powerful technique—if the derivative of the function at the root is nonzero, then the convergence is at least quadratic: as the method converges on the root, the difference between the root and the approximation is squared (the number of accurate digits roughly doubles) at each step. However, there are some difficulties with the method.

Difficulty in calculating the derivative of a function [ edit ] Newton's method requires that the derivative can be calculated directly. An analytical expression for the derivative may not be easily obtainable or could be expensive to evaluate. In these situations, it may be appropriate to approximate the derivative by using the slope of a line through two nearby points on the function. Using this approximation would result in something like the secant method whose convergence is slower than that of Newton's method.

Failure of the method to converge to the root [ edit ] It is important to review the proof of quadratic convergence of Newton's method before implementing it. Specifically, one should review the assumptions made in the proof. For situations where the method fails to converge , it is because the assumptions made in this proof are not met.

For example, in some cases , if the first derivative is not well behaved in the neighborhood of a particular root, then it is possible that Newton's method will fail to converge no matter where the initialization is set. In some cases, Newton's method can be stabilized by using successive over-relaxation , or the speed of convergence can be increased by using the same method.

In a robust implementation of Newton's method, it is common to place limits on the number of iterations, bound the solution to an interval known to contain the root, and combine the method with a more robust root finding method.

Slow convergence for roots of multiplicity greater than 1 [ edit ] If the root being sought has multiplicity greater than one, the convergence rate is merely linear (errors reduced by a constant factor at each step) unless special steps are taken. When there are two or more roots that are close together then it may take many iterations before the iterates get close enough to one of them for the quadratic convergence to be apparent. However, if the multiplicity m of the root is known, the following modified algorithm preserves the quadratic convergence rate: [ 11 ] x n + 1 = x n − − m f ( x n ) f ′ ( x n ) .

{\displaystyle x_{n+1}=x_{n}-m{\frac {f(x_{n})}{f'(x_{n})}}.} This is equivalent to using successive over-relaxation . On the other hand, if the multiplicity m of the root is not known, it is possible to estimate m after carrying out one or two iterations, and then use that value to increase the rate of convergence.

If the multiplicity m of the root is finite then g ( x ) = ⁠ f ( x ) / f ′ ( x ) ⁠ will have a root at the same location with multiplicity 1.  Applying Newton's method to find the root of g ( x ) recovers quadratic convergence in many cases although it generally involves the second derivative of f ( x ) .  In a particularly simple case, if f ( x ) = x m then g ( x ) = ⁠ x / m ⁠ and Newton's method finds the root in a single iteration with x n + 1 = x n − − g ( x n ) g ′ ( x n ) = x n − − x n m 1 m = 0 .

{\displaystyle x_{n+1}=x_{n}-{\frac {g(x_{n})}{g'(x_{n})}}=x_{n}-{\frac {\;{\frac {x_{n}}{m}}\;}{\frac {1}{m}}}=0\,.} Slow convergence [ edit ] The function f ( x ) = x 2 has a root at 0.

[ 12 ] Since f is continuously differentiable at its root, the theory guarantees that Newton's method as initialized sufficiently close to the root will converge. However, since the derivative f ′ is zero at the root, quadratic convergence is not ensured by the theory. In this particular example, the Newton iteration is given by x n + 1 = x n − − f ( x n ) f ′ ( x n ) = 1 2 x n .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}={\frac {1}{2}}x_{n}.} It is visible from this that Newton's method could be initialized anywhere and converge to zero, but at only a linear rate. If initialized at 1, dozens of iterations would be required before ten digits of accuracy are achieved.

The function f ( x ) = x + x 4/3 also has a root at 0, where it is continuously differentiable. Although the first derivative f ′ is nonzero at the root, the second derivative f ′′ is nonexistent there, so that quadratic convergence cannot be guaranteed. In fact the Newton iteration is given by x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n 4 / 3 3 + 4 x n 1 / 3 ≈ ≈ x n ⋅ ⋅ x n 1 / 3 3 .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}={\frac {x_{n}^{4/3}}{3+4x_{n}^{1/3}}}\approx x_{n}\cdot {\frac {x_{n}^{1/3}}{3}}.} From this, it can be seen that the rate of convergence is superlinear but subquadratic. This can be seen in the following tables, the left of which shows Newton's method applied to the above f ( x ) = x + x 4/3 and the right of which shows Newton's method applied to f ( x ) = x + x 2 . The quadratic convergence in iteration shown on the right is illustrated by the orders of magnitude in the distance from the iterate to the true root (0,1,2,3,5,10,20,39,...) being approximately doubled from row to row. While the convergence on the left is superlinear, the order of magnitude is only multiplied by about 4/3 from row to row (0,1,2,4,5,7,10,13,...).

x n x + x 4/3 n x n x + x 2 n 1 2 1 2 1.4286 × 10 −1 2.1754 × 10 −1 3.3333 × 10 −1 4.4444 × 10 −1 1.4669 × 10 −2 1.8260 × 10 −2 6.6666 × 10 −2 7.1111 × 10 −2 9.0241 × 10 −4 9.8961 × 10 −4 3.9216 × 10 −3 3.9369 × 10 −3 2.5750 × 10 −5 2.6511 × 10 −5 1.5259 × 10 −5 1.5259 × 10 −5 2.4386 × 10 −7 2.4539 × 10 −7 2.3283 × 10 −10 2.3283 × 10 −10 5.0366 × 10 −10 5.0406 × 10 −10 5.4210 × 10 −20 5.4210 × 10 −20 1.3344 × 10 −13 1.3344 × 10 −13 2.9387 × 10 −39 2.9387 × 10 −39 The rate of convergence is distinguished from the number of iterations required to reach a given accuracy. For example, the function f ( x ) = x 20 − 1 has a root at 1. Since f ′(1) ≠ 0 and f is smooth, it is known that any Newton iteration convergent to 1 will converge quadratically. However, if initialized at 0.5, the first few iterates of Newton's method are approximately 26214, 24904, 23658, 22476, decreasing slowly, with only the 200th iterate being 1.0371. The following iterates are 1.0103, 1.00093, 1.0000082, and 1.00000000065, illustrating quadratic convergence. This highlights that quadratic convergence of a Newton iteration does not mean that only few iterates are required; this only applies once the sequence of iterates is sufficiently close to the root.

[ 13 ] Convergence dependent on initialization [ edit ] The function f ( x ) = x (1 + x 2 ) −1/2 has a root at 0. The Newton iteration is given by x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n − − x n ( 1 + x n 2 ) − − 1 / 2 ( 1 + x n 2 ) − − 3 / 2 = − − x n 3 .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}=x_{n}-{\frac {x_{n}(1+x_{n}^{2})^{-1/2}}{(1+x_{n}^{2})^{-3/2}}}=-x_{n}^{3}.} From this, it can be seen that there are three possible phenomena for a Newton iteration. If initialized strictly between ±1 , the Newton iteration will converge (super-)quadratically to 0; if initialized exactly at 1 or −1 , the Newton iteration will oscillate endlessly between ±1 ; if initialized anywhere else, the Newton iteration will diverge.

[ 14 ] This same trichotomy occurs for f ( x ) = arctan x .

[ 12 ] In cases where the function in question has multiple roots, it can be difficult to control, via choice of initialization, which root (if any) is identified by Newton's method. For example, the function f ( x ) = x ( x 2 − 1)( x − 3)e −( x − 1) 2 /2 has roots at −1, 0, 1, and 3.

[ 15 ] If initialized at −1.488, the Newton iteration converges to 0; if initialized at −1.487, it diverges to ∞ ; if initialized at −1.486, it converges to −1; if initialized at −1.485, it diverges to −∞ ; if initialized at −1.4843, it converges to 3; if initialized at −1.484, it converges to 1 . This kind of subtle dependence on initialization is not uncommon; it is frequently studied in the complex plane in the form of the Newton fractal .

Divergence even when initialization is close to the root [ edit ] Consider the problem of finding a root of f ( x ) = x 1/3 . The Newton iteration is x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n − − x n 1 / 3 1 3 x n − − 2 / 3 = − − 2 x n .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}=x_{n}-{\frac {x_{n}^{1/3}}{{\frac {1}{3}}x_{n}^{-2/3}}}=-2x_{n}.} Unless Newton's method is initialized at the exact root 0, it is seen that the sequence of iterates will fail to converge. For example, even if initialized at the reasonably accurate guess of 0.001, the first several iterates are −0.002, 0.004, −0.008, 0.016, reaching 1048.58, −2097.15, ... by the 20th iterate. This failure of convergence is not contradicted by the analytic theory, since in this case f is not differentiable at its root.

In the above example, failure of convergence is reflected by the failure of f ( x n ) to get closer to zero as n increases, as well as by the fact that successive iterates are growing further and further apart. However, the function f ( x ) = x 1/3 e − x 2 also has a root at 0. The Newton iteration is given by x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n ( 1 − − 3 1 − − 6 x n 2 ) .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}=x_{n}\left(1-{\frac {3}{1-6x_{n}^{2}}}\right).} In this example, where again f is not differentiable at the root, any Newton iteration not starting exactly at the root will diverge, but with both x n + 1 − x n and f ( x n ) converging to zero.

[ 16 ] This is seen in the following table showing the iterates with initialization 1: x n f ( x n ) 1 0.36788 1.6 9.0416 × 10 −2 1.9342 2.9556 × 10 −2 2.2048 1.0076 × 10 −2 2.4396 3.5015 × 10 −3 2.6505 1.2307 × 10 −3 2.8437 4.3578 × 10 −4 3.0232 1.5513 × 10 −4 Although the convergence of x n + 1 − x n in this case is not very rapid, it can be proved from the iteration formula. This example highlights the possibility that a stopping criterion for Newton's method based only on the smallness of x n + 1 − x n and f ( x n ) might falsely identify a root.

Oscillatory behavior [ edit ] The tangent lines of x 3 − 2 x + 2 at 0 and 1 intersect the x -axis at 1 and 0 respectively, illustrating why Newton's method oscillates between these values for some starting points.

It is easy to find situations for which Newton's method oscillates endlessly between two distinct values. For example, for Newton's method as applied to a function f to oscillate between 0 and 1, it is only necessary that the tangent line to f at 0 intersects the x -axis at 1 and that the tangent line to f at 1 intersects the x -axis at 0.

[ 16 ] This is the case, for example, if f ( x ) = x 3 − 2 x + 2 . For this function, it is even the case that Newton's iteration as initialized sufficiently close to 0 or 1 will asymptotically oscillate between these values. For example, Newton's method as initialized at 0.99 yields iterates 0.99, −0.06317, 1.00628, 0.03651, 1.00196, 0.01162, 1.00020, 0.00120, 1.000002, and so on. This behavior is present despite the presence of a root of f approximately equal to −1.76929.

Undefinedness of Newton's method [ edit ] In some cases, it is not even possible to perform the Newton iteration. For example, if f ( x ) = x 2 − 1 , then the Newton iteration is defined by x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n − − x n 2 − − 1 2 x n = x n 2 + 1 2 x n .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}=x_{n}-{\frac {x_{n}^{2}-1}{2x_{n}}}={\frac {x_{n}^{2}+1}{2x_{n}}}.} So Newton's method cannot be initialized at 0, since this would make x 1 undefined. Geometrically, this is because the tangent line to f at 0 is horizontal (i.e.

f ′(0) = 0 ), never intersecting the x -axis.

Even if the initialization is selected so that the Newton iteration can begin, the same phenomenon can block the iteration from being indefinitely continued.

If f has an incomplete domain, it is possible for Newton's method to send the iterates outside of the domain, so that it is impossible to continue the iteration.

[ 16 ] For example, the natural logarithm function f ( x ) = ln x has a root at 1, and is defined only for positive x . Newton's iteration in this case is given by x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n ( 1 − − ln ⁡ ⁡ x n ) .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}=x_{n}(1-\ln x_{n}).} So if the iteration is initialized at e , the next iterate is 0; if the iteration is initialized at a value larger than e , then the next iterate is negative. In either case, the method cannot be continued.

Analysis [ edit ] Suppose that the function f has a zero at α , i.e., f ( α ) = 0 , and f is differentiable in a neighborhood of α .

If f is continuously differentiable and its derivative is nonzero at α , then there exists a neighborhood of α such that for all starting values x 0 in that neighborhood, the sequence ( x n ) will converge to α .

[ 17 ] If f is continuously differentiable, its derivative is nonzero at α , and it has a second derivative at α , then the convergence is quadratic or faster. If the second derivative is not 0 at α then the convergence is merely quadratic. If the third derivative exists and is bounded in a neighborhood of α , then: Δ Δ x i + 1 = f ″ ( α α ) 2 f ′ ( α α ) ( Δ Δ x i ) 2 + O ( Δ Δ x i ) 3 , {\displaystyle \Delta x_{i+1}={\frac {f''(\alpha )}{2f'(\alpha )}}\left(\Delta x_{i}\right)^{2}+O\left(\Delta x_{i}\right)^{3}\,,} where Δ Δ x i ≜ ≜ x i − − α α .

{\displaystyle \Delta x_{i}\triangleq x_{i}-\alpha \,.} If the derivative is 0 at α , then the convergence is usually only linear. Specifically, if f is twice continuously differentiable, f ′ ( α ) = 0 and f ″ ( α ) ≠ 0 , then there exists a neighborhood of α such that, for all starting values x 0 in that neighborhood, the sequence of iterates converges linearly, with rate ⁠ 1 / 2 ⁠ .

[ 18 ] Alternatively, if f ′ ( α ) = 0 and f ′ ( x ) ≠ 0 for x ≠ α , x in a neighborhood U of α , α being a zero of multiplicity r , and if f ∈ C r ( U ) , then there exists a neighborhood of α such that, for all starting values x 0 in that neighborhood, the sequence of iterates converges linearly.

However, even linear convergence is not guaranteed in pathological situations.

In practice, these results are local, and the neighborhood of convergence is not known in advance. But there are also some results on global convergence: for instance, given a right neighborhood U + of α , if f is twice differentiable in U + and if f ′ ≠ 0 , f · f ″ > 0 in U + , then, for each x 0 in U + the sequence x k is monotonically decreasing to α .

Proof of quadratic convergence for Newton's iterative method [ edit ] According to Taylor's theorem , any function f ( x ) which has a continuous second derivative can be represented by an expansion about a point that is close to a root of f ( x ) . Suppose this root is α . Then the expansion of f ( α ) about x n is: f ( α α ) = f ( x n ) + f ′ ( x n ) ( α α − − x n ) + R 1 {\displaystyle f(\alpha )=f(x_{n})+f'(x_{n})(\alpha -x_{n})+R_{1}\,} 1 where the Lagrange form of the Taylor series expansion remainder is R 1 = 1 2 !

f ″ ( ξ ξ n ) ( α α − − x n ) 2 , {\displaystyle R_{1}={\frac {1}{2!}}f''(\xi _{n})\left(\alpha -x_{n}\right)^{2}\,,} where ξ n is in between x n and α .

Since α is the root, ( 1 ) becomes: 0 = f ( α α ) = f ( x n ) + f ′ ( x n ) ( α α − − x n ) + 1 2 f ″ ( ξ ξ n ) ( α α − − x n ) 2 {\displaystyle 0=f(\alpha )=f(x_{n})+f'(x_{n})(\alpha -x_{n})+{\tfrac {1}{2}}f''(\xi _{n})\left(\alpha -x_{n}\right)^{2}\,} 2 Dividing equation ( 2 ) by f ′ ( x n ) and rearranging gives f ( x n ) f ′ ( x n ) + ( α α − − x n ) = − − f ″ ( ξ ξ n ) 2 f ′ ( x n ) ( α α − − x n ) 2 {\displaystyle {\frac {f(x_{n})}{f'(x_{n})}}+\left(\alpha -x_{n}\right)={\frac {-f''(\xi _{n})}{2f'(x_{n})}}\left(\alpha -x_{n}\right)^{2}} 3 Remembering that x n + 1 is defined by x n + 1 = x n − − f ( x n ) f ′ ( x n ) , {\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}\,,} 4 one finds that α α − − x n + 1 ⏟ ⏟ ε ε n + 1 = − − f ″ ( ξ ξ n ) 2 f ′ ( x n ) ( α α − − x n ⏟ ⏟ ε ε n ) 2 .

{\displaystyle \underbrace {\alpha -x_{n+1}} _{\varepsilon _{n+1}}={\frac {-f''(\xi _{n})}{2f'(x_{n})}}{(\,\underbrace {\alpha -x_{n}} _{\varepsilon _{n}}\,)}^{2}\,.} That is, ε ε n + 1 = − − f ″ ( ξ ξ n ) 2 f ′ ( x n ) ⋅ ⋅ ε ε n 2 .

{\displaystyle \varepsilon _{n+1}={\frac {-f''(\xi _{n})}{2f'(x_{n})}}\cdot \varepsilon _{n}^{2}\,.} 5 Taking the absolute value of both sides gives | ε ε n + 1 | = | f ″ ( ξ ξ n ) | 2 | f ′ ( x n ) | ⋅ ⋅ ε ε n 2 .

{\displaystyle \left|{\varepsilon _{n+1}}\right|={\frac {\left|f''(\xi _{n})\right|}{2\left|f'(x_{n})\right|}}\cdot \varepsilon _{n}^{2}\,.} 6 Equation ( 6 ) shows that the order of convergence is at least quadratic if the following conditions are satisfied: f ′ ( x ) ≠ 0 ; for all x ∈ I , where I is the interval [ α − | ε 0 |, α + | ε 0 |] ; f ″ ( x ) is continuous, for all x ∈ I ; M | ε 0 | < 1 where M is given by M = 1 2 ( sup x ∈ ∈ I | f ″ ( x ) | ) ( sup x ∈ ∈ I 1 | f ′ ( x ) | ) .

{\displaystyle M={\frac {1}{2}}\left(\sup _{x\in I}\vert f''(x)\vert \right)\left(\sup _{x\in I}{\frac {1}{\vert f'(x)\vert }}\right).\,} If these conditions hold, | ε ε n + 1 | ≤ ≤ M ⋅ ⋅ ε ε n 2 .

{\displaystyle \vert \varepsilon _{n+1}\vert \leq M\cdot \varepsilon _{n}^{2}\,.} Fourier conditions [ edit ] Suppose that f ( x ) is a concave function on an interval, which is strictly increasing . If it is negative at the left endpoint and positive at the right endpoint, the intermediate value theorem guarantees that there is a zero ζ of f somewhere in the interval. From geometrical principles, it can be seen that the Newton iteration x i starting at the left endpoint is monotonically increasing and convergent, necessarily to ζ .

[ 19 ] Joseph Fourier introduced a modification of Newton's method starting at the right endpoint: y i + 1 = y i − − f ( y i ) f ′ ( x i ) .

{\displaystyle y_{i+1}=y_{i}-{\frac {f(y_{i})}{f'(x_{i})}}.} This sequence is monotonically decreasing and convergent. By passing to the limit in this definition, it can be seen that the limit of y i must also be the zero ζ .

[ 19 ] So, in the case of a concave increasing function with a zero, initialization is largely irrelevant. Newton iteration starting anywhere left of the zero will converge, as will Fourier's modified Newton iteration starting anywhere right of the zero. The accuracy at any step of the iteration can be determined directly from the difference between the location of the iteration from the left and the location of the iteration from the right. If f is twice continuously differentiable, it can be proved using Taylor's theorem that lim i → → ∞ ∞ y i + 1 − − x i + 1 ( y i − − x i ) 2 = − − 1 2 f ″ ( ζ ζ ) f ′ ( ζ ζ ) , {\displaystyle \lim _{i\to \infty }{\frac {y_{i+1}-x_{i+1}}{(y_{i}-x_{i})^{2}}}=-{\frac {1}{2}}{\frac {f''(\zeta )}{f'(\zeta )}},} showing that this difference in locations converges quadratically to zero.

[ 19 ] All of the above can be extended to systems of equations in multiple variables, although in that context the relevant concepts of monotonicity and concavity are more subtle to formulate.

[ 20 ] In the case of single equations in a single variable, the above monotonic convergence of Newton's method can also be generalized to replace concavity by positivity or negativity conditions on an arbitrary higher-order derivative of f . However, in this generalization, Newton's iteration is modified so as to be based on Taylor polynomials rather than the tangent line . In the case of concavity, this modification coincides with the standard Newton method.

[ 21 ] Error for n>1 variables [ edit ] If we seek the root of a single function f : R n → → R {\displaystyle f:\mathbf {R} ^{n}\to \mathbf {R} } then the error ϵ ϵ n = x n − − α α {\displaystyle \epsilon _{n}=x_{n}-\alpha } is a vector such that its components obey ϵ ϵ k ( n + 1 ) = 1 2 ( ϵ ϵ ( n ) ) T Q k ϵ ϵ ( n ) + O ( ‖ ‖ ϵ ϵ ( n ) ‖ ‖ 3 ) {\displaystyle \epsilon _{k}^{(n+1)}={\frac {1}{2}}(\epsilon ^{(n)})^{T}Q_{k}\epsilon ^{(n)}+O(\|\epsilon ^{(n)}\|^{3})} where Q k {\displaystyle Q_{k}} is a quadratic form: ( Q k ) i , j = ∑ ∑ ℓ ℓ ( ( D 2 f ) − − 1 ) i , ℓ ℓ ∂ ∂ 3 f ∂ ∂ x j ∂ ∂ x k ∂ ∂ x ℓ ℓ {\displaystyle (Q_{k})_{i,j}=\sum _{\ell }((D^{2}f)^{-1})_{i,\ell }{\frac {\partial ^{3}f}{\partial x_{j}\partial x_{k}\partial x_{\ell }}}} evaluated at the root α α {\displaystyle \alpha } (where D 2 f {\displaystyle D^{2}f} is the 2nd derivative Hessian matrix).

Examples [ edit ] Use of Newton's method to compute square roots [ edit ] Newton's method is one of many known methods of computing square roots . Given a positive number a , the problem of finding a number x such that x 2 = a is equivalent to finding a root of the function f ( x ) = x 2 − a . The Newton iteration defined by this function is given by x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n − − x n 2 − − a 2 x n = 1 2 ( x n + a x n ) .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}=x_{n}-{\frac {x_{n}^{2}-a}{2x_{n}}}={\frac {1}{2}}\left(x_{n}+{\frac {a}{x_{n}}}\right).} This happens to coincide with the "Babylonian" method of finding square roots , which consists of replacing an approximate root x n by the arithmetic mean of x n and a ⁄ x n . By performing this iteration, it is possible to evaluate a square root to any desired accuracy by only using the basic arithmetic operations .

The following three tables show examples of the result of this computation for finding the square root of 612, with the iteration initialized at the values of 1, 10, and −20. Each row in a " x n " column is obtained by applying the preceding formula to the entry above it, for instance 306.5 = 1 2 ( 1 + 612 1 ) .

{\displaystyle 306.5={\frac {1}{2}}\left(1+{\frac {612}{1}}\right).} x n f ( x n ) x n f ( x n ) x n f ( x n ) 1 −611 10 −512 −2 0 −212 306.5 9.3330 × 10 4 35.6 655.36 −2 5.3 28.09 154.2483686786 2.3180 × 10 4 2 6.3955056180 84.722 −24.7 448616601 0.30818 79.1079978644 5.6461 × 10 3 24.7 906354925 2.5756 −24.73863 45374 3.8777 × 10 −5 43.4221286822 1.2735 × 10 3 24.7386 882941 2.6985 × 10 −3 −24.7386337537 6.1424 × 10 −13 2 8.7581624288 215.03 24.738633753 8 2.9746 × 10 −9 2 5.0195385369 13.977 24.7 402106712 7.8024 × 10 −2 24.738633 8040 2.4865 × 10 −6 24.7386337537 2.5256 × 10 −15 The correct digits are underlined. It is seen that with only a few iterations one can obtain a solution accurate to many decimal places. The first table shows that this is true even if the Newton iteration were initialized by the very inaccurate guess of 1 .

When computing any nonzero square root, the first derivative of f must be nonzero at the root, and that f is a smooth function. So, even before any computation, it is known that any convergent Newton iteration has a quadratic rate of convergence. This is reflected in the above tables by the fact that once a Newton iterate gets close to the root, the number of correct digits approximately doubles with each iteration.

Solution of cos( x ) = x 3 using Newton's method [ edit ] Consider the problem of finding the positive number x with cos x = x 3 . We can rephrase that as finding the zero of f ( x ) = cos( x ) − x 3 . We have f ′ ( x ) = −sin( x ) − 3 x 2 . Since cos( x ) ≤ 1 for all x and x 3 > 1 for x > 1 , we know that our solution lies between 0 and 1.

A starting value of 0 will lead to an undefined result which illustrates the importance of using a starting point close to the solution. For example, with an initial guess x 0 = 0.5 , the sequence given by Newton's method is: x 1 = x 0 − − f ( x 0 ) f ′ ( x 0 ) = 0.5 − − cos ⁡ ⁡ 0.5 − − 0.5 3 − − sin ⁡ ⁡ 0.5 − − 3 × × 0.5 2 = 1.112 141 637 097 … … x 2 = x 1 − − f ( x 1 ) f ′ ( x 1 ) = ⋮ ⋮ = 0.

_ _ 909 672 693 736 … … x 3 = ⋮ ⋮ = ⋮ ⋮ = 0.86 _ _ 7 263 818 209 … … x 4 = ⋮ ⋮ = ⋮ ⋮ = 0.865 47 _ _ 7 135 298 … … x 5 = ⋮ ⋮ = ⋮ ⋮ = 0.865 474 033 1 _ _ 11 … … x 6 = ⋮ ⋮ = ⋮ ⋮ = 0.865 474 033 102 _ _ … … {\displaystyle {\begin{matrix}x_{1}&=&x_{0}-{\dfrac {f(x_{0})}{f'(x_{0})}}&=&0.5-{\dfrac {\cos 0.5-0.5^{3}}{-\sin 0.5-3\times 0.5^{2}}}&=&1.112\,141\,637\,097\dots \\x_{2}&=&x_{1}-{\dfrac {f(x_{1})}{f'(x_{1})}}&=&\vdots &=&{\underline {0.}}909\,672\,693\,736\dots \\x_{3}&=&\vdots &=&\vdots &=&{\underline {0.86}}7\,263\,818\,209\dots \\x_{4}&=&\vdots &=&\vdots &=&{\underline {0.865\,47}}7\,135\,298\dots \\x_{5}&=&\vdots &=&\vdots &=&{\underline {0.865\,474\,033\,1}}11\dots \\x_{6}&=&\vdots &=&\vdots &=&{\underline {0.865\,474\,033\,102}}\dots \end{matrix}}} The correct digits are underlined in the above example. In particular, x 6 is correct to 12 decimal places. We see that the number of correct digits after the decimal point increases from 2 (for x 3 ) to 5 and 10, illustrating the quadratic convergence.

Multidimensional formulations [ edit ] Systems of equations [ edit ] k variables, k functions [ edit ] One may also use Newton's method to solve systems of k equations, which amounts to finding the (simultaneous) zeroes of k continuously differentiable functions f : R k → → R .

{\displaystyle f:\mathbb {R} ^{k}\to \mathbb {R} .} This is equivalent to finding the zeroes of a single vector-valued function F : R k → → R k .

{\displaystyle F:\mathbb {R} ^{k}\to \mathbb {R} ^{k}.} In the formulation given above, the scalars x n are replaced by vectors x n and instead of dividing the function f ( x n ) by its derivative f ′ ( x n ) one instead has to left multiply the function F ( x n ) by the inverse of its k × k Jacobian matrix J F ( x n ) .

[ 22 ] [ 23 ] [ 24 ] This results in the expression x n + 1 = x n − − J F ( x n ) − − 1 F ( x n ) .

{\displaystyle \mathbf {x} _{n+1}=\mathbf {x} _{n}-J_{F}(\mathbf {x} _{n})^{-1}F(\mathbf {x} _{n}).} or, by solving the system of linear equations J F ( x n ) ( x n + 1 − − x n ) = − − F ( x n ) {\displaystyle J_{F}(\mathbf {x} _{n})(\mathbf {x} _{n+1}-\mathbf {x} _{n})=-F(\mathbf {x} _{n})} for the unknown x n + 1 − x n .

[ 25 ] k variables, m equations, with m > k [ edit ] The k -dimensional variant of Newton's method can be used to solve systems of greater than k (nonlinear) equations as well if the algorithm uses the generalized inverse of the non-square Jacobian matrix J + = ( J T J ) −1 J T instead of the inverse of J . If the nonlinear system has no solution, the method attempts to find a solution in the non-linear least squares sense. See Gauss–Newton algorithm for more information.

Example [ edit ] For example, the following set of equations needs to be solved for vector of points [ x 1 , x 2 ] , {\displaystyle \ [\ x_{1},x_{2}\ ]\ ,} given the vector of known values [ 2 , 3 ] .

{\displaystyle \ [\ 2,3\ ]~.} [ 26 ] 5 x 1 2 + x 1 x 2 2 + sin 2 ⁡ ⁡ ( 2 x 2 ) = 2 e 2 x 1 − − x 2 + 4 x 2 = 3 {\displaystyle {\begin{array}{lcr}5\ x_{1}^{2}+x_{1}\ x_{2}^{2}+\sin ^{2}(2\ x_{2})&=\quad 2\\e^{2\ x_{1}-x_{2}}+4\ x_{2}&=\quad 3\end{array}}} the function vector, F ( X k ) , {\displaystyle \ F(X_{k})\ ,} and Jacobian Matrix, J ( X k ) {\displaystyle \ J(X_{k})\ } for iteration k, and the vector of known values, Y , {\displaystyle \ Y\ ,} are defined below.

F ( X k ) = [ f 1 ( X k ) f 2 ( X k ) ] = [ 5 x 1 2 + x 1 x 2 2 + sin 2 ⁡ ⁡ ( 2 x 2 ) e 2 x 1 − − x 2 + 4 x 2 ] k J ( X k ) = [ ∂ ∂ f 1 ( X ) ∂ ∂ x 1 , ∂ ∂ f 1 ( X ) ∂ ∂ x 2 ∂ ∂ f 2 ( X ) ∂ ∂ x 1 , ∂ ∂ f 2 ( X ) ∂ ∂ x 2 ] k = [ 10 x 1 + x 2 2 , 2 x 1 x 2 + 4 sin ⁡ ⁡ ( 2 x 2 ) cos ⁡ ⁡ ( 2 x 2 ) 2 e 2 x 1 − − x 2 , − − e 2 x 1 − − x 2 + 4 ] k Y = [ 2 3 ] {\displaystyle {\begin{aligned}~&F(X_{k})~=~{\begin{bmatrix}{\begin{aligned}~&f_{1}(X_{k})\\~&f_{2}(X_{k})\end{aligned}}\end{bmatrix}}~=~{\begin{bmatrix}{\begin{aligned}~&5\ x_{1}^{2}+x_{1}\ x_{2}^{2}+\sin ^{2}(2\ x_{2})\\~&e^{2\ x_{1}-x_{2}}+4\ x_{2}\end{aligned}}\end{bmatrix}}_{k}\\~&J(X_{k})={\begin{bmatrix}~{\frac {\ \partial {f_{1}(X)}\ }{\partial {x_{1}}}}\ ,&~{\frac {\ \partial {f_{1}(X)}\ }{\partial {x_{2}}}}~\\~{\frac {\ \partial {f_{2}(X)}\ }{\partial {x_{1}}}}\ ,&~{\frac {\ \partial {f_{2}(X)}\ }{\partial {x_{2}}}}~\end{bmatrix}}_{k}~=~{\begin{bmatrix}{\begin{aligned}~&10\ x_{1}+x_{2}^{2}\ ,&&2\ x_{1}\ x_{2}+4\ \sin(2\ x_{2})\ \cos(2\ x_{2})\\~&2\ e^{2\ x_{1}-x_{2}}\ ,&&-e^{2\ x_{1}-x_{2}}+4\end{aligned}}\end{bmatrix}}_{k}\\~&Y={\begin{bmatrix}~2~\\~3~\end{bmatrix}}\end{aligned}}} Note that F ( X k ) {\displaystyle \ F(X_{k})\ } could have been rewritten to absorb Y , {\displaystyle \ Y\ ,} and thus eliminate Y {\displaystyle Y} from the equations. The equation to solve for each iteration are [ 10 x 1 + x 2 2 , 2 x 1 x 2 + 4 sin ⁡ ⁡ ( 2 x 2 ) cos ⁡ ⁡ ( 2 x 2 ) 2 e 2 x 1 − − x 2 , − − e 2 x 1 − − x 2 + 4 ] k [ c 1 c 2 ] k + 1 = [ 5 x 1 2 + x 1 x 2 2 + sin 2 ⁡ ⁡ ( 2 x 2 ) − − 2 e 2 x 1 − − x 2 + 4 x 2 − − 3 ] k {\displaystyle {\begin{aligned}{\begin{bmatrix}{\begin{aligned}~&~10\ x_{1}+x_{2}^{2}\ ,&&2x_{1}x_{2}+4\ \sin(2\ x_{2})\ \cos(2\ x_{2})~\\~&~2\ e^{2\ x_{1}-x_{2}}\ ,&&-e^{2\ x_{1}-x_{2}}+4~\end{aligned}}\end{bmatrix}}_{k}{\begin{bmatrix}~c_{1}~\\~c_{2}~\end{bmatrix}}_{k+1}={\begin{bmatrix}~5\ x_{1}^{2}+x_{1}\ x_{2}^{2}+\sin ^{2}(2\ x_{2})-2~\\~e^{2\ x_{1}-x_{2}}+4\ x_{2}-3~\end{bmatrix}}_{k}\end{aligned}}} and X k + 1 = X k − − C k + 1 {\displaystyle X_{k+1}~=~X_{k}-C_{k+1}} The iterations should be repeated until [ ∑ ∑ i = 1 i = 2 | f ( x i ) k − − ( y i ) k | ] < E , {\displaystyle \ {\Bigg [}\sum _{i=1}^{i=2}{\Bigl |}f(x_{i})_{k}-(y_{i})_{k}{\Bigr |}{\Bigg ]}<E\ ,} where E {\displaystyle \ E\ } is a value acceptably small enough to meet application requirements.

If vector X 0 {\displaystyle \ X_{0}\ } is initially chosen to be [ 1 1 ] , {\displaystyle \ {\begin{bmatrix}~1~&~1~\end{bmatrix}}\ ,} that is, x 1 = 1 , {\displaystyle \ x_{1}=1\ ,} and x 2 = 1 , {\displaystyle \ x_{2}=1\ ,} and E , {\displaystyle \ E\ ,} is chosen to be 1.10 −3 , then the example converges after four iterations to a value of X 4 = [ 0.567297 , − − 0.309442 ] .

{\displaystyle \ X_{4}=\left[~0.567297,\ -0.309442~\right]~.} Iterations [ edit ] The following iterations were made during the course of the solution.

Converging iteration sequence Step Variable Value 0 x = [ 1 , 1 ] {\displaystyle {\begin{bmatrix}\ 1\ ,&1\end{bmatrix}}} f ( x ) = [ 6.82682 , 6.71828 ] {\displaystyle {\begin{bmatrix}\ 6.82682\ ,&6.71828\ \end{bmatrix}}} 1 J  = [ 11 , 0.486395 5.43656 , 1.28172 ] {\displaystyle {\begin{bmatrix}\ 11~,&\quad 0.486395\\\ 5.43656\ ,&1.28172\end{bmatrix}}} c = [ 0.382211 , 1.27982 ] {\displaystyle {\begin{bmatrix}\ 0.382211\ ,&1.27982\ \end{bmatrix}}} x = [ 0.617789 , − − 0.279818 ] {\displaystyle {\begin{bmatrix}\ 0.617789\ ,&-0.279818\ \end{bmatrix}}} f ( x )  = [ 2.23852 , 3.43195 ] {\displaystyle {\begin{bmatrix}\ 2.23852\ ,&3.43195\ \end{bmatrix}}} 2 J = [ 6.25618 , − − 2.1453 9.10244 , − − 0.551218 ] {\displaystyle {\begin{bmatrix}\ 6.25618\ ,&-2.1453\\\ 9.10244\ ,&\quad -0.551218\end{bmatrix}}} c = [ 0.0494549 , 0.0330411 ] {\displaystyle {\begin{bmatrix}0.0494549\ ,&0.0330411\ \end{bmatrix}}} x = [ 0.568334 , − − 0.312859 ] {\displaystyle {\begin{bmatrix}\ 0.568334\ ,&-0.312859\ \end{bmatrix}}} f ( x )  = [ 2.01366 , 3.00966 ] {\displaystyle {\begin{bmatrix}\ 2.01366\ ,&3.00966\ \end{bmatrix}}} 3 J = [ 5.78122 , − − 2.25449 8.52219 , − − 0.261095 ] {\displaystyle {\begin{bmatrix}\ 5.78122\ ,&-2.25449\\\ 8.52219\ ,&\quad -0.261095\ \end{bmatrix}}} c = [ 0.00102862 , − − 0.00342339 ] {\displaystyle {\begin{bmatrix}0.00102862\ ,&-0.00342339\ \end{bmatrix}}} x = [ 0.567305 , − − 0.309435 ] {\displaystyle {\begin{bmatrix}\ 0.567305\ ,&-0.309435\ \end{bmatrix}}} f ( x )  = [ 2.00003 , 3.00006 ] {\displaystyle {\begin{bmatrix}\ 2.00003\ ,&3.00006\ \end{bmatrix}}} 4 J = [ 5.7688 , − − 2.24118 8.47561 , − − 0.237805 ] {\displaystyle {\begin{bmatrix}\ 5.7688~,&~-2.24118\\\ 8.47561\ ,&\quad -0.237805\end{bmatrix}}\ } c  = [ 7.73132 × × 10 − − 6 , 6.93265 × × 10 − − 6 ] {\displaystyle {\begin{bmatrix}\ 7.73132\!\times \!10^{-6}~,&~6.93265\!\times \!10^{-6}\ \end{bmatrix}}} x  = [ 0.567297 , − − 0.309442 ] {\displaystyle {\begin{bmatrix}\ 0.567297\ ,&-0.309442\ \end{bmatrix}}} f ( x )  = [ 2 , 3 ] {\displaystyle {\begin{bmatrix}~2\ ,~&~3~\end{bmatrix}}} Complex functions [ edit ] Main article: Newton fractal Basins of attraction for x 5 − 1 = 0 ; darker means more iterations to converge.

When dealing with complex functions , Newton's method can be directly applied to find their zeroes.

[ 27 ] Each zero has a basin of attraction in the complex plane, the set of all starting values that cause the method to converge to that particular zero. These sets can be mapped as in the image shown. For many complex functions, the boundaries of the basins of attraction are fractals .

In some cases there are regions in the complex plane which are not in any of these basins of attraction, meaning the iterates do not converge. For example, [ 28 ] if one uses a real initial condition to seek a root of x 2 + 1 , all subsequent iterates will be real numbers and so the iterations cannot converge to either root, since both roots are non-real. In this case almost all real initial conditions lead to chaotic behavior , while some initial conditions iterate either to infinity or to repeating cycles of any finite length.

Curt McMullen has shown that for any possible purely iterative algorithm similar to Newton's method, the algorithm will diverge on some open regions of the complex plane when applied to some polynomial of degree 4 or higher. However, McMullen gave a generally convergent algorithm for polynomials of degree 3.

[ 29 ] Also, for any polynomial, Hubbard, Schleicher, and Sutherland gave a method for selecting a set of initial points such that  Newton's method will certainly converge at one of them at least.

[ 30 ] In a Banach space [ edit ] Another generalization is Newton's method to find a root of a functional F defined in a Banach space . In this case the formulation is X n + 1 = X n − − ( F ′ ( X n ) ) − − 1 F ( X n ) , {\displaystyle X_{n+1}=X_{n}-{\bigl (}F'(X_{n}){\bigr )}^{-1}F(X_{n}),\,} where F ′ ( X n ) is the Fréchet derivative computed at X n . One needs the Fréchet derivative to be boundedly invertible at each X n in order for the method to be applicable. A condition for existence of and convergence to a root is given by the Newton–Kantorovich theorem .

[ 31 ] Nash–Moser iteration [ edit ] Further information: Nash–Moser theorem In the 1950s, John Nash developed a version of the Newton's method to apply to the problem of constructing isometric embeddings of general Riemannian manifolds in Euclidean space . The loss of derivatives problem, present in this context, made the standard Newton iteration inapplicable, since it could not be continued indefinitely (much less converge). Nash's solution involved the introduction of smoothing operators into the iteration. He was able to prove the convergence of his smoothed Newton method, for the purpose of proving an implicit function theorem for isometric embeddings. In the 1960s, Jürgen Moser showed that Nash's methods were flexible enough to apply to problems beyond isometric embedding, particularly in celestial mechanics . Since then, a number of mathematicians, including Mikhael Gromov and Richard Hamilton , have found generalized abstract versions of the Nash–Moser theory.

[ 32 ] [ 33 ] In Hamilton's formulation, the Nash–Moser theorem forms a generalization of the Banach space Newton method which takes place in certain Fréchet spaces .

Modifications [ edit ] Quasi-Newton methods [ edit ] When the Jacobian is unavailable or too expensive to compute at every iteration, a quasi-Newton method can be used.

Chebyshev's third-order method [ edit ] Main article: Chebyshev iteration Since higher-order Taylor expansions offer more accurate local approximations of a function f , it is reasonable to ask why Newton’s method relies only on a second-order Taylor approximation. In the 19th century, Russian mathematician Pafnuty Chebyshev explored this idea by developing a variant of Newton’s method that used cubic approximations.

[ 34 ] [ 35 ] [ 36 ] Over p -adic numbers [ edit ] In p -adic analysis, the standard method to show a polynomial equation in one variable has a p -adic root is Hensel's lemma , which uses the recursion from Newton's method on the p -adic numbers. Because of the more stable behavior of addition and multiplication in the p -adic numbers compared to the real numbers (specifically, the unit ball in the p -adics is a ring), convergence in Hensel's lemma can be guaranteed under much simpler hypotheses than in the classical Newton's method on the real line.

q -analog [ edit ] Newton's method can be generalized with the q -analog of the usual derivative.

[ 37 ] Modified Newton methods [ edit ] Maehly's procedure [ edit ] A nonlinear equation has multiple solutions in general. But if the initial value is not appropriate, Newton's method may not converge to the desired solution or may converge to the same solution found earlier. When we have already found N solutions of f ( x ) = 0 {\displaystyle f(x)=0} , then the next root can be found by applying Newton's method to the next equation: [ 38 ] [ 39 ] F ( x ) = f ( x ) ∏ ∏ i = 1 N ( x − − x i ) = 0.

{\displaystyle F(x)={\frac {f(x)}{\prod _{i=1}^{N}(x-x_{i})}}=0.} This method is applied to obtain zeros of the Bessel function of the second kind.

[ 40 ] Hirano's modified Newton method [ edit ] Hirano's modified Newton method is a modification conserving the convergence of Newton method and avoiding unstableness.

[ 41 ] It is developed to solve complex polynomials.

Interval Newton's method [ edit ] This section may contain citations that do not verify the text .

Please help improve it by checking for citation inaccuracies and resourcing or removing material failing verification.

( February 2019 ) ( Learn how and when to remove this message ) Combining Newton's method with interval arithmetic is very useful in some contexts. This provides a stopping criterion that is more reliable than the usual ones (which are a small value of the function or a small variation of the variable between consecutive iterations). Also, this may detect cases where Newton's method converges theoretically but diverges numerically because of an insufficient floating-point precision (this is typically the case for polynomials of large degree, where a very small change of the variable may change dramatically the value of the function; see Wilkinson's polynomial ).

[ 42 ] [ 43 ] Consider f → C 1 ( X ) , where X is a real interval, and suppose that we have an interval extension F ′ of f ′ , meaning that F ′ takes as input an interval Y ⊆ X and outputs an interval F ′ ( Y ) such that: F ′ ( [ y , y ] ) = { f ′ ( y ) } F ′ ( Y ) ⊇ ⊇ { f ′ ( y ) ∣ ∣ y ∈ ∈ Y } .

{\displaystyle {\begin{aligned}F'([y,y])&=\{f'(y)\}\\[5pt]F'(Y)&\supseteq \{f'(y)\mid y\in Y\}.\end{aligned}}} We also assume that 0 ∉ F ′ ( X ) , so in particular f has at most one root in X .
We then define the interval Newton operator by: N ( Y ) = m − − f ( m ) F ′ ( Y ) = { m − − f ( m ) z | z ∈ ∈ F ′ ( Y ) } {\displaystyle N(Y)=m-{\frac {f(m)}{F'(Y)}}=\left\{\left.m-{\frac {f(m)}{z}}~\right|~z\in F'(Y)\right\}} where m ∈ Y . Note that the hypothesis on F ′ implies that N ( Y ) is well defined and is an interval (see interval arithmetic for further details on interval operations). This naturally leads to the following sequence: X 0 = X X k + 1 = N ( X k ) ∩ ∩ X k .

{\displaystyle {\begin{aligned}X_{0}&=X\\X_{k+1}&=N(X_{k})\cap X_{k}.\end{aligned}}} The mean value theorem ensures that if there is a root of f in X k , then it is also in X k + 1 . Moreover, the hypothesis on F′ ensures that X k + 1 is at most half the size of X k when m is the midpoint of Y , so this sequence converges towards [ x* , x* ] , where x* is the root of f in X .

If F ′ ( X ) strictly contains 0, the use of extended interval division produces a union of two intervals for N ( X ) ; multiple roots are therefore automatically separated and bounded.

Applications [ edit ] Minimization and maximization problems [ edit ] Main article: Newton's method in optimization Newton's method can be used to find a minimum or maximum of a function f ( x ) . The derivative is zero at a minimum or maximum, so local minima and maxima can be found by applying Newton's method to the derivative.

[ 44 ] The iteration becomes: x n + 1 = x n − − f ′ ( x n ) f ″ ( x n ) .

{\displaystyle x_{n+1}=x_{n}-{\frac {f'(x_{n})}{f''(x_{n})}}.} Multiplicative inverses of numbers and power series [ edit ] An important application is Newton–Raphson division , which can be used to quickly find the reciprocal of a number a , using only multiplication and subtraction, that is to say the number x such that ⁠ 1 / x ⁠ = a . We can rephrase that as finding the zero of f ( x ) = ⁠ 1 / x ⁠ − a . We have f ′ ( x ) = − ⁠ 1 / x 2 ⁠ .

Newton's iteration is x n + 1 = x n − − f ( x n ) f ′ ( x n ) = x n + 1 x n − − a 1 x n 2 = x n ( 2 − − a x n ) .

{\displaystyle x_{n+1}=x_{n}-{\frac {f(x_{n})}{f'(x_{n})}}=x_{n}+{\frac {{\frac {1}{x_{n}}}-a}{\frac {1}{x_{n}^{2}}}}=x_{n}(2-ax_{n}).} Therefore, Newton's iteration needs only two multiplications and one subtraction.

This method is also very efficient to compute the multiplicative inverse of a power series .

Solving transcendental equations [ edit ] Many transcendental equations can be solved up to an arbitrary precision by using Newton's method. For example, finding the cumulative probability density function , such as a Normal distribution to fit a known probability generally involves integral functions with no known means to solve in closed form.  However, computing the derivatives needed to solve them numerically with Newton's method is generally known, making numerical solutions possible.  For an example, see the numerical solution to the inverse Normal cumulative distribution .

Numerical verification for solutions of nonlinear equations [ edit ] A numerical verification for solutions of nonlinear equations has been established by using Newton's method multiple times and forming a set of solution candidates.

[ citation needed ] Code [ edit ] The following is an example of a possible implementation of Newton's method in the Python (version 3.x) programming language for finding a root of a function f which has derivative f_prime .

The initial guess will be x 0 = 1 and the function will be f ( x ) = x 2 − 2 so that f ′ ( x ) = 2 x .

Each new iteration of Newton's method will be denoted by x1 . We will check during the computation whether the denominator ( yprime ) becomes too small (smaller than epsilon ), which would be the case if f ′ ( x n ) ≈ 0 , since otherwise a large amount of error could be introduced.

def f ( x ): return x ** 2 - 2 # f(x) = x^2 - 2 def f_prime ( x ): return 2 * x # f'(x) = 2x def newtons_method ( x0 , f , f_prime , tolerance , epsilon , max_iterations ): """Newton's method Args: x0:              The initial guess f:               The function whose root we are trying to find f_prime:         The derivative of the function tolerance:       Stop when iterations change by less than this epsilon:         Do not divide by a number smaller than this max_iterations:  The maximum number of iterations to compute """ for _ in range ( max_iterations ): y = f ( x0 ) yprime = f_prime ( x0 ) if abs ( yprime ) < epsilon : # Give up if the denominator is too small break x1 = x0 - y / yprime # Do Newton's computation if abs ( x1 - x0 ) <= tolerance : # Stop when the result is within the desired tolerance return x1 # x1 is a solution within tolerance and maximum number of iterations x0 = x1 # Update x0 to start the process again return None # Newton's method did not converge See also [ edit ] Aitken's delta-squared process Bisection method Euler method Fast inverse square root Fisher scoring Gradient descent Integer square root Kantorovich theorem Laguerre's method Methods of computing square roots Newton's method in optimization Richardson extrapolation Root-finding algorithm Secant method Steffensen's method Subgradient method Notes [ edit ] ^ Fowler, David; Robson, Eleanor (1998).

"Square root approximations in Old Babylonian mathematics: YBC 7289 in context" .

Historia Mathematica .

25 (4): 366– 378.

doi : 10.1006/hmat.1998.2209 .

^ Morshed, Md Sarowar (2022), Augmented Newton Method for Optimization: Global Linear Rate and Momentum Interpretation , arXiv, doi : 10.48550/ARXIV.2205.11033 , retrieved 8 July 2025 ^ Ypma, Tjalling J. (1995).

"Historical Development of the Newton-Raphson Method" .

SIAM Review .

37 (4): 531– 551.

doi : 10.1137/1037125 .

ISSN 0036-1445 .

JSTOR 2132904 .

^ Morshed, Md Sarowar (2022), Augmented Newton Method for Optimization: Global Linear Rate and Momentum Interpretation , arXiv, doi : 10.48550/ARXIV.2205.11033 , retrieved 8 July 2025 ^ a b Cajori, Florian (1911).

"Historical Note on the Newton-Raphson Method of Approximation" .

The American Mathematical Monthly .

18 (2): 29– 32.

doi : 10.2307/2973939 .

ISSN 0002-9890 .

JSTOR 2973939 .

^ Guicciardini, Niccolò (2009).

Isaac Newton on Mathematical Certainty and Method . Transformations. Cambridge, Mass: MIT Press . pp.

158– 159.

ISBN 978-0-262-01317-8 .

OCLC 282968643 .

^ Ypma, Tjalling J. (1995).

"Historical Development of the Newton-Raphson Method" .

SIAM Review .

37 (4): 531– 551.

doi : 10.1137/1037125 .

ISSN 0036-1445 .

JSTOR 2132904 .

^ "Takakazu Seki - Biography" .

Maths History . Retrieved 27 November 2024 .

^ Wallis, John (1685).

A Treatise of Algebra, both Historical and Practical . Oxford: Richard Davis.

doi : 10.3931/e-rara-8842 .

^ Raphson, Joseph (1697).

Analysis Æequationum Universalis (in Latin) (2nd ed.). London: Thomas Bradyll.

doi : 10.3931/e-rara-13516 .

^ "Accelerated and Modified Newton Methods" . Archived from the original on 24 May 2019 . Retrieved 4 March 2016 .

^ a b J. E. Dennis, Jr. and Robert B. Schnabel. Numerical methods for unconstrained optimization and nonlinear equations. SIAM ^ Anthony Ralston and Philip Rabinowitz. A first course in numerical analysis, second edition ^ Yuri Nesterov. Lectures on convex optimization, second edition. Springer Optimization and its Applications, Volume 137.

^ Süli & Mayers 2003 .

^ a b c Kenneth L. Judd. Numerical methods in economics. MIT Press ^ Ryaben'kii, Victor S.; Tsynkov, Semyon V. (2006), A Theoretical Introduction to Numerical Analysis , CRC Press, p. 243, ISBN 9781584886075 .

^ Süli & Mayers 2003 , Exercise 1.6 ^ a b c Ostrowski, A. M.

(1973).

Solution of equations in Euclidean and Banach spaces . Pure and Applied Mathematics. Vol. 9 (Third edition of 1960 original ed.). New York–London: Academic Press .

MR 0359306 .

Zbl 0304.65002 .

^ Ortega and Rheinboldt, Section 13.3 ^ Traub, J. F.

(1964).

Iterative methods for the solution of equations . Prentice-Hall Series in Automatic Computation. Englewood Cliffs, NJ: Prentice-Hall, Inc.

MR 0169356 .

Zbl 0121.11204 .

^ a b Burden, Burton; Fairs, J. Douglas; Reunolds, Albert C (July 1981).

Numerical Analysis (2nd ed.). Boston, MA, United States: Prindle, Weber & Schmidt. pp.

448– 452.

ISBN 0-87150-314-X .

OCLC 1036752194 .

^ Evans, Gwynne A. (1995).

Practical Numerical Analysis . Chichester: John Wiley & Sons. pp.

30– 33.

ISBN 0471955353 .

OCLC 1319419671 .

^ Demidovich, Boris Pavlovich; Maron, Isaak Abramovich (1981).

Computational Mathematics (Third ed.). Moscow: MIR Publishers. pp.

460– 478.

ISBN 9780828507042 .

^ Kiusalaas, Jaan (March 2013).

Numerical Methods in Engineering with Python 3 (3rd ed.). New York: Cambridge University Press. pp.

175– 176.

ISBN 978-1-107-03385-6 .

^ This example is similar to one in reference, [ 22 ] pages 451 and 452, but simplified to two equations instead of three.

^ Henrici, Peter (1974).

Applied and Computational Complex Analysis . Vol. 1. Wiley.

ISBN 9780471598923 .

^ Strang, Gilbert (January 1991). "A chaotic search for i ".

The College Mathematics Journal .

22 (1): 3– 12.

doi : 10.2307/2686733 .

JSTOR 2686733 .

^ McMullen, Curt (1987).

"Families of rational maps and iterative root-finding algorithms" (PDF) .

Annals of Mathematics . Second Series.

125 (3): 467– 493.

doi : 10.2307/1971408 .

JSTOR 1971408 .

^ Hubbard, John; Schleicher, Dierk; Sutherland, Scott (October 2001).

"How to find all roots of complex polynomials by Newton's method" .

Inventiones Mathematicae .

146 (1): 1– 33.

Bibcode : 2001InMat.146....1H .

doi : 10.1007/s002220100149 .

ISSN 0020-9910 .

S2CID 12603806 .

^ Yamamoto, Tetsuro (2001). "Historical Developments in Convergence Analysis for Newton's and Newton-like Methods". In Brezinski, C.; Wuytack, L. (eds.).

Numerical Analysis: Historical Developments in the 20th Century . North-Holland. pp.

241– 263.

ISBN 0-444-50617-9 .

^ Hamilton, Richard S.

(1982).

"The inverse function theorem of Nash and Moser" .

Bulletin of the American Mathematical Society . New Series.

7 (1): 65– 222.

doi : 10.1090/s0273-0979-1982-15004-2 .

MR 0656198 .

Zbl 0499.58003 .

^ Gromov, Mikhael (1986).

Partial differential relations . Ergebnisse der Mathematik und ihrer Grenzgebiete (3). Vol. 9. Berlin: Springer-Verlag .

doi : 10.1007/978-3-662-02267-2 .

ISBN 3-540-12177-3 .

MR 0864505 .

^ Chebyshev, Pafnutii L'vovich; Bernshtein, Sergei Natanovich (1947).

Polnoe sobranie sochinenii . Izd-vo Akademii nauk SSSR.

^ Ahmadi, Amir Ali; Chaudhry, Abraar; Zhang, Jeffrey (2024).

"Higher-order Newton methods with polynomial work per iteration" .

Advances in Mathematics .

452 : 109808.

arXiv : 2311.06374 .

doi : 10.1016/j.aim.2024.109808 .

^ Hartnett, Kevin (24 March 2025).

"Three Hundred Years Later, a Tool from Isaac Newton Gets an Update" .

Quanta Magazine . Retrieved 3 April 2025 .

^ Rajković, Predrag M.; Stanković, Miomir S.; Marinković, Slađana D. (2002).

"Mean value theorems in $q$-calculus" .

Matematicki Vesnik .

54 ( 3– 4): 171– 178.

^ Press et al. 2007 ^ Stoer, Josef; Bulirsch, Roland (1980).

Introduction to numerical analysis . p. 279.

OCLC 1244842246 .

^ Zhang, Shanjie; Jin, Jianming (1996).

Computation of Special Functions . Wiley.

ISBN 9780471119630 .

[ page needed ] ^ Murota, Kazuo (1982). "Global Convergence of a Modified Newton Iteration for Algebraic Equations".

SIAM Journal on Numerical Analysis .

19 (4): 793– 799.

Bibcode : 1982SJNA...19..793M .

doi : 10.1137/0719055 .

^ Moore, R. E. (1979).

Methods and applications of interval analysis (Vol. 2). Siam.

^ Hansen, E. (1978). Interval forms of Newtons method.

Computing , 20(2), 153–163.

^ Boyd, Stephen ; Vandenberghe, Lieven (2004).

Convex optimization . Cambridge: Cambridge University Press .

doi : 10.1017/CBO9780511804441 .

ISBN 0-521-83378-7 .

MR 2061575 .

Zbl 1058.90049 .

References [ edit ] Gil, A.; Segura, J.; Temme, N. M. (2007).

Numerical methods for special functions . Society for Industrial and Applied Mathematics.

ISBN 978-0-89871-634-4 .

Süli, Endre ; Mayers, David (2003).

An Introduction to Numerical Analysis . Cambridge University Press.

ISBN 0-521-00794-1 .

Further reading [ edit ] Kendall E. Atkinson: An Introduction to Numerical Analysis , John Wiley & Sons Inc., ISBN 0-471-62489-6 (1989).

Tjalling J. Ypma: "Historical development of the Newton–Raphson method", SIAM Review, vol.37, no.4, (1995), pp.531–551.

doi : 10.1137/1037125 .

Bonnans, J. Frédéric; Gilbert, J. Charles; Lemaréchal, Claude ; Sagastizábal, Claudia A.

(2006).

Numerical optimization: Theoretical and practical aspects . Universitext (Second revised ed. of translation of 1997  French ed.). Berlin: Springer-Verlag. pp. xiv+490.

doi : 10.1007/978-3-540-35447-5 .

ISBN 3-540-35445-X .

MR 2265882 .

P. Deuflhard: Newton Methods for Nonlinear Problems: Affine Invariance and Adaptive Algorithms , Springer Berlin (Series in Computational Mathematics, Vol. 35) (2004).

ISBN 3-540-21099-7 .

C. T. Kelley: Solving Nonlinear Equations with Newton's Method , SIAM (Fundamentals of Algorithms, 1) (2003).

ISBN 0-89871-546-6 .

J. M. Ortega, and W. C. Rheinboldt: Iterative Solution of Nonlinear Equations in Several Variables , SIAM (Classics in Applied Mathematics) (2000).

ISBN 0-89871-461-3 .

Press, W. H.; Teukolsky, S. A.; Vetterling, W. T.; Flannery, B. P. (2007).

"Chapter 9. Root Finding and Nonlinear Sets of Equations Importance Sampling" .

Numerical Recipes: The Art of Scientific Computing (3rd ed.). New York: Cambridge Univ. Press.

ISBN 978-0-521-88068-8 .

. See especially Sections 9.4 , 9.6 , and 9.7 .

Avriel, Mordecai (1976).

Nonlinear Programming: Analysis and Methods . Prentice Hall. pp.

216– 221.

ISBN 0-13-623603-0 .

External links [ edit ] Wikimedia Commons has media related to Newton Method .

For a list of words relating to Newton's method, see the Newton's method category of article in Wikibooks .

"Newton method" , Encyclopedia of Mathematics , EMS Press , 2001 [1994] Weisstein, Eric W.

"Newton's Method" .

MathWorld .

Newton's method, Citizendium.

Mathews, J., The Accelerated and Modified Newton Methods, Course notes.

Wu, X., Roots of Equations, Course notes.

v t e Sir Isaac Newton Publications Fluxions (1671) De Motu (1684) Principia (1687) Opticks (1704) Queries (1704) Arithmetica (1707) De Analysi (1711) Other writings Quaestiones (1661–1665) " standing on the shoulders of giants " (1675) Notes on the Jewish Temple (c. 1680) " General Scholium " (1713; " hypotheses non fingo " ) Ancient Kingdoms Amended (1728) Corruptions of Scripture (1754) Contributions Calculus fluxion Impact depth Inertia Newton disc Newton polygon Newton–Okounkov body Newton's reflector Newtonian telescope Newton scale Newton's metal Spectrum Structural coloration Newtonianism Bucket argument Newton's inequalities Newton's law of cooling Newton's law of universal gravitation post-Newtonian expansion parameterized gravitational constant Newton–Cartan theory Schrödinger–Newton equation Newton's laws of motion Kepler's laws Newtonian dynamics Newton's method in optimization Apollonius's problem truncated Newton method Gauss–Newton algorithm Newton's rings Newton's theorem about ovals Newton–Pepys problem Newtonian potential Newtonian fluid Classical mechanics Corpuscular theory of light Leibniz–Newton calculus controversy Newton's notation Rotating spheres Newton's cannonball Newton–Cotes formulas Newton's method generalized Gauss–Newton method Newton fractal Newton's identities Newton polynomial Newton's theorem of revolving orbits Newton–Euler equations Newton number kissing number problem Newton's quotient Parallelogram of force Newton–Puiseux theorem Absolute space and time Luminiferous aether Newtonian series table Personal life Woolsthorpe Manor (birthplace) Cranbury Park (home) Early life Later life Apple tree Religious views Occult studies Scientific Revolution Copernican Revolution Relations Catherine Barton (niece) John Conduitt (nephew-in-law) Isaac Barrow (professor) William Clarke (mentor) Benjamin Pulleyn (tutor) Roger Cotes (student) William Whiston (student) John Keill (disciple) William Stukeley (friend) William Jones (friend) Abraham de Moivre (friend) Depictions Newton by Blake (monotype) Newton by Paolozzi (sculpture) Isaac Newton Gargoyle Astronomers Monument Namesake Newton (unit) Newton's cradle Isaac Newton Institute Isaac Newton Medal Isaac Newton Telescope Isaac Newton Group of Telescopes XMM-Newton Sir Isaac Newton Sixth Form Statal Institute of Higher Education Isaac Newton Newton International Fellowship Categories Isaac Newton v t e Optimization : Algorithms , methods , and heuristics Unconstrained nonlinear Functions Golden-section search Powell's method Line search Nelder–Mead method Successive parabolic interpolation Gradients Convergence Trust region Wolfe conditions Quasi–Newton Berndt–Hall–Hall–Hausman Broyden–Fletcher–Goldfarb–Shanno and L-BFGS Davidon–Fletcher–Powell Symmetric rank-one (SR1) Other methods Conjugate gradient Gauss–Newton Gradient Mirror Levenberg–Marquardt Powell's dog leg method Truncated Newton Hessians Newton's method Optimization computes maxima and minima.

Constrained nonlinear General Barrier methods Penalty methods Differentiable Augmented Lagrangian methods Sequential quadratic programming Successive linear programming Convex optimization Convex minimization Cutting-plane method Reduced gradient (Frank–Wolfe) Subgradient method Linear and quadratic Interior point Affine scaling Ellipsoid algorithm of Khachiyan Projective algorithm of Karmarkar Basis- exchange Simplex algorithm of Dantzig Revised simplex algorithm Criss-cross algorithm Principal pivoting algorithm of Lemke Active-set method Combinatorial Paradigms Approximation algorithm Dynamic programming Greedy algorithm Integer programming Branch and bound / cut Graph algorithms Minimum spanning tree Borůvka Prim Kruskal Shortest path Bellman–Ford SPFA Dijkstra Floyd–Warshall Network flows Dinic Edmonds–Karp Ford–Fulkerson Push–relabel maximum flow Metaheuristics Evolutionary algorithm Hill climbing Local search Parallel metaheuristics Simulated annealing Spiral optimization algorithm Tabu search Software v t e Root-finding algorithms Bracketing (no derivative) Bisection method Regula falsi ITP method Householder Newton's method Halley's method Quasi-Newton Broyden's method Secant method Newton–Krylov method Steffensen's method Hybrid methods Brent's method Ridders' method Polynomial methods Aberth method Bairstow's method Bernoulli's method Durand–Kerner method Graeffe's method Jenkins–Traub algorithm Lehmer–Schur algorithm Laguerre's method Splitting circle method Other methods Fixed-point iteration Inverse quadratic interpolation Muller's method Sidi's generalized secant method Authority control databases National United States Israel Other Yale LUX NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐dwtkf
Cached time: 20250816235703
Cache expiry: 21600
Reduced expiry: true
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.223 seconds
Real time usage: 1.800 seconds
Preprocessor visited node count: 19645/1000000
Revision size: 72636/2097152 bytes
Post‐expand include size: 264122/2097152 bytes
Template argument size: 33300/2097152 bytes
Highest expansion depth: 19/100
Expensive parser function count: 10/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 219222/5000000 bytes
Lua time usage: 0.562/10.000 seconds
Lua memory usage: 9057556/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00% 1086.565      1 -total
 26.01%  282.563      1 Template:Reflist
 19.69%  213.914    162 Template:Math
 11.07%  120.255     21 Template:Cite_book
 10.51%  114.149     11 Template:Cite_journal
  7.94%   86.301     10 Template:Navbox
  7.66%   83.192      1 Template:Short_description
  6.44%   69.975      1 Template:Isaac_Newton
  5.38%   58.406      2 Template:Pagetype
  3.89%   42.318    198 Template:Var Saved in parser cache with key enwiki:pcache:22145:|#|:idhash:canonical and timestamp 20250816235703 and revision id 1306186899. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Newton%27s_method&oldid=1306186899 " Categories : Optimization algorithms and methods Root-finding algorithms Isaac Newton Hidden categories: CS1 Latin-language sources (la) Wikipedia articles needing page number citations from June 2024 Articles with short description Short description is different from Wikidata Use dmy dates from January 2020 Articles lacking reliable references from February 2019 All articles lacking reliable references All articles with unsourced statements Articles with unsourced statements from June 2024 Commons category link is on Wikidata Articles with example Python (programming language) code This page was last edited on 16 August 2025, at 11:33 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Newton's method 42 languages Add topic

