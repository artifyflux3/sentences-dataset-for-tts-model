Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History 2 Terminology Toggle Terminology subsection 2.1 Definition 2.2 Suitability 3 Workload Toggle Workload subsection 3.1 Requirements analysis 3.2 Design 3.3 Construction 3.4 Testing 3.5 Program analysis 3.6 Maintenance 4 Education Toggle Education subsection 4.1 Software engineering degree programs 5 Profession Toggle Profession subsection 5.1 Employment 5.1.1 United States 5.2 Certification 5.3 Impact of globalization 5.4 Prizes 6 Criticism 7 See also Toggle See also subsection 7.1 Study and practice 7.2 Roles 7.3 Professional aspects 8 References Toggle References subsection 8.1 Citations 8.2 Sources 9 Further reading 10 External links Toggle the table of contents Software engineering 83 languages Afrikaans አማርኛ العربية Asturianu Azərbaycanca বাংলা Български Bosanski Català Čeština Cymraeg Dansk Deutsch Ελληνικά Español Esperanto Euskara فارسی Français Gaeilge Gaelg Galego گیلکی 한국어 Hausa हिन्दी Hrvatski Ido Bahasa Indonesia Íslenska Italiano עברית Kiswahili Kurdî ລາວ Latina Latviešu Lietuvių Македонски മലയാളം Bahasa Melayu Mirandés Монгол Nederlands 日本語 Norsk bokmål Norsk nynorsk ଓଡ଼ିଆ Oʻzbekcha / ўзбекча پښتو ភាសាខ្មែរ Piemontèis Polski Português Qaraqalpaqsha Română Runa Simi Русский Scots Shqip සිංහල Simple English سنڌي Slovenčina کوردی Српски / srpski Srpskohrvatski / српскохрватски Sunda Suomi Svenska Tagalog தமிழ் ไทย ትግርኛ Türkçe Українська اردو Tiếng Việt Winaray 吴语 ייִדיש 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikiquote Wikiversity Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Engineering approach to software development Part of a series on Software development Core activities Data modeling Processes Requirements Design Construction Engineering Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DAD DevOps DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TDD TSP UP XP Supporting disciplines Configuration management Deployment management Documentation Project management Quality assurance User experience Practices ATDD BDD CCO CD CI DDD PP SBE Stand-up TDD Tools Build automation Compiler Debugger GUI builder IDE Infrastructure as code Profiler Release automation UML Modeling Standards and bodies of knowledge CMMI IEEE standards IREB ISO 9001 ISO/IEC standards ITIL OMG PMBOK SWEBOK Glossaries Artificial intelligence Computer science Electrical and electronics engineering Outlines Outline of software development v t e Software engineering is a branch of both computer science and engineering focused on designing, developing, testing, and maintaining software applications .

[ 1 ] It involves applying engineering principles and computer programming expertise to develop software systems that meet user needs.

[ 2 ] [ 3 ] [ 4 ] [ 5 ] The terms programmer and coder overlap software engineer , but they imply only the construction aspect of a typical software engineer workload.

[ 6 ] A software engineer applies a software development process , [ 2 ] [ 7 ] which involves defining, implementing , testing , managing , and maintaining software systems, as well as developing the software development process itself.

History [ edit ] Main article: History of software engineering Beginning in the 1960s, software engineering was recognized as a separate field of engineering .

[ 8 ] The development of software engineering was seen as a struggle. Problems included software that was over budget, exceeded deadlines, required extensive debugging and maintenance, and unsuccessfully met the needs of consumers or was never even completed.

In 1968, NATO held the first software engineering conference, where issues related to software were addressed. Guidelines and best practices for the development of software were established.

[ 9 ] The origins of the term software engineering have been attributed to various sources. The term appeared in a list of services offered by companies in the June 1965 issue of "Computers and Automation" [ 10 ] and was used more formally in the August 1966 issue of Communications of the ACM (Volume 9, number 8) in "President's Letter to the ACM Membership" by Anthony A. Oettinger.

[ 11 ] [ 12 ] [ 13 ] It is also associated with the title of a NATO conference in 1968 by Professor Friedrich L. Bauer .

[ 14 ] Margaret Hamilton described the discipline of "software engineering" during the Apollo missions to give what they were doing legitimacy.

[ 15 ] At the time, there was perceived to be a " software crisis ".

[ 16 ] [ 17 ] [ 18 ] The 40th International Conference on Software Engineering (ICSE 2018) celebrates 50 years of "Software Engineering" with the Plenary Sessions' keynotes of Frederick Brooks [ 19 ] and Margaret Hamilton .

[ 20 ] In 1984, the Software Engineering Institute (SEI) was established as a federally funded research and development center headquartered on the campus of Carnegie Mellon University in Pittsburgh, Pennsylvania , United States.

[ 21 ] Watts Humphrey founded the SEI Software Process Program, aimed at understanding and managing the software engineering process.

[ 21 ] The Process Maturity Levels introduced became the Capability Maturity Model Integration for Development (CMMI-DEV), which defined how the US Government evaluates the abilities of a software development team.

Modern, generally accepted best practices for software engineering have been collected by the ISO/IEC JTC 1/SC 7 subcommittee and published as the Software Engineering Body of Knowledge (SWEBOK).

[ 7 ] Software engineering is considered one of the major computing disciplines.

[ 22 ] In modern systems, where concepts such as Edge Computing , Internet of Things and Cyber-physical Systems are prevalent, software is a critical factor. Thus, software engineering is closely related to the Systems Engineering discipline. The Systems Engineering Body of Knowledge claims: Software is prominent in most modern systems architectures and is often the primary means for integrating complex system components. Software engineering and systems engineering are not merely related disciplines; they are intimately intertwined....Good systems engineering is a key factor in enabling good software engineering.

Terminology [ edit ] Definition [ edit ] Notable definitions of software engineering include: "The systematic application of scientific and technological knowledge, methods, and experience to the design, implementation, testing, and documentation of software."—The Bureau of Labor Statistics— IEEE Systems and software engineering – Vocabulary [ 23 ] "The application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software."— IEEE Standard Glossary of Software Engineering Terminology [ 24 ] "An engineering discipline that is concerned with all aspects of software production."— Ian Sommerville [ 25 ] "The establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines."— Fritz Bauer [ 26 ] "A branch of computer science that deals with the design, implementation, and maintenance of complex computer programs ."— Merriam-Webster [ 27 ] " 'Software engineering' encompasses not just the act of writing code, but all of the tools and processes an organization uses to build and maintain that code over time. [...] Software engineering can be thought of as 'programming integrated over time.

' "—Software Engineering at Google [ 28 ] The term has also been used less formally: as the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis [ 29 ] as the broad term for all aspects of the practice of computer programming, as opposed to the theory of computer programming, which is formally studied as a sub-discipline of computer science [ 30 ] as the term embodying the advocacy of a specific approach to computer programming, one that urges that it be treated as an engineering discipline rather than an art or a craft, and advocates the codification of recommended practices [ 31 ] Suitability [ edit ] Individual commentators have disagreed sharply on how to define software engineering or its legitimacy as an engineering discipline.

David Parnas has said that software engineering is, in fact, a form of engineering.

[ 32 ] [ 33 ] Steve McConnell has said that it is not, but that it should be.

[ 34 ] Donald Knuth has said that programming is an art and a science.

[ 35 ] Edsger W. Dijkstra claimed that the terms software engineering and software engineer have been misused in the United States.

[ 36 ] Workload [ edit ] Main article: Outline of software engineering Requirements analysis [ edit ] Main article: Software requirements Requirements engineering is about elicitation, analysis, specification, and validation of requirements for software . Software requirements can be functional , non-functional or domain.

Functional requirements describe expected behaviors (i.e. outputs). Non-functional requirements specify issues like portability, security, maintainability, reliability, scalability, performance, reusability, and flexibility. They are classified into the following types: interface constraints, performance constraints (such as response time, security, storage space, etc.), operating constraints, life cycle constraints (maintainability, portability, etc.), and economic constraints. Knowledge of how the system or software works is needed when it comes to specifying non-functional requirements. Domain requirements have to do with the characteristic of a certain category or domain of projects.

[ 37 ] Design [ edit ] Main article: Software design Software design is the process of making high-level plans for the software. Design is sometimes divided into levels: Interface design plans the interaction between a system and its environment as well as the inner workings of the system.

Architectural design plans the major components of a system, including their responsibilities, properties, and interfaces between them.

Detailed design plans internal elements, including their properties, relationships, algorithms and data structures .

[ 38 ] Construction [ edit ] Main article: Software construction Software construction typically involves programming (a.k.a. coding), unit testing , integration testing , and debugging so as to implement the design.

[ 2 ] [ 7 ] "Software testing is related to, but different from, ... debugging".

[ 7 ] Testing [ edit ] Main article: Software testing Software testing is an empirical, technical investigation conducted to provide stakeholders with information about the quality of the software under test.

[ 2 ] [ 7 ] When described separately from construction, testing typically is performed by test engineers or quality assurance instead of the programmers who wrote it.  It is performed at the system level and is considered an aspect of software quality .

Program analysis [ edit ] Main article: Program analysis Program analysis is the process of analyzing computer programs with respect to an aspect such as performance , robustness , and security .

Maintenance [ edit ] Main article: Software maintenance Software maintenance refers to supporting the software after release. It may include but is not limited to: error correction , optimization, deletion of unused and discarded features, and enhancement of existing features.

[ 2 ] [ 7 ] Usually, maintenance takes up 40% to 80% of project cost.

[ 39 ] Education [ edit ] The examples and perspective in this article may not represent a worldwide view of the subject .

You may improve this article , discuss the issue on the talk page , or create a new article , as appropriate.

( November 2010 ) ( Learn how and when to remove this message ) See also: List of software programming journals Knowledge of computer programming is a prerequisite for becoming a software engineer. In 2004, the IEEE Computer Society produced the SWEBOK , which has been published as ISO/IEC Technical Report 1979:2005, describing the body of knowledge that they recommend to be mastered by a graduate software engineer with four years of experience.

[ 40 ] Many software engineers enter the profession by obtaining a university degree or training at a vocational school. One standard international curriculum for undergraduate software engineering degrees was defined by the Joint Task Force on Computing Curricula of the IEEE Computer Society and the Association for Computing Machinery , and updated in 2014.

[ 22 ] A number of universities have Software Engineering degree programs; as of 2010 [update] , there were 244 Campus Bachelor of Software Engineering programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States.

In addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology. These internships can introduce the student to real-world tasks that typical software engineers encounter every day. Similar experience can be gained through military service in software engineering.

Software engineering degree programs [ edit ] A small but growing number of practitioners have software engineering degrees. In 1987, the Department of Computing at Imperial College London introduced the first three-year software engineering bachelor's degree in the world; in the following year, the University of Sheffield established a similar program.

[ 41 ] In 1996, the Rochester Institute of Technology established the first software engineering bachelor's degree program in the United States; however, it did not obtain ABET accreditation until 2003, the same year as Rice University , Clarkson University , Milwaukee School of Engineering , and Mississippi State University .

[ 42 ] Since then, software engineering undergraduate degrees have been established at many universities. A standard international curriculum for undergraduate software engineering degrees, SE2004 , was defined by a steering committee between 2001 and 2004 with funding from the Association for Computing Machinery and the IEEE Computer Society . As of 2004 [update] , about 50 universities in the U.S. offer software engineering degrees, which teach both computer science and engineering principles and practices. The first software engineering master's degree was established at Seattle University in 1979. Since then, graduate software engineering degrees have been made available from many more universities. Likewise in Canada, the Canadian Engineering Accreditation Board (CEAB) of the Canadian Council of Professional Engineers has recognized several software engineering programs.

Additionally, many online advanced degrees in Software Engineering have appeared such as the Master of Science in Software Engineering (MSE) degree offered through the Computer Science and Engineering Department at California State University, Fullerton .

Steve McConnell opines that because most universities teach computer science rather than software engineering, there is a shortage of true software engineers.

[ 43 ] ETS (École de technologie supérieure) University and UQAM (Université du Québec à Montréal) were mandated by IEEE to develop the Software Engineering Body of Knowledge ( SWEBOK ), which has become an ISO standard describing the body of knowledge covered by a software engineer.

[ 7 ] Profession [ edit ] Main articles: Software engineering professionalism and Regulation and licensure in engineering Legal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, there is no licensing or legal requirement to assume or use the job title Software Engineer. In some areas of Canada, such as Alberta, British Columbia, Ontario, [ 44 ] and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional (I.S.P.) designation. In Europe, Software Engineers can obtain the European Engineer (EUR ING) professional title. Software Engineers can also become professionally qualified as a Chartered Engineer through the British Computer Society .

In the United States, the NCEES began offering a Professional Engineer exam for Software Engineering in 2013, thereby allowing Software Engineers to be licensed and recognized.

[ 45 ] NCEES ended the exam after April 2019 due to lack of participation.

[ 46 ] Mandatory licensing is currently still largely debated, and perceived as controversial.

[ 47 ] [ 48 ] The IEEE Computer Society and the ACM , the two main US-based professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE's Guide to the Software Engineering Body of Knowledge – 2004 Version , or SWEBOK , defines the field and describes the knowledge the IEEE expects a practicing software engineer to have. The most current version is SWEBOK v4.

[ 7 ] The IEEE also promulgates a "Software Engineering Code of Ethics".

[ 49 ] Employment [ edit ] The examples and perspective in this United States may not represent a worldwide view of the subject .

You may improve this United States , discuss the issue on the talk page , or create a new United States, as appropriate.

( September 2021 ) ( Learn how and when to remove this message ) See also: Software engineering demographics There are an estimated 26.9 million professional software engineers in the world as of 2022, up from 21 million in 2016.

[ 50 ] [ 51 ] Many software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for themselves as freelancers . Some organizations have specialists to perform each of the tasks in the software development process . Other organizations require software engineers to do many or all of them. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Many companies hire interns , often university or college students during a summer break, or externships . Specializations include analysts , architects , developers , testers , technical support , middleware analysts , project managers , software product managers , educators , and researchers .

Most software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008.

[ 52 ] Potential injuries in these occupations are possible because like other workers who spend long periods sitting in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back discomfort, Thrombosis , Obesity , and hand and wrist problems such as carpal tunnel syndrome .

[ 53 ] United States [ edit ] The U. S. Bureau of Labor Statistics (BLS) counted 1,365,500 software developers holding jobs in the U.S.

in 2018.

[ 54 ] Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and many software engineers hold computer science degrees.

[ 55 ] The BLS estimates from 2023 to 2033 that computer software engineering would increase by 17%.

[ 56 ] This is down from the 2022 to 2032 BLS estimate of 25% for software engineering.

[ 56 ] [ 57 ] And, is further down from their 30% 2010 to 2020 BLS estimate.

[ 58 ] Due to this trend, job growth may not be as fast as during the last decade, as jobs that would have gone to computer software engineers in the United States would instead be outsourced to computer software engineers in countries such as India and other foreign countries.

[ 59 ] [ 52 ] In addition, the BLS Job Outlook for Computer Programmers, the U.S. Bureau of Labor Statistics (BLS) Occupational Outlook predicts a decline of -7 percent from 2016 to 2026, a further decline of -9 percent from 2019 to 2029, a decline of -10 percent from 2021 to 2031.

[ 59 ] and then a decline of -11 percent from 2022 to 2032.

[ 59 ] Since computer programming can be done from anywhere in the world, companies sometimes hire programmers in countries where wages are lower.

[ 59 ] [ 60 ] [ 61 ] Furthermore, the ratio of women in many software fields has also been declining over the years as compared to other engineering fields.

[ 62 ] Then there is the additional concern that recent advances in Artificial Intelligence might impact the demand for future generations of Software Engineers.

[ 63 ] [ 64 ] [ 65 ] [ 66 ] [ 67 ] [ 68 ] [ 69 ] However, this trend may change or slow in the future as many current software engineers in the U.S. market flee the profession or age out of the market in the next few decades.

[ 59 ] Certification [ edit ] The Software Engineering Institute offers certifications on specific topics like security , process improvement and software architecture .

[ 70 ] IBM , Microsoft and other companies also sponsor their own certification examinations. Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies.

[ 71 ] These certification programs are tailored to the institutions that would employ people who use these technologies.

Broader certification of general software engineering skills is available through various professional societies. As of 2006 [update] , the IEEE had certified over 575 software professionals as a Certified Software Development Professional (CSDP).

[ 72 ] In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA).

[ 73 ] The ACM and the IEEE Computer Society together examined the possibility of licensing of software engineers as Professional Engineers in the 1990s,
but eventually decided that such licensing was inappropriate for the professional industrial practice of software engineering.

[ 47 ] John C. Knight and Nancy G. Leveson presented a more balanced analysis of the licensing issue in 2002.

[ 48 ] In the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP) , available to fully qualified members ( MBCS ). Software engineers may be eligible for membership of the British Computer Society or Institution of Engineering and Technology and so qualify to be considered for Chartered Engineer status through either of those institutions. In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP) .

[ 74 ] In Ontario, Canada, Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO's ( Professional Engineers Ontario ) Professional Practice Examination (PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng.

[ 75 ] The PEO does not recognize any online or distance education however; and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two. This has sparked controversy and a certification war. It has also held the number of P.Eng holders for the profession exceptionally low. The vast majority of working professionals in the field hold a degree in CS, not SE. Given the difficult certification path for holders of non-SE degrees, most never bother to pursue the license.

Impact of globalization [ edit ] The initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later: China, Russia, and other developing countries. This approach had some flaws, mainly the distance / time zone difference that prevented human interaction between clients and developers and the massive job transfer. This had a negative impact on many aspects of the software engineering profession. For example, some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers .

[ 76 ] Additionally, the glut of high-tech workers  has lead to a wider adoption of the 996 working hour system and ‘007’ schedules as the expected work load.

[ 77 ] Although statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected.

[ 78 ] Nevertheless, the ability to smartly leverage offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations.

[ 79 ] When North Americans leave work, Asians are just arriving to work. When Asians are leaving work, Europeans arrive to work. This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or disrupting a key human resource, sleep patterns.

While global outsourcing has several advantages, global – and generally distributed – development can run into serious difficulties resulting from the distance between developers. This is due to the key elements of this type of distance that have been identified as geographical, temporal, cultural and communication (that includes the use of different languages and dialects of English in different locations).

[ 80 ] Research has been carried out in the area of global software development over the last 15 years and an extensive body of relevant work published that highlights the benefits and problems associated with the complex activity. As with other aspects of software engineering research is ongoing in this and related areas.

Prizes [ edit ] There are various prizes in the field of software engineering: ACM-AAAI Allen Newell Award - USA. Awarded to career contributions that have breadth within computer science, or that bridge computer science and other disciplines.

BCS Lovelace Medal . Awarded to individuals who have made outstanding contributions to the understanding or advancement of computing.

ACM SIGSOFT Outstanding Research Award, selected for individual(s) who have made " significant and lasting research contributions to the theory or practice of software engineering." [ 81 ] More ACM SIGSOFT Awards.

[ 82 ] The Codie award , a yearly award issued by the Software and Information Industry Association for excellence in software development within the software industry.

Harlan Mills Award for "contributions to the theory and practice of the information sciences, focused on software engineering".

ICSE Most Influential Paper Award.

[ 83 ] Jolt Award , also for the software industry.

Stevens Award given in memory of Wayne Stevens.

Criticism [ edit ] Some call for licensing, certification and codified bodies of knowledge as mechanisms for spreading the engineering knowledge and maturing the field.

[ 84 ] Some claim that the concept of software engineering is so new that it is rarely understood, and it is widely misinterpreted, including in software engineering textbooks, papers, and among the communities of programmers and crafters.

[ 85 ] Some claim that a core issue with software engineering is that its approaches are not empirical enough because a real-world validation of approaches is usually absent, or very limited and hence software engineering is often misinterpreted as feasible only in a "theoretical environment." [ 85 ] Edsger Dijkstra , a founder of many of the concepts in software development today, rejected the idea of "software engineering" up until his death in 2002, arguing that those terms were poor analogies for what he called the "radical novelty" of computer science : A number of these phenomena have been bundled under the name "Software Engineering". As economics is known as "The Miserable Science", software engineering should be known as "The Doomed Discipline", doomed because it cannot even approach its goal since its goal is self-contradictory. Software engineering, of course, presents itself as another worthy cause, but that is eyewash: if you carefully read its literature and analyse what its devotees actually do, you will discover that software engineering has accepted as its charter "How to program if you cannot." [ 86 ] See also [ edit ] Wikimedia Commons has media related to Software engineers .

Study and practice [ edit ] Computer science Data engineering Software craftsmanship Software development Release engineering Roles [ edit ] Programmer Systems analyst Systems architect Professional aspects [ edit ] Bachelor of Science in Information Technology Bachelor of Software Engineering List of software engineering conferences List of computer science journals (including software engineering journals) Software Engineering Institute References [ edit ] Citations [ edit ] ^ "What is Software Engineering?" .

Michigan Technological University . Retrieved 2025-06-29 .

^ a b c d e Abran et al. 2004 harvnb error: no target: CITEREFAbranMooreBourqueDupuis2004 ( help ) ^ ACM (2007).

"Computing Degrees & Careers" . ACM. Archived from the original on 2011-06-17 . Retrieved 2010-11-23 .

^ Laplante, Phillip (2007).

What Every Engineer Should Know about Software Engineering . Boca Raton: CRC.

ISBN 978-0-8493-7228-5 . Retrieved 2011-01-21 .

^ "What Does a Software Engineer Do?" .

coursera . Oct 31, 2022.

^ Bogost, Ian (5 November 2015).

"Programmers: Stop Calling Yourselves Engineers" .

The Atlantic .

^ a b c d e f g h Bourque, Pierre; Fairley, Richard E. (Dick), eds. (2014).

Guide to the Software Engineering Body of Knowledge Version 3.0 (SWEBOK) .

IEEE Computer Society .

^ Farone, Alison (2020-08-04).

"The history of coding and software engineering" .

Hack Reactor . Retrieved 2025-06-29 .

^ "The history of coding and software engineering" .

www.hackreactor.com . Archived from the original on 2022-03-24 . Retrieved 2021-05-06 .

^ "Computers and Automation: The Computer Directory and Buyers' Guide, 1965" (PDF) .

bitsavers.org . Retrieved 15 July 2023 .

^ "President's Letter to the ACM Membership" (PDF) . Retrieved 27 February 2025 .

We must recognize ourselves -- not necessarily all of us, and not necessarily any one of us all the time -- as members of an engineering profession, be it hardware engineering or software engineering, a profession without artificial and irrelevant boundaries like that between "scientific" and "business" applications.

^ Oettinger, A. G. (1966).

"President's Letter to the ACM Membership" .

Commun. ACM .

9 (8). Association for Computing Machinery: 545– 546.

doi : 10.1145/365758.3291288 .

ISSN 0001-0782 .

S2CID 53432801 .

^ "The origin of "software engineering" " . 4 April 2013 . Retrieved 17 November 2017 .

^ Randall, Brian.

"The 1968/69 NATO Software Engineering Reports" . Retrieved 17 November 2017 .

^ Lori Cameron (October 5, 2008).

"Margaret Hamilton: First Software Engineer" .

Tech News .

IEEE Computer Society .

^ Ian Sommerville (March 24, 2015).

Software Engineering (10th ed.). Pearson Education Limited.

ISBN 978-0-13-394303-0 .

^ Peter, Naur; Randell, Brian (7–11 October 1968).

Software Engineering: Report of a conference sponsored by the NATO Science Committee (PDF) . Garmisch, Germany: Scientific Affairs Division, NATO . Retrieved 2008-12-26 .

^ Randell, Brian (10 August 2001).

"The 1968/69 NATO Software Engineering Reports" .

Brian Randell's University Homepage . The School of the Computer Sciences, Newcastle University . Retrieved 2008-10-11 .

The idea for the first NATO Software Engineering Conference, and in particular that of adopting the then practically unknown term "software engineering" as its (deliberately provocative) title, I believe came originally from Professor Fritz Bauer .

^ 2018 International Conference on Software Engineering celebrating its 40th anniversary, and 50 years of Software engineering (31 May 2018).

"ICSE 2018 – Plenary Sessions – Fred Brooks" .

YouTube . Retrieved 9 August 2018 .

{{ cite web }} :  CS1 maint: numeric names: authors list ( link ) ^ 2018 International Conference on Software Engineering celebrating its 40th anniversary, and 50 years of Software engineering (31 May 2018).

"ICSE 2018 – Plenary Sessions – Margaret Hamilton" .

YouTube . Retrieved 9 August 2018 .

{{ cite web }} :  CS1 maint: numeric names: authors list ( link ) ^ a b Linda Hutz Pesante (January 1, 2003). Anthony Ralston; Edwin D. Reilly (eds.).

"Software engineering institute (SEI)" .

Encyclopedia of Computer Science .

Chichester , West Sussex, UK: John Wiley and Sons Ltd.

: 1611– 1613.

ISBN 978-0-470-86412-8 .

(1) The institute was competitively awarded to Carnegie Mellon in December 1984 by the US Department of Defense (DoD) to improve the state of the practice of software engineering. ... (2) the SEI moves mature solutions of proven value into widespread use; examples include the Capability Maturity Model (CMM) ...

^ a b Joint Task Force on Computing Curricula, IEEE Computer Society , Association for Computing Machinery (23 February 2015).

Software Engineering 2014: Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering (PDF) . A Volume of the Computing Curricula Series.

IEEE Computer Society and Association for Computing Machinery .

{{ cite book }} :  CS1 maint: multiple names: authors list ( link ) ^ Systems and software engineering – Vocabulary , ISO / IEC / IEEE std 24765:2010(E), 2010.

^ IEEE Standard Glossary of Software Engineering Terminology , IEEE std 610.12-1990, 1990.

^ Sommerville, Ian (2007) [1982].

"1.1.2 What is software engineering?" .

Software Engineering (8th ed.). Harlow, England: Pearson Education. p. 7.

ISBN 978-0-321-31379-9 .

Software engineering is an engineering discipline that is concerned with all aspects of software production from the early stages of system specification to maintaining the system after it has gone into use. In this definition, there are two key phrases: 1.

Engineering discipline Engineers make things work. They apply theories, methods and tools where these are appropriate [. . .] Engineers also recognize that they must work to organizational and financial constraints. [. . .] 2.

All aspects of software production Software engineering is not just concerned with the technical processes of software development but also with activities such as software project management and with the development of tools, methods and theories to support software production.

^ "Software Engineering".

Information Processing .

71 : 530– 538.

^ "Definition of SOFTWARE ENGINEERING" .

www.merriam-webster.com . Retrieved 2019-11-25 .

^ Winters, Titus; Manshrec, Tom; Wright, Hyrum (2020). "Preface, Programming Over Time".

Software Engineering at Google . O'Reilly Media, Inc. pp.

xix– xx, 6– 7.

ISBN 978-1-492-08279-8 .

We propose that "software engineering" encompasses not just the act of writing code, but all of the tools and processes an organization uses to build and maintain that code over time. What practices can a software organization introduce that will best keep its code valuable over the long term? How can engineers make a codebase more sustainable and the software engineering discipline itself more rigorous?

^ Akram I. Salah (2002-04-05).

"Engineering an Academic Program in Software Engineering" (PDF) . 35th Annual Midwest Instruction and Computing Symposium . Retrieved 2006-09-13 .

: "For some, software engineering is just a glorified name for programming. If you are a programmer, you might put 'software engineer' on your business card—never 'programmer' though." ^ Mills, Harlan D., J. R. Newman, and C. B. Engle, Jr., "An Undergraduate Curriculum in Software Engineering," in Deimel, Lionel E. (1990).

Software Engineering Education: SEI Conference 1990, Pittsburgh, Pennsylvania, USA, April 2–3,..

. Springer.

ISBN 978-0-387-97274-9 .

, p. 26 : "As a practical matter, we regard software engineering as the necessary preparation for the practicing, software development and maintenance professional. The Computer Scientist is preparing for further theoretical studies..." ^ Barbara Kitchevnham; David Budgen; Pearl Brereton; Stephen Linkman (2005). "Realising evidence-based software engineering".

ACM SIGSOFT Software Engineering Notes .

30 (4): 1– 3.

doi : 10.1145/1082983.1083175 .

We believe that software engineering can only advance as an engineering discipline by moving away from its current dependence upon advocacy and analysis, ...

^ Parnas, David L.

(1998).

"Software Engineering Programmes are not Computer Science Programmes" .

Annals of Software Engineering .

6 : 19– 37.

doi : 10.1023/A:1018949113292 .

S2CID 35786237 .

, p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, {Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering,....}." ^ Parnas, David L. (1998).

"Software Engineering Programmes are not Computer Science Programmes" .

Annals of Software Engineering .

6 : 19– 37.

doi : 10.1023/A:1018949113292 .

S2CID 35786237 .

, p. 20: "This paper argues that the introduction of accredited professional programs in software engineering, programmes that are modelled on programmes in traditional engineering disciplines will help to increase both the quality and quantity of graduates who are well prepared, by their education, to develop trustworthy software products." ^ McConnell, Steve (August 2003).

Professional Software Development: Shorter Schedules, Better Projects, Superior Products, Enhanced Careers . Boston, MA: Addison-Wesley.

ISBN 0-321-19367-9 .

, p. 39: "In my opinion, the answer to that question is clear: Professional software development should be engineering. Is it? No. But should it be? Unquestionably, yes. " ^ Knuth, Donald (1974).

"Computer Programming as an Art" (PDF) .

Communications of the ACM .

17 (12): 667– 673.

doi : 10.1145/361604.361612 .

S2CID 207685720 .

Transcript of the 1974 Turing Award lecture.

^ Dijkstra, Edsger W ; transcribed by Mario Béland (November 23, 2004) [First published December 3, 1993].

"There is still a war going on (manuscript Austin, 3 December 1993)" .

E. W. Dijkstra Archive . The University of Texas at Austin, Department of Computer Sciences . Retrieved February 17, 2007 .

When the term was coined in 1968 by F.L. Bauer of the Technological University of Munich, I welcomed it. [. . .] I interpreted the introduction of the term "software engineering" as an apt reflection of the fact that the design of software systems was an activity par excellence for the mathematical engineer. [. . .]. As soon the term arrived in the USA, it was relieved of all its technical content. It had to be so for in its original meaning it was totally unacceptable [. . .] In the meantime, software engineering has become an almost empty term, as was nicely demonstrated by Data General who overnight promoted all its programmers to the exalted rank of "software engineer"!

^ "Software Engineering | Classification of Software Requirements" .

GeeksforGeeks . 2018-06-19 . Retrieved 2021-05-06 .

^ "Software Engineering | Software Design Process" .

GeeksforGeeks . 2019-05-24 . Retrieved 2021-05-06 .

^ "What is Software Maintenance? Definition of Software Maintenance, Software Maintenance Meaning" .

The Economic Times . Retrieved 2021-05-06 .

^ Alain Abran; James W. Moore; Pierre Bourque; Robert Dupuis; Leonard L. Tripp, eds. (2005) [2004].

"Chapter 1: Introduction to the Guide" .

Guide to the Software Engineering Body of Knowledge .

IEEE Computer Society . Archived from the original on 2016-05-09 . Retrieved 2010-09-13 .

The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience.

^ Cowling, A. J. 1999. The first decade of an undergraduate degree program in software engineering. Ann. Softw. Eng. 6, 1–4 (Apr. 1999), 61–90.

^ "ABET Accredited Engineering Programs" . April 3, 2007. Archived from the original on June 19, 2010 . Retrieved April 3, 2007 .

^ McConnell, Steve (July 10, 2003).

Professional Software Development: Shorter Schedules, Higher Quality Products, More Successful Projects, Enhanced Careers .

ISBN 978-0-321-19367-4 .

^ Williams, N.S.W. (19–21 February 2001). "Professional Engineers Ontario's approach to licensing software engineering practitioners".

Software Engineering Education and Training, 2001 Proceedings. 14th Conference on . Charlotte, NC: IEEE . pp.

77– 78.

^ "NCEES Software Engineering Exam Specifications" (PDF) . Archived from the original (PDF) on 2013-08-27 . Retrieved 2012-04-01 .

^ "NCEES discontinuing PE Software Engineering exam" . National Council of Examiners for Engineering and Surveying. 13 March 2018 . Retrieved 6 August 2018 .

^ a b Barbara Simons.

"Past ACM Presidents Reflect on Their Service to ACM" . Celebrating 75 Years of Advancing Computing as a Science & Profession.

Association for Computing Machinery . Retrieved May 18, 2024 .

After the panels' recommendations were submitted, ACM Council concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering and would preclude many of the most qualified software engineers from becoming licensed.

^ a b John C. Knight; Nancy G. Leveson (November 1, 2002). "Should software engineers be licensed?".

Communications of the ACM .

45 (11): 87– 90.

doi : 10.1145/581571.581601 .

^ " Software Engineering Code of Ethics " (PDF) . Archived from the original (PDF) on 2015-01-23 . Retrieved 2012-03-25 .

^ Labs, Qubit (29 November 2022).

"How Many Programmers are there in the World and in the US? [2023]" .

Qubit Labs . Retrieved 7 February 2023 .

^ "Global Developer Population and Demographic Study 2016 V2" .

Evans Data Corporation . Retrieved 19 January 2017 .

^ a b Rosenthal, Rachel (August 4, 2020).

"Tech Companies Want You to Believe America Has a Skills Gap" .

Bloomberg . Retrieved October 8, 2021 .

^ "Computer Software Engineers and Computer Programmers" . Retrieved 2009-12-17 .

^ "Software Developers" .

Occupational Outlook Handbook . U. S. Bureau of labor Statistics. 4 September 2019 . Retrieved 11 December 2019 .

^ "Computing Disciplines and Majors" (PDF) .

Association for Computing Machinery . Retrieved 6 September 2019 .

^ a b "Software Developers: Occupational Outlook Handbook" . U.S. Bureau of Labor Statistics.

^ "Computer Software Engineer" . Bureau of Labor Statistics. March 19, 2010. Archived from the original on July 26, 2013 . Retrieved July 20, 2012 .

^ "Software Developers" . Bureau of Labor Statistics. January 8, 2014 . Retrieved July 21, 2012 .

^ a b c d e "Computer Programmers : Occupational Outlook Handbook: : U.S. Bureau of Labor Statistics" .

Archived from the original on 3 May 2019 . Retrieved 17 January 2017 .

^ "Archive By Publication : Beyond the Numbers: U.S. Bureau of Labor Statistics" .

www.bls.gov .

^ "The Soon-to-Be-Extinct Embedded Software Engineer" .

designnews.com . May 10, 2018.

^ "hp's Developer Portal | HP International Women's Week: Women in Computer Science dropping since 1980s" .

developers.hp.com .

^ "Software engineer jobs in danger due to ChatGPT-like tools? Here's what Google CEO Sundar Pichai has to say" .

Business Today . 2023-04-06 . Retrieved 2023-05-12 .

^ "ChatGPT could make these jobs obsolete" . 2023-01-25 . Retrieved 2023-05-12 .

^ Kay, Grace.

"Software engineers are panicking about being replaced by AI" .

Business Insider . Retrieved 2023-05-12 .

^ Fowler, Gary.

"Council Post: How Will ChatGPT Affect Jobs?" .

Forbes . Retrieved 2023-05-12 .

^ Ito, Aki.

"ChatGPT spells the end of coding as we know it" .

Business Insider . Retrieved 2023-05-12 .

^ Zinkula, Aaron Mok, Jacob.

"ChatGPT may be coming for our jobs. Here are the 10 roles that AI is most likely to replace" .

Business Insider . Retrieved 2023-05-12 .

{{ cite web }} :  CS1 maint: multiple names: authors list ( link ) ^ Cohen, Mikaela (15 April 2023).

"These are the tech jobs most threatened by ChatGPT and A.I." CNBC . Retrieved 2023-05-12 .

^ "SEI certification page" . Sei.cmu.edu . Retrieved 2012-03-25 .

^ Wyrostek, Warren (March 14, 2008).

"The Top 10 Problems with IT Certification in 2008" .

InformIT . Retrieved 2009-03-03 .

^ IEEE Computer Society .

"2006 IEEE computer society report to the IFIP General Assembly" (PDF) . Retrieved 2007-04-10 .

^ IEEE.

"CSDA" . Retrieved 2010-04-20 .

^ Canadian Information Processing Society.

"I.S.P. Designation" . Retrieved 2007-03-15 .

^ "Professional Engineers Ontario: Welcome to PEO's website" . Peo.on.ca . Retrieved 2012-03-25 .

^ Thibodaux, Patrick (2006-05-05).

"As outsourcing gathers steam, computer science interest wanes" . Computerworld.com . Retrieved 2016-12-06 .

^ https://www.marketplace.org/episode/2025/08/14/work-weeks-are-getting-more-intense-for-ai-startups ^ Robert Mullins (March 13, 2007).

"Software developer growth slows in North America: Study shows Asia will lead in software developer jobs by 2010" .

InfoWorld . Software Development.

^ "Gartner Magic Quadrant" (PDF) . Cognizant.com. Archived from the original (PDF) on 2008-09-20 . Retrieved 2012-03-25 .

^ Casey, Valentine (2010-08-20).

"Virtual software team project management" .

Journal of the Brazilian Computer Society .

16 (2): 83– 96.

doi : 10.1007/s13173-010-0013-3 .

S2CID 14383734 .

^ "Outstanding Research Award" .

SIGSOFT . Retrieved 1 April 2024 .

^ David Lo ( SIGSOFT Awards Chair); Thomas Zimmermann ( SIGSOFT Chair) (17 January 2024).

"SIGSOFT Awards 2024" .

ACM SIGSOFT Blog . Retrieved 1 April 2024 .

^ "ICSE Most Influential Paper Award" .

ACM SIGSOFT .

^ Donald J. Bagert (April 1999). "Viewpoint: taking the lead in licensing software engineers".

Communications of the ACM .

42 (4): 27– 29.

doi : 10.1145/299157.299163 .

^ a b Barry Boehm (September–October 2002). "Software engineering is a value-based contact sport".

IEEE Software .

19 (5): 95– 96.

doi : 10.1109/MS.2002.1032863 .

^ Dijkstra, E. W.

(1988).

"On the cruelty of really teaching computing science" . Retrieved 2014-01-10 .

Sources [ edit ] Pierre Bourque; Richard E. (Dick) Fairley, eds. (2014).

Guide to the Software Engineering Body of Knowledge Version 3.0 (SWEBOK) .

IEEE Computer Society .

Alain Abran; James W. Moore; Pierre Bourque; Robert Dupuis; Leonard L. Tripp, eds. (2004).

Guide to the Software Engineering Body of Knowledge .

IEEE Computer Society . Archived from the original on 2016-05-09 . Retrieved 2010-09-13 .

Ian Sommerville (March 24, 2015).

Software Engineering (10th ed.). Pearson Education Limited.

ISBN 978-0-13-394303-0 .

Further reading [ edit ] Pierre Bourque; Richard E. (Dick) Fairley, eds. (2014).

Guide to the Software Engineering Body of Knowledge Version 3.0 (SWEBOK) .

IEEE Computer Society .

Roger S. Pressman; Bruce Maxim (January 23, 2014).

Software Engineering: A Practitioner's Approach (8th ed.). McGraw-Hill.

ISBN 978-0-07-802212-8 .

Ian Sommerville (March 24, 2015).

Software Engineering (10th ed.). Pearson Education Limited.

ISBN 978-0-13-394303-0 .

Jalote, Pankaj (2005) [1991].

An Integrated Approach to Software Engineering (3rd ed.). Springer.

ISBN 978-0-387-20881-7 .

Bruegge, Bernd ; Dutoit, Allen (2009).

Object-oriented software engineering : using UML, patterns, and Java (3rd ed.). Prentice Hall.

ISBN 978-0-13-606125-0 .

Oshana, Robert (2019-06-21).

Software engineering for embedded systems : methods, practical techniques, and applications (Second ed.). Kidlington, Oxford, United Kingdom.

ISBN 978-0-12-809433-4 .

External links [ edit ] Wikimedia Commons has media related to Rekayasa Perangkat Lunak .

Wikiversity has learning resources about Software engineering Pierre Bourque; Richard E. Fairley, eds. (2004).

Guide to the Software Engineering Body of Knowledge Version 3.0 (SWEBOK) , https://www.computer.org/web/swebok/v3 .

IEEE Computer Society .

The Open Systems Engineering and Software Development Life Cycle Framework Archived 2010-07-18 at the Wayback Machine OpenSDLC.org the integrated Creative Commons SDLC Software Engineering Institute Carnegie Mellon v t e Software engineering Fields Computer programming DevOps Empirical software engineering Experimental software engineering Formal methods Requirements engineering Search-based software engineering Site reliability engineering Social software engineering Software deployment Software design Software maintenance Software testing Systems analysis Concepts Abstraction CI/CD Compatibility Backward compatibility Compatibility layer Compatibility mode Forward compatibility Software incompatibility Component-based software engineering Data modeling Enterprise architecture Functional specification Modeling language Programming paradigm Software Software archaeology Software architecture Software configuration management Software development process/methodology Software quality Software quality assurance Software system Software verification and validation Structured analysis Essential analysis Orientations Agile Aspect-oriented Object orientation Ontology SDLC Service orientation Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD Scrum Spiral model UP V-model Waterfall model XP Model-driven engineering Round-trip engineering Other CMMI Data model ER model Function model Information model Metamodeling Object model SPICE Systems model View model Languages IDEF SysML UML USL Systems design Requirements Functional requirement Non-functional requirement Capacity Users Compute Memory Storage Network Web traffic Interface API SOAP REST GraphQL gRPC Webhook High-level design Client Load balancing Application server Message queue Integration Vertical Peer-to-peer API gateway pub-sub Event source ETL Batch Stream Orchestration Architectures Monolithic Microservices Event-driven Client–server Serverless Circuit breaker Rate limiting Database Relational NoSQL Graph Key–value LSM tree Time series Column oriented Principles Consistency Reliability CAP theorem Maintainability Configurability Modularity Durability Scalability Stateless Asynchronous I/O Loose coupling Availability Fault tolerance Failover Single point of failure Replication Consistent hashing Circuit breaker Latency Cache CDN Shard Database index Pre-caching Storage Object storage Block storage Observability Logging Metrics Tracing Error rate Queries per second Notification system Anomaly detection Related fields Computer engineering Computer science Information science Project management Risk management Systems engineering Commons Category v t e Systems engineering Subfields Aerospace engineering Biological systems engineering Cognitive systems engineering Configuration management Earth systems engineering and management Electrical engineering Enterprise systems engineering Health systems engineering Performance engineering Reliability engineering Safety engineering Sociocultural Systems Engineering Processes Requirements engineering Functional Analysis and Allocation System integration Verification and validation Design review System of systems engineering Concepts Business process Fault tolerance System System lifecycle V-Model Systems development life cycle Tools Decision-making Function modelling IDEF Optimization Quality function deployment Spare part System dynamics Systems Modeling Language Systems analysis Systems modeling Work breakdown structure People James S. Albus Ruzena Bajcsy Benjamin S. Blanchard Wernher von Braun Kathleen Carley Harold Chestnut Wolt Fabrycky Barbara Grosz Arthur David Hall III Derek Hitchins Robert E. Machol Radhika Nagpal Simon Ramo Joseph Francis Shea Katia Sycara Manuela M. Veloso John N. Warfield Related fields Control engineering Computer engineering Industrial engineering Operations research Project management Quality management Risk management Software engineering Category v t e Engineering History Outline List of engineering branches Specialties and interdisciplinarity Civil Architectural Coastal Construction Earthquake Ecological Environmental Sanitary Geological Geotechnical Hydraulic Mining Municipal/urban Offshore River Structural Transportation Traffic Railway Mechanical Acoustic Aerospace Automotive Biomechanical Energy Manufacturing Marine Naval architecture Railway Sports Thermal Tribology Electrical Broadcast outline Control Electromechanics Electronics Microwaves Optical Power Radio-frequency Signal processing Telecommunications Chemical Biochemical/bioprocess Biological Bioresource Genetic Tissue Chemical reaction Electrochemical Food Molecular Paper Petroleum Process Reaction Materials Biomaterial Ceramics Corrosion Metallurgy Molecular Nanotechnology Polymers Semiconductors Surfaces Computer AI Computer Cybersecurity Data Networks Robotics Software Engineering education Bachelor of Engineering Bachelor of Science Master's degree Doctorate Graduate certificate Engineer's degree Licensed engineer Related topics Engineer Glossaries Engineering A–L M–Z Aerospace engineering Civil engineering Electrical and electronics engineering Mechanical engineering Structural engineering Other Agricultural Audio Automation Biomedical Bioinformatics Clinical Health technology Pharmaceutical Rehabilitation Building services MEP Design Explosives Facilities Fire Forensic Climate Geomatics Graphics Industrial Information Instrumentation Instrumentation and control Logistics Management Mathematics Mechatronics Military Nuclear Ontology Packaging Physics Privacy Safety Security Survey Sustainability Systems Textile Category Commons Wikiproject Portal v t e Computer science Note: This template roughly follows the 2012 ACM Computing Classification System .

Hardware Printed circuit board Peripheral Integrated circuit Very-large-scale integration System on a chip (SoC) Energy consumption (green computing) Electronic design automation Hardware acceleration Processor Size / Form Computer systems organization Computer architecture Computational complexity Dependability Embedded system Real-time computing Cyber-physical system Fault tolerance Wireless sensor network Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Control variable Software development process Requirements analysis Software design Software construction Software deployment Software engineering Software maintenance Programming team Open-source model Theory of computation Model of computation Stochastic Formal language Automata theory Computability theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Theoretical computer science Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security hacker Security services Intrusion detection system Hardware security Network security Information security Application security Human–centered computing Interaction design Augmented reality Virtual reality Social computing Ubiquitous computing Visualization Accessibility Human–computer interaction Mobile computing Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Photograph manipulation Graphics processing unit Image compression Solid modeling Applied computing Quantum computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Differentiable computing Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Category Outline Glossaries Authority control databases International FAST National Germany United States France BnF data Japan Czech Republic 2 Spain Israel Other Yale LUX NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐wfcnd
Cached time: 20250817070233
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.339 seconds
Real time usage: 1.570 seconds
Preprocessor visited node count: 6798/1000000
Revision size: 60235/2097152 bytes
Post‐expand include size: 335903/2097152 bytes
Template argument size: 4073/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 18/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 373004/5000000 bytes
Lua time usage: 0.844/10.000 seconds
Lua memory usage: 9410255/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00% 1269.009      1 -total
 52.14%  661.616      1 Template:Reflist
 29.23%  370.883     57 Template:Cite_web
  8.56%  108.640     18 Template:Cite_book
  7.00%   88.778      1 Template:Software_development_process
  6.82%   86.566      1 Template:Sidebar_with_collapsible_lists
  6.06%   76.894     11 Template:Cite_journal
  5.74%   72.888      7 Template:Navbox
  5.70%   72.390      1 Template:Short_description
  5.58%   70.759      2 Template:Commons_category Saved in parser cache with key enwiki:pcache:27010:|#|:idhash:canonical and timestamp 20250817070233 and revision id 1305972101. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Software_engineering&oldid=1305972101 " Categories : Software engineering Engineering disciplines Hidden categories: Harv and Sfn no-target errors CS1 maint: numeric names: authors list CS1 maint: multiple names: authors list Articles with short description Short description is different from Wikidata Articles with limited geographic scope from November 2010 Articles containing potentially dated statements from 2010 All articles containing potentially dated statements Articles containing potentially dated statements from 2004 Articles with limited geographic scope from September 2021 Articles containing potentially dated statements from 2006 Commons category link is locally defined Commons category link from Wikidata Webarchive template wayback links This page was last edited on 15 August 2025, at 04:55 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Software engineering 83 languages Add topic

