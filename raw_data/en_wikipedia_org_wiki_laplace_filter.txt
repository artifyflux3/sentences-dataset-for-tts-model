Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Definitions Toggle Definitions subsection 1.1 Graph Laplacians 1.2 Mesh Laplacians 1.3 Finite differences 1.4 Finite-element method 1.5 Image processing 1.5.1 Implementation via operator discretization 1.5.2 Implementation via continuous reconstruction 2 Spectrum 3 Theorems 4 Discrete heat equation Toggle Discrete heat equation subsection 4.1 Equilibrium behavior 4.2 Example of the operator on a grid 5 Discrete Schrödinger operator 6 ADE classification 7 See also 8 References 9 External links Toggle the table of contents Discrete Laplace operator 4 languages Català Deutsch Français Русский Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from Laplace filter ) Analog of the continuous Laplace operator For the discrete equivalent of the Laplace transform, see Z-transform .

This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Discrete Laplace operator" – news · newspapers · books · scholar · JSTOR ( December 2007 ) ( Learn how and when to remove this message ) In mathematics, the discrete Laplace operator is an analog of the continuous Laplace operator , defined so that it has meaning on a graph or a discrete grid . For the case of a finite-dimensional graph (having a finite number of edges and vertices), the discrete Laplace operator is more commonly called the Laplacian matrix .

The discrete Laplace operator occurs in physics problems such as the Ising model and loop quantum gravity , as well as in the study of discrete dynamical systems . It is also used in numerical analysis as a stand-in for the continuous Laplace operator. Common applications include image processing , [ 1 ] where it is known as the Laplace filter , and in machine learning for clustering and semi-supervised learning on neighborhood graphs.

Definitions [ edit ] Graph Laplacians [ edit ] There are various definitions of the discrete Laplacian for graphs , differing by sign and scale factor (sometimes one averages over the neighboring vertices, other times one just sums; this makes no difference for a regular graph ). The traditional definition of the graph Laplacian, given below, corresponds to the negative continuous Laplacian on a domain with a free boundary.

Let G = ( V , E ) {\displaystyle G=(V,E)} be a graph with vertices V {\displaystyle V} and edges E {\displaystyle E} . Let ϕ ϕ : : V → → R {\displaystyle \phi \colon V\to R} be a function of the vertices taking values in a ring . Then, the discrete Laplacian Δ Δ {\displaystyle \Delta } acting on ϕ ϕ {\displaystyle \phi } is defined by ( Δ Δ ϕ ϕ ) ( v ) = ∑ ∑ w : d ( w , v ) = 1 [ ϕ ϕ ( v ) − − ϕ ϕ ( w ) ] {\displaystyle (\Delta \phi )(v)=\sum _{w:\,d(w,v)=1}\left[\phi (v)-\phi (w)\right]} where d ( w , v ) {\displaystyle d(w,v)} is the graph distance between vertices w and v. Thus, this sum is over the nearest neighbors of the vertex v . For a graph with a finite number of edges and vertices, this definition is identical to that of the Laplacian matrix . That is, ϕ ϕ {\displaystyle \phi } can be written as a column vector ; and so Δ Δ ϕ ϕ {\displaystyle \Delta \phi } is the product of the column vector and the Laplacian matrix, while ( Δ Δ ϕ ϕ ) ( v ) {\displaystyle (\Delta \phi )(v)} is just the v' th entry of the product vector.

If the graph has weighted edges, that is, a weighting function γ γ : : E → → R {\displaystyle \gamma \colon E\to R} is given, then the definition can be generalized to ( Δ Δ γ γ ϕ ϕ ) ( v ) = ∑ ∑ w : d ( w , v ) = 1 γ γ w v [ ϕ ϕ ( v ) − − ϕ ϕ ( w ) ] {\displaystyle (\Delta _{\gamma }\phi )(v)=\sum _{w:\,d(w,v)=1}\gamma _{wv}\left[\phi (v)-\phi (w)\right]} where γ γ w v {\displaystyle \gamma _{wv}} is the weight value on the edge w v ∈ ∈ E {\displaystyle wv\in E} .

Closely related to the discrete Laplacian is the averaging operator : ( M ϕ ϕ ) ( v ) = 1 deg ⁡ ⁡ v ∑ ∑ w : d ( w , v ) = 1 ϕ ϕ ( w ) .

{\displaystyle (M\phi )(v)={\frac {1}{\deg v}}\sum _{w:\,d(w,v)=1}\phi (w).} Mesh Laplacians [ edit ] In addition to considering the connectivity of nodes and edges in a graph, mesh Laplace operators take into account the geometry of a surface (e.g. the angles at the nodes). For a two-dimensional manifold triangle mesh, the Laplace–Beltrami operator of a scalar function u {\displaystyle u} at a vertex i {\displaystyle i} can be approximated as ( Δ Δ u ) i ≡ ≡ 1 2 A i ∑ ∑ j ( cot ⁡ ⁡ α α i j + cot ⁡ ⁡ β β i j ) ( u j − − u i ) , {\displaystyle (\Delta u)_{i}\equiv {\frac {1}{2A_{i}}}\sum _{j}(\cot \alpha _{ij}+\cot \beta _{ij})(u_{j}-u_{i}),} where the sum is over all adjacent vertices j {\displaystyle j} of i {\displaystyle i} , α α i j {\displaystyle \alpha _{ij}} and β β i j {\displaystyle \beta _{ij}} are the two angles opposite of the edge i j {\displaystyle ij} , and A i {\displaystyle A_{i}} is the vertex area of i {\displaystyle i} ; that is, e.g. one third of the summed areas of triangles incident to i {\displaystyle i} .
It is important to note that the sign of the discrete Laplace–Beltrami operator is conventionally opposite the sign of the ordinary Laplace operator .
The above cotangent formula can be derived using many different methods among which are piecewise linear finite elements , finite volumes , and discrete exterior calculus .

[ 2 ] To facilitate computation, the Laplacian is encoded in a matrix L ∈ ∈ R | V | × × | V | {\displaystyle L\in \mathbb {R} ^{|V|\times |V|}} such that L u = ( Δ Δ u ) i {\displaystyle Lu=(\Delta u)_{i}} . Let C {\displaystyle C} be the (sparse) cotangent matrix with entries C i j = { 1 2 ( cot ⁡ ⁡ α α i j + cot ⁡ ⁡ β β i j ) i j is an edge, that is j ∈ ∈ N ( i ) , − − ∑ ∑ k ∈ ∈ N ( i ) C i k i = j , 0 otherwise {\displaystyle C_{ij}={\begin{cases}{\frac {1}{2}}(\cot \alpha _{ij}+\cot \beta _{ij})&ij{\text{ is an edge, that is }}j\in N(i),\\-\sum \limits _{k\in N(i)}C_{ik}&i=j,\\0&{\text{otherwise}}\end{cases}}} where N ( i ) {\displaystyle N(i)} denotes the neighborhood of i {\displaystyle i} , and let M {\displaystyle M} be the diagonal mass matrix M {\displaystyle M} whose i {\displaystyle i} -th entry along the diagonal is the vertex area A i {\displaystyle A_{i}} . Then L = M − − 1 C {\displaystyle L=M^{-1}C} is the sought discretization of the Laplacian.

A more general overview of mesh operators is given in.

[ 3 ] Finite differences [ edit ] Approximations of the Laplacian , obtained by the finite-difference method or by the finite-element method , can also be called discrete Laplacians .  For example, the Laplacian in two dimensions can be approximated using the five-point stencil finite-difference method, resulting in Δ Δ f ( x , y ) ≈ ≈ f ( x − − h , y ) + f ( x + h , y ) + f ( x , y − − h ) + f ( x , y + h ) − − 4 f ( x , y ) h 2 , {\displaystyle \Delta f(x,y)\approx {\frac {f(x-h,y)+f(x+h,y)+f(x,y-h)+f(x,y+h)-4f(x,y)}{h^{2}}},} where the grid size is h in both dimensions, so that the five-point stencil of a point ( x , y ) in the grid is { ( x − − h , y ) , ( x , y ) , ( x + h , y ) , ( x , y − − h ) , ( x , y + h ) } .

{\displaystyle \{(x-h,y),(x,y),(x+h,y),(x,y-h),(x,y+h)\}.} If the grid size h = 1, the result is the negative discrete Laplacian on the graph, which is the square lattice grid . There are no constraints here on the values of the function f ( x , y ) on the boundary of the lattice grid, thus this is the case of no source at the boundary, that is, a no-flux boundary condition (aka, insulation, or homogeneous Neumann boundary condition ). The control of the state variable at the boundary, as f ( x , y ) given on the boundary of the grid (aka, Dirichlet boundary condition ),  is rarely used for graph Laplacians, but is common in other applications.

Multidimensional discrete Laplacians on rectangular cuboid regular grids have very special properties, e.g., they are Kronecker sums of one-dimensional discrete Laplacians, see Kronecker sum of discrete Laplacians , in which case all its eigenvalues and eigenvectors can be explicitly calculated.

Finite-element method [ edit ] In this approach, the domain is discretized into smaller elements, often triangles or tetrahedra, but other elements such as rectangles or cuboids are possible. The solution space is then approximated using so called form-functions of a pre-defined degree. The differential equation containing the Laplace operator is then transformed into a variational formulation, and a system of equations is constructed (linear or eigenvalue problems). The resulting matrices are usually very sparse and can be solved with iterative methods.

Image processing [ edit ] Discrete Laplace operator is often used in image processing e.g. in edge detection and motion estimation applications.

[ 4 ] The discrete Laplacian is defined as the sum of the second derivatives and calculated as sum of differences over the nearest neighbours of the central pixel. Since derivative filters are often sensitive to noise in an image, the Laplace operator is often preceded by a smoothing filter (such as a Gaussian filter) in order to remove the noise before calculating the derivative. The smoothing filter and Laplace filter are often combined into a single filter.

[ 5 ] Implementation via operator discretization [ edit ] For one-, two- and three-dimensional signals, the discrete Laplacian can be given as convolution with the following kernels: 1D filter: D → → x 2 = [ 1 − − 2 1 ] {\displaystyle {\vec {D}}_{x}^{2}={\begin{bmatrix}1&-2&1\end{bmatrix}}} , 2D filter: D x y 2 = [ 0 1 0 1 − − 4 1 0 1 0 ] {\displaystyle \mathbf {D} _{xy}^{2}={\begin{bmatrix}0&1&0\\1&-4&1\\0&1&0\end{bmatrix}}} .

D x y 2 {\displaystyle \mathbf {D} _{xy}^{2}} corresponds to the ( Five-point stencil ) finite-difference formula seen previously. It is stable for very smoothly varying fields, but for equations with rapidly varying solutions a more stable and isotropic form of the Laplacian operator is required, [ 6 ] such as the nine-point stencil , which includes the diagonals: 2D filter: D x y 2 = [ 0.25 0.5 0.25 0.5 − − 3 0.5 0.25 0.5 0.25 ] {\displaystyle \mathbf {D} _{xy}^{2}={\begin{bmatrix}0.25&0.5&0.25\\0.5&-3&0.5\\0.25&0.5&0.25\end{bmatrix}}} , 3D filter: D x y z 2 {\displaystyle \mathbf {D} _{xyz}^{2}} using seven-point stencil is given by: first plane = [ 0 0 0 0 1 0 0 0 0 ] {\displaystyle {\begin{bmatrix}0&0&0\\0&1&0\\0&0&0\end{bmatrix}}} ; second plane = [ 0 1 0 1 − − 6 1 0 1 0 ] {\displaystyle {\begin{bmatrix}0&1&0\\1&-6&1\\0&1&0\end{bmatrix}}} ; third plane = [ 0 0 0 0 1 0 0 0 0 ] {\displaystyle {\begin{bmatrix}0&0&0\\0&1&0\\0&0&0\end{bmatrix}}} .

and using 27-point stencil by: [ 7 ] first plane = 1 26 [ 2 3 2 3 6 3 2 3 2 ] {\displaystyle {\frac {1}{26}}{\begin{bmatrix}2&3&2\\3&6&3\\2&3&2\end{bmatrix}}} ; second plane = 1 26 [ 3 6 3 6 − − 88 6 3 6 3 ] {\displaystyle {\frac {1}{26}}{\begin{bmatrix}3&6&3\\6&-88&6\\3&6&3\end{bmatrix}}} ; third plane = 1 26 [ 2 3 2 3 6 3 2 3 2 ] {\displaystyle {\frac {1}{26}}{\begin{bmatrix}2&3&2\\3&6&3\\2&3&2\end{bmatrix}}} .

n D filter : For the element a x 1 , x 2 , … … , x n {\displaystyle a_{x_{1},x_{2},\dots ,x_{n}}} of the kernel D x 1 , x 2 , … … , x n 2 , {\displaystyle \mathbf {D} _{x_{1},x_{2},\dots ,x_{n}}^{2},} a x 1 , x 2 , … … , x n = { − − 2 n if s = n , 1 if s = n − − 1 , 0 otherwise, {\displaystyle a_{x_{1},x_{2},\dots ,x_{n}}=\left\{{\begin{array}{ll}-2n&{\text{if }}s=n,\\1&{\text{if }}s=n-1,\\0&{\text{otherwise,}}\end{array}}\right.} where x i is the position (either −1 , 0 or 1 ) of the element in the kernel in the i -th direction, and s is the number of directions i for which x i = 0 .

Note that the n D version, which is based on the graph generalization of the Laplacian, assumes all neighbors to be at an equal distance, and hence leads to the following 2D filter with diagonals included, rather than the version above: 2D filter: D x y 2 = [ 1 1 1 1 − − 8 1 1 1 1 ] .

{\displaystyle \mathbf {D} _{xy}^{2}={\begin{bmatrix}1&1&1\\1&-8&1\\1&1&1\end{bmatrix}}.} These kernels are deduced by using discrete differential quotients.

It can be shown [ 8 ] [ 9 ] that the following discrete approximation of the two-dimensional Laplacian operator as a convex combination of difference operators ∇ ∇ γ γ 2 = ( 1 − − γ γ ) ∇ ∇ 5 2 + γ γ ∇ ∇ × × 2 = ( 1 − − γ γ ) [ 0 1 0 1 − − 4 1 0 1 0 ] + γ γ [ 1 / 2 0 1 / 2 0 − − 2 0 1 / 2 0 1 / 2 ] {\displaystyle \nabla _{\gamma }^{2}=(1-\gamma )\nabla _{5}^{2}+\gamma \nabla _{\times }^{2}=(1-\gamma ){\begin{bmatrix}0&1&0\\1&-4&1\\0&1&0\end{bmatrix}}+\gamma {\begin{bmatrix}1/2&0&1/2\\0&-2&0\\1/2&0&1/2\end{bmatrix}}} for γ ∈ [0, 1] is compatible with discrete scale-space properties, where specifically the value γ = 1/3 gives the best approximation of rotational symmetry.

[ 8 ] [ 9 ] [ 10 ] Regarding three-dimensional signals, it is shown [ 9 ] that the Laplacian operator can be approximated by the two-parameter family of difference operators ∇ ∇ γ γ 1 , γ γ 2 2 = ( 1 − − γ γ 1 − − γ γ 2 ) ∇ ∇ 7 2 + γ γ 1 ∇ ∇ + 3 2 + γ γ 2 ∇ ∇ × × 3 2 ) , {\displaystyle \nabla _{\gamma _{1},\gamma _{2}}^{2}=(1-\gamma _{1}-\gamma _{2})\,\nabla _{7}^{2}+\gamma _{1}\,\nabla _{+^{3}}^{2}+\gamma _{2}\,\nabla _{\times ^{3}}^{2}),} where ( ∇ ∇ 7 2 f ) 0 , 0 , 0 = f − − 1 , 0 , 0 + f + 1 , 0 , 0 + f 0 , − − 1 , 0 + f 0 , + 1 , 0 + f 0 , 0 , − − 1 + f 0 , 0 , + 1 − − 6 f 0 , 0 , 0 , {\displaystyle (\nabla _{7}^{2}f)_{0,0,0}=f_{-1,0,0}+f_{+1,0,0}+f_{0,-1,0}+f_{0,+1,0}+f_{0,0,-1}+f_{0,0,+1}-6f_{0,0,0},} ( ∇ ∇ + 3 2 f ) 0 , 0 , 0 = 1 4 ( f − − 1 , − − 1 , 0 + f − − 1 , + 1 , 0 + f + 1 , − − 1 , 0 + f + 1 , + 1 , 0 + f − − 1 , 0 , − − 1 + f − − 1 , 0 , + 1 + f + 1 , 0 , − − 1 + f + 1 , 0 , + 1 + f 0 , − − 1 , − − 1 + f 0 , − − 1 , + 1 + f 0 , + 1 , − − 1 + f 0 , + 1 , + 1 − − 12 f 0 , 0 , 0 ) , {\displaystyle (\nabla _{+^{3}}^{2}f)_{0,0,0}={\frac {1}{4}}(f_{-1,-1,0}+f_{-1,+1,0}+f_{+1,-1,0}+f_{+1,+1,0}+f_{-1,0,-1}+f_{-1,0,+1}+f_{+1,0,-1}+f_{+1,0,+1}+f_{0,-1,-1}+f_{0,-1,+1}+f_{0,+1,-1}+f_{0,+1,+1}-12f_{0,0,0}),} ( ∇ ∇ × × 3 2 f ) 0 , 0 , 0 = 1 4 ( f − − 1 , − − 1 , − − 1 + f − − 1 , − − 1 , + 1 + f − − 1 , + 1 , − − 1 + f − − 1 , + 1 , + 1 + f + 1 , − − 1 , − − 1 + f + 1 , − − 1 , + 1 + f + 1 , + 1 , − − 1 + f + 1 , + 1 , + 1 − − 8 f 0 , 0 , 0 ) .

{\displaystyle (\nabla _{\times ^{3}}^{2}f)_{0,0,0}={\frac {1}{4}}(f_{-1,-1,-1}+f_{-1,-1,+1}+f_{-1,+1,-1}+f_{-1,+1,+1}+f_{+1,-1,-1}+f_{+1,-1,+1}+f_{+1,+1,-1}+f_{+1,+1,+1}-8f_{0,0,0}).} It can be shown by Taylor series analysis that combinations of values of γ γ 1 {\displaystyle \gamma _{1}} and γ γ 2 {\displaystyle \gamma _{2}} for which 3 γ γ 1 + 6 γ γ 2 = 2 {\displaystyle 3\gamma _{1}+6\gamma _{2}=2} give the best approximations of rotational symmetry.

Implementation via continuous reconstruction [ edit ] A discrete signal, comprising images,  can be viewed as a discrete representation of a continuous function f ( r ¯ ¯ ) {\displaystyle f({\bar {r}})} , where the coordinate vector r ¯ ¯ ∈ ∈ R n {\displaystyle {\bar {r}}\in R^{n}} and the value domain is real f ∈ ∈ R {\displaystyle f\in R} .
Derivation operation is therefore directly applicable to the continuous function, f {\displaystyle f} .
In particular any discrete image, with reasonable presumptions on the discretization process, e.g. assuming band limited functions, or wavelets expandable functions, etc. can be reconstructed by means of well-behaving interpolation functions underlying the reconstruction formulation, [ 11 ] f ( r ¯ ¯ ) = ∑ ∑ k ∈ ∈ K f k μ μ k ( r ¯ ¯ ) {\displaystyle f({\bar {r}})=\sum _{k\in K}f_{k}\mu _{k}({\bar {r}})} where f k ∈ ∈ R {\displaystyle f_{k}\in R} are discrete representations of f {\displaystyle f} on grid K {\displaystyle K} and μ μ k {\displaystyle \mu _{k}} are interpolation functions specific to the grid K {\displaystyle K} . On a uniform grid, such as images,  and for bandlimited functions,   interpolation functions are shift invariant amounting to μ μ k ( r ¯ ¯ ) = μ μ ( r ¯ ¯ − − r ¯ ¯ k ) {\displaystyle \mu _{k}({\bar {r}})=\mu ({\bar {r}}-{\bar {r}}_{k})} with μ μ {\displaystyle \mu } being an appropriately dilated sinc function defined in n {\displaystyle n} -dimensions i.e.

r ¯ ¯ = ( x 1 , x 2 .

.

.

x n ) T {\displaystyle {\bar {r}}=(x_{1},x_{2}...x_{n})^{T}} . Other approximations of μ μ {\displaystyle \mu } on uniform grids, are appropriately dilated Gaussian functions in n {\displaystyle n} -dimensions.  Accordingly, the discrete Laplacian becomes a discrete version of the Laplacian  of the continuous f ( r ¯ ¯ ) {\displaystyle f({\bar {r}})} ∇ ∇ 2 f ( r ¯ ¯ k ) = ∑ ∑ k ′ ∈ ∈ K f k ′ ( ∇ ∇ 2 μ μ ( r ¯ ¯ − − r ¯ ¯ k ′ ) ) | r ¯ ¯ = r ¯ ¯ k {\displaystyle \nabla ^{2}f({\bar {r}}_{k})=\sum _{k'\in K}f_{k'}(\nabla ^{2}\mu ({\bar {r}}-{\bar {r}}_{k'}))|_{{\bar {r}}={\bar {r}}_{k}}} which in turn is a convolution with the Laplacian of the interpolation function on the uniform (image) grid K {\displaystyle K} .  
An advantage of using Gaussians as interpolation functions is that they yield linear operators, including Laplacians,  that are free from rotational artifacts of the coordinate frame in which f {\displaystyle f} is represented via f k {\displaystyle f_{k}} , in n {\displaystyle n} -dimensions, and are frequency aware by definition.  A linear operator has not only a limited range in the r ¯ ¯ {\displaystyle {\bar {r}}} domain but also an effective range in the frequency domain (alternatively Gaussian scale space) which can be controlled explicitly via the variance of the Gaussian in a principled manner. The resulting filtering can be implemented by separable filters and decimation (signal processing) / pyramid (image processing) representations for further computational efficiency in n {\displaystyle n} -dimensions. In other words, the discrete Laplacian filter of any size can be generated conveniently as the sampled Laplacian of Gaussian with spatial size befitting the needs of a particular application as controlled by its variance. Monomials which are non-linear operators can also be implemented using a similar reconstruction and approximation approach provided that the signal is sufficiently over-sampled.  Thereby, such non-linear operators e.g.

Structure Tensor , and Generalized Structure Tensor which are used in pattern recognition for their total least-square optimality in orientation estimation, can be realized.

Spectrum [ edit ] The spectrum of the discrete Laplacian on an infinite grid is of key interest; since it is a self-adjoint operator , it has a real spectrum. For the convention Δ Δ = I − − M {\displaystyle \Delta =I-M} on Z {\displaystyle Z} , the spectrum lies within [ 0 , 2 ] {\displaystyle [0,2]} (as the averaging operator has spectral values in [ − − 1 , 1 ] {\displaystyle [-1,1]} ). This may also be seen by applying the Fourier transform. Note that the discrete Laplacian on an infinite grid has purely absolutely continuous spectrum, and therefore, no eigenvalues or eigenfunctions.

Theorems [ edit ] If the graph is an infinite square lattice grid , then this definition of the Laplacian can be shown to correspond to the continuous Laplacian in the limit of an infinitely fine grid.  Thus, for example, on a one-dimensional grid we have ∂ ∂ 2 F ∂ ∂ x 2 = lim ϵ ϵ → → 0 [ F ( x + ϵ ϵ ) − − F ( x ) ] − − [ F ( x ) − − F ( x − − ϵ ϵ ) ] ϵ ϵ 2 .

{\displaystyle {\frac {\partial ^{2}F}{\partial x^{2}}}=\lim _{\epsilon \rightarrow 0}{\frac {[F(x+\epsilon )-F(x)]-[F(x)-F(x-\epsilon )]}{\epsilon ^{2}}}.} This definition of the Laplacian is commonly used in numerical analysis and in image processing . In image processing, it is considered to be a type of digital filter , more specifically an edge filter , called the Laplace filter .

Discrete heat equation [ edit ] Suppose ϕ ϕ {\textstyle \phi } describes a temperature distribution across a graph , where ϕ ϕ i {\textstyle \phi _{i}} is the temperature at vertex i {\textstyle i} . According to Newton's law of cooling , the heat transferred from node i {\textstyle i} to node j {\textstyle j} is proportional to ϕ ϕ i − − ϕ ϕ j {\textstyle \phi _{i}-\phi _{j}} if nodes i {\textstyle i} and j {\textstyle j} are connected (if they are not connected, no heat is transferred). Then, for thermal conductivity k {\textstyle k} , d ϕ ϕ i d t = − − k ∑ ∑ j A i j ( ϕ ϕ i − − ϕ ϕ j ) = − − k ( ϕ ϕ i ∑ ∑ j A i j − − ∑ ∑ j A i j ϕ ϕ j ) = − − k ( ϕ ϕ i deg ⁡ ⁡ ( v i ) − − ∑ ∑ j A i j ϕ ϕ j ) = − − k ∑ ∑ j ( δ δ i j deg ⁡ ⁡ ( v i ) − − A i j ) ϕ ϕ j = − − k ∑ ∑ j ( L i j ) ϕ ϕ j .

{\displaystyle {\begin{aligned}{\frac {d\phi _{i}}{dt}}&=-k\sum _{j}A_{ij}\left(\phi _{i}-\phi _{j}\right)\\&=-k\left(\phi _{i}\sum _{j}A_{ij}-\sum _{j}A_{ij}\phi _{j}\right)\\&=-k\left(\phi _{i}\ \deg(v_{i})-\sum _{j}A_{ij}\phi _{j}\right)\\&=-k\sum _{j}\left(\delta _{ij}\ \deg(v_{i})-A_{ij}\right)\phi _{j}\\&=-k\sum _{j}\left(L_{ij}\right)\phi _{j}.\end{aligned}}} In matrix-vector notation, d ϕ ϕ d t = − − k ( D − − A ) ϕ ϕ = − − k L ϕ ϕ , {\displaystyle {\begin{aligned}{\frac {d\phi }{dt}}&=-k(D-A)\phi \\&=-kL\phi ,\end{aligned}}} which gives d ϕ ϕ d t + k L ϕ ϕ = 0.

{\displaystyle {\frac {d\phi }{dt}}+kL\phi =0.} Notice that this equation takes the same form as the heat equation , where the matrix − L is replacing the Laplacian operator ∇ ∇ 2 {\textstyle \nabla ^{2}} ; hence, the "graph Laplacian".

To find a solution to this differential equation, apply standard techniques for solving a first-order matrix differential equation .  That is, write ϕ ϕ {\textstyle \phi } as a linear combination of eigenvectors v i {\textstyle \mathbf {v} _{i}} of L (so that L v i = λ λ i v i {\textstyle L\mathbf {v} _{i}=\lambda _{i}\mathbf {v} _{i}} ) with time-dependent coefficients, ϕ ϕ ( t ) = ∑ ∑ i c i ( t ) v i .

{\textstyle \phi (t)=\sum _{i}c_{i}(t)\mathbf {v} _{i}.} Plugging into the original expression (because L is a symmetric matrix, its unit-norm eigenvectors v i {\textstyle \mathbf {v} _{i}} are orthogonal): 0 = d ( ∑ ∑ i c i ( t ) v i ) d t + k L ( ∑ ∑ i c i ( t ) v i ) = ∑ ∑ i [ d c i ( t ) d t v i + k c i ( t ) L v i ] = ∑ ∑ i [ d c i ( t ) d t v i + k c i ( t ) λ λ i v i ] ⇒ ⇒ 0 = d c i ( t ) d t + k λ λ i c i ( t ) , {\displaystyle {\begin{aligned}0={}&{\frac {d\left(\sum _{i}c_{i}(t)\mathbf {v} _{i}\right)}{dt}}+kL\left(\sum _{i}c_{i}(t)\mathbf {v} _{i}\right)\\{}={}&\sum _{i}\left[{\frac {dc_{i}(t)}{dt}}\mathbf {v} _{i}+kc_{i}(t)L\mathbf {v} _{i}\right]\\{}={}&\sum _{i}\left[{\frac {dc_{i}(t)}{dt}}\mathbf {v} _{i}+kc_{i}(t)\lambda _{i}\mathbf {v} _{i}\right]\\\Rightarrow 0={}&{\frac {dc_{i}(t)}{dt}}+k\lambda _{i}c_{i}(t),\\\end{aligned}}} whose solution is c i ( t ) = c i ( 0 ) e − − k λ λ i t .

{\displaystyle c_{i}(t)=c_{i}(0)e^{-k\lambda _{i}t}.} As shown before, the eigenvalues λ λ i {\textstyle \lambda _{i}} of L are non-negative, showing that the solution to the diffusion equation approaches an equilibrium, because it only exponentially decays or remains constant. This also shows that given λ λ i {\textstyle \lambda _{i}} and the initial condition c i ( 0 ) {\textstyle c_{i}(0)} , the solution at any time t can be found.

[ 12 ] To find c i ( 0 ) {\textstyle c_{i}(0)} for each i {\textstyle i} in terms of the overall initial condition ϕ ϕ ( 0 ) {\textstyle \phi (0)} , simply project ϕ ϕ ( 0 ) {\textstyle \phi (0)} onto the unit-norm eigenvectors v i {\textstyle \mathbf {v} _{i}} ; c i ( 0 ) = ⟨ ϕ ϕ ( 0 ) , v i ⟩ {\displaystyle c_{i}(0)=\left\langle \phi (0),\mathbf {v} _{i}\right\rangle } .

This approach has been applied to quantitative heat transfer modelling on unstructured grids.

[ 13 ] [ 14 ] In the case of undirected graphs, this works because L {\textstyle L} is symmetric, and by the spectral theorem , its eigenvectors are all orthogonal.  So the projection onto the eigenvectors of L {\textstyle L} is simply an orthogonal coordinate transformation of the initial condition to a set of coordinates which decay exponentially and independently of each other.

Equilibrium behavior [ edit ] To understand lim t → → ∞ ∞ ϕ ϕ ( t ) {\textstyle \lim _{t\to \infty }\phi (t)} , the only terms c i ( t ) = c i ( 0 ) e − − k λ λ i t {\textstyle c_{i}(t)=c_{i}(0)e^{-k\lambda _{i}t}} that remain are those where λ λ i = 0 {\textstyle \lambda _{i}=0} , since lim t → → ∞ ∞ e − − k λ λ i t = { 0 , if λ λ i > 0 1 , if λ λ i = 0 {\displaystyle \lim _{t\to \infty }e^{-k\lambda _{i}t}={\begin{cases}0,&{\text{if}}&\lambda _{i}>0\\1,&{\text{if}}&\lambda _{i}=0\end{cases}}} In other words, the equilibrium state of the system is determined completely by the kernel of L {\textstyle L} .

Since by definition, ∑ ∑ j L i j = 0 {\textstyle \sum _{j}L_{ij}=0} , the vector v 1 {\textstyle \mathbf {v} ^{1}} of all ones is in the kernel. If there are k {\textstyle k} disjoint connected components in the graph, then this vector of all ones can be split into the sum of k {\textstyle k} independent λ λ = 0 {\textstyle \lambda =0} eigenvectors of ones and zeros, where each connected component corresponds to an eigenvector with ones at the elements in the connected component and zeros elsewhere.

The consequence of this is that for a given initial condition ϕ ϕ ( 0 ) {\textstyle \phi (0)} for a graph with N {\textstyle N} vertices lim t → → ∞ ∞ ϕ ϕ ( t ) = ⟨ ϕ ϕ ( 0 ) , v 1 ⟩ v 1 {\displaystyle \lim _{t\to \infty }\phi (t)=\left\langle \phi (0),\mathbf {v^{1}} \right\rangle \mathbf {v^{1}} } where v 1 = 1 N [ 1 , 1 , … … , 1 ] {\displaystyle \mathbf {v^{1}} ={\frac {1}{\sqrt {N}}}[1,1,\ldots ,1]} For each element ϕ ϕ j {\textstyle \phi _{j}} of ϕ ϕ {\textstyle \phi } , i.e. for each vertex j {\textstyle j} in the graph, it can be rewritten as lim t → → ∞ ∞ ϕ ϕ j ( t ) = 1 N ∑ ∑ i = 1 N ϕ ϕ i ( 0 ) {\displaystyle \lim _{t\to \infty }\phi _{j}(t)={\frac {1}{N}}\sum _{i=1}^{N}\phi _{i}(0)} .

In other words, at steady state, the value of ϕ ϕ {\textstyle \phi } converges to the same value at each of the vertices of the graph, which is the average of the initial values at all of the vertices.  Since this is the solution to the heat diffusion equation, this makes perfect sense intuitively.  We expect that neighboring elements in the graph will exchange energy until that energy is spread out evenly throughout all of the elements that are connected to each other.

Example of the operator on a grid [ edit ] This GIF shows the progression of diffusion, as solved by the graph laplacian technique.  A graph is constructed over a grid, where each pixel in the graph is connected to its 8 bordering pixels.  Values in the image then diffuse smoothly to their neighbors over time via these connections.  This particular image starts off with three strong point values which spill over to their neighbors slowly.  The whole system eventually settles out to the same value at equilibrium.

This section shows an example of a function ϕ ϕ {\textstyle \phi } diffusing over time through a graph.  The graph in this example is constructed on a 2D discrete grid, with points on the grid connected to their eight neighbors.  Three initial points are specified to have a positive value, while the rest of the values in the grid are zero.  Over time, the exponential decay acts to distribute the values at these points evenly throughout the entire grid.

The complete Matlab source code that was used to generate this animation is provided below.  It shows the process of specifying initial conditions, projecting these initial conditions onto the eigenvalues of the Laplacian Matrix, and simulating the exponential decay of these projected initial conditions.

N = 20 ; % The number of pixels along a dimension of the image A = zeros ( N , N ); % The image Adj = zeros ( N * N , N * N ); % The adjacency matrix % Use 8 neighbors, and fill in the adjacency matrix dx = [ - 1 , 0 , 1 , - 1 , 1 , - 1 , 0 , 1 ]; dy = [ - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 ]; for x = 1 : N for y = 1 : N index = ( x - 1 ) * N + y ; for ne = 1 : length ( dx ) newx = x + dx ( ne ); newy = y + dy ( ne ); if newx > 0 && newx <= N && newy > 0 && newy <= N index2 = ( newx - 1 ) * N + newy ; Adj ( index , index2 ) = 1 ; end end end end % BELOW IS THE KEY CODE THAT COMPUTES THE SOLUTION TO THE DIFFERENTIAL EQUATION Deg = diag ( sum ( Adj , 2 )); % Compute the degree matrix L = Deg - Adj ; % Compute the laplacian matrix in terms of the degree and adjacency matrices [ V , D ] = eig ( L ); % Compute the eigenvalues/vectors of the laplacian matrix D = diag ( D ); % Initial condition (place a few large positive values around and % make everything else zero) C0 = zeros ( N , N ); C0 ( 2 : 5 , 2 : 5 ) = 5 ; C0 ( 10 : 15 , 10 : 15 ) = 10 ; C0 ( 2 : 5 , 8 : 13 ) = 7 ; C0 = C0 (:); C0V = V '* C0 ; % Transform the initial condition into the coordinate system % of the eigenvectors for t = 0 : 0.05 : 5 % Loop through times and decay each initial component Phi = C0V .* exp ( - D * t ); % Exponential decay for each component Phi = V * Phi ; % Transform from eigenvector coordinate system to original coordinate system Phi = reshape ( Phi , N , N ); % Display the results and write to GIF file imagesc ( Phi ); caxis ([ 0 , 10 ]); title ( sprintf ( 'Diffusion t = %3f' , t )); frame = getframe ( 1 ); im = frame2im ( frame ); [ imind , cm ] = rgb2ind ( im , 256 ); if t == 0 imwrite ( imind , cm , 'out.gif' , 'gif' , 'Loopcount' , inf , 'DelayTime' , 0.1 ); else imwrite ( imind , cm , 'out.gif' , 'gif' , 'WriteMode' , 'append' , 'DelayTime' , 0.1 ); end end Discrete Schrödinger operator [ edit ] Let P : : V → → R {\displaystyle P\colon V\rightarrow R} be a potential function defined on the graph.  Note that P can be considered to be a multiplicative operator acting diagonally on ϕ ϕ {\displaystyle \phi } ( P ϕ ϕ ) ( v ) = P ( v ) ϕ ϕ ( v ) .

{\displaystyle (P\phi )(v)=P(v)\phi (v).} Then H = Δ Δ + P {\displaystyle H=\Delta +P} is the discrete Schrödinger operator , an analog of the continuous Schrödinger operator .

If the number of edges meeting at a vertex is uniformly bounded, and the potential is bounded, then H is bounded and self-adjoint .

The spectral properties of this Hamiltonian can be studied with Stone's theorem ; this is a consequence of the duality between posets and Boolean algebras .

On regular lattices, the operator typically has both traveling-wave as well as Anderson localization solutions, depending on whether the potential is periodic or random.

The Green's function of the discrete Schrödinger operator is given in the resolvent formalism by G ( v , w ; λ λ ) = ⟨ δ δ v | 1 H − − λ λ | δ δ w ⟩ {\displaystyle G(v,w;\lambda )=\left\langle \delta _{v}\left|{\frac {1}{H-\lambda }}\right|\delta _{w}\right\rangle } where δ δ w {\displaystyle \delta _{w}} is understood to be the Kronecker delta function on the graph: δ δ w ( v ) = δ δ w v {\displaystyle \delta _{w}(v)=\delta _{wv}} ; that is, it equals 1 if v = w and 0 otherwise.

For fixed w ∈ ∈ V {\displaystyle w\in V} and λ λ {\displaystyle \lambda } a complex number, the Green's function considered to be a function of v is the unique solution to ( H − − λ λ ) G ( v , w ; λ λ ) = δ δ w ( v ) .

{\displaystyle (H-\lambda )G(v,w;\lambda )=\delta _{w}(v).} ADE classification [ edit ] Further information: ADE classification Certain equations involving the discrete Laplacian only have solutions on the simply-laced Dynkin diagrams (all edges multiplicity 1), and are an example of the ADE classification . Specifically, the only positive solutions to the homogeneous equation: Δ Δ ϕ ϕ = ϕ ϕ , {\displaystyle \Delta \phi =\phi ,} in words, "Twice any label is the sum of the labels on adjacent vertices," are on the extended (affine) ADE Dynkin diagrams, of which there are 2 infinite families (A and D) and 3 exceptions (E). The resulting numbering is unique up to scale, and if the smallest value is set at 1, the other numbers are integers, ranging up to 6.

The ordinary ADE graphs are the only graphs that admit a positive labeling with the following property: Twice any label minus two is the sum of the labels on adjacent vertices.

In terms of the Laplacian, the positive solutions to the inhomogeneous equation: Δ Δ ϕ ϕ = ϕ ϕ − − 2.

{\displaystyle \Delta \phi =\phi -2.} The resulting numbering is unique (scale is specified by the "2"), and consists of integers; for E 8 they range from 58 to 270, and have been observed as early as 1968.

[ 15 ] See also [ edit ] Spectral shape analysis Electrical network Kronecker sum of discrete Laplacians Discrete calculus References [ edit ] ^ Leventhal, Daniel (Autumn 2011).

"Image processing" (PDF) .

University of Washington . Retrieved 2019-12-01 .

^ Crane, K.; de Goes, F.; Desbrun, M.; Schröder, P. (2013).

"Digital geometry processing with discrete exterior calculus" .

ACM SIGGRAPH 2013 Courses . SIGGRAPH '13. Vol. 7. pp.

1– 126.

doi : 10.1145/2504435.2504442 .

^ Reuter, M.; Biasotti, S.; Giorgi, D.; Patane, G.; Spagnuolo, M. (2009). "Discrete Laplace–Beltrami operators for shape analysis and segmentation".

Computers & Graphics .

33 (3): 381–390df.

CiteSeerX 10.1.1.157.757 .

doi : 10.1016/j.cag.2009.03.005 .

^ Forsyth, D. A.; Ponce, J. (2003). "Computer Vision".

Computers & Graphics .

33 (3): 381– 390.

CiteSeerX 10.1.1.157.757 .

doi : 10.1016/j.cag.2009.03.005 .

^ Matthys, Don (Feb 14, 2001).

"LoG Filter" .

Marquette University . Retrieved 2019-12-01 .

^ Provatas, Nikolas; Elder, Ken (2010-10-13).

Phase-Field Methods in Materials Science and Engineering (PDF) . Weinheim, Germany: Wiley-VCH Verlag GmbH & Co. KGaA. p. 219.

doi : 10.1002/9783527631520 .

ISBN 978-3-527-63152-0 .

^ O'Reilly, H.; Beck, Jeffrey M. (2006).

"A Family of Large-Stencil Discrete Laplacian Approximations in Three Dimensions" (PDF) .

International Journal for Numerical Methods in Engineering : 1– 16.

^ a b Lindeberg, T., "Scale-space for discrete signals", PAMI(12), No. 3, March 1990, pp. 234–254.

^ a b c Lindeberg, T., Scale-Space Theory in Computer Vision, Kluwer Academic Publishers, 1994 , ISBN 0-7923-9418-6 .

^ Patra, Michael; Karttunen, Mikko (2006). "Stencils with isotropic discretization error for differential operators".

Numerical Methods for Partial Differential Equations .

22 (4): 936– 953.

doi : 10.1002/num.20129 .

ISSN 0749-159X .

S2CID 123145969 .

^ Bigun, J. (2006).

Vision with Direction . Springer.

doi : 10.1007/b138918 .

ISBN 978-3-540-27322-6 .

^ Newman, Mark (2010).

Networks: An Introduction . Oxford University Press.

ISBN 978-0199206650 .

^ Yavari, R.; Cole, K. D.; Rao, P. K. (2020).

"Computational heat transfer with spectral graph theory: Quantitative verification" .

International Journal of Thermal Sciences .

153 : 106383.

Bibcode : 2020IJTS..15306383C .

doi : 10.1016/j.ijthermalsci.2020.106383 .

^ Cole, K. D.; Riensche, A.; Rao, P. K. (2022).

"Discrete Green's functions and spectral graph theory for computationally efficient thermal modeling" .

International Journal of Heat and Mass Transfer .

183 : 122112.

Bibcode : 2022IJHMT.18322112C .

doi : 10.1016/j.ijheatmasstransfer.2021.122112 .

S2CID 244652819 .

^ Bourbaki, Nicolas (2002) [1968], Groupes et algebres de Lie: Chapters 4–6 , Elements of Mathematics, translated by Pressley, Andrew, Springer, ISBN 978-3-540-69171-6 Sunada, T.

(2008).

"Discrete geometric analysis" .

Analysis on Graphs and Its Applications . Proceedings of Symposia in Pure Mathematics. Vol. 77. American Mathematical Society. pp.

51– 86.

ISBN 978-0-8218-9384-5 .

External links [ edit ] Ollivier, Yann (2004).

"Spectral gap of a graph" . Archived from the original on 2007-05-23.

NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐mt7lw
Cached time: 20250812020020
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.472 seconds
Real time usage: 0.948 seconds
Preprocessor visited node count: 2486/1000000
Revision size: 35011/2097152 bytes
Post‐expand include size: 44268/2097152 bytes
Template argument size: 1444/2097152 bytes
Highest expansion depth: 13/100
Expensive parser function count: 5/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 81910/5000000 bytes
Lua time usage: 0.204/10.000 seconds
Lua memory usage: 7001607/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  543.046      1 -total
 33.76%  183.343      1 Template:Reflist
 14.57%   79.128      3 Template:Cite_web
 13.29%   72.170      1 Template:Short_description
  9.05%   49.150      2 Template:Pagetype
  9.00%   48.860      1 Template:More_citations_needed
  8.29%   45.005      1 Template:Ambox
  6.91%   37.511      6 Template:Cite_journal
  4.47%   24.300      4 Template:Cite_book
  2.87%   15.600      1 Template:For Saved in parser cache with key enwiki:pcache:1394358:|#|:idhash:canonical and timestamp 20250812020020 and revision id 1301854439. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Discrete_Laplace_operator&oldid=1301854439#Image_Processing " Categories : Operator theory Graph theory Numerical differential equations Finite differences Edge detection Geometry processing Hidden categories: Articles with short description Short description matches Wikidata Articles needing additional references from December 2007 All articles needing additional references This page was last edited on 22 July 2025, at 02:52 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Discrete Laplace operator 4 languages Add topic

