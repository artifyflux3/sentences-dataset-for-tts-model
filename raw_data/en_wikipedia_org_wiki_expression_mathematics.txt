Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Elementary mathematics Toggle Elementary mathematics subsection 1.1 Variables and evaluation 1.2 Equivalence 2 Well-defined expressions Toggle Well-defined expressions subsection 2.1 Well-formed 2.2 Well-defined 3 Formal definition 4 Computer science Toggle Computer science subsection 4.1 Computation 4.1.1 Rewriting 4.2 Polynomial evaluation 5 Types of expressions Toggle Types of expressions subsection 5.1 Algebraic expression 5.2 Polynomial expression 5.3 Formal expression 5.4 Lambda calculus 6 History Toggle History subsection 6.1 Early written mathematics 6.2 Syncopated stage 6.3 Symbolic stage and early arithmetic 7 See also 8 Notes 9 References 10 Works Cited Toggle the table of contents Expression (mathematics) 41 languages العربية Български Чӑвашла Čeština Cymraeg Deutsch Eesti Español Esperanto فارسی Français Galego 한국어 हिन्दी Bahasa Indonesia Íslenska Italiano עברית Македонски മലയാളം मराठी Nederlands 日本語 ਪੰਜਾਬੀ Português Română Русский Scots Simple English Slovenčina Slovenščina کوردی Suomi Svenska தமிழ் ไทย Türkçe Українська Tiếng Việt ייִדיש 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Symbolic description of a mathematical object In the equation 7x − 5 = 2, the sides of the equation are expressions.

In mathematics , an expression is a written arrangement of symbols following the context-dependent, syntactic conventions of mathematical notation .  Symbols can denote numbers , variables , operations , and functions .

[ 1 ] Other symbols include punctuation marks and brackets , used for grouping where there is not a well-defined order of operations .

Expressions are commonly distinguished from formulas : expressions denote mathematical objects , whereas formulas are statements about mathematical objects.

[ 2 ] This is analogous to natural language , where a noun phrase refers to an object, and a whole sentence refers to a fact . For example, 8 x − − 5 {\displaystyle 8x-5} is an expression, while the inequality 8 x − − 5 ≥ ≥ 3 {\displaystyle 8x-5\geq 3} is a formula.

To evaluate an expression means to find a numerical value equivalent to the expression.

[ 3 ] [ 4 ] Expressions can be evaluated or simplified by replacing operations that appear in them with their result. For example, the expression 8 × × 2 − − 5 {\displaystyle 8\times 2-5} simplifies to 16 − − 5 {\displaystyle 16-5} , and evaluates to 11.

{\displaystyle 11.} An expression is often used to define a function , by taking the variables to be arguments , or inputs, of the function, and assigning the output to be the evaluation of the resulting expression.

[ 5 ] For example, x ↦ ↦ x 2 + 1 {\displaystyle x\mapsto x^{2}+1} and f ( x ) = x 2 + 1 {\displaystyle f(x)=x^{2}+1} define the function that associates to each number its square plus one. An expression with no variables would define a constant function . Usually, two expressions are considered equal or equivalent if they define the same function. Such an equality is called a " semantic equality", that is, both expressions "mean the same thing." Elementary mathematics [ edit ] Variables and evaluation [ edit ] In elementary algebra , a variable in an expression is a letter that represents a number whose value may change. To evaluate an expression with a variable means to find the value of the expression when the variable is assigned a given number. Expressions can be evaluated or simplified by replacing operations that appear in them with their result, or by combining like-terms .

[ 6 ] For example, take the expression 4 x 2 + 8 {\displaystyle 4x^{2}+8} ; it can be evaluated at x = 3 in the following steps: 4 ( 3 ) 2 + 8 {\textstyle 4(3)^{2}+8} , (replace x with 3) 4 ⋅ ⋅ ( 3 ⋅ ⋅ 3 ) + 8 {\displaystyle 4\cdot (3\cdot 3)+8} (use definition of exponent ) 4 ⋅ ⋅ 9 + 8 {\displaystyle 4\cdot 9+8} (evaluate inner multiplication) 36 + 8 {\displaystyle 36+8} (evaluate remaining multiplication) 44 {\displaystyle 44} (evaluate addition) A term is a constant or the product of a constant and one or more variables. Some examples include 7 , 5 x , 13 x 2 y , 4 b {\displaystyle 7,\;5x,\;13x^{2}y,\;4b} The constant of the product is called the coefficient . Terms that are either constants or have the same variables raised to the same powers are called like terms . If there are like terms in an expression, one can simplify the expression by combining the like terms. One adds the coefficients and keeps the same variable.

4 x + 7 x + 2 x = 13 x {\displaystyle 4x+7x+2x=13x} Any variable can be classified as being either a free variable or a bound variable . For a given combination of values for the free variables, an expression may be evaluated, although for some combinations of values of the free variables, the value of the expression may be undefined . Thus an expression represents an operation over constants and free variables and whose output is the resulting value of the expression.

[ 7 ] For a non-formalized language, that is, in most mathematical texts outside of mathematical logic , for an individual expression it is not always possible to identify which variables are free and bound. For example, in ∑ ∑ i < k a i k {\textstyle \sum _{i<k}a_{ik}} , depending on the context, the variable i {\textstyle i} can be free and k {\textstyle k} bound, or vice-versa, but they cannot both be free. Determining which value is assumed to be free depends on context and semantics .

[ 8 ] Equivalence [ edit ] Main article: Identity (mathematics) An expression is often used to define a function , or denote compositions of functions, by taking the variables to be arguments , or inputs, of the function, and assigning the output to be the evaluation of the resulting expression.

[ 9 ] For example, x ↦ ↦ x 2 + 1 {\displaystyle x\mapsto x^{2}+1} and f ( x ) = x 2 + 1 {\displaystyle f(x)=x^{2}+1} define the function that associates to each number its square plus one. An expression with no variables would define a constant function . In this way, two expressions are said to be equivalent if, for each combination of values for the free variables, they have the same output, i.e., they represent the same function.

[ 10 ] [ 11 ] The equivalence between two expressions is called an identity and is sometimes denoted with ≡ ≡ .

{\displaystyle \equiv .} For example, in the expression ∑ ∑ n = 1 3 ( 2 n x ) , {\textstyle \sum _{n=1}^{3}(2nx),} the variable n is bound, and the variable x is free. This expression is equivalent to the simpler expression 12 x ; that is ∑ ∑ n = 1 3 ( 2 n x ) ≡ ≡ 12 x .

{\displaystyle \sum _{n=1}^{3}(2nx)\equiv 12x.} The value for x = 3 is 36, which can be denoted ∑ ∑ n = 1 3 ( 2 n x ) | x = 3 = 36.

{\displaystyle \sum _{n=1}^{3}(2nx){\Big |}_{x=3}=36.} Well-defined expressions [ edit ] Main article: Well-defined expression The language of mathematics exhibits a kind of grammar (called formal grammar ) about how expressions may be written. There are two considerations for well-definedness of mathematical expressions, syntax and semantics . Syntax is concerned with the rules used for constructing, or transforming the symbols of an expression without regard to any interpretation or meaning given to them. Expressions that are syntactically correct are called well-formed . Semantics is concerned with the meaning of these well-formed expressions. Expressions that are semantically correct are called well-defined .

Well-formed [ edit ] The syntax of mathematical expressions can be described somewhat informally as follows: the allowed operators must have the correct number of inputs in the correct places (usually written with infix notation ), the sub-expressions that make up these inputs must be well-formed themselves, have a clear order of operations , etc. Strings of symbols that conform to the rules of syntax are called well-formed , and those that are not well-formed are called, ill-formed , and do not constitute mathematical expressions.

[ 12 ] For example, in arithmetic , the expression 1 + 2 × 3 is well-formed, but × × 4 ) x + , / y {\displaystyle \times 4)x+,/y} .

is not.

However, being well-formed is not enough to be considered well-defined. For example in arithmetic, the expression 1 0 {\textstyle {\frac {1}{0}}} is well-formed, but it is not well-defined. (See Division by zero ). Such expressions are called undefined .

Well-defined [ edit ] Semantics is the study of meaning.

Formal semantics is about attaching meaning to expressions. An expression that defines a unique value or meaning is said to be well-defined . Otherwise, the expression is said to be ill defined or ambiguous.

[ 13 ] In general the meaning of expressions is not limited to designating values; for instance, an expression might designate a condition, or an equation that is to be solved, or it can be viewed as an object in its own right that can be manipulated according to certain rules. Certain expressions that designate a value simultaneously express a condition that is assumed to hold, for instance those involving the operator ⊕ ⊕ {\displaystyle \oplus } to designate an internal direct sum .

In algebra , an expression may be used to designate a value, which might depend on values assigned to variables occurring in the expression. The determination of this value depends on the semantics attached to the symbols of the expression.  The choice of semantics depends on the context of the expression.  The same syntactic expression 1 + 2 × 3 can have different values (mathematically 7, but also 9), depending on the order of operations implied by the context (See also Operations § Calculators ).

For real numbers , the product a × × b × × c {\displaystyle a\times b\times c} is unambiguous because ( a × × b ) × × c = a × × ( b × × c ) {\displaystyle (a\times b)\times c=a\times (b\times c)} ; hence the notation is said to be well defined .

[ 13 ] This property, also known as associativity of multiplication, guarantees the result does not depend on the sequence of multiplications; therefore, a specification of the sequence can be omitted. The subtraction operation is non-associative; despite that, there is a convention that a − − b − − c {\displaystyle a-b-c} is shorthand for ( a − − b ) − − c {\displaystyle (a-b)-c} , thus it is considered "well-defined". On the other hand, Division is non-associative, and in the case of a / b / c {\displaystyle a/b/c} , parenthesization conventions are not well established; therefore, this expression is often considered ill-defined.

Unlike with functions, notational ambiguities can be overcome by means of additional definitions (e.g., rules of precedence , associativity of the operator). For example, in the programming language C , the operator - for subtraction is left-to-right-associative , which means that a-b-c is defined as (a-b)-c , and the operator = for assignment is right-to-left-associative , which means that a=b=c is defined as a=(b=c) .

[ 14 ] In the programming language APL there is only one rule: from right to left – but parentheses first.

Formal definition [ edit ] The term 'expression' is part of the language of mathematics , that is to say, it is not defined within mathematics, but taken as a primitive part of the language. To attempt to define the term would not be doing mathematics, but rather, one would be engaging in a kind of metamathematics (the metalanguage of mathematics), usually mathematical logic . Within mathematical logic, mathematics is usually described as a kind of formal language , and a well-formed expression can be defined recursively as follows: [ 7 ] The alphabet consists of: A set of individual constants : Symbols representing fixed objects in the domain of discourse , such as numerals (1, 2.5, 1/7, ...), sets ( ∅ ∅ , { 1 , 2 , 3 } {\displaystyle \varnothing ,\{1,2,3\}} , ...), truth values (T or F), etc.

A set of individual variables: A countably infinite amount of symbols representing variables used for representing an unspecified object in the domain. (Usually letters like x , or y ) A set of operations: Function symbols representing operations that can be performed on elements over the domain, like addition (+), multiplication (×), or set operations like union (∪), or intersection (∩). (Functions can be understood as unary operations ) Brackets ( ) With this alphabet, the recursive rules for forming a well-formed expression (WFE) are as follows: Any constant or variable as defined are the atomic expressions , the simplest well-formed expressions (WFE's). For instance, the constant 2 {\displaystyle 2} or the variable x {\displaystyle x} are syntactically correct expressions.

Let F {\displaystyle F} be a metavariable for any n-ary operation over the domain, and let ϕ ϕ 1 , ϕ ϕ 2 , .

.

.

ϕ ϕ n {\displaystyle \phi _{1},\phi _{2},...\phi _{n}} be metavariables for any WFE's.

Then F ( ϕ ϕ 1 , ϕ ϕ 2 , .

.

.

ϕ ϕ n ) {\displaystyle F(\phi _{1},\phi _{2},...\phi _{n})} is also well-formed. Here represented with prefix notation , but other notations may be used such as Infix notation like 3 + 4 {\displaystyle 3+4} , or possibly non-linear notations such as with matrices or summation notation if allowed.

For instance, if the domain of discourse is the real numbers , F {\displaystyle F} can denote the binary operation +, then ϕ ϕ 1 + ϕ ϕ 2 {\displaystyle \phi _{1}+\phi _{2}} is well-formed. Or F {\displaystyle F} can be the unary operation √ √ {\displaystyle \surd } so ϕ ϕ 1 {\displaystyle {\sqrt {\phi _{1}}}} is well-formed.

Brackets are initially around each non-atomic expression, but they can be deleted in cases where there is a defined order of operations , or where order doesn't matter (i.e. where operations are associative ).

A well-formed expression can be thought as a syntax tree .

[ 15 ] The leaf nodes are always atomic expressions. Operations + {\displaystyle +} and ∪ ∪ {\displaystyle \cup } have exactly two child nodes, while operations x {\textstyle {\sqrt {x}}} , ln ( x ) {\textstyle {\text{ln}}(x)} and d d x {\textstyle {\frac {d}{dx}}} have exactly one. There are countably infinitely many WFE's, however, each WFE has a finite number of nodes.

Computer science [ edit ] Main article: Expression (computer science) In computer science , an expression is a syntactic entity in a programming language that may be evaluated to determine its value [ 16 ] or fail to terminate, in which case the expression is undefined.

[ 17 ] It is a combination of one or more constants , variables , functions , and operators that the programming language interprets (according to its particular rules of precedence and of association ) and computes to produce ("to return", in a stateful environment) another value. This process, for mathematical expressions, is called evaluation .
In simple settings, the resulting value is usually one of various primitive types , such as string , Boolean , or numerical (such as integer , floating-point , or complex ).

In computer algebra , formulas are viewed as expressions that can be evaluated as a Boolean, depending on the values that are given to the variables occurring in the expressions. For example 8 x − − 5 ≥ ≥ 3 {\displaystyle 8x-5\geq 3} takes the value false if x is given a value less than 1, and the value true otherwise.

Expressions are often contrasted with statements —syntactic entities that have no value (an instruction).

Representation of the expression (8 − 6) × (3 + 1) as a Lisp tree, from a 1985 Master's Thesis [ 18 ] Except for numbers and variables , every mathematical expression may be viewed as the symbol of an operator followed by a sequence of operands. In computer algebra software, the expressions are usually represented in this way. This representation is very flexible, and many things that seem not to be mathematical expressions at first glance, may be represented and manipulated as such. For example, an equation is an expression with "=" as an operator, a matrix may be represented as an expression with "matrix" as an operator and its rows as operands.

See: Computer algebra expression Computation [ edit ] Main article: Computation A computation is any type of arithmetic or non-arithmetic calculation that is "well-defined".

[ 19 ] The notion that mathematical statements should be 'well-defined' had been argued by mathematicians since at least the 1600s , [ 20 ] but agreement on a suitable definition proved elusive.

[ 21 ] A candidate definition was proposed independently by several mathematicians in the 1930s.

[ 22 ] The best-known variant was formalised by the mathematician Alan Turing , who defined a well-defined statement or calculation as any statement that could be expressed in terms of the initialisation parameters of a Turing machine .

[ 23 ] [ page needed ] Turing's definition apportioned "well-definedness" to a very large class of mathematical statements, including all well-formed algebraic statements , and all statements written in modern computer programming languages.

[ 24 ] Despite the widespread uptake of this definition, there are some mathematical concepts that have no well-defined characterisation under this definition. This includes the halting problem and the busy beaver game . It remains an open question as to whether there exists a more powerful definition of 'well-defined' that is able to capture both computable and 'non-computable' statements.

[ a ] [ 25 ] All statements characterised in modern programming languages are well-defined, including C++ , Python , and Java .

[ 24 ] Common examples of computation are basic arithmetic and the execution of computer algorithms . A calculation is a deliberate mathematical process that transforms one or more inputs into one or more outputs or results . For example, multiplying 7 by 6 is a simple algorithmic calculation. Extracting the square root or the cube root of a number using mathematical models is a more complex algorithmic calculation.

Rewriting [ edit ] Expressions can be computed by means of an evaluation strategy .

[ 26 ] To illustrate, executing a function call f(a,b) may first evaluate the arguments a and b , store the results in references or memory locations ref_a and ref_b , then evaluate the function's body with those references passed in. This gives the function the ability to look up the original argument values passed in through dereferencing the parameters (some languages use specific operators to perform this), to modify them via assignment as if they were local variables, and to return values via the references. This is the call-by-reference evaluation strategy.

[ 27 ] Evaluation strategy is part of the semantics of the programming language definition. Some languages, such as PureScript , have variants with different evaluation strategies. Some declarative languages , such as Datalog , support multiple evaluation strategies. Some languages define a calling convention .

In rewriting , a reduction strategy or rewriting strategy is a relation specifying a rewrite for each object or term, compatible with a given reduction relation. A rewriting strategy specifies, out of all the reducible subterms ( redexes ), which one should be reduced ( contracted ) within a term. One of the most common systems involves lambda calculus .

Polynomial evaluation [ edit ] Main article: Polynomial evaluation A polynomial consists of variables and coefficients , that involve only the operations of addition , subtraction , multiplication and exponentiation to nonnegative integer powers, and has a finite number of terms. The problem of polynomial evaluation arises frequently in practice. In computational geometry , polynomials are used to compute function approximations using Taylor polynomials . In cryptography and hash tables , polynomials are used to compute k -independent hashing .

In the former case, polynomials are evaluated using floating-point arithmetic , which is not exact. Thus different schemes for the evaluation will, in general, give slightly different answers. In the latter case, the polynomials are usually evaluated in a finite field , in which case the answers are always exact.

For evaluating the univariate polynomial a n x n + a n − − 1 x n − − 1 + ⋯ ⋯ + a 0 , {\textstyle a_{n}x^{n}+a_{n-1}x^{n-1}+\cdots +a_{0},} the most naive method would use n {\displaystyle n} multiplications to compute a n x n {\displaystyle a_{n}x^{n}} , use n − − 1 {\textstyle n-1} multiplications to compute a n − − 1 x n − − 1 {\displaystyle a_{n-1}x^{n-1}} and so on for a total of n ( n + 1 ) 2 {\textstyle {\frac {n(n+1)}{2}}} multiplications and n {\displaystyle n} additions. Using better methods, such as Horner's rule , this can be reduced to n {\displaystyle n} multiplications and n {\displaystyle n} additions. If some preprocessing is allowed, even more savings are possible Types of expressions [ edit ] Algebraic expression [ edit ] An algebraic expression is an expression built up from algebraic constants , variables , and the algebraic operations ( addition , subtraction , multiplication , division and exponentiation by a rational number ).

[ 28 ] For example, 3 x 2 − 2 xy + c is an algebraic expression. Since taking the square root is the same as raising to the power ⁠ 1 / 2 ⁠ , the following is also an algebraic expression: 1 − − x 2 1 + x 2 {\displaystyle {\sqrt {\frac {1-x^{2}}{1+x^{2}}}}} See also: Algebraic equation and Algebraic closure Polynomial expression [ edit ] A polynomial is an expression built with scalars (numbers of elements of some field), variables , and the operators of addition, multiplication, and exponentiation to nonnegative integer powers; for example 3 ( x + 1 ) 2 − − x y .

{\displaystyle 3(x+1)^{2}-xy.} Using associativity , commutativity and distributivity , every polynomial expression is equivalent to a polynomial , that is an expression that is a linear combination of products of integer powers of the indeterminates. For example the above polynomial expression is equivalent (denote the same polynomial as 3 x 2 − − x y + 6 x + 3.

{\displaystyle 3x^{2}-xy+6x+3.} Many author do not distinguish polynomials and polynomial expressions. In this case the expression of a polynomial expression as a linear combination is called the canonical form , normal form , or expanded form of the polynomial.

Formal expression [ edit ] See also: Regular expression A formal expression is a kind of string of symbols , created by the same production rules as standard expressions, however, they are used without regard to the meaning of the expression. In this way, two formal expressions are considered equal only if they are syntactically equal, that is, if they are the exact same expression.

[ 29 ] [ 30 ] For instance, the formal expressions "2" and "1+1" are not equal.

Lambda calculus [ edit ] Main article: Lambda calculus Formal languages allow formalizing the concept of well-formed expressions.

In the 1930s, a new type of expression, the lambda expression , was introduced by Alonzo Church and Stephen Kleene for formalizing functions and their evaluation.

[ 31 ] [ b ] The lambda operators (lambda abstraction and function application) form the basis for lambda calculus, a formal system used in mathematical logic and programming language theory .

The equivalence of two lambda expressions is undecidable (but see unification (computer science) ). This is also the case for the expressions representing real numbers, which are built from the integers by using the arithmetical operations, the logarithm and the exponential ( Richardson's theorem ).

History [ edit ] For broader coverage of this topic, see History of mathematics and History of mathematical notation .

See also: History of the function concept Early written mathematics [ edit ] The Ishango bone at the RBINS . A Babylonian tablet approximating the square root of 2 . Problem 14 from the Moscow Mathematical Papyrus .

The earliest written mathematics likely began with tally marks , where each mark represented one unit, carved into wood or stone. An example of early counting is the Ishango bone , found near the Nile and dating back over 20,000 years ago , which is thought to show a six-month lunar calendar .

[ 32 ] Ancient Egypt developed a symbolic system using hieroglyphics , assigning symbols for powers of ten and using addition and subtraction symbols resembling legs in motion.

[ 33 ] [ 34 ] This system, recorded in texts like the Rhind Mathematical Papyrus (c. 2000–1800 BC), influenced other Mediterranean cultures . In Mesopotamia , a similar system evolved, with numbers written in a base-60 ( sexagesimal ) format on clay tablets written in Cuneiform , a technique originating with the Sumerians around 3000 BC. This base-60 system persists today in measuring time and angles .

Syncopated stage [ edit ] The "syncopated" stage of mathematics introduced symbolic abbreviations for commonly used operations and quantities, marking a shift from purely geometric reasoning.

Ancient Greek mathematics , largely geometric in nature, drew on Egyptian numerical systems (especially Attic numerals ), [ 35 ] with little interest in algebraic symbols, until the arrival of Diophantus of Alexandria , [ 36 ] who pioneered a form of syncopated algebra in his Arithmetica , which introduced symbolic manipulation of expressions.

[ 37 ] His notation represented unknowns and powers symbolically, but without modern symbols for relations (such as equality or inequality ) or exponents .

[ 38 ] An unknown number was called ζ ζ {\displaystyle \zeta } .

[ 39 ] The square of ζ ζ {\displaystyle \zeta } was Δ Δ v {\displaystyle \Delta ^{v}} ; the cube was K v {\displaystyle K^{v}} ; the fourth power was Δ Δ v Δ Δ {\displaystyle \Delta ^{v}\Delta } ; the fifth power was Δ Δ K v {\displaystyle \Delta K^{v}} ; and ⋔ ⋔ {\displaystyle \pitchfork } meant to subtract everything on the right from the left.

[ 40 ] So for example, what would be written in modern notation as: x 3 − − 2 x 2 + 10 x − − 1 , {\displaystyle x^{3}-2x^{2}+10x-1,} Would be written in Diophantus's syncopated notation as: K υ υ α α ¯ ¯ ζ ζ ι ι ¯ ¯ ⋔ ⋔ Δ Δ υ υ β β ¯ ¯ M α α ¯ ¯ {\displaystyle \mathrm {K} ^{\upsilon }{\overline {\alpha }}\;\zeta {\overline {\iota }}\;\,\pitchfork \;\,\Delta ^{\upsilon }{\overline {\beta }}\;\mathrm {M} {\overline {\alpha }}\,\;} In the 7th century, Brahmagupta used different colours to represent the unknowns in algebraic equations in the Brāhmasphuṭasiddhānta . Greek and other ancient mathematical advances, were often trapped in cycles of bursts of creativity, followed by long periods of stagnation, but this began to change as knowledge spread in the early modern period .

Symbolic stage and early arithmetic [ edit ] The 1489 use of the plus and minus signs in print.

The transition to fully symbolic algebra began with Ibn al-Banna' al-Marrakushi (1256–1321) and Abū al-Ḥasan ibn ʿAlī al-Qalaṣādī , (1412–1482) who introduced symbols for operations using Arabic characters .

[ 41 ] [ 42 ] [ 43 ] The plus sign (+) appeared around 1351 with Nicole Oresme , [ 44 ] likely derived from the Latin et (meaning "and"), while the minus sign (−) was first used in 1489 by Johannes Widmann .

[ 45 ] Luca Pacioli included these symbols in his works, though much was based on earlier contributions by Piero della Francesca . The radical symbol (√) for square root was introduced by Christoph Rudolff in the 1500s, and parentheses for precedence by Niccolò Tartaglia in 1556.

François Viète ’s New Algebra (1591) formalized modern symbolic manipulation. The multiplication sign (×) was first used by William Oughtred and the division sign (÷) by Johann Rahn .

René Descartes further advanced algebraic symbolism in La Géométrie (1637), where he introduced the use of letters at the end of the alphabet (x, y, z) for variables , along with the Cartesian coordinate system , which bridged algebra and geometry.

[ 46 ] Isaac Newton and Gottfried Wilhelm Leibniz independently developed calculus in the late 17th century, with Leibniz's notation becoming the standard.

See also [ edit ] Analytic expression Closed-form expression Formal calculation Functional programming Infinite expression Number sentence Rewriting Signature (logic) Notes [ edit ] ^ The study of non-computable statements is the field of hypercomputation .

^ For a full history, see Cardone and Hindley's "History of Lambda-calculus and Combinatory Logic" (2006).

References [ edit ] ^ Oxford English Dictionary , s.v. “ Expression (n.), sense II.7 ,” " A group of symbols which together represent a numeric, algebraic, or other mathematical quantity or function.

" ^ Stoll, Robert R. (1963).

Set Theory and Logic . San Francisco, CA: Dover Publications.

ISBN 978-0-486-63829-4 .

{{ cite book }} : ISBN / Date incompatibility ( help ) ^ Oxford English Dictionary , s.v. " Evaluate (v.), sense a ", " Mathematics. To work out the ‘value’ of (a quantitative expression); to find a numerical expression for (any quantitative fact or relation).

" ^ Oxford English Dictionary , s.v. “ Simplify (v.), sense 4.a ”, " To express (an equation or other mathematical expression) in a form that is easier to understand, analyse, or work with, e.g. by collecting like terms or substituting variables.

" ^ Codd, Edgar Frank (June 1970).

"A Relational Model of Data for Large Shared Data Banks" (PDF) .

Communications of the ACM .

13 (6): 377– 387.

doi : 10.1145/362384.362685 .

S2CID 207549016 .

Archived (PDF) from the original on 2004-09-08 . Retrieved 2020-04-29 .

^ Marecek, Lynn; Mathis, Andrea Honeycutt (2020-05-06).

"1.1 Use the Language of Algebra - Intermediate Algebra 2e | OpenStax" .

openstax.org . Retrieved 2024-10-14 .

^ a b C.C. Chang ; H. Jerome Keisler (1977).

Model Theory . Studies in Logic and the Foundation of Mathematics. Vol. 73. North Holland.

; here: Sect.1.3 ^ Sobolev, S.K. (originator).

Free variable .

Encyclopedia of Mathematics .

Springer .

ISBN 1402006098 .

^ Codd, Edgar Frank (June 1970).

"A Relational Model of Data for Large Shared Data Banks" (PDF) .

Communications of the ACM .

13 (6): 377– 387.

doi : 10.1145/362384.362685 .

S2CID 207549016 .

Archived (PDF) from the original on 2004-09-08 . Retrieved 2020-04-29 .

^ Equation. Encyclopedia of Mathematics. URL: http://encyclopediaofmath.org/index.php?title=Equation&oldid=32613 ^ Pratt, Vaughan, "Algebra", The Stanford Encyclopedia of Philosophy (Winter 2022 Edition), Edward N. Zalta & Uri Nodelman (eds.), URL: https://plato.stanford.edu/entries/algebra/#Laws ^ Stoll, Robert R. (1963).

Set Theory and Logic . San Francisco, CA: Dover Publications.

ISBN 978-0-486-63829-4 .

{{ cite book }} : ISBN / Date incompatibility ( help ) ^ a b Weisstein, Eric W.

"Well-Defined" . From MathWorld – A Wolfram Web Resource . Retrieved 2013-01-02 .

^ "Operator Precedence and Associativity in C" .

GeeksforGeeks . 2014-02-07 . Retrieved 2019-10-18 .

^ Hermes, Hans (1973).

Introduction to Mathematical Logic . Springer London.

ISBN 3540058192 .

ISSN 1431-4657 .

; here: Sect.II.1.3 ^ Mitchell, J.

(2002). Concepts in Programming Languages. Cambridge: Cambridge University Press, 3.4.1 Statements and Expressions , p. 26 ^ Maurizio Gabbrielli, Simone Martini (2010). Programming Languages - Principles and Paradigms. Springer London, 6.1 Expressions , p. 120 ^ Cassidy, Kevin G. (Dec 1985).

The Feasibility of Automatic Storage Reclamation with Concurrent Program Execution in a LISP Environment (PDF) (Master's thesis). Naval Postgraduate School, Monterey/CA. p. 15. ADA165184.

^ "Definition of COMPUTATION" .

www.merriam-webster.com . 2024-10-11 . Retrieved 2024-10-12 .

^ Couturat, Louis (1901).

la Logique de Leibniz a'Après des Documents Inédits . Paris.

ISBN 978-0343895099 .

{{ cite book }} : ISBN / Date incompatibility ( help ) ^ Davis, Martin; Davis, Martin D. (2000).

The Universal Computer . W. W. Norton & Company.

ISBN 978-0-393-04785-1 .

^ Davis, Martin (1982-01-01).

Computability & Unsolvability . Courier Corporation.

ISBN 978-0-486-61471-7 .

^ Turing, A.M. (1937) [Delivered to the Society November 1936].

"On Computable Numbers, with an Application to the Entscheidungsproblem" (PDF) .

Proceedings of the London Mathematical Society . 2. Vol. 42. pp.

230– 65.

doi : 10.1112/plms/s2-42.1.230 .

^ a b Davis, Martin; Davis, Martin D. (2000).

The Universal Computer . W. W. Norton & Company.

ISBN 978-0-393-04785-1 .

^ Davis, Martin (2006). "Why there is no such discipline as hypercomputation".

Applied Mathematics and Computation .

178 (1): 4– 7.

doi : 10.1016/j.amc.2005.09.066 .

^ Araki, Shota; Nishizaki, Shin-ya (November 2014). "Call-by-name evaluation of RPC and RMI calculi".

Theory and Practice of Computation . p. 1.

doi : 10.1142/9789814612883_0001 .

ISBN 978-981-4612-87-6 . Retrieved 2021-08-21 .

^ Daniel P. Friedman; Mitchell Wand (2008).

Essentials of Programming Languages (third ed.). Cambridge, MA: The MIT Press .

ISBN 978-0262062794 .

^ Morris, Christopher G. (1992).

Academic Press dictionary of science and technology . Gulf Professional Publishing. p.

74 .

algebraic expression over a field.

^ McCoy, Neal H. (1960).

Introduction To Modern Algebra . Boston: Allyn & Bacon . p. 127.

LCCN 68015225 .

^ Fraleigh, John B. (2003).

A first course in abstract algebra . Boston : Addison-Wesley.

ISBN 978-0-201-76390-4 .

^ Church, Alonzo (1932). "A set of postulates for the foundation of logic".

Annals of Mathematics . Series 2.

33 (2): 346– 366.

doi : 10.2307/1968337 .

JSTOR 1968337 .

^ Marshack, Alexander (1991).

The Roots of Civilization , Colonial Hill, Mount Kisco, NY.

^ Encyclopædia Americana. By Thomas Gamaliel Bradford. Pg 314 ^ Mathematical Excursion, Enhanced Edition: Enhanced Webassign Edition By Richard N. Aufmann, Joanne Lockwood, Richard D. Nation, Daniel K. Cleg. Pg 186 ^ Mathematics and Measurement By Oswald Ashton Wentworth Dilk. Pg 14 ^ Diophantine Equations . Submitted by: Aaron Zerhusen, Chris Rakes, & Shasta Meece. MA 330-002. Dr. Carl Eberhart. 16 February 1999.

^ Boyer (1991). "Revival and Decline of Greek Mathematics". pp. 180-182. "In this respect it can be compared with the great classics of the earlier Alexandrian Age; yet it has practically nothing in common with these or, in fact, with any traditional Greek mathematics. It represents essentially a new branch and makes use of a different approach. Being divorced from geometric methods, it resembles Babylonian algebra to a large extent. But whereas Babylonian mathematicians had been concerned primarily with approximate solutions of determinate equations as far as the third degree, the Arithmetica of Diophantus (such as we have it) is almost entirely devoted to the exact solution of equations, both determinate and indeterminate. [...] Throughout the six surviving books of Arithmetica there is a systematic use of abbreviations for powers of numbers and for relationships and operations. An unknown number is represented by a symbol resembling the Greek letter ζ {\displaystyle \zeta } (perhaps for the last letter of arithmos). [...] It is instead a collection of some 150 problems, all worked out in terms of specific numerical examples, although perhaps generality of method was intended. There is no postulation development, nor is an effort made to find all possible solutions. In the case of quadratic equations with two positive roots, only the larger is give, and negative roots are not recognized. No clear-cut distinction is made between determinate and indeterminate problems, and even for the latter for which the number of solutions generally is unlimited, only a single answer is given. Diophantus solved problems involving several unknown numbers by skillfully expressing all unknown quantities, where possible, in terms of only one of them." ^ Boyer (1991). "Revival and Decline of Greek Mathematics". p. 178. "The chief difference between Diophantine syncopation and the modern algebraic notation is the lack of special symbols for operations and relations, as well as of the exponential notation." ^ A History of Greek Mathematics: From Aristarchus to Diophantus.  By Sir Thomas Little Heath. Pg 456 ^ A History of Greek Mathematics: From Aristarchus to Diophantus.  By Sir Thomas Little Heath. Pg 458 ^ O'Connor, John J.; Robertson, Edmund F.

, "al-Marrakushi ibn Al-Banna" , MacTutor History of Mathematics Archive , University of St Andrews ^ Gullberg, Jan (1997).

Mathematics: From the Birth of Numbers . W. W. Norton. p.

298 .

ISBN 0-393-04002-X .

^ O'Connor, John J.; Robertson, Edmund F.

, "Abu'l Hasan ibn Ali al Qalasadi" , MacTutor History of Mathematics Archive , University of St Andrews ^ Der Algorismus proportionum des Nicolaus Oresme : Zum ersten Male nach der Lesart der Handschrift R.40.2. der Königlichen Gymnasial-bibliothek zu Thorn.

Nicole Oresme . S. Calvary & Company, 1868.

^ Later early modern version : A New System of Mercantile Arithmetic : Adapted to the Commerce of the United States, in Its Domestic and Foreign Relations with Forms of Accounts and Other Writings Usually Occurring in Trade. By Michael Walsh .

Edmund M. Blunt (proprietor.), 1801.

^ Descartes 2006 , p.1xiii "This short work marks the moment at which algebra and geometry ceased being separate." Works Cited [ edit ] Descartes, René (2006) [1637].

A discourse on the method of correctly conducting one's reason and seeking truth in the sciences . Translated by Ian Maclean. Oxford University Press.

ISBN 0-19-282514-3 .

v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐qn4mq
Cached time: 20250811235622
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.801 seconds
Real time usage: 0.988 seconds
Preprocessor visited node count: 3915/1000000
Revision size: 44050/2097152 bytes
Post‐expand include size: 126076/2097152 bytes
Template argument size: 2908/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 17/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 127981/5000000 bytes
Lua time usage: 0.439/10.000 seconds
Lua memory usage: 7100800/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  738.160      1 -total
 50.25%  370.961      2 Template:Reflist
 26.10%  192.683     15 Template:Cite_book
 15.48%  114.287      4 Template:Navbox
 13.69%  101.082      1 Template:Mathematical_logic
 10.32%   76.205      1 Template:Short_description
  5.81%   42.906      2 Template:Pagetype
  4.94%   36.466      1 Template:Page_needed
  4.54%   33.490      1 Template:Harvnb
  4.51%   33.319      1 Template:Fix Saved in parser cache with key enwiki:pcache:609125:|#|:idhash:canonical and timestamp 20250811235622 and revision id 1302892359. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Expression_(mathematics)&oldid=1302892359 " Categories : Abstract algebra Logical expressions Elementary algebra Hidden categories: CS1 errors: ISBN date Articles with short description Short description is different from Wikidata Use dmy dates from July 2020 Wikipedia articles needing page number citations from October 2024 Pages using multiple image with auto scaled images This page was last edited on 28 July 2025, at 00:29 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Expression (mathematics) 41 languages Add topic

