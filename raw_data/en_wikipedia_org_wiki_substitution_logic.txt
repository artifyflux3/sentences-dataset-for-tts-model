Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Propositional logic Toggle Propositional logic subsection 1.1 Definition 1.2 Tautologies 2 First-order logic 3 Mathematics Toggle Mathematics subsection 3.1 Algebra 3.2 Proof of substitution in ZFC 4 See also 5 Notes 6 Citations 7 References 8 External links Toggle the table of contents Substitution (logic) 4 languages Deutsch 한국어 Bahasa Indonesia Português Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Concept in logic A substitution is a syntactic transformation on formal expressions.
To apply a substitution to an expression means to consistently replace its variable, or placeholder, symbols with other expressions.

The resulting expression is called a substitution instance , or instance for short, of the original expression.

Propositional logic [ edit ] Definition [ edit ] Where ψ and φ represent formulas of propositional logic , ψ is a substitution instance of φ if and only if ψ may be obtained from φ by substituting formulas for propositional variables in φ , replacing each occurrence of the same variable by an occurrence of the same formula. For example: ψ: (R → S) & (T → S) is a substitution instance of φ: P & Q That is, ψ can be obtained by replacing P and Q in φ with (R → S) and (T → S) respectively. Similarly: ψ: (A ↔ A) ↔ (A ↔ A) is a substitution instance of: φ: (A ↔ A) since ψ can be obtained by replacing each A in φ with (A ↔ A).

In some deduction systems for propositional logic, a new expression (a proposition ) may be entered on a line of a derivation if it is a substitution instance of a previous line of the derivation.

[ 1 ] [ failed verification ] This is how new lines are introduced in some axiomatic systems . In systems that use rules of transformation , a rule may include the use of a substitution instance for the purpose of introducing certain variables into a derivation.

Tautologies [ edit ] A propositional formula is a tautology if it is true under every valuation (or interpretation ) of its predicate symbols. If Φ is a tautology, and Θ is a substitution instance of Φ, then Θ is again a tautology. This fact implies the soundness of the deduction rule described in the previous section.

First-order logic [ edit ] In first-order logic , a substitution is a total mapping σ : V → T from variables to terms ; many, [ 2 ] : 73 [ 3 ] : 445 but not all [ 4 ] : 250 authors additionally require σ ( x ) = x for all but finitely many variables x . The notation { x 1 ↦ t 1 , …, x k ↦ t k } [ note 1 ] refers to a substitution mapping each variable x i to the corresponding term t i , for i =1,…, k , and every other variable to itself; the x i must be pairwise distinct. Most authors additionally require each term t i to be syntactically different from x i , to avoid infinitely many distinct notations for the same substitution.

Applying that substitution to a term t is written in postfix notation as t { x 1 ↦ t 1 , ..., x k ↦ t k }; it means to (simultaneously) replace every occurrence of each x i in t by t i .

[ note 2 ] The result tσ of applying a substitution σ to a term t is called an instance of that term t .
For example, applying the substitution { x ↦ z , z ↦ h ( a , y ) } to the term f ( z , a , g ( x ), y ) yields f ( h ( a , y ) , a , g ( z ), y ) .

The domain dom ( σ ) of a substitution σ is commonly defined as the set of variables actually replaced, i.e.

dom ( σ ) = { x ∈ V | xσ ≠ x }.
A substitution is called a ground substitution if it maps all variables of its domain to ground , i.e. variable-free, terms.
The substitution instance tσ of a ground substitution is a ground term if all of t ' s variables are in σ ' s domain, i.e. if vars ( t ) ⊆ dom ( σ ).
A substitution σ is called a linear substitution if tσ is a linear term for some (and hence every) linear term t containing precisely the variables of σ ' s domain, i.e. with vars ( t ) = dom ( σ ).
A substitution σ is called a flat substitution if xσ is a variable for every variable x .
A substitution σ is called a renaming substitution if it is a permutation on the set of all variables. Like every permutation, a renaming substitution σ always has an inverse substitution σ −1 , such that tσσ −1 = t = tσ −1 σ for every term t . However, it is not possible to define an inverse for an arbitrary substitution.

For example, { x ↦ 2, y ↦ 3+4 } is a ground substitution, { x ↦ x 1 , y ↦ y 2 +4 } is non-ground and non-flat, but linear,
{ x ↦ y 2 , y ↦ y 2 +4 } is non-linear and non-flat, { x ↦ y 2 , y ↦ y 2 } is flat, but non-linear, { x ↦ x 1 , y ↦ y 2 } is both linear and flat, but not a renaming, since it maps both y and y 2 to y 2 ; each of these substitutions has the set { x , y } as its domain. An example for a renaming substitution is { x ↦ x 1 , x 1 ↦ y , y ↦ y 2 , y 2 ↦ x }, it has the inverse { x ↦ y 2 , y 2 ↦ y , y ↦ x 1 , x 1 ↦ x }. The flat substitution { x ↦ z , y ↦ z } cannot have an inverse, since e.g. ( x + y ) { x ↦ z , y ↦ z } = z + z , and the latter term cannot be transformed back to x + y , as the information about the origin a z stems from is lost. The ground substitution { x ↦ 2 } cannot have an inverse due to a similar loss of origin information e.g. in ( x +2) { x ↦ 2 } = 2+2, even if replacing constants by variables was allowed by some fictitious kind of "generalized substitutions".

Two substitutions are considered equal if they map each variable to syntactically equal result terms, formally: σ = τ if xσ = xτ for each variable x ∈ V .
The composition of two substitutions σ = { x 1 ↦ t 1 , …, x k ↦ t k } and τ = { y 1 ↦ u 1 , …, y l ↦ u l } is obtained by removing from the substitution { x 1 ↦ t 1 τ , …, x k ↦ t k τ , y 1 ↦ u 1 , …, y l ↦ u l } those pairs y i ↦ u i for which y i ∈ { x 1 , …, x k }.
The composition of σ and τ is denoted by στ . Composition is an associative operation , and is compatible with substitution application, i.e. ( ρσ ) τ = ρ ( στ ), and ( tσ ) τ = t ( στ ), respectively, for every substitutions ρ , σ , τ , and every term t .
The identity substitution , which maps every variable to itself, is the neutral element of substitution composition. A substitution σ is called idempotent if σσ = σ , and hence tσσ = tσ for every term t . When x i ≠ t i for all i , the substitution { x 1 ↦ t 1 , …, x k ↦ t k } is idempotent if and only if none of the variables x i occurs in any t j . Substitution composition is not commutative, that is, στ may be different from τσ , even if σ and τ are idempotent.

[ 2 ] : 73–74 [ 3 ] : 445–446 For example, { x ↦ 2, y ↦ 3+4 } is equal to { y ↦ 3+4, x ↦ 2 }, but different from { x ↦ 2, y ↦ 7 }. The substitution { x ↦ y + y } is idempotent, e.g. (( x + y ) { x ↦ y + y }) { x ↦ y + y } = (( y + y )+ y ) { x ↦ y + y } = ( y + y )+ y , while the substitution { x ↦ x + y } is non-idempotent, e.g. (( x + y ) { x ↦ x + y }) { x ↦ x + y } = (( x + y )+ y ) { x ↦ x + y } = (( x + y )+ y )+ y . An example for non-commuting substitutions is { x ↦ y } { y ↦ z } = { x ↦ z , y ↦ z }, but { y ↦ z } { x ↦ y } = { x ↦ y , y ↦ z }.

Mathematics [ edit ] In mathematics , there are two common uses of substitution: substitution of variables for constants (also called assignment for that variable), and the substitution property of equality , [ 5 ] also called Leibniz's Law .

[ 6 ] Considering mathematics as a formal language , a variable is a symbol from an alphabet , usually a letter like x , y , and z , which denotes a range of possible values .

[ 7 ] If a variable is free in a given expression or formula , then it can be replaced with any of the values in its range.

[ 8 ] Certain kinds of bound variables can be substituted too. For instance, parameters of an expression (like the coefficients of a polynomial ), or the argument of a function . Moreover, variables being universally quantified can be replaced with any of the values in its range, and the result will a true statement . (This is called Universal instantiation ) For a non-formalized language, that is, in most mathematical texts outside of mathematical logic , for an individual expression it is not always possible to identify which variables are free and bound. For example, in ∑ ∑ i < k a i k {\textstyle \sum _{i<k}a_{ik}} , depending on the context, the variable i {\textstyle i} can be free and k {\textstyle k} bound, or vice-versa, but they cannot both be free. Determining which value is assumed to be free depends on context and semantics .

The substitution property of equality , or Leibniz's Law (though the latter term is usually reserved for philosophical contexts), generally states that, if two things are equal, then any property of one, must be a property of the other. It can be formally stated in logical notation as: ( a = b ) ⟹ ⟹ [ ϕ ϕ ( a ) ⇒ ⇒ ϕ ϕ ( b ) ] {\displaystyle (a=b)\implies {\bigl [}\phi (a)\Rightarrow \phi (b){\bigr ]}} For every a {\textstyle a} and b {\textstyle b} , and any well-formed formula ϕ ϕ ( x ) {\textstyle \phi (x)} (with a free variable x). For example: For all real numbers a and b , if a = b , then a ≥ 0 implies b ≥ 0 (here, ϕ ϕ ( x ) {\displaystyle \phi (x)} is x ≥ 0 ). This is a property which is most often used in algebra , especially in solving systems of equations , but is apllied in nearly every area of math that uses equality. This, taken together with the reflexive property of equality, forms the axioms of equality in first-order logic.

[ 9 ] Substitution is related to, but not identical to, function composition ; it is closely related to β -reduction in lambda calculus . In contrast to these notions, however, the accent in algebra is on the preservation of algebraic structure by the substitution operation, the fact that substitution gives a homomorphism for the structure at hand (in the case of polynomials, the ring structure).

[ citation needed ] Algebra [ edit ] Substitution is a basic operation in algebra , in particular in computer algebra .

[ 10 ] [ 11 ] A common case of substitution involves polynomials , where substitution of a numerical value (or another expression) for the indeterminate of a univariate polynomial amounts to evaluating the polynomial at that value. Indeed, this operation occurs so frequently that the notation for polynomials is often adapted to it; instead of designating a polynomial by a name like P , as one would do for other mathematical objects, one could define P ( X ) = X 5 − − 3 X 2 + 5 X − − 17 {\displaystyle P(X)=X^{5}-3X^{2}+5X-17} so that substitution for X can be designated by replacement inside " P ( X )", say P ( 2 ) = 13 {\displaystyle P(2)=13} or P ( X + 1 ) = X 5 + 5 X 4 + 10 X 3 + 7 X 2 + 4 X − − 14.

{\displaystyle P(X+1)=X^{5}+5X^{4}+10X^{3}+7X^{2}+4X-14.} Substitution can also be applied to other kinds of formal objects built from symbols, for instance elements of free groups . In order for substitution to be defined, one needs an algebraic structure with an appropriate universal property , that asserts the existence of unique homomorphisms that send indeterminates to specific values; the substitution then amounts to finding the image of an element under such a homomorphism.

Proof of substitution in ZFC [ edit ] The following is a proof of the substitution property of equality in ZFC (as defined in first-order logic without equality), which is adapted from Introduction to Axiomatic Set Theory (1982) by Gaisi Takeuti and Wilson M. Zaring.

[ 12 ] Theorem — if a = b {\displaystyle a=b} , then, for any well-formed formula ϕ ϕ {\displaystyle \phi } , ϕ ϕ ( a ) ⇒ ⇒ ϕ ϕ ( b ) {\displaystyle \phi (a)\Rightarrow \phi (b)} .

See Zermelo–Fraenkel set theory § Formal language for the definition of formulas in ZFC. The definition is recursive , so a proof by induction is used. In ZFC in first-order logic without equality, "set equality" is defined to mean that two sets have the same elements, written symbolically as "for all z, z is in x if and only if z is in y". Then, the Axiom of Extensionality asserts that if two sets have the same elements, then they belong to the same sets: Definition — ( x = y ) := ∀ ∀ z [ z ∈ ∈ x ⇔ ⇔ z ∈ ∈ y ] {\displaystyle (x=y):=\forall z[z\in x\Leftrightarrow z\in y]} Axiom — ( x = y ) ⇒ ⇒ ∀ ∀ z ( x ∈ ∈ z ⇔ ⇔ y ∈ ∈ z ) {\displaystyle (x=y)\Rightarrow \forall z(x\in z\Leftrightarrow y\in z)} Base formulas Let X , Y , Z {\displaystyle X,Y,Z} , be metavariables for any variables or sets, such that X = Y {\displaystyle X=Y} Case 1: ϕ ϕ ( X ) : ( Z ∈ ∈ X ) {\displaystyle \phi (X):(Z\in X)} Assume Z ∈ ∈ X {\displaystyle Z\in X} , then, by the definition of equality, Z ∈ ∈ Y {\displaystyle Z\in Y} , thus ( X = Y ) ⟹ ⟹ [ Z ∈ ∈ X ⇒ ⇒ Z ∈ ∈ Y ] {\displaystyle (X=Y)\implies {\bigl [}Z\in X\Rightarrow Z\in Y{\bigr ]}} Case 2: ϕ ϕ ( X ) : ( X ∈ ∈ Z ) {\displaystyle \phi (X):(X\in Z)} Assume X ∈ ∈ Z {\displaystyle X\in Z} , then by the axiom of extensionality, Y ∈ ∈ Z {\displaystyle Y\in Z} , thus ( X = Y ) ⟹ ⟹ [ X ∈ ∈ Z ⇒ ⇒ Y ∈ ∈ Z ] {\displaystyle (X=Y)\implies {\bigl [}X\in Z\Rightarrow Y\in Z{\bigr ]}} Recursive formulas Let ψ ψ , φ φ {\displaystyle \psi ,\varphi } be meta variables for any formulas with the property that ( a = b ) ⟹ ⟹ [ ϕ ϕ ( a ) ⇒ ⇒ ϕ ϕ ( b ) ] {\displaystyle (a=b)\implies {\bigl [}\phi (a)\Rightarrow \phi (b){\bigr ]}} . Let X , Y {\displaystyle X,Y} , be metavariables for any variables or sets, such that X = Y {\displaystyle X=Y} , and let z {\displaystyle z} be a metavariable for any variable.

Case 1: ¬ ¬ ( ψ ψ ) {\displaystyle \neg (\psi )} Since X = Y {\displaystyle X=Y} , then Y = X {\displaystyle Y=X} by symmetry of equality, therefore [ ψ ψ ( Y ) ⇒ ⇒ ψ ψ ( X ) ] {\displaystyle {\bigl [}\psi (Y)\Rightarrow \psi (X){\bigr ]}} , by the induction hypothesis, therefore [ ¬ ¬ ψ ψ ( X ) ⇒ ⇒ ¬ ¬ ψ ψ ( Y ) ] {\displaystyle {\bigl [}\neg \psi (X)\Rightarrow \neg \psi (Y){\bigr ]}} by contraposition , thus ( X = Y ) ⟹ ⟹ [ ¬ ¬ ψ ψ ( X ) ⇒ ⇒ ¬ ¬ ψ ψ ( Y ) ] {\displaystyle (X=Y)\implies {\bigl [}\neg \psi (X)\Rightarrow \neg \psi (Y){\bigr ]}} Case 2: ψ ψ ∧ ∧ φ φ {\displaystyle \psi \land \varphi } Since X = Y {\displaystyle X=Y} , then [ ψ ψ ( X ) ⇒ ⇒ ψ ψ ( Y ) ] {\displaystyle {\bigl [}\psi (X)\Rightarrow \psi (Y){\bigr ]}} and [ φ φ ( X ) ⇒ ⇒ φ φ ( Y ) ] {\displaystyle {\bigl [}\varphi (X)\Rightarrow \varphi (Y){\bigr ]}} , which implies [ ( ψ ψ ( X ) ∧ ∧ φ φ ( X ) ) ⇒ ⇒ ψ ψ ( Y ) ∧ ∧ φ φ ( Y ) ) ] {\displaystyle {\bigl [}{\bigl (}\psi (X)\land \varphi (X){\bigr )}\Rightarrow \psi (Y)\land \varphi (Y){\bigr )}{\bigr ]}} , thus ( X = Y ) ⟹ ⟹ [ ( ψ ψ ( X ) ∧ ∧ φ φ ( X ) ) ⇒ ⇒ ψ ψ ( Y ) ∧ ∧ φ φ ( Y ) ) ] {\displaystyle (X=Y)\implies {\bigl [}{\bigl (}\psi (X)\land \varphi (X){\bigr )}\Rightarrow \psi (Y)\land \varphi (Y){\bigr )}{\bigr ]}} Case 3: ∃ ∃ z ( ψ ψ ) {\displaystyle \exists z(\psi )} Since X = Y {\displaystyle X=Y} , ψ ψ ( X , z ) ⇒ ⇒ ψ ψ ( Y , z ) {\displaystyle \psi (X,z)\Rightarrow \psi (Y,z)} assume by way of contradiction that the result is false, that is ∃ ∃ z ( ψ ψ ( X , z ) ) {\displaystyle \exists z(\psi (X,z))} is true but ∃ ∃ z ( ψ ψ ( Y , z ) ) {\displaystyle \exists z(\psi (Y,z))} is false. By existential instantiation , let z 0 {\displaystyle z_{0}} denote the value such that ψ ψ ( X , z 0 ) {\displaystyle \psi (X,z_{0})} is true. Then ψ ψ ( Y , z 0 ) {\displaystyle \psi (Y,z_{0})} is false by asumption, and therefore ψ ψ ( X , z 0 ) ⇒ ⇒ ψ ψ ( Y , z 0 ) {\displaystyle \psi (X,z_{0})\Rightarrow \psi (Y,z_{0})} is false, which contradicts our induction hypothesis, and the result follows.

See also [ edit ] Integration by substitution Lambda calculus § Substitution String interpolation Substitution property of Equality Trigonometric substitution Universal instantiation Principal equation form Notes [ edit ] ^ Some authors use [ t 1 / x 1 , …, t k / x k ] to denote that substitution, e.g.

M. Wirsing (1990). Jan van Leeuwen (ed.).

Algebraic Specification . Handbook of Theoretical Computer Science. Vol. B. Elsevier. pp.

675– 788.

, here: p. 682.

^ From a term algebra point of view, the set T of terms is the free term algebra over the set V of variables, hence for each substitution mapping σ: V → T there is a unique homomorphism σ : T → T that agrees with σ on V ⊆ T ; the above-defined application of σ to a term t is then viewed as applying the function σ to the argument t .

Citations [ edit ] ^ Hunter, Geoffrey (1996) [1971].

Metalogic: An Introduction to the Metatheory of Standard First-Order Logic . University of California Press (published 1973). p. 118.

ISBN 9780520023567 .

OCLC 36312727 .

( accessible to patrons with print disabilities ) ^ a b David A. Duffy (1991).

Principles of Automated Theorem Proving . Wiley.

^ a b Franz Baader , Wayne Snyder (2001).

Alan Robinson and Andrei Voronkov (ed.).

Unification Theory (PDF) . Elsevier. pp.

439– 526. Archived from the original (PDF) on 2015-06-08 . Retrieved 2014-09-24 .

^ N. Dershowitz; J.-P. Jouannaud (1990). "Rewrite Systems". In Jan van Leeuwen (ed.).

Formal Models and Semantics . Handbook of Theoretical Computer Science. Vol. B. Elsevier. pp.

243– 320.

^ Sobolev, S. K. (2001) [1994], "Equality axioms" , Encyclopedia of Mathematics , EMS Press ^ Deutsch, Harry and Pawel Garbacz, "Relative Identity", The Stanford Encyclopedia of Philosophy (Fall 2024 Edition), Edward N. Zalta & Uri Nodelman (eds.), forthcoming URL: https://plato.stanford.edu/entries/identity-relative/#StanAccoIden ^ Sobolev, S. K. (2001) [1994], "Individual variable" , Encyclopedia of Mathematics , EMS Press ^ Sobolev, S. K. (2001) [1994], "Free variable" , Encyclopedia of Mathematics , EMS Press ^ Fitting, M.

, First-Order Logic and Automated Theorem Proving (Berlin/Heidelberg: Springer, 1990), pp. 198–200 .

^ Margret H. Hoft; Hartmut F.W. Hoft (6 November 2002).

Computing with Mathematica . Elsevier.

ISBN 978-0-08-048855-4 .

^ Andre Heck (6 December 2012).

Introduction to Maple . Springer Science & Business Media.

ISBN 978-1-4684-0484-5 .

substitution.

^ Takeuti, Gaisi; Zaring, Wilson M. (1982).

"Introduction to Axiomatic Set Theory" .

Graduate Texts in Mathematics : 6– 9.

doi : 10.1007/978-1-4613-8168-6 .

ISSN 0072-5285 . Archived from the original on 2014-08-06.

References [ edit ] Crabbé, M. (2004).

On the Notion of Substitution .  Logic Journal of the IGPL, 12, 111–124.

Curry, H. B.

(1952) On the definition of substitution, replacement and allied notions in an abstract formal system . Revue philosophique de Louvain 50, 251–269.

Kleene, S. C.

(1967).

Mathematical Logic . Reprinted 2002, Dover.

ISBN 0-486-42533-9 Robinson, Alan J. A.; Voronkov, Andrei (2001-06-22).

Handbook of Automated Reasoning . Elsevier.

ISBN 978-0-08-053279-0 External links [ edit ] Substitution at the n Lab v t e Logic History Major fields Computer science Formal semantics (natural language) Inference Philosophy of logic Proof Semantics of logic Syntax Logics Classical Informal Critical thinking Reason Mathematical Non-classical Philosophical Theories Argumentation Metalogic Metamathematics Set Foundations Abduction Analytic and synthetic propositions Antecedent Consequent Contradiction Paradox Antinomy Deduction Deductive closure Definition Description Dichotomy Entailment Linguistic Form Induction Logical truth Name Necessity and sufficiency Premise Probability Proposition Reference Statement Substitution Truth Validity Lists Topics Mathematical logic Boolean algebra Set theory Other Logicians Rules of inference Paradoxes Fallacies Logic symbols Category Outline Portal WikiProject changes v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐5zltw
Cached time: 20250812015418
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.551 seconds
Real time usage: 0.761 seconds
Preprocessor visited node count: 4482/1000000
Revision size: 23511/2097152 bytes
Post‐expand include size: 124620/2097152 bytes
Template argument size: 10345/2097152 bytes
Highest expansion depth: 16/100
Expensive parser function count: 4/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 67838/5000000 bytes
Lua time usage: 0.256/10.000 seconds
Lua memory usage: 6917376/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  494.212      1 -total
 34.59%  170.941      2 Template:Reflist
 24.34%  120.303      7 Template:Navbox
 21.30%  105.284      7 Template:Cite_book
 16.40%   81.057      1 Template:Logic
 12.29%   60.748      1 Template:Short_description
  8.23%   40.682      5 Template:Rp
  7.84%   38.770      2 Template:Pagetype
  7.31%   36.110      5 Template:R/superscript
  7.20%   35.576      2 Template:Fix Saved in parser cache with key enwiki:pcache:5438948:|#|:idhash:canonical and timestamp 20250812015418 and revision id 1300315389. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Substitution_(logic)&oldid=1300315389 " Categories : Substitution (logic) Propositional calculus Concepts in logic Logical truth Automated theorem proving Logic programming Hidden categories: Articles with short description Short description is different from Wikidata All articles with failed verification Articles with failed verification from December 2024 All articles with unsourced statements Articles with unsourced statements from March 2023 This page was last edited on 13 July 2025, at 16:23 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Substitution (logic) 4 languages Add topic

