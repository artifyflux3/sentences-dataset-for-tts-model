Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Overview 2 Computing Toggle Computing subsection 2.1 Software engineering 2.2 Performance engineering 2.3 Computer security 3 Other fields 4 Life-support systems 5 See also Toggle See also subsection 5.1 Concepts 5.2 Applications 5.3 In literature 6 References Toggle the table of contents Single point of failure 20 languages العربية Català Deutsch Español فارسی Français 한국어 Italiano עברית Lietuvių Lombard Malagasy 日本語 Português Русский Simple English ไทย Українська 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Part whose failure will disrupt the entire system This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Single point of failure" – news · newspapers · books · scholar · JSTOR ( May 2014 ) ( Learn how and when to remove this message ) In this diagram the router is a single point of failure for the communication network between computers.

A single point of failure ( SPOF ) is a part of a system that would stop the entire system from working if it were to fail .

[ 1 ] The term single point of failure implies that there is not a backup or redundant option that would enable the system to continue to function without it. SPOFs are undesirable in any system with a goal of high availability or reliability , be it a business practice, software application, or other industrial system. If there is a SPOF present in a system, it produces a potential interruption to the system that is substantially more disruptive than an error would elsewhere in the system.

Overview [ edit ] Systems can be made robust by adding redundancy in all potential SPOFs. Redundancy can be achieved at various levels.

The assessment of a potential SPOF involves identifying the critical components of a complex system that would provoke a total systems failure in case of malfunction .

[ 2 ] Highly reliable systems should not rely on any such individual component.

For instance, the owner of a small tree care company may only own one woodchipper . If the chipper breaks, they may be unable to complete their current job and may have to cancel future jobs until they can obtain a replacement.  The owner could prepare for this in multiple ways. The owner of the tree care company may have spare parts ready for the repair of the wood chipper, in case it fails. At a higher level, they may have a second wood chipper that they can bring to the job site. Finally, at the highest level, they may have enough equipment available to completely replace everything at the work site in the case of multiple failures.

Possible SPOFs in a simple setup Using redundancy to avoid some SPOFs Completely redundant system without SPOFs (note: assumes generator and grid sources are each rated at N, each UPS is rated at N, and "A/C" and "Electrical" are in and of themselves completely fault tolerant systems) Computing [ edit ] This section needs to be updated . The reason given is: Needs updating for public cloud computing.

Please help update this article to reflect recent events or newly available information.

( May 2022 ) A fault-tolerant computer system can be achieved at the internal component level, at the system level (multiple machines), or site level (replication).

One would normally deploy a load balancer to ensure high availability for a server cluster at the system level.

[ 3 ] In a high-availability server cluster, each individual server may attain internal component redundancy by having multiple power supplies, hard drives, and other components. System-level redundancy could be obtained by having spare servers waiting to take on the work of another server if it fails.

Since a data center is often a support center for other operations such as business logic, it represents a potential SPOF in itself. Thus, at the site level, the entire cluster may be replicated at another location, where it can be accessed in case the primary location becomes unavailable. This is typically addressed as part of an IT disaster recovery program. While previously the solution to this SPOF was physical duplication of clusters, the high demand for this duplication led multiple businesses to outsource duplication to 3rd parties using cloud computing . It has been argued by scholars, however, that doing so simply moves the SPOF and may even increase the likelihood of a failure or cyberattack .

[ 4 ] Paul Baran and Donald Davies developed packet switching , a key part of "survivable communications networks". Such networks –  including ARPANET and the Internet –  are designed to have no single point of failure. Multiple paths between any two points on the network allow those points to continue communicating with each other, the packets "routing around" damage , even after any single failure of any one particular path or any one intermediate node.

Software engineering [ edit ] In software engineering , a bottleneck occurs when the capacity of an application or a computer system is limited by a single component. The bottleneck has lowest throughput of all parts of the transaction path. A common example is when a used programming language is capable of parallel processing , but a given snippet of code has several independent processes run sequentially rather than simultaneously.

Performance engineering [ edit ] Tracking down bottlenecks (sometimes known as hot spots – sections of the code that execute most frequently – i.e., have the highest execution count) is called performance analysis . Reduction is usually achieved with the help of specialized tools, known as performance analyzers or profilers. The objective is to make those particular sections of code perform as fast as possible to improve overall algorithmic efficiency .

Computer security [ edit ] A vulnerability or security exploit in just one component can compromise an entire system. One of the largest concerns in computer security is attempting to eliminate SPOFs without sacrificing too much convenience to the user. With the invention and popularization of the Internet , several systems became connected to the broader world through many difficult to secure connections.

[ 4 ] While companies have developed a number of solutions to this, the most consistent form of SPOFs in complex systems tends to remain user error , either by accidental mishandling by an operator or outside interference through phishing attacks.

[ 5 ] Other fields [ edit ] The concept of a single point of failure has also been applied to fields outside of engineering, computers, and networking, such as corporate supply chain management [ 6 ] and transportation management.

[ 7 ] Design structures that create single points of failure include bottlenecks and series circuits (in contrast to parallel circuits ).

In transportation, some noted recent examples of the concept's application have included the Nipigon River Bridge in Canada, where a partial bridge failure in January 2016 entirely severed road traffic between Eastern Canada and Western Canada for several days because it is located along a portion of the Trans-Canada Highway where there is no alternate detour route for vehicles to take; [ 8 ] and the Norwalk River Railroad Bridge in Norwalk , Connecticut , an aging swing bridge that sometimes gets stuck when opening or closing, disrupting rail traffic on the Northeast Corridor line.

[ 7 ] The concept of a single point of failure has also been applied to the intelligence field , and the processes of intelligence .

Edward Snowden talked of the dangers of being what he described as "the single point of failure" – the sole repository of information.

[ 9 ] Life-support systems [ edit ] This section needs expansion . You can help by adding to it .

( October 2019 ) A component of a life-support system that would constitute a single point of failure would be required to be extremely reliable.

See also [ edit ] Concepts [ edit ] Bus factor – Concept in risk management Cascading failure – Systemic risk of failure Domino effect – Cumulative effect produced when one event sets off a chain of other events Lusser's law – The probability product law of series components Redundancy – Duplication of critical components to increase reliability of a system Service-level agreement – Official commitment between a service provider and a customer Applications [ edit ] Dead man's switch – Device that reacts to the loss of the operator Jesus nut – Slang term for the main rotor-retaining nut of some helicopters Kill switch – Safety mechanism to quickly shut down a system Reliability engineering – Sub-discipline of systems engineering that emphasizes dependability Safety engineering – Engineering discipline which assures that engineered systems provide acceptable levels of safety In literature [ edit ] Achilles' heel – Critical weakness which can lead to downfall despite overall strength Hamartia – Protagonist's error in Greek dramatic theory References [ edit ] ^ 1:  
Designing Large-scale LANs – Page 31, K. Dooley, O'Reilly, 2002 ^ Ulbrich, Peter, et al.

"Eliminating single points of failure in software-based redundancy." 2012 Ninth European Dependable Computing Conference . IEEE, 2012.

^ Bezek, Andraz, and Matjaz Gams.

"Comparing a traditional and a multi-agent load-balancing system." Computing and Informatics 25.1 (2006): 17-42.

^ a b Lever, Kirsty E., Madjid Merabti, and Kashif Kifayat.

"Single Points of Failure Within Systems-of-Systems." 14th Annual Post Graduate Symposium on the Convergence of Telecommunications, Networking and Broadcasting (PGNet) . Vol. 183. 2013.

^ Alkhalil, Zainab; Hewage, Chaminda; Nawaf, Liqaa; Khan, Imtiaz (2021-03-09).

"Phishing Attacks: A Recent Comprehensive Study and a New Anatomy" .

Frontiers in Computer Science .

3 .

doi : 10.3389/fcomp.2021.563060 .

ISSN 2624-9898 .

^ Gary S. Lynch (Oct 7, 2009).

Single Point of Failure: The 10 Essential Laws of Supply Chain Risk Management . Wiley.

ISBN 978-0-470-42496-4 .

^ a b "Crucial, Century-Old, And Sometimes Stuck: Connecticut Bridge Is Key To Northeast Corridor" .

Connecticut Public Radio , August 8, 2017.

^ "The Nipigon River Bridge and other Trans-Canada bottlenecks" .

Global News , January 11, 2016.

^ "Edward Snowden: the true story behind his NSA leaks" .

Telegraph.co.uk .

Archived from the original on 2022-01-12 . Retrieved 2016-12-13 .

NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐lwncg
Cached time: 20250817004824
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.348 seconds
Real time usage: 0.472 seconds
Preprocessor visited node count: 2745/1000000
Revision size: 11103/2097152 bytes
Post‐expand include size: 28926/2097152 bytes
Template argument size: 1916/2097152 bytes
Highest expansion depth: 17/100
Expensive parser function count: 4/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 23846/5000000 bytes
Lua time usage: 0.238/10.000 seconds
Lua memory usage: 16538996/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  432.113      1 -total
 42.15%  182.152     13 Template:Annotated_link
 23.14%   99.994      1 Template:Reflist
 16.93%   73.137      1 Template:Cite_journal
 14.65%   63.283      3 Template:Ambox
 13.86%   59.888      1 Template:Short_description
 12.98%   56.098      1 Template:More_citations_needed
  8.07%   34.877      2 Template:Pagetype
  5.35%   23.119      5 Template:Main_other
  3.01%   12.992      1 Template:Update_section Saved in parser cache with key enwiki:pcache:26207504:|#|:idhash:canonical and timestamp 20250817004824 and revision id 1301375012. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Single_point_of_failure&oldid=1301375012 " Categories : Engineering failures Systems engineering Reliability engineering Fault-tolerant computer systems Network architecture Hidden categories: Articles with short description Short description matches Wikidata Articles needing additional references from May 2014 All articles needing additional references Wikipedia articles in need of updating from May 2022 All Wikipedia articles in need of updating Articles to be expanded from October 2019 All articles to be expanded This page was last edited on 19 July 2025, at 13:00 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Single point of failure 20 languages Add topic

