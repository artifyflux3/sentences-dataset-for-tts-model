Title: Record (computer science)

URL Source: https://en.wikipedia.org/wiki/Record_(computer_science)

Published Time: 2004-02-28T04:59:26Z

Markdown Content:
From Wikipedia, the free encyclopedia

In [computer science](https://en.wikipedia.org/wiki/Computer_science "Computer science"), a **record** (also called a **structure**, **[struct](https://en.wikipedia.org/wiki/Struct_(C_programming_language) "Struct (C programming language)")**, **user-defined type (UDT)**, or **[compound data type](https://en.wikipedia.org/wiki/Compound_data_type "Compound data type")**) is a composite [data structure](https://en.wikipedia.org/wiki/Data_structure "Data structure") â€“ a collection of [fields](https://en.wikipedia.org/wiki/Field_(computer_science) "Field (computer science)"), possibly of different [data types](https://en.wikipedia.org/wiki/Data_type "Data type"), typically fixed in number and sequence.[[1]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-1)

For example, a date could be stored as a record containing a [numeric](https://en.wikipedia.org/wiki/Number "Number")year field, a month field represented as a string, and a numeric day-of-month field. A circle record might contain a numeric radius and a center that is a point record containing x and y coordinates.

Notable applications include the [programming language](https://en.wikipedia.org/wiki/Programming_language "Programming language")_record type_ and for row-based storage, data organized as a sequence of records, such as a [database table](https://en.wikipedia.org/wiki/Database_table "Database table"), [spreadsheet](https://en.wikipedia.org/wiki/Spreadsheet "Spreadsheet") or [comma-separated values](https://en.wikipedia.org/wiki/Comma-separated_values "Comma-separated values") (CSV) file. In general, a record type value is stored in [memory](https://en.wikipedia.org/wiki/Main_memory "Main memory") and row-based storage is in [mass storage](https://en.wikipedia.org/wiki/Mass_storage "Mass storage").

A _record type_ is a [data type](https://en.wikipedia.org/wiki/Data_type "Data type") that describes such values and variables. Most modern programming languages allow the programmer to define new record types. The definition includes specifying the data type of each field and an [identifier](https://en.wikipedia.org/wiki/Identifier "Identifier") (name or label) by which it can be accessed. In [type theory](https://en.wikipedia.org/wiki/Type_theory "Type theory"), [product types](https://en.wikipedia.org/wiki/Product_type "Product type") (with no field names) are generally preferred due to their simplicity, but proper record types are studied in languages such as [System F-sub](https://en.wikipedia.org/wiki/System_F-sub "System F-sub"). Since type-theoretical records may contain [first-class function](https://en.wikipedia.org/wiki/First-class_function "First-class function")-typed fields in addition to data, they can express many features of [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming "Object-oriented programming").

In the context of storage such as in a [database](https://en.wikipedia.org/wiki/Database "Database") or [spreadsheet](https://en.wikipedia.org/wiki/Spreadsheet "Spreadsheet") a record is often called a _[row](https://en.wikipedia.org/wiki/Row\_(database) "Row (database)")_ and each field is called a [column](https://en.wikipedia.org/wiki/Column_(database) "Column (database)").[[2]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-2)[[3]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-Radv%C3%A1nyi-3)[[4]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-Kahate-4)[[5]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-5)

In [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming "Object-oriented programming"), an [object](https://en.wikipedia.org/wiki/Object_(computer_science) "Object (computer science)") is a record that contains state and method fields.

A record is similar to a [mathematical](https://en.wikipedia.org/wiki/Mathematics "Mathematics")[tuple](https://en.wikipedia.org/wiki/Tuple "Tuple"), although a [tuple](https://en.wikipedia.org/wiki/Tuple "Tuple") may or may not be considered a record, and vice versa, depending on conventions and the programming language. In the same vein, a record type can be viewed as the computer language analog of the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product "Cartesian product") of two or more [mathematical sets](https://en.wikipedia.org/wiki/Set_(mathematics) "Set (mathematics)"), or the implementation of an abstract [product type](https://en.wikipedia.org/wiki/Product_type "Product type") in a specific language.

A record differs from an [array](https://en.wikipedia.org/wiki/Array_data_type "Array data type") in that a record's elements (fields) are determined by the definition of the record, and may be heterogeneous whereas an array is a collection of elements with the same type.[[6]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-6)

The parameters of a [function](https://en.wikipedia.org/wiki/Function_(computer_programming) "Function (computer programming)") can be viewed collectively as the fields of a record and passing arguments to the function can be viewed as [assigning](https://en.wikipedia.org/wiki/Assignment_(computer_science) "Assignment (computer science)") the input parameters to the record fields. At a low-level, a function call includes an _activation record_ or _call frame_, that contains the parameters as well as other fields such as local variables and the return address.

[![Image 1](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3d/1880_census_Edison.gif/250px-1880_census_Edison.gif)](https://en.wikipedia.org/wiki/File:1880_census_Edison.gif)

Journal sheet from [1880 United States census](https://en.wikipedia.org/wiki/1880_United_States_census "1880 United States census"), showing tabular data with rows of data, each a record corresponding to a single person.

The concept of a record can be traced to various types of [tables](https://en.wikipedia.org/wiki/Table_(information) "Table (information)") and [ledgers](https://en.wikipedia.org/wiki/Ledger "Ledger") used in [accounting](https://en.wikipedia.org/wiki/Accounting "Accounting") since remote times. The modern notion of records in computer science, with fields of well-defined type and size, was already implicit in 19th century mechanical calculators, such as [Babbage](https://en.wikipedia.org/wiki/Charles_Babbage "Charles Babbage")'s [Analytical Engine](https://en.wikipedia.org/wiki/Analytical_Engine "Analytical Engine").[[7]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-7)[[8]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-8)

[![Image 2](https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Hollerith_Punched_Card.jpg/250px-Hollerith_Punched_Card.jpg)](https://en.wikipedia.org/wiki/File:Hollerith_Punched_Card.jpg)

Hollerith [punched card](https://en.wikipedia.org/wiki/Punched_card "Punched card") (1895)

The original machine-readable medium used for data (as opposed to control) was the [punch card](https://en.wikipedia.org/wiki/Punch_card "Punch card") used for records in the [1890 United States census](https://en.wikipedia.org/wiki/1890_United_States_census "1890 United States census"): each punch card was a single record. Compare the journal entry from 1880 and the punch card from 1895. Records were well-established in the first half of the 20th century, when most data processing was done using punched cards. Typically, each record of a data file would be recorded on one punched card, with specific columns assigned to specific fields. Generally, a record was the smallest unit that could be read from external storage (e.g., card reader, tape, or disk). The contents of punchcard-style records were originally called "unit records" because punchcards had pre-determined document lengths.[[9]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-:0-9) When storage systems became more advanced with the use of [hard drives](https://en.wikipedia.org/wiki/Hard_disk_drive "Hard disk drive") and [magnetic tape](https://en.wikipedia.org/wiki/Magnetic_tape "Magnetic tape"), variable-length records became the standard. A variable-length record is a record in which the size of the record in bytes is approximately equal to the sum of the sizes of its fields. This was not possible to do before more advanced storage hardware was invented because all of the punchcards had to conform to pre-determined document lengths that the computer could read, since at the time the cards had to be physically fed into a machine.

Most [machine language](https://en.wikipedia.org/wiki/Machine_language "Machine language") implementations and early [assembly languages](https://en.wikipedia.org/wiki/Assembly_language "Assembly language") did not have special syntax for records, but the concept was available (and extensively used) through the use of [index registers](https://en.wikipedia.org/wiki/Index_register "Index register"), [indirect addressing](https://en.wikipedia.org/wiki/Indirect_addressing "Indirect addressing"), and [self-modifying code](https://en.wikipedia.org/wiki/Self-modifying_code "Self-modifying code"). Some early computers, such as the [IBM 1620](https://en.wikipedia.org/wiki/IBM_1620 "IBM 1620"), had hardware support for delimiting records and fields, and special instructions for copying such records.

The concept of records and fields was central in some early file [sorting](https://en.wikipedia.org/wiki/Sorting "Sorting") and [tabulating](https://en.wikipedia.org/wiki/Tabulation "Tabulation") utilities, such as [IBM's Report Program Generator (RPG)](https://en.wikipedia.org/wiki/IBM_RPG "IBM RPG").

[COBOL](https://en.wikipedia.org/wiki/COBOL "COBOL") was the first widespread [programming language](https://en.wikipedia.org/wiki/Programming_language "Programming language") to support record types,[[10]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-10) and its record definition facilities were quite sophisticated at the time. The language allows for the definition of nested records with alphanumeric, integer, and fractional fields of arbitrary size and precision, and fields that automatically format any value assigned to them (e.g., insertion of currency signs, decimal points, and digit group separators). Each file is associated with a record variable where data is read into or written from. COBOL also provides a `MOVE``CORRESPONDING` statement that assigns corresponding fields of two records according to their names.

The early languages developed for numeric computing, such as [FORTRAN](https://en.wikipedia.org/wiki/FORTRAN "FORTRAN") (up to [FORTRAN IV](https://en.wikipedia.org/wiki/FORTRAN_IV "FORTRAN IV")) and [ALGOL 60](https://en.wikipedia.org/wiki/ALGOL_60 "ALGOL 60"), did not support record types; but later versions of those languages, such as [FORTRAN 77](https://en.wikipedia.org/wiki/FORTRAN_77 "FORTRAN 77") and [ALGOL 68](https://en.wikipedia.org/wiki/ALGOL_68 "ALGOL 68") did add them. The original [Lisp programming language](https://en.wikipedia.org/wiki/Lisp_programming_language "Lisp programming language") too was lacking records (except for the built-in [cons cell](https://en.wikipedia.org/wiki/Cons_cell "Cons cell")), but its [S-expressions](https://en.wikipedia.org/wiki/S-expression "S-expression") provided an adequate surrogate. The [Pascal programming language](https://en.wikipedia.org/wiki/Pascal_programming_language "Pascal programming language") was one of the first languages to fully integrate record types with other basic types into a logically consistent type system. The [PL/I](https://en.wikipedia.org/wiki/PL/I "PL/I") language provided for COBOL-style records. The [C](https://en.wikipedia.org/wiki/C_(programming_language) "C (programming language)") language provides the record concept using [structs](https://en.wikipedia.org/wiki/Struct_(C_programming_language) "Struct (C programming language)"). Most languages designed after Pascal (such as [Ada](https://en.wikipedia.org/wiki/Ada_(programming_language) "Ada (programming language)"), [Modula](https://en.wikipedia.org/wiki/Modula "Modula"), and [Java](https://en.wikipedia.org/wiki/Java_(programming_language) "Java (programming language)")), also supported records. Java introduced records in Java 17 and [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language) "C Sharp (programming language)") introduced records in C#. Records were introduced to Java to simplify data aggregate classes with less boilerplate, making all fields `final` and `private`, automatically generating all-argument constructors, getters, and the methods `boolean equals()`, `int hashCode()`, and `String toString()`. Java records all implicitly extend `java.lang.Record`.

// The following record:
record Rectangle(double length, double width) {}

// is equivalent to the following class:
public final class Rectangle {
 private final double length;
 private final double width;

 public Rectangle(double length, double width) {
 this.length = length;
 this.width = width;
 }

 public double length() {
 return this.length;
 }

 public double width() {
 return this.width;
 }

 @Override
 public boolean equals(Rectangle other) {
 return (this.length == other.length) && (this.width == other.width);
 }

 @Override
 public int hashCode() {
 return Objects.hash(length, width);
 }

 @Override
 public String toString() {
 return String.format("Rectangle[length=%s, width=%s]", length, width); 
 }
}

Although records are not often used in their original context anymore (i.e. being used solely for the purpose of containing data), records influenced newer [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming "Object-oriented programming") languages and [relational database](https://en.wikipedia.org/wiki/Relational_database "Relational database") management systems. Since records provided more modularity in the way data was stored and handled, they are better suited at representing complex, real-world concepts than the [primitive data types](https://en.wikipedia.org/wiki/Primitive_data_type "Primitive data type") provided by default in languages. This influenced later languages such as [C++](https://en.wikipedia.org/wiki/C%2B%2B "C++"), [Python](https://en.wikipedia.org/wiki/Python_(programming_language) "Python (programming language)"), [JavaScript](https://en.wikipedia.org/wiki/JavaScript "JavaScript"), and [Objective-C](https://en.wikipedia.org/wiki/Objective-C "Objective-C") which address the same modularity needs of programming.[[11]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-11)[Objects](https://en.wikipedia.org/wiki/Object_(computer_science) "Object (computer science)") in these languages are essentially records with the addition of [methods](https://en.wikipedia.org/wiki/Method_(computer_programming) "Method (computer programming)") and [inheritance](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming) "Inheritance (object-oriented programming)"), which allow programmers to manipulate the way data behaves instead of only the contents of a record. Many programmers regard records as obsolete now since object-oriented languages have features that far surpass what records are capable of. On the other hand, many programmers argue that the low overhead and ability to use records in [assembly language](https://en.wikipedia.org/wiki/Assembly_language "Assembly language") make records still relevant when programming with low levels of [abstraction](https://en.wikipedia.org/wiki/Abstraction_(computer_science) "Abstraction (computer science)"). Today, the most popular languages on the [TIOBE index](https://en.wikipedia.org/wiki/TIOBE_index "TIOBE index"), an indicator of the popularity of programming languages, have been influenced in some way by records due to the fact that they are object oriented.[[12]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-12) Query languages such as [SQL](https://en.wikipedia.org/wiki/SQL "SQL") and [Object Query Language](https://en.wikipedia.org/wiki/Object_Query_Language "Object Query Language") were also influenced by the concept of records. These languages allow the programmer to store sets of data, which are essentially records, in tables.[[13]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-13) This data can then be retrieved using a [primary key](https://en.wikipedia.org/wiki/Unique_key "Unique key"). The tables themselves are also records which may have a [foreign key](https://en.wikipedia.org/wiki/Foreign_key "Foreign key"): a key that references data in another table.

Operations for a record type include:

*   Declaration of a record type, including the position, type, and (possibly) name of each field
*   Declaration of a record; a variable typed as a record type
*   Construction of a record value; possibly with field value initialization
*   Read and write record field value
*   Comparison of two records for equality
*   Computation of a standard [hash value](https://en.wikipedia.org/wiki/Hash_function "Hash function") for the record

Some languages provide facilities that enumerate the fields of a record. This facility is needed to implement certain services such as [debugging](https://en.wikipedia.org/wiki/Debugging "Debugging"), [garbage collection](https://en.wikipedia.org/wiki/Garbage_collection_(computing) "Garbage collection (computing)"), and [serialization](https://en.wikipedia.org/wiki/Serialization "Serialization"). It requires some degree of [type polymorphism](https://en.wikipedia.org/wiki/Type_polymorphism "Type polymorphism").

In contexts that support record subtyping, operations include adding and removing fields of a record. A specific record type implies that a specific set of fields are present, but values of that type may contain additional fields. A record with fields _x_, _y_, and _z_ would thus belong to the type of records with fields _x_ and _y_, as would a record with fields _x_, _y_, and _r_. The rationale is that passing an (_x_,_y_,_z_) record to a function that expects an (_x_,_y_) record as argument should work, since that function will find all the fields it requires within the record. Many ways of practically implementing records in programming languages would have trouble with allowing such variability, but the matter is a central characteristic of record types in more theoretical contexts.

#### Assignment and comparison

[[edit](https://en.wikipedia.org/w/index.php?title=Record_(computer_science)&action=edit&section=5 "Edit section: Assignment and comparison")]

Most languages allow assignment between records that have exactly the same record type (including same field types and names, in the same order). Depending on the language, however, two record data types defined separately may be regarded as distinct types even if they have exactly the same fields.

Some languages may also allow assignment between records whose fields have different names, matching each field value with the corresponding field variable by their positions within the record; so that, for example, a [complex number](https://en.wikipedia.org/wiki/Complex_data_type "Complex data type") with fields called `real` and `imag` can be assigned to a [2D point](https://en.wikipedia.org/wiki/Cartesian_coordinates "Cartesian coordinates") record variable with fields `X` and `Y`. In this alternative, the two operands are still required to have the same sequence of field types. Some languages may also require that corresponding types have the same size and encoding as well, so that the whole record can be assigned as an uninterpreted [bit string](https://en.wikipedia.org/wiki/Bit_string "Bit string"). Other languages may be more flexible in this regard, and require only that each value field can be legally assigned to the corresponding variable field; so that, for example, a [short integer](https://en.wikipedia.org/wiki/Short_integer "Short integer") field can be assigned to a [long integer](https://en.wikipedia.org/wiki/Long_integer "Long integer") field, or vice versa.

Other languages (such as [COBOL](https://en.wikipedia.org/wiki/COBOL "COBOL")) may match fields and values by their names, rather than positions.

These same possibilities apply to the comparison of two record values for equality. Some languages may also allow order comparisons ('<'and '>'), using the [lexicographic order](https://en.wikipedia.org/wiki/Lexicographic_order "Lexicographic order") based on the comparison of individual fields.[_[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation\_needed "Wikipedia:Citation needed")_]

[PL/I](https://en.wikipedia.org/wiki/PL/I "PL/I") allows both of the preceding types of assignment, and also allows _structure expressions_, such as `a = a+1;` where "a" is a record, or structure in PL/I terminology.

#### Algol 68's distributive field selection

[[edit](https://en.wikipedia.org/w/index.php?title=Record_(computer_science)&action=edit&section=6 "Edit section: Algol 68's distributive field selection")]

In Algol 68, if `Pts` was an array of records, each with integer fields `X` and `Y`, one could write `Y of Pts` to obtain an array of integers, consisting of the `Y` fields of all the elements of `Pts`. As a result, the statements `Y of Pts[3]Â := 7` and `(Y of Pts)[3]Â := 7` would have the same effect.

#### Pascal's "with" statement

[[edit](https://en.wikipedia.org/w/index.php?title=Record_(computer_science)&action=edit&section=7 "Edit section: Pascal's \"with\" statement")]

In [Pascal](https://en.wikipedia.org/wiki/Pascal_programming_language "Pascal programming language"), the command `with R do S` would execute the command sequence `S` as if all the fields of record `R` had been declared as variables. Similarly to entering a different [namespace](https://en.wikipedia.org/wiki/Namespace "Namespace") in an object-oriented language like [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language) "C Sharp (programming language)"), it is no longer necessary to use the record name as a prefix to access the fields. So, instead of writing `Pt.XÂ := 5; Pt.YÂ := Pt.X + 3` one could write `with Pt do begin X := 5; Y := X + 3 end`.

### Representation in memory

[[edit](https://en.wikipedia.org/w/index.php?title=Record_(computer_science)&action=edit&section=8 "Edit section: Representation in memory")]

The representation of a record in memory varies depending on the programming language. Often, fields are stored in consecutive memory locations, in the same order as they are declared in the record type. This may result in two or more fields stored into the same word of memory; indeed, this feature is often used in [systems programming](https://en.wikipedia.org/wiki/Systems_programming "Systems programming") to access specific bits of a word. On the other hand, most compilers will add padding fields, mostly invisible to the programmer, in order to comply with alignment constraints imposed by the machineâ€”say, that a [floating point](https://en.wikipedia.org/wiki/Floating_point "Floating point") field must occupy a single word.

Some languages may implement a record as an array of addresses pointing to the fields (and, possibly, to their names and/or types). Objects in object-oriented languages are often implemented in rather complicated ways, especially in languages that allow [multiple class inheritance](https://en.wikipedia.org/wiki/Class_inheritance "Class inheritance").

### Self-defining records

[[edit](https://en.wikipedia.org/w/index.php?title=Record_(computer_science)&action=edit&section=9 "Edit section: Self-defining records")]

A _self-defining record_ is a type of record which contains information to identify the record type and to locate information within the record. It may contain the offsets of elements; the elements can therefore be stored in any order or may be omitted.[[14]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-14) The information stored in a self-defining record can be interpreted as [metadata](https://en.wikipedia.org/wiki/Metadata "Metadata") for the record, which is similar to what one would expect to find in the [UNIX](https://en.wikipedia.org/wiki/Unix "Unix")[metadata](https://en.wikipedia.org/wiki/Metadata "Metadata") regarding a file, containing information such as the record's creation time and the size of the record in [bytes](https://en.wikipedia.org/wiki/Byte "Byte"). Alternatively, various elements of the record, each including an element identifier, can simply follow one another in any order.

A record, especially in the context of row-based storage, may include **key** fields that allow indexing the records of a collection. A primary key is unique throughout all stored records; only one of this key exists.[[15]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-15) In other words, no duplicate may exist for any primary key. For example, an employee file might contain employee number, name, department, and salary. The employee number will be unique in the organization and will be the primary key. Depending on the storage medium and file organization, the employee number might be _[indexed](https://en.wikipedia.org/wiki/Indexed\_file "Indexed file")_â€”that is also stored in a separate file to make the lookup faster. The department code is not necessarily unique; it may also be indexed, in which case it would be considered a _secondary key_, or _alternate key_.[[16]](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_note-16) If it is not indexed, the entire employee file would have to be scanned to produce a listing of all employees in a specific department. Keys are usually chosen in a way that minimizes the chances of multiple values being feasibly mapped to by one key. For example, the salary field would not normally be considered usable as a key since many employees will likely have the same salary.

*   [Block (data storage)](https://en.wikipedia.org/wiki/Block_(data_storage) "Block (data storage)")â€“ Sequence of bits or bytes of a maximum predetermined size
*   [Composite data type](https://en.wikipedia.org/wiki/Composite_data_type "Composite data type")â€“ Programming language construct
*   [Data hierarchy](https://en.wikipedia.org/wiki/Data_hierarchy "Data hierarchy")â€“ Systematic organization of data
*   [Object composition](https://en.wikipedia.org/wiki/Object_composition "Object composition")â€“ Method in computer programming of forming higher-level object types
*   [Passive data structure](https://en.wikipedia.org/wiki/Passive_data_structure "Passive data structure")â€“ Another term for record
*   [Union type](https://en.wikipedia.org/wiki/Union_type "Union type")â€“ Data type that allows for values that are one of multiple different data types

1.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-1)**Felleisen, Matthias (2001). [_How To Design Programs_](https://archive.org/details/howtodesignprogr00fell_231). MIT Press. pp.[53](https://archive.org/details/howtodesignprogr00fell_231/page/n528), 60. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-0262062183](https://en.wikipedia.org/wiki/Special:BookSources/978-0262062183 "Special:BookSources/978-0262062183").
2.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-2)**["Computer Science Dictionary Definitions"](http://www.computingstudents.com/dictionary/?word=Record). _Computing Students_. Retrieved Jan 22, 2018.
3.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-Radv%C3%A1nyi_3-0)**RadvÃ¡nyi, Tibor (2014). [_Database Management Systems_](https://web.archive.org/web/20180923085530/https://www.tankonyvtar.hu/en/tartalom/tamop412A/2011-0038_49_radvanyi_en/index.html). EszterhÃ¡zy KÃ¡roly College. p.19. Archived from [the original](https://www.tankonyvtar.hu/en/tartalom/tamop412A/2011-0038_49_radvanyi_en/index.html) on 2018-09-23. Retrieved 23 September 2018.
4.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-Kahate_4-0)**Kahate, Atul (2006). [_Introduction to Database Management Systems_](https://books.google.com/books?id=mxYESolfLfoC). Pearson. p.3. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-81-317-0078-5](https://en.wikipedia.org/wiki/Special:BookSources/978-81-317-0078-5 "Special:BookSources/978-81-317-0078-5"). Retrieved 23 September 2018.
5.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-5)**Connolly, Thomas (2004). [_Database Solutions: A Step by Step Guide to Building Databases_](https://archive.org/details/databasesolution00conn_535) (2nd ed.). Pearson. p.[7](https://archive.org/details/databasesolution00conn_535/page/n19). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-0-321-17350-8](https://en.wikipedia.org/wiki/Special:BookSources/978-0-321-17350-8 "Special:BookSources/978-0-321-17350-8").
6.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-6)**Pape, Tobias; Kirilichev, Vasily; Bolz, Carl Friedrich; Hirschfeld, Robert (2017-01-13). ["Record data structures in racket: usage analysis and optimization"](https://dl.acm.org/doi/10.1145/3040575.3040578). _ACM SIGAPP Applied Computing Review_. **16** (4): 25â€“37. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/3040575.3040578](https://doi.org/10.1145%2F3040575.3040578). [ISSN](https://en.wikipedia.org/wiki/ISSN_(identifier) "ISSN (identifier)")[1559-6915](https://search.worldcat.org/issn/1559-6915). [S2CID](https://en.wikipedia.org/wiki/S2CID_(identifier) "S2CID (identifier)")[14306162](https://api.semanticscholar.org/CorpusID:14306162).
7.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-7)**Bromley, Allan (October 1998). ["Charles Babbage's Analytical Engine, 1838"](https://dl.acm.org/citation.cfm?id=612744). _IEEE Annals of the History of Computing_. **20** (4): 29â€“45. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1109/85.728228](https://doi.org/10.1109%2F85.728228). [S2CID](https://en.wikipedia.org/wiki/S2CID_(identifier) "S2CID (identifier)")[2285332](https://api.semanticscholar.org/CorpusID:2285332). Retrieved 23 September 2018.
8.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-8)**Swade, Doron. ["Automatic Computation: Charles Babbage and Computational Method"](http://www.rutherfordjournal.org/article030106.html). _The Rutherford Journal_. Retrieved 23 September 2018.
9.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-:0_9-0)**Edwin D. Reilly; Anthony Ralston; David Hemmendinger, eds. (2003). _Encyclopedia of computer science_ (4th ed.). Chichester, UK: Wiley. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-1-84972-160-8](https://en.wikipedia.org/wiki/Special:BookSources/978-1-84972-160-8 "Special:BookSources/978-1-84972-160-8"). [OCLC](https://en.wikipedia.org/wiki/OCLC_(identifier) "OCLC (identifier)")[436846454](https://search.worldcat.org/oclc/436846454).
10.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-10)**Sebesta, Robert W. (1996). [_Concepts of Programming Languages_](https://archive.org/details/conceptsofprogra00sebe/page/218) (Third ed.). Addison-Wesley Publishing Company, Inc. p.[218](https://archive.org/details/conceptsofprogra00sebe/page/218). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[0-8053-7133-8](https://en.wikipedia.org/wiki/Special:BookSources/0-8053-7133-8 "Special:BookSources/0-8053-7133-8").
11.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-11)**Leavens, Gary T.; Weihl, William E. (1990). ["Reasoning about object-oriented programs that use subtypes"](https://dx.doi.org/10.1145/97945.97970). [_Proceedings of the European conference on object-oriented programming on Object-oriented programming systems, languages, and applications - OOPSLA/ECOOP '90_](https://lib.dr.iastate.edu/cs_techreports/92). New York, New York, USA: ACM Press. pp.212â€“223. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/97945.97970](https://doi.org/10.1145%2F97945.97970). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[0-201-52430-9](https://en.wikipedia.org/wiki/Special:BookSources/0-201-52430-9 "Special:BookSources/0-201-52430-9"). [S2CID](https://en.wikipedia.org/wiki/S2CID_(identifier) "S2CID (identifier)")[46526](https://api.semanticscholar.org/CorpusID:46526).
12.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-12)**["Index: The Software Quality Company"](https://www.tiobe.com/tiobe-index/). _TIOBE.com_. Retrieved 2022-03-01.
13.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-13)**["What is a Relational Database (RDBMS)?"](https://www.oracle.com/database/what-is-a-relational-database/). _Oracle_. Retrieved February 28, 2022.
14.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-14)**Kraimer, Martin R. ["EPICS Input / Output Controller (IOC) Application Developer's Guide"](http://www.aps.anl.gov/epics/EpicsDocumentation/AppDevManuals/AppDevGuide/3.12BookFiles/AppDevGuide.book.html). _Argonne National Laboratory_. Retrieved November 25, 2015.
15.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-15)**["Add or change a table's primary key in Access"](https://support.microsoft.com/en-us/office/add-or-change-a-table-s-primary-key-in-access-07b4a84b-0063-4d56-8b00-65f2975e4379?ui=en-us&rs=en-us&ad=us). _support.microsoft.com_. Retrieved 2022-03-01.
16.   **[^](https://en.wikipedia.org/wiki/Record_(computer_science)#cite_ref-16)**["Alternate key - Oracle FAQ"](http://www.orafaq.com/wiki/Alternate_key). _www.orafaq.com_. Retrieved 2022-03-01.
