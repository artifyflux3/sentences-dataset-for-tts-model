Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Overview 2 History 3 Architecture Toggle Architecture subsection 3.1 File systems 3.1.1 Hadoop distributed file system 3.1.2 Other file systems 3.2 JobTracker and TaskTracker: the MapReduce engine 3.2.1 Scheduling 3.2.1.1 Fair scheduler 3.2.1.2 Capacity scheduler 3.3 Difference between Hadoop 1 and Hadoop 2 (YARN) 3.4 Difference between Hadoop 2 and Hadoop 3 3.5 Other applications 4 Prominent use cases 5 Hadoop hosting in the cloud 6 Commercial support Toggle Commercial support subsection 6.1 Branding 7 Papers 8 See also 9 References 10 Bibliography 11 External links Toggle the table of contents Apache Hadoop 32 languages العربية Azərbaycanca Български Català Čeština Deutsch Eesti Español فارسی Français 한국어 Bahasa Indonesia Italiano עברית Magyar മലയാളം Монгол Nederlands 日本語 Polski Português Română Русский Simple English Српски / srpski Suomi தமிழ் తెలుగు Українська اردو Tiếng Việt 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Distributed data processing framework Apache Hadoop Original author(s) Doug Cutting , Mike Cafarella Developer(s) Apache Software Foundation Initial release April 1, 2006 ; 19 years ago ( 2006-04-01 ) [ 1 ] Stable release 2.10.x 2.10.2 / May 31, 2022 ; 3 years ago ( 2022-05-31 ) [ 2 ] 3.4.x 3.4.0 / March 17, 2024 ; 17 months ago ( 2024-03-17 ) [ 2 ] Repository github .com /apache /hadoop Written in Java Operating system Cross-platform Type Distributed file system License Apache License 2.0 Website hadoop .apache .org Apache Hadoop ( / h ə ˈ d uː p / ) is a collection of open-source software utilities for reliable, scalable, distributed computing . It provides a software framework for distributed storage and processing of big data using the MapReduce programming model . Hadoop was originally designed for computer clusters built from commodity hardware , which is still the common use.

[ 3 ] It has since also found use on clusters of higher-end hardware.

[ 4 ] [ 5 ] All the modules in Hadoop are designed with a fundamental assumption that hardware failures are common occurrences and should be automatically handled by the framework.

[ 6 ] Overview [ edit ] The core of Apache Hadoop consists of a storage part, known as Hadoop Distributed File System (HDFS), and a processing part which is a MapReduce programming model. Hadoop splits files into large blocks and distributes them across nodes in a cluster. It then transfers packaged code into nodes to process the data in parallel. This approach takes advantage of data locality , [ 7 ] where nodes manipulate the data they have access to. This allows the dataset to be processed faster and more efficiently than it would be in a more conventional supercomputer architecture that relies on a parallel file system where computation and data are distributed via high-speed networking.

[ 8 ] [ 9 ] The base Apache Hadoop framework is composed of the following modules: Hadoop Common - contains libraries and utilities needed by other Hadoop modules; Hadoop Distributed File System (HDFS) - a distributed file-system that stores data on commodity machines, providing very high aggregate bandwidth across the cluster; Hadoop YARN - (introduced in 2012) is a platform responsible for managing computing resources in clusters and using them for scheduling users' applications; [ 10 ] [ 11 ] Hadoop MapReduce - an implementation of the MapReduce programming model for large-scale data processing.

Hadoop Ozone - (introduced in 2020) An object store for Hadoop The term Hadoop is often used for both base modules and sub-modules and also the ecosystem , [ 12 ] or collection of additional software packages that can be installed on top of or alongside Hadoop, such as Apache Pig , Apache Hive , Apache HBase , Apache Phoenix , Apache Spark , Apache ZooKeeper , Apache Impala , Apache Flume , Apache Sqoop , Apache Oozie , and Apache Storm .

[ 13 ] Apache Hadoop's MapReduce and HDFS components were inspired by Google papers on MapReduce and Google File System .

[ 14 ] The Hadoop framework itself is mostly written in the Java programming language , with some native code in C and command line utilities written as shell scripts .

Perl language can be easily used with Hadoop Streaming to implement the map and reduce parts of the user's program.

[ 15 ] History [ edit ] According to its co-founders, Doug Cutting and Mike Cafarella , the idea of Hadoop was conceived in the Google File System paper that was published in October 2003.

[ 16 ] [ 17 ] The concept was extended in the Google paper "MapReduce: Simplified Data Processing on Large Clusters".

[ 18 ] Development started on the Apache Nutch project, but was moved to the new Hadoop subproject in January 2006.

[ 19 ] Doug Cutting, who was working at Yahoo!

at the time, named it after his son's toy elephant.

[ 20 ] The initial code that was factored out of Nutch consisted of about 5,000 lines of code for HDFS and about 6,000 lines of code for MapReduce.

In March 2006, Owen O'Malley was the first committer to add to the Hadoop project; [ 21 ] Hadoop 0.1.0 was released in April 2006.

[ 22 ] It continues to evolve through contributions that are being made to the project.

[ 23 ] The first design document for the Hadoop Distributed File System was written by Dhruba Borthakur in 2007.

[ 24 ] Version Original release date Latest version Release date Unsupported: 0.10 0.10.1 2007-01-11 Unsupported: 0.11 0.11.2 2007-02-16 Unsupported: 0.12 2007-03-02 0.12.3 2007-04-06 Unsupported: 0.13 2007-06-04 0.13.1 2007-07-23 Unsupported: 0.14 2007-09-04 0.14.4 2007-11-26 Unsupported: 0.15 2007-10-29 0.15.3 2008-01-18 Unsupported: 0.16 2008-02-07 0.16.4 2008-05-05 Unsupported: 0.17 2008-05-20 0.17.2 2008-08-19 Unsupported: 0.18 2008-08-22 0.18.3 2009-01-29 Unsupported: 0.19 2008-11-21 0.19.2 2009-07-23 Unsupported: 0.20 2009-04-22 0.20.205.0 2011-10-17 Unsupported: 0.21 2011-05-11 0.21.0 Unsupported: 0.22 2011-12-10 0.22.0 Unsupported: 0.23 2011-11-11 0.23.11 2014-06-27 Unsupported: 1.0 2011-12-27 1.0.4 2012-10-12 Unsupported: 1.1 2012-10-13 1.1.2 2013-02-15 Unsupported: 1.2 2013-05-13 1.2.1 2013-08-01 Unsupported: 2.0 2012-05-23 2.0.6-alpha 2013-08-23 Unsupported: 2.1 2013-08-25 2.1.1-beta 2013-09-23 Unsupported: 2.2 2013-12-11 2.2.0 Unsupported: 2.3 2014-02-20 2.3.0 Unsupported: 2.4 2014-04-07 2.4.1 2014-06-30 Unsupported: 2.5 2014-08-11 2.5.2 2014-11-19 Unsupported: 2.6 2014-11-18 2.6.5 2016-10-08 Unsupported: 2.7 2015-04-21 2.7.7 2018-05-31 Unsupported: 2.8 2017-03-22 2.8.5 2018-09-15 Unsupported: 2.9 2017-12-17 2.9.2 2018-11-19 Supported: 2.10 2019-10-29 2.10.2 2022-05-31 [ 25 ] Unsupported: 3.0 2017-12-13 [ 26 ] 3.0.3 2018-05-31 [ 27 ] Unsupported: 3.1 2018-04-06 3.1.4 2020-08-03 [ 28 ] Latest version: 3.2 2019-01-16 3.2.4 2022-07-22 [ 29 ] Latest version: 3.3 2020-07-14 3.3.6 2023-06-23 [ 30 ] Latest version: 3.4 2024-03-17 3.4.0 2024-07-17 [ 31 ] Legend: Unsupported Supported Latest version Preview version Future version Architecture [ edit ] See also: Hadoop Distributed File System , Apache HBase , and MapReduce Hadoop consists of the Hadoop Common package, which provides file system and operating system level abstractions, a MapReduce engine (either MapReduce/MR1 or YARN/MR2) [ 32 ] and the Hadoop Distributed File System (HDFS). The Hadoop Common package contains the Java Archive (JAR) files and scripts needed to start Hadoop.

For effective scheduling of work, every Hadoop-compatible file system should provide location awareness, which is the name of the rack, specifically the network switch where a worker node is. Hadoop applications can use this information to execute code on the node where the data is, and, failing that, on the same rack/switch to reduce backbone traffic. HDFS uses this method when replicating data for data redundancy across multiple racks. This approach reduces the impact of a rack power outage or switch failure; if any of these hardware failures occurs, the data will remain available.

[ 33 ] A multi-node Hadoop cluster A small Hadoop cluster includes a single master and multiple worker nodes. The master node consists of a Job Tracker, Task Tracker, NameNode, and DataNode. A slave or worker node acts as both a DataNode and TaskTracker, though it is possible to have data-only and compute-only worker nodes. These are normally used only in nonstandard applications.

[ 34 ] Hadoop requires the Java Runtime Environment (JRE) 1.6 or higher. The standard startup and shutdown scripts require that Secure Shell (SSH) be set up between nodes in the cluster.

[ 35 ] In a larger cluster, HDFS nodes are managed through a dedicated NameNode server to host the file system index, and a secondary NameNode that can generate snapshots of the namenode's memory structures, thereby preventing file-system corruption and loss of data. Similarly, a standalone JobTracker server can manage job scheduling across nodes. When Hadoop MapReduce is used with an alternate file system, the NameNode, secondary NameNode, and DataNode architecture of HDFS are replaced by the file-system-specific equivalents.

File systems [ edit ] Hadoop distributed file system [ edit ] The Hadoop distributed file system (HDFS) is a distributed, scalable, and portable file system written in Java for the Hadoop framework. A Hadoop instance is divided into HDFS and MapReduce. HDFS is used for storing the data and MapReduce is used for processing data.
HDFS has five services as follows: Name Node Secondary Name Node Job tracker Data Node Task Tracker Top three are Master Services/Daemons/Nodes and bottom two are Slave Services. Master Services can communicate with each other and in the same way Slave services can communicate with each other. Name Node is a master node and Data node is its corresponding Slave node and can talk with each other.

Name Node: HDFS consists of only one Name Node  that is called the Master Node. The master node can track files, manage the file system and has the metadata of all of the stored data within it. In particular, the name node contains the details of the number of blocks, locations of the data node that the data is stored in, where the replications are stored, and other details. The name node has direct contact with the client.

Data Node: A Data Node stores data in it as blocks. This is also known as the slave node and it stores the actual data into HDFS which is responsible for the client to read and write. These are slave daemons. Every Data node sends a Heartbeat message to the Name node every 3 seconds and conveys that it is alive. In this way when Name Node does not receive a heartbeat from a data node for 2 minutes, it will take that data node as dead and starts the process of block replications on some other Data node.

Secondary Name Node: This is only to take care of the checkpoints of the file system metadata which is in the Name Node. This is also known as the checkpoint Node. It is the helper Node for the Name Node. The secondary name node instructs the name node to create & send fsimage & editlog file, upon which the compacted fsimage file is created by the secondary name node.

[ 36 ] Job Tracker: Job Tracker receives the requests for Map Reduce execution from the client. Job tracker talks to the Name Node to know about the location of the data that will be used in processing. The Name Node responds with the metadata of the required processing data.

Task Tracker: It is the Slave Node for the Job Tracker and it will take the task from the Job Tracker. It also receives code from the Job Tracker. Task Tracker will take the code and apply on the file. The process of applying that code on the file is known as Mapper.

[ 37 ] Hadoop cluster has nominally a single namenode plus a cluster of datanodes, although redundancy options are available for the namenode due to its criticality. Each datanode serves up blocks of data over the network using a block protocol specific to HDFS. The file system uses TCP/IP sockets for communication. Clients use remote procedure calls (RPC) to communicate with each other.

HDFS stores large files (typically in the range of gigabytes to terabytes [ 38 ] ) across multiple machines. It achieves reliability by replicating the data across multiple hosts, and hence theoretically does not require redundant array of independent disks (RAID) storage on hosts (but to increase input-output (I/O) performance some RAID configurations are still useful). With the default replication value, 3, data is stored on three nodes: two on the same rack, and one on a different rack. Data nodes can talk to each other to rebalance data, to move copies around, and to keep the replication of data high. HDFS is not fully POSIX-compliant, because the requirements for a POSIX file-system differ from the target goals of a Hadoop application. The trade-off of not having a fully POSIX-compliant file-system is increased performance for data throughput and support for non-POSIX operations such as Append.

[ 39 ] In May 2012, high-availability capabilities were added to HDFS, [ 40 ] letting the main metadata server called the NameNode manually fail-over onto a backup. The project has also started developing automatic fail-overs .

The HDFS file system includes a so-called secondary namenode , a misleading term that some might incorrectly interpret as a backup namenode when the primary namenode goes offline. In fact, the secondary namenode regularly connects with the primary namenode and builds snapshots of the primary namenode's directory information, which the system then saves to local or remote directories. These checkpointed images can be used to restart a failed primary namenode without having to replay the entire journal of file-system actions, then to edit the log to create an up-to-date directory structure. Because the namenode is the single point for storage and management of metadata, it can become a bottleneck for supporting a huge number of files, especially a large number of small files. HDFS Federation, a new addition, aims to tackle this problem to a certain extent by allowing multiple namespaces served by separate namenodes. Moreover, there are some issues in HDFS such as small file issues, scalability problems, Single Point of Failure (SPoF), and bottlenecks in huge metadata requests.
One advantage of using HDFS is data awareness between the job tracker and task tracker. The job tracker schedules map or reduce jobs to task trackers with an awareness of the data location. For example: if node A contains data (a, b, c) and node X contains data (x, y, z), the job tracker schedules node A to perform map or reduce tasks on (a, b, c) and node X would be scheduled to perform map or reduce tasks on (x, y, z). This reduces the amount of traffic that goes over the network and prevents unnecessary data transfer. When Hadoop is used with other file systems, this advantage is not always available. This can have a significant impact on job-completion times as demonstrated with data-intensive jobs.

[ 41 ] HDFS was designed for mostly immutable files and may not be suitable for systems requiring concurrent write operations.

[ 39 ] HDFS can be mounted directly with a Filesystem in Userspace (FUSE) virtual file system on Linux and some other Unix systems.

File access can be achieved through the native Java API, the Thrift API (generates a client in a number of languages e.g. C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa , Smalltalk, and OCaml ), the command-line interface , the HDFS-UI web application over HTTP , or via 3rd-party network client libraries.

[ 42 ] HDFS is designed for portability across various hardware platforms and for compatibility with a variety of underlying operating systems. The HDFS design introduces portability limitations that result in some performance bottlenecks, since the Java implementation cannot use features that are exclusive to the platform on which HDFS is running.

[ 43 ] Due to its widespread integration into enterprise-level infrastructure, monitoring HDFS performance at scale has become an increasingly important issue. Monitoring end-to-end performance requires tracking metrics from datanodes, namenodes, and the underlying operating system.

[ 44 ] There are currently several monitoring platforms to track HDFS performance, including Hortonworks , Cloudera , and Datadog .

Other file systems [ edit ] Hadoop works directly with any distributed file system that can be mounted by the underlying operating system by simply using a file:// URL; however, this comes at a price – the loss of locality. To reduce network traffic, Hadoop needs to know which servers are closest to the data, information that Hadoop-specific file system bridges can provide.

In May 2011, the list of supported file systems bundled with Apache Hadoop were: HDFS: Hadoop's own rack-aware file system.

[ 45 ] This is designed to scale to tens of petabytes of storage and runs on top of the file systems of the underlying operating systems .

Apache Hadoop Ozone: HDFS-compatible object store targeting optimized for billions of small files.

FTP file system: This stores all its data on remotely accessible FTP servers.

Amazon S3 (Amazon Simple Storage Service) object storage: This is targeted at clusters hosted on the Amazon Elastic Compute Cloud server-on-demand infrastructure. There is no rack-awareness in this file system, as it is all remote.

Windows Azure Storage Blobs (WASB) file system: This is an extension of HDFS that allows distributions of Hadoop to access data in Azure blob stores without moving the data permanently into the cluster.

A number of third-party file system bridges have also been written, none of which are currently in Hadoop distributions. However, some commercial distributions of Hadoop ship with an alternative file system as the default – specifically IBM and MapR .

In 2009, IBM discussed running Hadoop over the IBM General Parallel File System .

[ 46 ] The source code was published in October 2009.

[ 47 ] In April 2010, Parascale published the source code to run Hadoop against the Parascale file system.

[ 48 ] In April 2010, Appistry released a Hadoop file system driver for use with its own CloudIQ Storage product.

[ 49 ] In June 2010, HP discussed a location-aware IBRIX Fusion file system driver.

[ 50 ] In May 2011, MapR Technologies Inc.

announced the availability of an alternative file system for Hadoop, MapR FS , which replaced the HDFS file system with a full random-access read/write file system.

JobTracker and TaskTracker: the MapReduce engine [ edit ] Main article: MapReduce Atop the file systems comes the MapReduce Engine, which consists of one JobTracker , to which client applications submit MapReduce jobs. The JobTracker pushes work to available TaskTracker nodes in the cluster, striving to keep the work as close to the data as possible. With a rack-aware file system, the JobTracker knows which node contains the data, and which other machines are nearby. If the work cannot be hosted on the actual node where the data resides, priority is given to nodes in the same rack. This reduces network traffic on the main backbone network. If a TaskTracker fails or times out, that part of the job is rescheduled. The TaskTracker on each node spawns a separate Java virtual machine (JVM) process to prevent the TaskTracker itself from failing if the running job crashes its JVM. A heartbeat is sent from the TaskTracker to the JobTracker every few minutes to check its status. The Job Tracker and TaskTracker status and information is exposed by Jetty and can be viewed from a web browser.

Known limitations of this approach are: The allocation of work to TaskTrackers is very simple. Every TaskTracker has a number of available slots (such as "4 slots"). Every active map or reduce task takes up one slot. The Job Tracker allocates work to the tracker nearest to the data with an available slot. There is no consideration of the current system load of the allocated machine, and hence its actual availability.

If one TaskTracker is very slow, it can delay the entire MapReduce job –  especially towards the end, when everything can end up waiting for the slowest task. With speculative execution enabled, however, a single task can be executed on multiple slave nodes.

Scheduling [ edit ] By default Hadoop uses FIFO scheduling, and optionally 5 scheduling priorities to schedule jobs from a work queue.

[ 51 ] In version 0.19 the job scheduler was refactored out of the JobTracker, while adding the ability to use an alternate scheduler (such as the Fair scheduler or the Capacity scheduler , described next).

[ 52 ] Fair scheduler [ edit ] The fair scheduler was developed by Facebook .

[ 53 ] The goal of the fair scheduler is to provide fast response times for small jobs and Quality of service (QoS) for production jobs. The fair scheduler has three basic concepts.

[ 54 ] Jobs are grouped into pools .

Each pool is assigned a guaranteed minimum share.

Excess capacity is split between jobs.

By default, jobs that are uncategorized go into a default pool. Pools have to specify the minimum number of map slots, reduce slots, as well as a limit on the number of running jobs.

Capacity scheduler [ edit ] The capacity scheduler was developed by Yahoo. The capacity scheduler supports several features that are similar to those of the fair scheduler.

[ 55 ] Queues are allocated a fraction of the total resource capacity.

Free resources are allocated to queues beyond their total capacity.

Within a queue, a job with a high level of priority has access to the queue's resources.

There is no preemption once a job is running.

Difference between Hadoop 1 and Hadoop 2 (YARN) [ edit ] The biggest difference between Hadoop 1 and Hadoop 2 is the addition of YARN (Yet Another Resource Negotiator), which replaced the MapReduce engine in the first version of Hadoop.
YARN strives to allocate resources to various applications effectively. It runs two daemons, which take care of two different tasks: the resource manager , which does job tracking and resource allocation to applications, the application master , which monitors progress of the execution.

Difference between Hadoop 2 and Hadoop 3 [ edit ] There are important features provided by Hadoop 3. For example, while there is one single namenode in Hadoop 2, Hadoop 3, enables having multiple name nodes, which solves the single point of failure problem.

In Hadoop 3, there are containers working in principle of Docker , which reduces time spent on application development.

One of the biggest changes is that Hadoop 3 decreases storage overhead with erasure coding .

Also, Hadoop 3 permits usage of GPU hardware within the cluster, which is a very substantial benefit to execute deep learning algorithms on a Hadoop cluster.

[ 56 ] Other applications [ edit ] The HDFS is not restricted to MapReduce jobs. It can be used for other applications, many of which are under development at Apache. The list includes the HBase database, the Apache Mahout machine learning system, and the Apache Hive data warehouse . Theoretically, Hadoop could be used for any workload that is batch-oriented rather than real-time, is very data-intensive, and benefits from parallel processing . It can also be used to complement a real-time system, such as lambda architecture , Apache Storm , Flink , and Spark Streaming .

[ 57 ] Commercial applications of Hadoop include: [ 58 ] Log or clickstream analysis Marketing analytics Machine learning and data mining Image processing XML message processing Web crawling Archival work for compliance, including of relational and tabular data Prominent use cases [ edit ] On 19 February 2008, Yahoo! Inc. launched what they claimed was the world's largest Hadoop production application. The Yahoo! Search Webmap is a Hadoop application that runs on a Linux cluster with more than 10,000 cores and produced data that was used in every Yahoo! web search query.

[ 59 ] There are multiple Hadoop clusters at Yahoo! and no HDFS file systems or MapReduce jobs are split across multiple data centers. Every Hadoop cluster node bootstraps the Linux image, including the Hadoop distribution. Work that the clusters perform is known to include the index calculations for the Yahoo! search engine. In June 2009, Yahoo! made the source code of its Hadoop version available to the open-source community.

[ 60 ] In 2010, Facebook claimed that they had the largest Hadoop cluster in the world with 21 PB of storage.

[ 61 ] In June 2012, they announced the data had grown to 100 PB [ 62 ] and later that year they announced that the data was growing by roughly half a PB per day.

[ 63 ] As of 2013 [update] , Hadoop adoption had become widespread: more than half of the Fortune 50 companies used Hadoop.

[ 64 ] Hadoop hosting in the cloud [ edit ] Hadoop can be deployed in a traditional onsite datacenter as well as in the cloud .

[ 65 ] The cloud allows organizations to deploy Hadoop without the need to acquire hardware or specific setup expertise.

[ 66 ] Commercial support [ edit ] A number of companies offer commercial implementations or support for Hadoop.

[ 67 ] Branding [ edit ] The Apache Software Foundation has stated that only software officially released by the Apache Hadoop Project can be called Apache Hadoop or Distributions of Apache Hadoop .

[ 68 ] The naming of products and derivative works from other vendors and the term "compatible" are somewhat controversial within the Hadoop developer community.

[ 69 ] Papers [ edit ] Influential papers on the birth, growth, and curation of Hadoop and big data processing include:
Jeffrey Dean, Sanjay Ghemawat (2004) MapReduce: Simplified Data Processing on Large Clusters , Google. This paper inspired Doug Cutting to develop an open-source implementation of the Map-Reduce framework. He named it Hadoop, after his son's toy elephant.

Michael Franklin, Alon Halevy, David Maier (2005) From Databases to Dataspaces: A New Abstraction for Information Management . The authors highlight the need for storage systems to accept all data formats and to provide APIs for data access that evolve based on the storage system's understanding of the data.

Fay Chang et al. (2006) Bigtable: A Distributed Storage System for Structured Data , Google.

Robert Kallman et al. (2008) H-store: a high-performance, distributed main memory transaction processing system See also [ edit ] Free and open-source software portal Apache Accumulo – Secure Bigtable [ 70 ] Apache Cassandra , a column-oriented database that supports access from Hadoop Apache CouchDB , a database that uses JSON for documents, JavaScript for MapReduce queries, and regular HTTP for an API Big data Data-intensive computing HPCC – LexisNexis Risk Solutions High Performance Computing Cluster Hypertable – HBase alternative Sector/Sphere – Open source distributed storage and processing Slurm Workload Manager References [ edit ] ^ "Hadoop Releases" .

apache.org . Apache Software Foundation.

Archived from the original on 28 April 2019 . Retrieved 28 April 2019 .

^ a b "Apache Hadoop" .

Archived from the original on 1 June 2022 . Retrieved 27 September 2022 .

^ Judge, Peter (22 October 2012).

"Doug Cutting: Big Data Is No Bubble" .

silicon.co.uk . Retrieved 11 March 2018 .

^ Woodie, Alex (12 May 2014).

"Why Hadoop on IBM Power" .

datanami.com . Datanami . Retrieved 11 March 2018 .

^ Hemsoth, Nicole (15 October 2014).

"Cray Launches Hadoop into HPC Airspace" .

hpcwire.com . Retrieved 11 March 2018 .

^ "Welcome to Apache Hadoop!" .

hadoop.apache.org .

Archived from the original on 23 September 2017 . Retrieved 25 August 2016 .

^ "What is the Hadoop Distributed File System (HDFS)?" .

ibm.com .

IBM . Retrieved 12 April 2021 .

^ Malak, Michael (19 September 2014).

"Data Locality: HPC vs. Hadoop vs. Spark" .

datascienceassn.org . Data Science Association. Archived from the original on 10 September 2017 . Retrieved 30 October 2014 .

^ Wang, Yandong; Goldstone, Robin; Yu, Weikuan; Wang, Teng (October 2014). "Characterization and Optimization of Memory-Resident MapReduce on HPC Systems".

2014 IEEE 28th International Parallel and Distributed Processing Symposium . IEEE. pp.

799– 808.

doi : 10.1109/IPDPS.2014.87 .

ISBN 978-1-4799-3800-1 .

S2CID 11157612 .

^ "Resource (Apache Hadoop Main 2.5.1 API)" .

apache.org . Apache Software Foundation. 12 September 2014. Archived from the original on 6 October 2014 . Retrieved 30 September 2014 .

^ Murthy, Arun (15 August 2012).

"Apache Hadoop YARN – Concepts and Applications" .

hortonworks.com . Hortonworks.

Archived from the original on 11 September 2017 . Retrieved 30 September 2014 .

^ "Continuuity Raises $10 Million Series A Round to Ignite Big Data Application Development Within the Hadoop Ecosystem" .

finance.yahoo.com .

Marketwired . 14 November 2012.

Archived from the original on 10 September 2017 . Retrieved 30 October 2014 .

^ "Hadoop-related projects at" . Hadoop.apache.org.

Archived from the original on 23 September 2017 . Retrieved 17 October 2013 .

^ Data Science and Big Data Analytics: Discovering, Analyzing, Visualizing and Presenting Data . John Wiley & Sons. 19 December 2014. p. 300.

ISBN 9781118876220 . Retrieved 29 January 2015 .

^ "Using Hadoop streaming with perl for map reduce" .

Stack Overflow . 29 July 2025 . Retrieved 1 August 2025 .

^ Cutting, Mike; Cafarella, Ben; Lorica, Doug (31 March 2016).

"The next 10 years of Apache Hadoop" .

O'Reilly Media . Retrieved 12 October 2017 .

^ Ghemawat, Sanjay; Gobioff, Howard; Leung, Shun-Tak (2003).

"The Google File System" . pp.

20– 43.

Archived from the original on 2 December 2017 . Retrieved 5 March 2016 .

^ Dean, Jeffrey; Ghemawat, Sanjay (2004).

"MapReduce: Simplified Data Processing on Large Clusters" (PDF) . pp.

137– 150.

^ Cutting, Doug (28 January 2006).

"new mailing lists request: hadoop" .

issues.apache.org .

The Lucene PMC has voted to split part of Nutch into a new sub-project named Hadoop ^ Vance, Ashlee (17 March 2009).

"Hadoop, a Free Software Program, Finds Uses Beyond Search" .

The New York Times .

Archived from the original on 30 August 2011 . Retrieved 20 January 2010 .

^ Cutting, Doug (30 March 2006).

"[RESULT] VOTE: add Owen O'Malley as Hadoop committer" .

hadoop-common-dev (Mailing list).

^ "Index of /dist/hadoop/core" .

archive.apache.org . Retrieved 11 December 2017 .

^ "Who We Are" .

hadoop.apache.org . Retrieved 11 December 2017 .

^ Borthakur, Dhruba (2006).

"The Hadoop Distributed File System: Architecture and Design" (PDF) .

Apache Hadoop Code Repository .

^ "Release 2.10.2 available" .

hadoop.apache.org .

^ "Release 3.0.0 generally available" .

hadoop.apache.org .

^ "Release 3.0.3 available" .

hadoop.apache.org .

^ "Release 3.1.4 available" .

hadoop.apache.org .

^ "Release 3.2.4 available" .

hadoop.apache.org .

^ "Release 3.3.6 available" .

hadoop.apache.org .

^ "Release 3.4.0 available" .

hadoop.apache.org .

^ Chouraria, Harsh (21 October 2012).

"MR2 and YARN Briefly Explained" .

Cloudera.com . Archived from the original on 22 October 2013 . Retrieved 23 October 2013 .

^ "HDFS User Guide" . Hadoop.apache.org . Retrieved 4 September 2014 .

^ "Running Hadoop on Ubuntu Linux System(Multi-Node Cluster)" .

^ "Running Hadoop on Ubuntu Linux (Single-Node Cluster)" . Retrieved 6 June 2013 .

^ Balram.

"Big Data Hadoop Tutorial for Beginners" .

www.gyansetu.in . Retrieved 11 March 2021 .

^ "Apache Hadoop 2.7.5 – HDFS Users Guide" . Archived from the original on 23 October 2019 . Retrieved 19 June 2020 .

^ "HDFS Architecture" . Retrieved 1 September 2013 .

^ a b Pessach, Yaniv (2013).

Distributed Storage: Concepts, Algorithms, and Implementations .

OL 25423189M .

^ "Version 2.0 provides for manual failover and they are working on automatic failover" . Hadoop.apache.org.

Archived from the original on 1 June 2022 . Retrieved 30 July 2013 .

^ "Improving MapReduce performance through data placement in heterogeneous Hadoop Clusters" (PDF) . Eng.auburn.ed. April 2010.

^ "Mounting HDFS" . Archived from the original on 14 May 2014 . Retrieved 5 August 2016 .

^ Shafer, Jeffrey; Rixner, Scott; Cox, Alan.

"The Hadoop Distributed Filesystem: Balancing Portability and Performance" (PDF) . Rice University . Retrieved 19 September 2016 .

^ Mouzakitis, Evan (21 July 2016).

"How to Collect Hadoop Performance Metrics" . Retrieved 24 October 2016 .

^ "HDFS Users Guide – Rack Awareness" . Hadoop.apache.org.

Archived from the original on 13 November 2013 . Retrieved 17 October 2013 .

^ "Cloud analytics: Do we really need to reinvent the storage stack?" (PDF) . IBM. June 2009.

^ "HADOOP-6330: Integrating IBM General Parallel File System implementation of Hadoop Filesystem interface" . IBM. 23 October 2009.

^ "HADOOP-6704: add support for Parascale filesystem" . Parascale. 14 April 2010.

Archived from the original on 16 June 2012 . Retrieved 16 January 2012 .

^ "HDFS with CloudIQ Storage" . Appistry, Inc. 6 July 2010. Archived from the original on 5 April 2014 . Retrieved 10 December 2013 .

^ "High Availability Hadoop" . HP. 9 June 2010.

Archived from the original on 22 June 2010 . Retrieved 6 July 2010 .

^ "Hadoop Commands Guide" . 9 October 2024. Archived from the original on 17 August 2011 . Retrieved 17 November 2024 .

^ "Refactor the scheduler out of the JobTracker" .

Hadoop Common . Apache Software Foundation . Retrieved 9 June 2012 .

^ Jones, M. Tim (6 December 2011).

"Scheduling in Hadoop" .

ibm.com .

IBM .

Archived from the original on 5 April 2014 . Retrieved 20 November 2013 .

^ "Hadoop Fair Scheduler Design Document" (PDF) .

apache.org . Retrieved 12 October 2017 .

^ "CapacityScheduler Guide" .

Hadoop.apache.org . Retrieved 31 December 2015 .

^ "How Apache Hadoop 3 Adds Value Over Apache Hadoop 2" .

hortonworks.com . 7 February 2018. Archived from the original on 16 November 2018 . Retrieved 11 June 2018 .

^ Chintapalli, Sanket; Dagit, Derek; Evans, Bobby; Farivar, Reza; Graves, Thomas; Holderbaugh, Mark; Liu, Zhuo; Nusbaum, Kyle; Patil, Kishorkumar; Peng, Boyang Jerry; Poulosky, Paul (May 2016). "Benchmarking Streaming Computation Engines: Storm, Flink and Spark Streaming".

2016 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW) . IEEE. pp.

1789– 1792.

doi : 10.1109/IPDPSW.2016.138 .

ISBN 978-1-5090-3682-0 .

S2CID 2180634 .

^ " "How 30+ enterprises are using Hadoop", in DBMS2" . Dbms2.com. 10 October 2009.

Archived from the original on 17 February 2010 . Retrieved 17 October 2013 .

^ "Yahoo! Launches World's Largest Hadoop Production Application" .

Yahoo . 19 February 2008. Archived from the original on 7 March 2016 . Retrieved 31 December 2015 .

^ "Hadoop and Distributed Computing at Yahoo!" . Yahoo!. 20 April 2011.

Archived from the original on 14 August 2011 . Retrieved 17 October 2013 .

^ "HDFS: Facebook has the world's largest Hadoop cluster!" . Hadoopblog.blogspot.com. 9 May 2010 . Retrieved 23 May 2012 .

^ "Under the Hood: Hadoop Distributed File system reliability with Namenode and Avatarnode" . Facebook . Retrieved 13 September 2012 .

^ "Under the Hood: Scheduling MapReduce jobs more efficiently with Corona" . Facebook . Retrieved 9 November 2012 .

^ "Altior's AltraSTAR – Hadoop Storage Accelerator and Optimizer Now Certified on CDH4 (Cloudera's Distribution Including Apache Hadoop Version 4)" (Press release). Eatontown, NJ: Altior Inc. 18 December 2012 . Retrieved 30 October 2013 .

^ "Hadoop - Microsoft Azure" .

azure.microsoft.com .

Archived from the original on 11 September 2017 . Retrieved 11 December 2017 .

^ "Hadoop" . Azure.microsoft.com.

Archived from the original on 11 September 2017 . Retrieved 22 July 2014 .

^ "Why the Pace of Hadoop Innovation Has to Pick Up" . Gigaom.com. 25 April 2011. Archived from the original on 29 April 2011 . Retrieved 17 October 2013 .

^ "Defining Hadoop" . Wiki.apache.org. 30 March 2013 . Retrieved 17 October 2013 .

^ "Defining Hadoop Compatibility: revisited" . Mail-archives.apache.org. 10 May 2011 . Retrieved 17 October 2013 .

^ "Apache Accumulo User Manual: Security" .

apache.org . Apache Software Foundation . Retrieved 3 December 2014 .

Bibliography [ edit ] Lam, Chuck (28 July 2010).

Hadoop in Action (1st ed.).

Manning Publications . p. 325.

ISBN 978-1-935-18219-1 .

Venner, Jason (22 June 2009).

Pro Hadoop (1st ed.).

Apress . p. 440.

ISBN 978-1-430-21942-2 . Archived from the original on 5 December 2010 . Retrieved 3 July 2009 .

White, Tom (16 June 2009).

Hadoop: The Definitive Guide (1st ed.).

O'Reilly Media . p. 524.

ISBN 978-0-596-52197-4 .

Vohra, Deepak (October 2016).

Practical Hadoop Ecosystem: A Definitive Guide to Hadoop-Related Frameworks and Tools (1st ed.).

Apress . p. 429.

ISBN 978-1-4842-2199-0 .

Wiktorski, Tomasz (January 2019).

Data-intensive Systems . Cham, Switzerland: Springer.

ISBN 978-3-030-04603-3 .

External links [ edit ] Official website v t e The Apache Software Foundation Top-level projects Accumulo ActiveMQ Airavata Airflow Allura Ambari Ant Aries Arrow Apache HTTP Server APR Avro Axis Axis2 Beam Bloodhound Brooklyn Calcite Camel CarbonData Cassandra Cayenne CloudStack Cocoon Cordova CouchDB cTAKES CXF Derby Directory Drill Druid Empire-db Felix Flex Flink Flume FreeMarker Geronimo Groovy Guacamole Gump Hadoop HBase Helix Hive Iceberg Ignite Impala Jackrabbit James Jena JMeter Kafka Kudu Kylin Lucene Mahout Maven MINA mod_perl MyFaces Mynewt NiFi NetBeans Nutch NuttX OFBiz Oozie OpenEJB OpenJPA OpenNLP OрenOffice ORC PDFBox Parquet Phoenix POI Pig Pinot Pivot Qpid Roller RocketMQ Samza Shiro SINGA Sling Solr Spark Storm SpamAssassin Struts 1 Subversion Superset SystemDS Tapestry Thrift Tika TinkerPop Tomcat Trafodion Traffic Server UIMA Velocity Wicket Xalan Xerces XMLBeans Yetus ZooKeeper Commons BCEL BSF Daemon Jelly Logging Incubator Taverna Other projects Batik FOP Ivy Log4j Attic Apex AxKit Beehive iBATIS Click Continuum Deltacloud Etch Giraph Hama Harmony Jakarta Marmotta MXNet ODE River Shale Slide Sqoop Stanbol Tuscany Wave XML Licenses Apache License Category v t e File systems Comparison of file systems distributed Unix filesystem Disk and non-rotating ADFS AdvFS Amiga FFS Amiga OFS APFS AthFS bcachefs BFS Be File System Boot File System Byte File System ( z/VM ) Btrfs CVFS CXFS DFS EFS Encrypting File System Extent File System Episode ext ext2 ext3 ext3cow ext4 FAT exFAT Files-11 Fossil GPFS HAMMER HAMMER2 HFS ( Classic Mac OS ) HFS ( MVS ) HFS+ HPFS HTFS JFS LFS MFS Macintosh File System TiVo Media File System MINIX NetWare File System Next3 NILFS NILFS2 NSS NTFS OneFS OpenZFS PFS QFS QNX4FS ReFS ReiserFS Reiser4 Reliance Reliance Nitro RFS SFS Shared File System ( VM ) Smart File System SNFS Soup (Apple) Tux3 UBIFS UFS/UFS2 soft updates WAPBL VxFS WAFL Xiafs XFS Xsan zFS ( z/OS ) ZFS ( Sun ) Optical disc HSF ISO 9660 ISO 13490 UDF Flash memory and SSD APFS FAT exFAT TFAT EROFS F2FS JFS NVFS host-side wear leveling CHFS JFFS JFFS2 LogFS NILFS NILFS2 YAFFS UBIFS Distributed parallel BeeGFS Ceph CXFS GFS2 Google File System OCFS2 OrangeFS PVFS QFS Xsan more...

NAS 9P AFS ( OpenAFS ) AFP Coda DFS Google File System GPFS Lustre NCP NFS POHMELFS Hadoop SMB (CIFS) SSHFS more...

Specialized Aufs AXFS Boot File System Compact Disc File System cramfs Davfs2 EROFS FTPFS FUSE Lnfs LTFS NOVA MVFS SquashFS UMSDOS OverlayFS UnionFS Pseudo configfs devfs debugfs kernfs procfs specfs sysfs tmpfs WinFS Encrypted eCryptfs EncFS EFS Rubberhose SSHFS ZFS Types Clustered Global Grid Self-certifying Flash Journaling Log-structured Object Record-oriented Semantic Steganographic Synthetic Versioning Features Case preservation Copy-on-write Data deduplication Data scrubbing Execute in place Extent File attribute Extended file attributes File change log Fork Inode Links Hard Symbolic Access control Access-control list Filesystem-level encryption Permissions Modes Sticky bit Interfaces File manager File system API Installable File System Virtual file system Lists Cryptographic Default Log-structured Layouts Master Boot Record GUID Partition Table Apple Partition Map Authority control databases : National Germany Czech Republic Latvia Retrieved from " https://en.wikipedia.org/w/index.php?title=Apache_Hadoop&oldid=1305708255 " Categories : Apache Software Foundation projects Big data products Distributed file systems Free software for cloud computing Free software programmed in Java (programming language) Free system software Hadoop Software using the Apache license Hidden categories: Articles with short description Short description matches Wikidata Articles containing potentially dated statements from 2013 All articles containing potentially dated statements Use dmy dates from June 2019 This page was last edited on 13 August 2025, at 16:50 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Apache Hadoop 32 languages Add topic

