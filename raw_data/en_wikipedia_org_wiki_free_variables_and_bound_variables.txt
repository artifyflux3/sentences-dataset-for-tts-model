Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Examples Toggle Examples subsection 1.1 In Proofs 1.2 Variable-binding operators 2 Formal explanation Toggle Formal explanation subsection 2.1 Function Definition and Operators as Binders 3 Natural language Toggle Natural language subsection 3.1 Natural Language 3.1.1 Pronouns as Free Variables 3.1.2 Anaphors as Bound Variables 3.1.3 Binding Theory 3.1.4 Quantificational Noun Phrases 3.1.5 Wh-Questions and Relative Clauses 3.1.6 Sloppy vs. Strict Identity in Ellipsis 4 See also 5 References 6 Further reading Toggle the table of contents Free variables and bound variables 11 languages العربية Deutsch Eesti Español فارسی 한국어 日本語 Português Svenska Українська 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Concept in mathematics or computer science For bound variables in computer programming, see Name binding .

For free variables in systems of linear equations, see Free variables (system of linear equations) .

"Free variable" redirects here; not to be confused with Free parameter or Dummy variable (statistics) .

This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Free variables and bound variables" – news · newspapers · books · scholar · JSTOR ( December 2008 ) ( Learn how and when to remove this message ) In mathematics , and in other disciplines involving formal languages , including mathematical logic and computer science , a variable may be said to be either free or bound. Some older books use the terms real variable and apparent variable for free variable and bound variable , respectively. A free variable is a notation (symbol) that specifies places in an expression where substitution may take place and is not a parameter of this or any container expression. The idea is related to a placeholder (a symbol that will later be replaced by some value), or a wildcard character that stands for an unspecified symbol.

In computer programming , the term free variable refers to variables used in a function that are neither local variables nor parameters of that function. The term non-local variable is often a synonym in this context.

An instance of a variable symbol is bound , in contrast, if the value of that variable symbol has been bound to a specific value or range of values in the domain of discourse or universe . This may be achieved through the use of logical quantifiers, variable-binding operators, or an explicit statement of allowed values for the variable (such as, "...where n {\displaystyle n} is a positive integer".) A variable symbol overall is bound if at least one occurrence of it is bound.

[ 1 ] Since the same variable symbol may appear in multiple places in an expression, some occurrences of the variable symbol may be free while others are bound, [ 1 ] : 78 hence "free" and "bound" are at first defined for occurrences and then generalized over all occurrences of said variable symbol in the expression. However it is done, the variable ceases to be an independent variable on which the value of the expression depends, whether that value be a truth value or the numerical result of a calculation, or, more generally, an element of an image set of a function.

While the domain of discourse in many contexts is understood, when an explicit range of values for the bound variable has not been given, it may be necessary to specify the domain in order to properly evaluate the expression. For example, consider the following expression in which both variables are bound by logical quantifiers: ∀ ∀ y ∃ ∃ x ( x = y ) {\displaystyle \forall y\,\exists x\,\left(x={\sqrt {y}}\right)} This expression evaluates to false if the domain of x {\displaystyle x} and y {\displaystyle y} is the real numbers , but true if the domain is the complex numbers .

The term "dummy variable" is also sometimes used for a bound variable (more commonly in general mathematics than in computer science), but this should not be confused with the identically named but unrelated concept of dummy variable as used in statistics, most commonly in regression analysis .

[ 2 ] p.17 Examples [ edit ] Before stating a precise definition of free variable and bound variable, the following are some examples that perhaps make these two concepts clearer than the definition would: In the expression: ∑ ∑ k = 1 10 f ( k , n ) , {\displaystyle \sum _{k=1}^{10}f(k,n),} n {\displaystyle n} is a free variable and k {\displaystyle k} is a bound variable; consequently the value of this expression depends on the value of n {\displaystyle n} , but there is nothing called k {\displaystyle k} on which it could depend.

In the expression: ∫ ∫ 0 ∞ ∞ x y − − 1 e − − x d x , {\displaystyle \int _{0}^{\infty }x^{y-1}e^{-x}\,dx,} y {\displaystyle y} is a free variable and x {\displaystyle x} is a bound variable; consequently the value of this expression depends on the value of y {\displaystyle y} , but there is nothing called x {\displaystyle x} on which it could depend.

In the expression: lim h → → 0 f ( x + h ) − − f ( x ) h , {\displaystyle \lim _{h\rightarrow 0}{\frac {f(x+h)-f(x)}{h}},} x {\displaystyle x} is a free variable and h {\displaystyle h} is a bound variable; consequently the value of this expression depends on the value of x {\displaystyle x} , but there is nothing called h {\displaystyle h} on which it could depend.

In the expression: ∀ ∀ x ∃ ∃ y [ φ φ ( x , y , z ) ] , {\displaystyle \forall x\ \exists y\ {\Big [}\varphi (x,y,z){\Big ]},} z {\displaystyle z} is a free variable and x {\displaystyle x} and y {\displaystyle y} are bound variables, associated with logical quantifiers ; consequently the logical value of this expression depends on the value of z {\displaystyle z} , but there is nothing called x {\displaystyle x} or y {\displaystyle y} on which it could depend.

In Proofs [ edit ] In a broader context, bound variables are fundamental to the structure of mathematical proofs . For example, the following proof shows that the square of any positive even integer is divisible by 4: Let n {\displaystyle n} be an arbitrary positive even integer. By definition, there exists an integer k {\displaystyle k} such that n = 2 k {\displaystyle n=2k} . Substituting this into the expression for the square gives n 2 = ( 2 k ) 2 = 4 k 2 {\displaystyle n^{2}=(2k)^{2}=4k^{2}} . Since k {\displaystyle k} is an integer, k 2 {\displaystyle k^{2}} is also an integer. Therefore, n 2 {\displaystyle n^{2}} is divisible by 4.

In this proof, both n {\displaystyle n} and k {\displaystyle k} function as bound variables, but they are bound in different ways.

[ 3 ] The variable n {\displaystyle n} is introduced as an arbitrary but particular element of a set. The statement "Let n {\displaystyle n} be..." implicitly functions as a universal quantifier , binding n {\displaystyle n} for the scope of the proof. The proof establishes a property for this single, arbitrary n {\displaystyle n} , which licenses the general conclusion that the property holds for all positive even integers.

[ 4 ] The variable k {\displaystyle k} , on the other hand, is bound by an existential quantifier ("there exists an integer k {\displaystyle k} "). It is introduced to represent a specific, though unnamed, integer whose existence is guaranteed by the definition of n {\displaystyle n} being even. The scope of k {\displaystyle k} is limited to the reasoning that follows its introduction.

[ 5 ] Thus, neither variable is free; their meaning is entirely determined by their role within the logical structure of the proof.

Variable-binding operators [ edit ] In mathematics and logic , a number of symbols function as variable-binding operators . These operators take a function or an open formula as an argument and bind a free variable within that expression to a specific domain or range of values, creating a new expression whose meaning does not depend on the bound variable.

[ 6 ] Common variable-binding operators include: The summation ( Σ Σ {\displaystyle \Sigma } ) and product ( Π Π {\displaystyle \Pi } ) operators, which bind a variable over a set or range of values.

∑ ∑ x ∈ ∈ S f ( x ) ∏ ∏ x ∈ ∈ S f ( x ) {\displaystyle \sum _{x\in S}f(x)\quad \quad \quad \prod _{x\in S}f(x)} The integral ( ∫ ∫ {\displaystyle \int } ) and limit ( lim {\displaystyle \lim } ) operators, which bind a variable over a continuum or as it approaches a certain value.

∫ ∫ a b f ( x ) d x lim x → → c f ( x ) {\displaystyle \int _{a}^{b}f(x)\,dx\quad \quad \lim _{x\to c}f(x)} The logical quantifiers , such as the universal quantifier ( ∀ ∀ {\displaystyle \forall } ) and the existential quantifier ( ∃ ∃ {\displaystyle \exists } ), which bind a variable over a domain of discourse .

∀ ∀ x , P ( x ) ∃ ∃ x , P ( x ) {\displaystyle \forall x,P(x)\quad \quad \quad \exists x,P(x)} In each case, the variable x is bound within the expression that follows the operator (e.g., f ( x ) {\displaystyle f(x)} or P ( x ) {\displaystyle P(x)} ). Many of these operators act on a function of the bound variable. While standard notation is often sufficient, complex expressions with nested operators can become ambiguous, particularly if the same variable name is reused. This can lead to a problem known as variable capture , where a variable intended to be free is incorrectly bound by an operator in a different scope.

[ 7 ] To avoid such ambiguity, it can be useful to switch to a notation that makes the binding explicit, treating the operators as higher-order functions . This approach, rooted in the principles of lambda calculus , clearly separates the function being operated on from the operator itself.

[ 8 ] For example: The summation ∑ ∑ k = 1 10 f ( k , n ) {\displaystyle \sum _{k=1}^{10}f(k,n)} can be written to make the functional argument explicit: ∑ ∑ { 1 , … … , 10 } ( k ↦ ↦ f ( k , n ) ) {\displaystyle \sum _{\{1,\ldots ,10\}}(k\mapsto f(k,n))} Here, the operator ∑ ∑ S f {\displaystyle \sum _{S}f} applies to the set S and the function f .

The derivative operator can also be represented clearly as taking a function as its argument: D ( x ↦ ↦ x 2 + 2 x + 1 ) {\displaystyle D(x\mapsto x^{2}+2x+1)} This notation clarifies that the operator D {\displaystyle D} is applied to the entire function x ↦ ↦ x 2 + 2 x + 1 {\displaystyle x\mapsto x^{2}+2x+1} , rather than just an expression in which x {\displaystyle x} happens to be a variable.

Formal explanation [ edit ] Tree summarizing the syntax of the expression ∀ ∀ x ( ( ∃ ∃ y A ( x ) ) ∨ ∨ B ( z ) ) {\displaystyle \forall x\,((\exists y\,A(x))\vee B(z))} Variable-binding mechanisms occur in different contexts in mathematics, logic and computer science. In all cases, however, they are purely syntactic properties of expressions and variables in them. For this section we can summarize syntax by identifying an expression with a tree whose leaf nodes are variables, constants, function constants or predicate constants and whose non-leaf nodes are logical operators. This expression can then be determined by doing an in-order traversal of the tree. Variable-binding operators are logical operators that occur in almost every formal language. A binding operator Q {\displaystyle Q} takes two arguments: a variable v {\displaystyle v} and an expression P {\displaystyle P} , and when applied to its arguments produces a new expression Q ( v , P ) {\displaystyle Q(v,P)} . The meaning of binding operators is supplied by the semantics of the language and does not concern us here.

Variable binding relates three things: a variable v {\displaystyle v} , a location a {\displaystyle a} for that variable in an expression and a non-leaf node n {\displaystyle n} of the form Q ( v , P ) {\displaystyle Q(v,P)} . It worth noting that we define a location in an expression as a leaf node in the syntax tree. Variable binding occurs when that location is below the node n {\displaystyle n} .

In the lambda calculus , x is a bound variable in the term M = λx. T and a free variable in the term T . We say x is bound in M and free in T . If T contains a subterm λx. U then x is rebound in this term. This nested, inner binding of x is said to "shadow" the outer binding. Occurrences of x in U are free occurrences of the new x .

[ 9 ] Variables bound at the top level of a program are technically free variables within the terms to which they are bound but are often treated specially because they can be compiled as fixed addresses. Similarly, an identifier bound to a recursive function is also technically a free variable within its own body but is treated specially.

A closed term is one containing no free variables.

Function Definition and Operators as Binders [ edit ] A clear example of a variable-binding operator from mathematics is function definition. An expression that defines a function, such as: f = [ ( x 1 , … … , x n ) ↦ ↦ t ] {\displaystyle f=\left[(x_{1},\ldots ,x_{n})\mapsto t\right]} binds the variables x 1 , … … , x n {\displaystyle x_{1},\ldots ,x_{n}} . The expression t {\displaystyle t} , which forms the body of the function, may contain some, all, or none of the variables x 1 , … … , x n {\displaystyle x_{1},\ldots ,x_{n}} , which are its formal parameters. Any occurrence of these variables within t {\displaystyle t} is bound by the function definition. The body t {\displaystyle t} may also contain other variables, which would be considered free variables whose values must be determined from a wider context.

[ 6 ] This type of expression is directly analogous to lambda expressions in lambda calculus , where the λ λ {\displaystyle \lambda } symbol is the fundamental variable-binding operator. For instance, the function definition ( x ↦ ↦ x 2 ) {\displaystyle (x\mapsto x^{2})} is equivalent to the lambda abstraction λ λ x .

x 2 {\displaystyle \lambda x.x^{2}} .

[ 8 ] Other mathematical operators can be understood as higher-order functions that bind variables. For example, the summation operator, Σ Σ {\displaystyle \Sigma } , can be analyzed as an operator that takes a function and a set to evaluate that function over. The expression: ∑ ∑ x ∈ ∈ S x 2 {\displaystyle \sum _{x\in S}{x^{2}}} binds the variable x within the term x 2 {\displaystyle x^{2}} . The scope of the binding is the term that follows the summation symbol. This expression can be treated as a more compact notation for: ∑ ∑ S ( x ↦ ↦ x 2 ) {\displaystyle \sum _{S}{(x\mapsto x^{2})}} Here, ∑ ∑ S f {\displaystyle \sum _{S}{f}} is an operator with two parameters: a one-parameter function f {\displaystyle f} (in this case, x ↦ ↦ x 2 {\displaystyle x\mapsto x^{2}} ) and a set S {\displaystyle S} to evaluate that function over.

Other operators can be expressed in a similar manner. The universal quantifier ∀ ∀ x ∈ ∈ S , P ( x ) {\displaystyle \forall x\in S,P(x)} can be understood as an operator that evaluates to the logical conjunction of the Boolean-valued function P {\displaystyle P} applied to each element in the (possibly infinite) set S {\displaystyle S} . Likewise, the product operator ( Π Π {\displaystyle \Pi } ), the limit operator ( lim n → → ∞ ∞ {\displaystyle \lim _{n\to \infty }} ), and the integral operator ( ∫ ∫ a b f ( x ) d x {\displaystyle \int _{a}^{b}f(x)\,dx} ) all function as variable binders, binding the variables n {\displaystyle n} and x {\displaystyle x} respectively over a specified domain.

[ 10 ] Natural language [ edit ] Natural Language [ edit ] When analyzed through the lens of formal semantics , natural languages exhibit a system of variable binding that is analogous to what is found in formal logic and computer science .

[ 11 ] This system governs how referring expressions, particularly pronouns , are interpreted within a sentence or discourse.

[ 12 ] Pronouns as Free Variables [ edit ] In English, personal pronouns such as he , she , they , and their variants (e.g., her , him ) can function as free variables .

[ 13 ] A free variable is a term whose referent is not determined within the immediate syntactic structure of the sentence and must be identified by the broader context, which can be either linguistic or situational ( pragmatic ).

[ 14 ] Consider the following sentence: Lisa found her book.

The possessive pronoun her is a free variable. Its interpretation is flexible; it can refer to Lisa , an entity within the sentence, or to some other female individual salient in the context of the utterance.

[ 12 ] This ambiguity leads to two primary interpretations, which can be formally represented using co-indexing subscripts.

[ 15 ] An identical subscript indicates coreference , while different subscripts signal that the expressions refer to different entities.

Lisa i found her i book.

(This interpretation signifies coreference, where "her" refers to Lisa. This is often called an anaphoric reading, where "her" is an anaphor and "Lisa" is its antecedent .) Lisa i found her j book.

(In this interpretation, "her" refers to a female individual who is not Lisa, for instance, a person named Jane who was mentioned earlier in the conversation.) This distinction is not merely a theoretical exercise. Some languages have distinct pronominal forms to differentiate between these two readings. For example, Norwegian and Swedish use the reflexive possessive sin for the coreferential reading ( her i ) and a non-reflexive form like hennes (in Swedish) for the non-coreferential reading ( her j ).

[ 16 ] While English does not have this explicit distinction in its standard pronouns, it can force a coreferential reading by using the emphatic possessive own .

[ 17 ] Lisa i found her i own book. (Coreference is required) * Lisa i found her j own book. (This interpretation is ungrammatical) Anaphors as Bound Variables [ edit ] In contrast to personal pronouns, reflexive pronouns (e.g., himself , herself , themselves ) and reciprocal pronouns (e.g., each other ) act as bound variables , also known in linguistics as anaphors .

[ 15 ] A bound variable is an expression that must be co-indexed with, and c-commanded by, an antecedent within a specific syntactic domain.

[ 15 ] Consider the sentence: Jane hurt herself.

The reflexive pronoun herself must refer to the subject of the clause, Jane . It cannot refer to any other individual.

[ 12 ] This obligatory coreference is a hallmark of a bound variable.

Jane i hurt herself i . (Grammatical interpretation: herself = Jane ) * Jane i hurt herself j . (Ungrammatical interpretation: herself ≠ Jane ) This binding relationship can be formally captured using a lambda expression, a tool from lambda calculus used in formal semantics to model function abstraction and application.

[ 18 ] The sentence can be represented as: (λx.x hurt x)(Jane) In this notation: λx is the lambda operator that binds the variable x .

x hurt x is the predicate , a function that takes an argument and states that this argument hurt itself.

(Jane) is the argument applied to the function.

The expression evaluates to "Jane hurt Jane," correctly capturing the fact that the subject and object of the verb are the same entity.

[ 18 ] Binding Theory [ edit ] The distinct behavior of pronouns and anaphors is systematically explained by the Binding Theory , a central component of Noam Chomsky's Government and Binding Theory .

[ 15 ] This theory proposes three principles that govern the interpretation of different types of noun phrases : Principle A: An anaphor (reflexive, reciprocal) must be bound in its governing category (roughly, the local clause ).

[ 15 ] This explains why herself in "Jane hurt herself" must be bound by Jane .

Principle B: A pronoun must be free in its governing category.

[ 15 ] This explains why a personal pronoun often cannot be bound by a local antecedent. For example, in "Ashley hit her," the pronoun her cannot refer to Ashley .

[ 19 ] * Ashley i hit her i . (Ungrammatical due to Principle B) Ashley i hit her j . (Grammatical; her refers to someone other than Ashley) Principle C: An R-expression (a referring expression like a proper name, e.g., Jane , or a definite description, e.g., the woman ) must be free everywhere.

[ 15 ] This prevents an R-expression from being co-indexed with a c-commanding pronoun, as in * He i said that John i was tired*.

[ 20 ] Quantificational Noun Phrases [ edit ] The concept of variable binding is essential for understanding quantificational noun phrases (QNPs), such as every student , some politician , or no one .

[ 18 ] Unlike proper names, these phrases do not refer to a specific entity. Instead, they express a quantity over a set of individuals.

[ 18 ] A QNP can bind a pronoun that falls within its scope , making the pronoun a bound variable.

Every student i thinks he i is smart.

In this sentence, the pronoun he is most naturally interpreted as a bound variable.

[ 21 ] Its reference co-varies with the individuals in the set denoted by "every student". The sentence does not mean that every student thinks a specific person (e.g., Peter) is smart; rather, it means that for each individual student x {\displaystyle x} , x {\displaystyle x} thinks that x {\displaystyle x} is smart. In syntactic theories, this is often analyzed via a process of Quantifier Raising (QR) , where the QNP moves at the abstract syntactic level of Logical Form to a position where it c-commands and binds the pronoun.

[ 21 ] Wh-Questions and Relative Clauses [ edit ] Variable binding is also central to the analysis of wh-movement , which occurs in the formation of questions and relative clauses .

[ 22 ] Wh -words like who , what , and which function as operators that bind a variable in the main clause.

[ 23 ] Question: Who i does John like t i ?

Relative Clause: The man [who i Mary saw t i ] is my brother.

In these structures, the wh -word is said to move from an underlying position, leaving behind a "trace" ( t ) {\displaystyle (t)} , which is treated as a bound variable.

[ 15 ] The meaning of the question can be paraphrased as "For which person x {\displaystyle x} , does John like x {\displaystyle x} ?".

[ 18 ] Similarly, the relative clause denotes a set of individuals x {\displaystyle x} such that "Mary saw x {\displaystyle x} ".

[ 18 ] Sloppy vs. Strict Identity in Ellipsis [ edit ] The distinction between free and bound variables provides a powerful explanation for certain ambiguities that arise under VP-ellipsis .

[ 24 ] [ 25 ] Consider the following sentence: John loves his mother, and Bill does too.

This sentence has two distinct interpretations: Strict Identity: Bill loves John's mother.

Sloppy Identity : Bill loves Bill's mother.

This ambiguity can be explained by the status of the pronoun his in the first clause.

[ 19 ] If his is treated as a free variable referring to John, the elided (or "missing") verb phrase is interpreted as "loves John's mother". When this is applied to Bill, the result is the strict reading.

[ 19 ] If his is treated as a bound variable bound by the subject of its clause (i.e., John ), the verb phrase is interpreted as a lambda-abstracted property: λx.x loves x's mother . When this property is applied to Bill, the result is the sloppy reading.

[ 19 ] The existence of the sloppy identity reading is considered strong evidence for the psychological reality of bound variable interpretations in the grammar of natural languages .

[ 26 ] Thus, the distribution and interpretation of pronouns and other referring expressions in natural languages are not random but are governed by a sophisticated syntactic and semantic system.

[ 12 ] The distinction between free and bound variables is a cornerstone of modern linguistic theory, providing the analytical tools necessary to account for coreference, quantification, question formation, and ellipsis.

See also [ edit ] Closure (computer science) Combinatory logic Lambda lifting Name binding Scope (programming) Scope (logic) References [ edit ] ^ a b Quine, Willard Van Orman (1982).

Mathematical Logic (Revised ed.).

Harvard University Press . pp.

142– 143.

ISBN 978-0674554511 .

^ Robert S. Wolf (2005) A Tour through Mathematical Logic ISBN 978-0-88385-036-7 ^ Velleman, Daniel J. (2006).

How to Prove It: A Structured Approach (2nd ed.). Cambridge: Cambridge University Press. pp.

99– 103, 129– 131.

ISBN 978-0-521-67599-4 .

^ Hammack, Richard (2013).

Book of Proof (2nd ed.). Richmond, VA: Virginia Commonwealth University. pp.

89– 92.

ISBN 978-0-9894721-0-4 .

^ Enderton, Herbert B. (2001).

A Mathematical Introduction to Logic (2nd ed.). Burlington, MA: Harcourt/Academic Press. pp.

70– 73.

ISBN 978-0-12-238452-3 .

^ a b Forster, Thomas (2003).

Logic, Induction and Sets . Cambridge: Cambridge University Press. pp.

13– 15.

ISBN 978-0-521-53361-4 .

^ Pierce, Benjamin C. (2002).

Types and Programming Languages . Cambridge, MA: MIT Press. pp.

59– 62.

ISBN 978-0-262-16209-8 .

^ a b Barendregt, Hendrik P. (1984).

The Lambda Calculus: Its Syntax and Semantics . Amsterdam: North-Holland. pp.

26– 28.

ISBN 978-0-444-87508-2 .

^ Thompson 1991 , p. 33.

^ Frege, Gottlob (1893). "§8–10".

Grundgesetze der Arithmetik [ Basic Laws of Arithmetic ] (in German). Vol. I. Jena: Verlag Hermann Pohle.

^ Heim, Irene; Kratzer, Angelika (1998).

Semantics in Generative Grammar . Malden, MA: Blackwell. pp.

93– 125.

ISBN 978-0-631-19713-3 .

^ a b c d Büring, Daniel (2005).

Binding Theory . Cambridge Textbooks in Linguistics. Cambridge: Cambridge University Press . pp.

1– 4.

ISBN 9780521812801 .

^ In the terminology of Heim and Kratzer (1998), pronouns that are not bound are associated with an assignment function g provided by the context, which assigns them a referent. See Heim, Irene; Kratzer, Angelika (1998).

Semantics in Generative Grammar . Malden, MA: Blackwell. p. 243.

ISBN 978-0-631-19713-3 .

^ Partee, Barbara H. (1978). "Bound variables and other anaphors".

Proceedings of the 2nd Conference on Theoretical Issues in Natural Language Processing : 79– 85.

doi : 10.3115/980228.980245 (inactive 5 August 2025).

{{ cite journal }} :  CS1 maint: DOI inactive as of August 2025 ( link ) ^ a b c d e f g h Chomsky, Noam (1981).

Lectures on Government and Binding . Dordrecht: Foris Publications. p. 188.

ISBN 90-70176-28-9 .

^ Haspelmath, Martin (2008). Haspelmath, Martin; Dryer, Matthew S.; Gil, David; Comrie, Bernard (eds.).

"Chapter 105: Ditransitive Constructions" .

The World Atlas of Language Structures Online . Leipzig: Max Planck Institute for Evolutionary Anthropology.

^ Reinhart, Tanya; Reuland, Eric (1993). "Reflexivity".

Linguistic Inquiry .

24 (4): 657– 720.

JSTOR 4178843 .

^ a b c d e f Heim, Irene; Kratzer, Angelika (1998).

Semantics in Generative Grammar . Malden, MA: Blackwell. pp.

184– 186.

ISBN 978-0-631-19713-3 .

^ a b c d Reinhart, Tanya (2016).

Anaphora and Semantic Interpretation . London: Routledge.

ISBN 9781134993604 .

^ Lasnik, Howard (1989).

Essays on Anaphora . Studies in Natural Language and Linguistic Theory. Vol. 16. Dordrecht: Springer Netherlands. pp.

100– 104.

ISBN 9781556080906 .

^ a b May, Robert (1985).

Logical Form: Its Structure and Derivation . Linguistic inquiry monographs. Vol. 12. Cambridge, MA: MIT Press . pp.

64– 70.

ISBN 9780262631020 .

^ Haegeman, Liliane (1994).

Introduction to Government and Binding Theory (2nd ed.). Oxford: Blackwell. pp.

395– 400.

ISBN 978-0-631-19067-7 .

^ Chomsky, Noam (1977). "On Wh-Movement". In Culicover, Peter W.; Wasow, Thomas; Akmajian, Adrian (eds.).

Formal Syntax . New York: Academic Press. pp.

71– 132.

ISBN 978-0121992408 .

^ Sag, Ivan (1976).

Deletion and Logical Form . MIT dissertation.

^ Williams, Edwin S. (1977).

"Discourse and Logical Form" .

MIT Press .

8 (1): 101– 39.

JSTOR 4177974 – via JSTOR.

^ Dalrymple, Mary; Shieber, Stuart M.; Pereira, Fernando C. N. (1991). "Ellipsis and Higher-Order Unification".

Linguistics and Philosophy .

14 (4): 399– 452.

doi : 10.1007/BF00627759 .

Thompson, Simon (1991).

Type theory and functional programming . Wokingham, England: Addison-Wesley.

ISBN 0201416670 .

OCLC 23287456 .

Wolf, Robert S. (2005).

A Tour through Mathematical Logic . Vol. 30. Mathematical Association of America.

ISBN 978-0-88385-042-8 .

JSTOR 10.4169/j.ctt5hh94h .

Further reading [ edit ] Gowers, Timothy ; Barrow-Green, June ; Leader, Imre , eds. (2008).

The Princeton Companion to Mathematics .

Princeton, New Jersey : Princeton University Press . pp.

15– 16.

doi : 10.1515/9781400830398 .

ISBN 978-0-691-11880-2 .

JSTOR j.ctt7sd01 .

LCCN 2008020450 .

MR 2467561 .

OCLC 227205932 .

OL 19327100M .

Zbl 1242.00016 .

v t e Calculus Precalculus Binomial theorem Concave function Continuous function Factorial Finite difference Free variables and bound variables Graph of a function Linear function Radian Rolle's theorem Secant Slope Tangent Limits Indeterminate form Limit of a function One-sided limit Limit of a sequence Order of approximation (ε, δ)-definition of limit Differential calculus Derivative Second derivative Partial derivative Differential Differential operator Mean value theorem Notation Leibniz's notation Newton's notation Rules of differentiation linearity Power Sum Chain L'Hôpital's Product General Leibniz's rule Quotient Other techniques Implicit differentiation Inverse functions and differentiation Logarithmic derivative Related rates Stationary points First derivative test Second derivative test Extreme value theorem Maximum and minimum Further applications Newton's method Taylor's theorem Differential equation Ordinary differential equation Partial differential equation Stochastic differential equation Integral calculus Antiderivative Arc length Riemann integral Basic properties Constant of integration Fundamental theorem of calculus Differentiating under the integral sign Integration by parts Integration by substitution trigonometric Euler Tangent half-angle substitution Partial fractions in integration Quadratic integral Trapezoidal rule Volumes Washer method Shell method Integral equation Integro-differential equation Vector calculus Derivatives Curl Directional derivative Divergence Gradient Laplacian Basic theorems Line integrals Green's Stokes' Gauss' Multivariable calculus Divergence theorem Geometric Hessian matrix Jacobian matrix and determinant Lagrange multiplier Line integral Matrix Multiple integral Partial derivative Surface integral Volume integral Advanced topics Differential forms Exterior derivative Generalized Stokes' theorem Tensor calculus Sequences and series Arithmetico-geometric sequence Types of series Alternating Binomial Fourier Geometric Harmonic Infinite Power Maclaurin Taylor Telescoping Tests of convergence Abel's Alternating series Cauchy condensation Direct comparison Dirichlet's Integral Limit comparison Ratio Root Term Special functions and numbers Bernoulli numbers e (mathematical constant) Exponential function Natural logarithm Stirling's approximation History of calculus Adequality Brook Taylor Colin Maclaurin Generality of algebra Gottfried Wilhelm Leibniz Infinitesimal Infinitesimal calculus Isaac Newton Fluxion Law of Continuity Leonhard Euler Method of Fluxions The Method of Mechanical Theorems Lists Integrals rational functions irrational algebraic functions exponential functions logarithmic functions hyperbolic functions inverse trigonometric functions inverse Secant Secant cubed List of limits List of derivatives Miscellaneous topics Complex calculus Contour integral Differential geometry Manifold Curvature of curves of surfaces Tensor Euler–Maclaurin formula Gabriel's horn Integration Bee Proof that 22/7 exceeds π Regiomontanus' angle maximization problem Steinmetz solid NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐f584r
Cached time: 20250812020305
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.614 seconds
Real time usage: 0.800 seconds
Preprocessor visited node count: 3260/1000000
Revision size: 32026/2097152 bytes
Post‐expand include size: 92222/2097152 bytes
Template argument size: 1324/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 7/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 114260/5000000 bytes
Lua time usage: 0.344/10.000 seconds
Lua memory usage: 8857735/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  547.452      1 -total
 42.69%  233.699      1 Template:Reflist
 32.42%  177.480     21 Template:Cite_book
 12.17%   66.608      1 Template:Calculus_topics
 12.09%   66.194      2 Template:Navbox
 11.43%   62.595      1 Template:Short_description
  9.67%   52.947      1 Template:Refimprove
  8.74%   47.870      1 Template:Ambox
  7.03%   38.462      2 Template:Pagetype
  5.36%   29.357      4 Template:Cite_journal Saved in parser cache with key enwiki:pcache:147460:|#|:idhash:canonical and timestamp 20250812020305 and revision id 1304388042. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Free_variables_and_bound_variables&oldid=1304388042 " Categories : Mathematical notation Logic symbols Computer programming Predicate logic Hidden categories: CS1 German-language sources (de) CS1 maint: DOI inactive as of August 2025 Articles with short description Short description is different from Wikidata Articles needing additional references from December 2008 All articles needing additional references This page was last edited on 5 August 2025, at 19:17 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Free variables and bound variables 11 languages Add topic

