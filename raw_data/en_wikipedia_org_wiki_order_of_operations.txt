Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Conventional order Toggle Conventional order subsection 1.1 Examples 2 Special cases Toggle Special cases subsection 2.1 Unary minus sign 2.2 Mixed division and multiplication 2.3 Serial exponentiation 3 Mnemonics 4 Calculators 5 Programming languages 6 History 7 See also 8 Notes 9 References 10 Further reading 11 External links Toggle the table of contents Order of operations 44 languages العربية 閩南語 / Bân-lâm-gí Беларуская Català Čeština Dansk Deutsch Ελληνικά Español Esperanto Euskara فارسی Français Galego ગુજરાતી 한국어 हिन्दी Bahasa Indonesia Íslenska Italiano עברית Kiswahili मराठी Bahasa Melayu Nederlands 日本語 Norsk bokmål Polski Português Română Русский Shqip Simple English Slovenčina Српски / srpski Suomi Svenska Tagalog தமிழ் ไทย Türkçe Українська Tiếng Việt 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Performing order of mathematical operations Not to be confused with Operations order .

Order of operations In mathematics and computer programming , the order of operations is a collection of rules that reflect conventions about which operations to perform first in order to evaluate a given mathematical expression .

These rules are formalized with a ranking of the operations. The rank of an operation is called its precedence , and an operation with a higher precedence is performed before operations with lower precedence.

Calculators generally perform operations with the same precedence from left to right, [ 1 ] but some programming languages and calculators adopt different conventions.

For example, multiplication is granted a higher precedence than addition, and it has been this way since the introduction of modern algebraic notation .

[ 2 ] [ 3 ] Thus, in the expression 1 + 2 × 3 , the multiplication is performed before addition, and the expression has the value 1 + (2 × 3) = 7 , and not (1 + 2) × 3 = 9 . When exponents were introduced in the 16th and 17th centuries, they were given precedence over both addition and multiplication and placed as a superscript to the right of their base.

[ 2 ] Thus 3 + 5 2 = 28 and 3 × 5 2 = 75 .

These conventions exist to avoid notational ambiguity while allowing notation to remain brief.

[ 4 ] Where it is desired to override the precedence conventions, or even simply to emphasize them, parentheses ( ) can be used. For example, (2 + 3) × 4 = 20 forces addition to precede multiplication, while (3 + 5) 2 = 64 forces addition to precede exponentiation . If multiple pairs of parentheses are required in a mathematical expression (such as in the case of nested parentheses), the parentheses may be replaced by other types of brackets to avoid confusion, as in [2 × (3 + 4)] − 5 = 9 .

These rules are meaningful only when the usual notation (called infix notation ) is used. When functional or Polish notation are used for all operations, the order of operations results from the notation itself.

Conventional order [ edit ] The order of operations, that is, the order in which the operations in an expression are usually performed, results from a convention adopted  throughout mathematics, science, technology and many computer programming languages . It is summarized as: [ 2 ] [ 5 ] Parentheses Exponentiation Multiplication and division Addition and subtraction This means that to evaluate an expression, one first evaluates any sub-expression inside parentheses, working inside to outside if there is more than one set. Whether inside parentheses or not, the operation that is higher in the above list should be applied first. Operations of the same precedence are conventionally evaluated from left to right.

If each division is replaced with multiplication by the reciprocal (multiplicative inverse) then the associative and commutative laws of multiplication allow the factors in each term to be multiplied together in any order. Sometimes multiplication and division are given equal precedence, or sometimes multiplication is given higher precedence than division; see § Mixed division and multiplication below. If each subtraction is replaced with addition of the opposite (additive inverse), then the associative and commutative laws of addition allow terms to be added in any order.

The radical symbol ⁠ t {\displaystyle {\sqrt {\vphantom {t}}}} ⁠ is traditionally extended by a bar (called vinculum ) over the radicand (this avoids the need for parentheses around the radicand). Other functions use parentheses around the input to avoid ambiguity.

[ 6 ] [ 7 ] [ a ] The parentheses can be omitted if the input is a single numerical variable or constant, [ 2 ] as in the case of sin x = sin( x ) and sin π = sin( π ) .

[ a ] Traditionally this convention extends to monomials ; thus, sin 3 x = sin(3 x ) and even sin ⁠ 1 / 2 ⁠ xy = sin( ⁠ 1 / 2 ⁠ xy ) , but sin x + y = sin( x ) + y , because x + y is not a monomial. However, this convention is not universally understood, and some authors prefer explicit parentheses.

[ b ] Some calculators and programming languages require parentheses around function inputs, while others do not.

Parentheses and alternate symbols of grouping can be used to override the usual order of operations or to make the intended order explicit. Grouped symbols can be treated as a single expression.

[ 2 ] Examples [ edit ] Multiplication before addition: 1 + 2 × × 3 = 1 + 6 = 7.

{\displaystyle 1+2\times 3=1+6=7.} Parenthetical subexpressions are evaluated first: ( 1 + 2 ) × × 3 = 3 × × 3 = 9.

{\displaystyle (1+2)\times 3=3\times 3=9.} Exponentiation before multiplication, multiplication before subtraction: 1 − − 2 × × 3 4 = 1 − − 2 × × 81 = 1 − − 162 = − − 161.

{\displaystyle 1-2\times 3^{4}=1-2\times 81=1-162=-161.} When an expression is written as a superscript, the superscript is considered to be grouped by its position above its base: 1 + 2 3 + 4 = 1 + 2 7 = 1 + 128 = 129.

{\displaystyle 1+2^{3+4}=1+2^{7}=1+128=129.} The operand of a root symbol is determined by the overbar: 1 + 3 + 5 = 4 + 5 = 2 + 5 = 7.

{\displaystyle {\sqrt {1+3}}+5={\sqrt {4}}+5=2+5=7.} A horizontal fractional line forms two grouped subexpressions, one above divided by another below: 1 + 2 3 + 4 + 5 = 3 7 + 5.

{\displaystyle {\frac {1+2}{3+4}}+5={\frac {3}{7}}+5.} Parentheses can be nested, and should be evaluated from the inside outward. For legibility, outer parentheses can be made larger than inner parentheses. Alternately, other grouping symbols, such as curly braces { } or square brackets [ ] , are sometimes used along with parentheses ( ) . For example: [ ( 1 + 2 ) ÷ ÷ ( 3 + 4 ) ] + 5 = ( 3 ÷ ÷ 7 ) + 5 {\displaystyle {\bigl [}(1+2)\div (3+4){\bigr ]}+5=(3\div 7)+5} Special cases [ edit ] Unary minus sign [ edit ] There are differing conventions concerning the unary operation '−' (usually pronounced "minus"). In written or printed mathematics, the expression −3 2 is interpreted to mean −(3 2 ) = −9 .

[ 2 ] [ 8 ] In some applications and programming languages, notably Microsoft Excel , PlanMaker (and other spreadsheet applications) and the programming language bc , unary operations have a higher priority than binary operations, that is, the unary minus has higher precedence than exponentiation, so in those languages −3 2 will be interpreted as (−3) 2 = 9 .

[ 9 ] This does not apply to the binary minus operation '−'; for example in Microsoft Excel while the formulas =-2^2 , =(-2)^2 and =0+-2^2 return 4, the formulas =0-2^2 and =-(2^2) return −4.

Mixed division and multiplication [ edit ] There is no universal convention for interpreting an expression containing both division denoted by '÷' and multiplication denoted by '×'. Proposed conventions include assigning the operations equal precedence and evaluating them from left to right, or equivalently treating division as multiplication by the reciprocal and then evaluating in any order; [ 10 ] evaluating all multiplications first followed by divisions from left to right; or eschewing such expressions and instead always disambiguating them by explicit parentheses.

[ 11 ] Beyond primary education, the symbol '÷' for division is seldom used, but is replaced by the use of algebraic fractions , [ 12 ] typically written vertically with the numerator stacked above the denominator – which makes grouping explicit and unambiguous – but sometimes written inline using the slash or solidus symbol '/'.

[ 13 ] Multiplication denoted by juxtaposition (also known as implied multiplication ) creates a visual unit and is often given higher precedence than most other operations. In academic literature, when inline fractions are combined with implied multiplication without explicit parentheses, the multiplication is conventionally interpreted as having higher precedence than division, so that e.g.

1 / 2 n is interpreted to mean 1 / (2 · n ) rather than (1 / 2) · n .

[ 2 ] [ 10 ] [ 14 ] [ 15 ] For instance, the manuscript submission instructions for the Physical Review journals directly state that multiplication has precedence over division, [ 16 ] and this is also the convention observed in physics textbooks such as the Course of Theoretical Physics by Landau and Lifshitz [ c ] and mathematics textbooks such as Concrete Mathematics by Graham , Knuth , and Patashnik .

[ 17 ] However, some authors recommend against expressions such as a / bc , preferring the explicit use of parenthesis a / ( bc ) .

[ 3 ] More complicated cases are more ambiguous. For instance, the notation 1 / 2 π ( a + b ) could plausibly mean either 1 / [2 π · ( a + b )] or [1 / (2 π )] · ( a + b ) .

[ 18 ] Sometimes interpretation depends on context. The Physical Review submission instructions recommend against expressions of the form a / b / c ; more explicit expressions ( a / b ) / c or a / ( b / c ) are unambiguous.

[ 16 ] 6÷2(1+2) is interpreted as 6÷(2×(1+2)) by a fx-82MS (upper), and (6÷2)×(1+2) by a TI-83 Plus calculator (lower), respectively.

This ambiguity has been the subject of Internet memes such as " 8 ÷ 2(2 + 2) ", for which there are two conflicting interpretations: 8 ÷ [2 · (2 + 2)] = 1 and (8 ÷ 2) · (2 + 2) = 16.

[ 15 ] [ 19 ] Mathematics education researcher Hung-Hsi Wu points out that "one never gets a computation of this type in real life", and calls such contrived examples "a kind of Gotcha! parlor game designed to trap an unsuspecting person by phrasing it in terms of a set of unreasonably convoluted rules".

[ 12 ] Serial exponentiation [ edit ] If exponentiation is indicated by stacked symbols using superscript notation, the usual rule is to work from the top down: [ 2 ] [ 7 ] a b c = a ( b c ) , which typically is not equal to ( a b ) c . This convention is useful because there is a property of exponentiation that ( a b ) c = a bc , so it's unnecessary to use serial exponentiation for this.

However, when exponentiation is represented by an explicit symbol such as a caret (^) or arrow (↑), there is no common standard. For example, Microsoft Excel and computation programming language MATLAB evaluate a ^ b ^ c as ( a b ) c , but Google Search and Wolfram Alpha as a ( b c ) . Thus 4^3^2 is evaluated to 4,096 in the first case and to 262,144 in the second case.

Mnemonics [ edit ] Mnemonic acronyms are often taught in primary schools to help students remember the order of operations.

[ 20 ] [ 21 ] The acronym PEMDAS , which stands for P arentheses, E xponents, M ultiplication/ D ivision, A ddition/ S ubtraction, [ 22 ] is common in the United States [ 23 ] and France.

[ 24 ] Sometimes the letters are expanded into words of a mnemonic sentence such as "Please Excuse My Dear Aunt Sally".

[ 25 ] The United Kingdom and other Commonwealth countries may use BODMAS (or sometimes BOMDAS ), standing for B rackets, O f, D ivision/ M ultiplication, A ddition/ S ubtraction, with "of" meaning fraction multiplication.

[ 26 ] [ 27 ] Sometimes the O is instead expanded as O rder, meaning exponent or root, [ 27 ] [ 28 ] or replaced by I for I ndices in the alternative mnemonic BIDMAS .

[ 27 ] [ 29 ] In Canada and New Zealand BEDMAS is common.

[ 30 ] These mnemonics may be misleading when written this way.

[ 25 ] For example, misinterpreting any of the above rules to mean "addition first, subtraction afterward" would incorrectly evaluate the expression [ 25 ] a − − b + c {\displaystyle a-b+c} as a − − ( b + c ) {\displaystyle a-(b+c)} , while the correct evaluation is ( a − − b ) + c {\displaystyle (a-b)+c} . These values are different when c ≠ ≠ 0 {\displaystyle c\neq 0} .

In Germany, the convention is simply taught as Punktrechnung vor Strichrechnung , "dot operations before line operations" referring to the graphical shapes of the taught operator signs U+00B7 · MIDDLE DOT (multiplication), U+2236 ∶ RATIO (division), and U+002B + PLUS SIGN (addition), U+2212 − MINUS SIGN (subtraction). This avoids the potential for the above misunderstanding.

Mnemonic acronyms have been criticized for not developing a conceptual understanding of the order of operations, and not addressing student questions about its purpose or flexibility.

[ 31 ] [ 32 ] Students learning the order of operations via mnemonic acronyms routinely make mistakes, [ 33 ] as do some pre-service teachers.

[ 34 ] Even when students correctly learn the acronym, a disproportionate focus on memorization of trivia crowds out substantive mathematical content.

[ 12 ] The acronym's procedural application does not match experts' intuitive understanding of mathematical notation: mathematical notation indicates groupings in ways other than parentheses or brackets and a mathematical expression is a tree-like hierarchy rather than a linearly "ordered" structure; furthermore, there is no single order by which mathematical expressions must be simplified or evaluated and no universal canonical simplification for any particular expression, and experts fluently apply valid transformations and substitutions in whatever order is convenient, so learning a rigid procedure can lead students to a misleading and limiting understanding of mathematical notation.

[ 35 ] Calculators [ edit ] Main article: Calculator input methods Different calculators follow different orders of operations.

[ 2 ] Many simple calculators without a stack implement chain input , working in button-press order without any priority given to different operations, give a different result from that given by more sophisticated calculators. For example, on a simple calculator, typing 1 + 2 × 3 = yields 9, while a more sophisticated calculator will use a more standard priority, so typing 1 + 2 × 3 = yields 7.

Calculators may associate exponents to the left or to the right. For example, the expression a ^ b ^ c is interpreted as a ( b c ) on the TI-92 and the TI-30XS MultiView in "Mathprint mode", whereas it is interpreted as ( a b ) c on the TI-30XII and the TI-30XS MultiView in "Classic mode".

An expression like 1/2 x is interpreted as 1/(2 x ) by TI-82 , [ 3 ] as well as many modern Casio calculators [ 36 ] (configurable on some like the fx-9750GIII ), but as (1/2) x by TI-83 and every other TI calculator released since 1996, [ 37 ] [ 3 ] as well as by all Hewlett-Packard calculators with algebraic notation. While the first interpretation may be expected by some users due to the nature of implied multiplication , [ 38 ] the latter is more in line with the rule that multiplication and division are of equal precedence.

[ 3 ] When the user is unsure how a calculator will interpret an expression, parentheses can be used to remove the ambiguity.

[ 3 ] Order of operations arose due to the adaptation of infix notation in standard mathematical notation , which can be notationally ambiguous without such conventions, as opposed to postfix notation or prefix notation , which do not need orders of operations.

[ 39 ] [ 40 ] Hence, calculators utilizing reverse Polish notation (RPN) using a stack to enter expressions in the correct order of precedence do not need parentheses or any possibly model-specific order of execution.

[ 25 ] [ 22 ] Programming languages [ edit ] Most programming languages use precedence levels that conform to the order commonly used in mathematics, [ 41 ] though others, such as APL , Smalltalk , Occam and Mary , have no operator precedence rules (in APL, evaluation is strictly right to left; in Smalltalk, it is strictly left to right).

Furthermore, because many operators are not associative, the order within any single level is usually defined by grouping left to right so that 16/4/4 is interpreted as (16/4)/4 = 1 rather than 16/(4/4) = 16 ; such operators are referred to as "left associative". Exceptions exist; for example, languages with operators corresponding to the cons operation on lists usually make them group right to left ("right associative"), e.g. in Haskell , 1:2:3:4:[] == 1:(2:(3:(4:[]))) == [1,2,3,4] .

Dennis Ritchie , creator of the C language , said of the precedence in C (shared by programming languages that borrow those rules from C, for example, C++ , Perl and PHP ) that it would have been preferable to move the bitwise operators above the comparison operators .

[ 42 ] Many programmers have become accustomed to this order, but more recent popular languages like Python [ 43 ] and Ruby [ 44 ] do have this order reversed. The relative precedence levels of operators found in many C-style languages are as follows: 1 () [] -> .

:: Function call, scope, array/member access 2 !

~ - + * & sizeof type cast ++ -- (most) unary operators, sizeof and type casts (right to left) 3 * / % MOD Multiplication, division, modulo 4 + - Addition and subtraction 5 << >> Bitwise shift left and right 6 < <= > >= Comparisons: less-than and greater-than 7 == != Comparisons: equal and not equal 8 & Bitwise AND 9 ^ Bitwise exclusive OR (XOR) 10 | Bitwise inclusive (normal) OR 11 && Logical AND 12 || Logical OR 13 ?

: Conditional expression (ternary) 14 = += -= *= /= %= &= |= ^= <<= >>= Assignment operators (right to left) 15 , Comma operator Simplified formal grammar for arithmetical expressions in a programming language (left) , [ 45 ] and derivation of the example expression (a+b)^2/2 (right) . The latter corresponds to a hierarchical structure (" syntax tree ") which is unique for the given expression. The compiler generates machine code from the tree in such a way that operations originating at the lowest hierarchy level are executed first.

Examples: !A + !B is interpreted as (!A) + (!B) ++A + !B is interpreted as (++A) + (!B) A + B * C is interpreted as A + (B * C) A || B && C is interpreted as A || (B && C) A && B == C is interpreted as A && (B == C) A & B == C is interpreted as A & (B == C) (In Python , Ruby , PARI/GP and other popular languages, A & B == C is interpreted as (A & B) == C .) Source-to-source compilers that compile to multiple languages need to explicitly deal with the issue of different order of operations across languages.

Haxe for example standardizes the order and enforces it by inserting brackets where it is appropriate.

The accuracy of software developer knowledge about binary operator precedence has been found to closely follow their frequency of occurrence in source code.

[ 46 ] History [ edit ] The order of operations emerged progressively over centuries. The rule that multiplication has precedence over addition was incorporated into the development of algebraic notation in the 1600s, since the distributive property implies this as a natural hierarchy. As recently as the 1920s, the historian of mathematics Florian Cajori identifies disagreement about whether multiplication should have precedence over division, or whether they should be treated equally. The term "order of operations" and the "PEMDAS/BEDMAS" mnemonics were formalized only in the late 19th or early 20th century, as demand for standardized textbooks grew.
Ambiguity about issues such as whether implicit multiplication takes precedence over explicit multiplication and division in such expressions as a /2 b , which could be interpreted as a /(2 b ) or ( a /2) × b , imply that the conventions are not yet completely stable.

[ 47 ] [ 48 ] See also [ edit ] Common operator notation (for a more formal description) Hyperoperation Logical connective#Order of precedence Operator associativity Operator overloading Operator precedence in C and C++ Polish notation Reverse Polish notation Notes [ edit ] ^ a b Some authors deliberately avoid any omission of parentheses with functions even in the case of single numerical variable or constant arguments (i.e.

Oldham in Atlas ), whereas other authors (like NIST ) apply this notational simplification only conditionally in conjunction with specific multi-character function names (like sin ), but don't use it with generic function names (like f ).

^ To avoid any ambiguity, this notational simplification for monomials is deliberately avoided in works such as Oldham's Atlas of Functions or the NIST Handbook of Mathematical Functions .

^ For example, the third edition of Mechanics by Landau and Lifshitz contains expressions such as hP z /2 π (p. 22), and the first volume of the Feynman Lectures contains expressions such as 1/2 √ N (p. 6–7) . In both books, these expressions are written with the convention that the solidus is evaluated last.

References [ edit ] ^ "Calculation operators and precedence: Excel" .

Microsoft Support .

Microsoft . 2023 . Retrieved 2023-09-17 .

^ a b c d e f g h i Bronstein, Ilja Nikolaevič ; Semendjajew, Konstantin Adolfovič (1987) [1945]. "2.4.1.1. Definition arithmetischer Ausdrücke" [Definition of arithmetic expressions]. In Grosche, Günter; Ziegler, Viktor; Ziegler, Dorothea (eds.).

Taschenbuch der Mathematik [ Pocketbook of mathematics ] (in German). Vol. 1. Translated by Ziegler, Viktor (23rd ed.). Thun, Switzerland: Harri Deutsch . pp.

115– 120, 802.

ISBN 3-87144-492-8 .

Regel 7: Ist F ( A ) Teilzeichenreihe eines arithmetischen Ausdrucks oder einer seiner Abkürzungen und F eine Funktionenkonstante und A eine Zahlenvariable oder Zahlenkonstante, so darf F A dafür geschrieben werden. [Darüber hinaus ist noch die Abkürzung F n ( A ) für ( F ( A )) n üblich. Dabei kann F sowohl Funktionenkonstante als auch Funktionenvariable sein.] ^ a b c d e f Peterson, Dave (September–October 2019).

The Math Doctors (blog). Order of Operations: "Why?" ; "Why These Rules?" ; "Subtle Distinctions" ; "Fractions, Evaluating, and Simplifying" ; "Implicit Multiplication?" ; "Historical Caveats" . Retrieved 2024-02-11.

Peterson, Dave (August–September 2023).

The Math Doctors (blog). Implied Multiplication: "Not as Bad as You Think" ; "Is There a Standard?" ; "You Can't Prove It" . Retrieved 2024-02-11.

^ Swokowski, Earl William (1978).

Fundamentals of Algebra and Trigonometry (4 ed.). Boston: Prindle, Weber & Schmidt.

ISBN 0-87150-252-6 . p. 1: The language of algebra [...] may be used as shorthand, to abbreviate and simplify long or complicated statements.

^ Weisstein, Eric Wolfgang .

"Precedence" .

MathWorld . Retrieved 2020-08-22 .

^ Oldham, Keith B.; Myland, Jan C.; Spanier, Jerome (2009) [1987].

An Atlas of Functions: with Equator, the Atlas Function Calculator (2nd ed.). Springer.

doi : 10.1007/978-0-387-48807-3 .

ISBN 978-0-387-48806-6 .

^ a b Olver, Frank W. J.; Lozier, Daniel W.; Boisvert, Ronald F.; Clark, Charles W., eds. (2010).

NIST Handbook of Mathematical Functions .

National Institute of Standards and Technology .

ISBN 978-0-521-19225-5 .

MR 2723248 .

^ Angel, Allen R.; Runde, Dennis C.; Gilligan, Lawrence; Semmler, Richard (2010).

Elementary Algebra for College Students (8th ed.).

Prentice Hall . Ch. 1, §9, Objective 3.

ISBN 978-0-321-62093-4 .

^ "Formula Returns Unexpected Positive Value" .

Microsoft . 2005-08-15. Archived from the original on 2015-04-19 . Retrieved 2012-03-05 .

^ a b Chrystal, George (1904) [1886].

Algebra . Vol. 1 (5th ed.).

"Division", Ch. 1 §§19–26 , pp. 14–20.

Chrystal's book was the canonical source in English about secondary school algebra of the turn of the 20th century, and plausibly the source for many later descriptions of the order of operations. However, while Chrystal's book initially establishes a rigid rule for evaluating expressions involving '÷' and '×' symbols, it later consistently gives implicit multiplication higher precedence than division when writing inline fractions, without ever explicitly discussing the discrepancy between formal rule and common practice.

^ Cajori, Florian (1928).

A History of Mathematical Notations . Vol. 1. La Salle, Illinois: Open Court.

§242. "Order of operations in terms containing both ÷ and ×" , p. 274.

^ a b c Wu, Hung-Hsi (2007) [2004].

" "Order of operations" and other oddities in school mathematics" (PDF) . Dept. of Mathematics, University of California . Retrieved 2007-07-03 .

^ In the ISO 80000 standard, the division symbol '÷' is entirely disallowed in favor of a slash symbol: ISO 80000-2:2019, "Quantities and units – Part 2: Mathematics" .

International Standards Organization .

^ Lennes, N. J. (1917). "Discussions: Relating to the Order of Operations in Algebra".

The American Mathematical Monthly .

24 (2): 93– 95.

doi : 10.2307/2972726 .

JSTOR 2972726 .

^ a b Strogatz, Steven (2019-08-02).

"The Math Equation That Tried to Stump the Internet" .

The New York Times . Retrieved 2024-02-12 .

In this article, Strogatz describes the order of operations as taught in middle school. However, in a comment , he points out, "Several commenters appear to be using a different (and more sophisticated) convention than the elementary PEMDAS convention I described in the article. In this more sophisticated convention, which is often used in algebra, implicit multiplication (also known as multiplication by juxtaposition) is given higher priority than explicit multiplication or explicit division (in which one explicitly writes operators like × *  / or  ÷). Under this more sophisticated convention, the implicit multiplication in 2(2 + 2) is given higher priority than the explicit division implied by the use of ÷. That’s a very reasonable convention, and I agree that the answer is 1 if we are using this sophisticated convention.

"But that convention is not universal. For example, the calculators built into Google and WolframAlpha use the less sophisticated convention that I described in the article; they make no distinction between implicit and explicit multiplication when they are asked to evaluate simple arithmetic expressions. [...]" ^ a b "Physical Review Style and Notation Guide" (PDF) .

American Physical Society . 2012. § IV.E.2.e . Retrieved 2012-08-05 .

^ Graham, Ronald L.

; Knuth, Donald E.

; Patashnik, Oren (1994).

Concrete Mathematics (2nd ed.). Reading, Mass: Addison-Wesley. "A Note on Notation", p. xi.

ISBN 0-201-55802-5 .

MR 1397498 .

An expression of the form a / bc means the same as a /( bc ) . Moreover, log x /log y = (log x )/(log y ) and 2 n ! = 2( n !) .

^ Fateman, R. J.; Caspi, E. (1999).

Parsing TEX into mathematics (PDF) . International Symposium on Symbolic and Algebraic Computation, Vancouver, 28–31 July 1999.

^ Haelle, Tara (2013-03-12).

"What Is the Answer to That Stupid Math Problem on Facebook? And why are people so riled up about it?" .

Slate . Retrieved 2023-09-17 .

^ "Rules of arithmetic" (PDF) .

Mathcentre.ac.uk . 2009 . Retrieved 2019-08-02 .

^ Ginsburg, David (2011-01-01).

"Please Excuse My Dear Aunt Sally (PEMDAS)--Forever!" .

Education Week - Coach G's Teaching Tips . Retrieved 2023-09-17 .

^ a b Vanderbeek, Greg (2007).

Order of Operations and RPN (Expository paper). Master of Arts in Teaching (MAT) Exam Expository Papers. Lincoln: University of Nebraska. Paper 46 . Retrieved 2020-06-14 .

^ Ali Rahman, Ernna Sukinnah; Shahrill, Masitah; Abbas, Nor Arifahwati; Tan, Abby (2017).

"Developing Students' Mathematical Skills Involving Order of Operations" (PDF) .

International Journal of Research in Education and Science .

3 (2): 373– 382.

doi : 10.21890/ijres.327896 (inactive 2025-07-12). p. 373: The PEMDAS is an acronym or mnemonic for the order of operations that stands for Parenthesis, Exponents, Multiplication, Division, Addition and Subtraction. This acronym is widely used in the United States of America. Meanwhile, in other countries such as United Kingdom and Canada, the acronyms used are BODMAS (Brackets, Order, Division, Multiplication, Addition and Subtraction) and BIDMAS (Brackets, Indices, Division, Multiplication, Addition and Subtraction).

{{ cite journal }} :  CS1 maint: DOI inactive as of July 2025 ( link ) ^ "Le calcul qui divise : 6÷2(1+2)" .

Micmaths (Video) (in French). 2020-11-17.

^ a b c d Ball, John A. (1978).

Algorithms for RPN calculators (1st ed.). Cambridge, Mass: Wiley. p. 31.

ISBN 0-471-03070-8 .

^ Davies, Peter (1979). "BODMAS Exposed".

Mathematics in School .

8 (4): 27– 28.

JSTOR 30213488 .

^ a b c Knight, I. S. (1997). "Why BODMAS?".

The Mathematical Gazette .

81 (492): 426– 427.

doi : 10.2307/3619621 .

JSTOR 3619621 .

^ "Order of operations" (DOC) .

Syllabus.bos.nsw.edu.au . Retrieved 2019-08-02 .

^ Foster, Colin (2008).

"Higher Priorities" .

Mathematics in School .

37 (3): 17.

JSTOR 30216129 .

^ Naddor, Josh (2020).

Order of Operations: Please Excuse My Dear Aunt Sally as her rule is deceiving (MA thesis). University of Georgia.

^ Ameis, Jerry A. (2011). "The Truth About PEDMAS".

Mathematics Teaching in the Middle School .

16 (7): 414– 420.

doi : 10.5951/MTMS.16.7.0414 .

JSTOR 41183631 .

^ Cheng, Eugenia (2023).

Is Math Real? How Simple Questions Lead Us to Mathematics' Deepest Truths . Basic Books. pp.

235– 238.

ISBN 978-1-541-60182-6 .

^ Lee, Jae Ki; Licwinko, Susan; Taylor-Buckner, Nicole (2013).

"Exploring Mathematical Reasoning of the Order of Operations: Rearranging the Procedural Component PEMDAS" .

Journal of Mathematics Education at Teachers College .

4 (2): 73– 78.

doi : 10.7916/jmetc.v4i2.633 . p. 73: [...] students frequently make calculation errors with expressions which have either multiplication and division or addition and subtraction next to each other. [...] ^ Dupree, Kami M. (2016). "Questioning the Order of Operations".

Mathematics Teaching in the Middle School .

22 (3): 152– 159.

doi : 10.5951/mathteacmiddscho.22.3.0152 .

^ Taff, Jason (2017). "Rethinking the Order of Operations (or What Is the Matter with Dear Aunt Sally?)".

The Mathematics Teacher .

111 (2): 126– 132.

doi : 10.5951/mathteacher.111.2.0126 .

^ "Calculation Priority Sequence" .

support.casio.com .

Casio . Retrieved 2019-08-01 .

^ "Implied Multiplication Versus Explicit Multiplication on TI Graphing Calculators" .

Texas Instruments . 2011 . Retrieved 2025-07-22 .

^ Announcing the TI Programmable 88!

(PDF) .

Texas Instruments . 1982 . Retrieved 2017-08-03 .

Now, implied multiplication is recognized by the AOS and the square root, logarithmic, and trigonometric functions can be followed by their arguments as when working with pencil and paper.

(NB. The TI-88 only existed as a prototype and was never released to the public.) ^ Simons, Peter Murray (2021).

"Łukasiewicz's Parenthesis-Free or Polish Notation" .

Stanford Encyclopedia of Philosophy . Dept. of Philosophy, Stanford University . Retrieved 2022-03-26 .

^ Krtolica, Predrag V.; Stanimirović, Predrag S. (1999). "On some properties of reverse Polish Notation".

Filomat .

13 : 157– 172.

JSTOR 43998756 .

^ Henderson, Harry (2009) [2003].

"Operator Precedence" .

Henderson's Encyclopedia of Computer Science and Technology (Rev. ed.). New York: Facts on File . p. 355.

ISBN 978-0-8160-6382-6 . Retrieved 2023-09-17 .

^ Ritchie, Dennis M.

(1996). "The Development of the C Language".

History of Programming Languages (2 ed.).

ACM Press .

^ "6. Expressions" .

Python documentation . Retrieved 2023-12-31 .

^ "precedence - RDoc Documentation" .

^ Backus, John Warner ; et al. (1963). "§ 3.3.1: Arithmetic expressions". In Naur, Peter (ed.).

Revised Report on the Algorithmic Language Algol 60 (Report) . Retrieved 2023-09-17 .

(CACM Vol. 6 pp. 1–17; The Computer Journal, Vol. 9, p. 349; Numerische Mathematik, Vol. 4, p. 420.) ^ Jones, Derek M. (2008) [2006].

"Developer beliefs about binary operator precedence" .

CVu .

18 (4): 14– 21 . Retrieved 2023-09-17 .

^ Jensen, Patricia.

"History and Background" .

5010.mathed.usu.edu . Utah State University . Retrieved 2024-10-04 .

^ Doctor Peterson, The Math Forum (2000-11-22).

"History of the Order of Operations" .

Ask Dr Math . Archived from the original on 2002-06-19 . Retrieved 2024-10-04 .

Further reading [ edit ] Fothe, Michael; Wilke, Thomas, eds. (2015).

Keller, Stack und automatisches Gedächtnis – eine Struktur mit Potenzial [ Cellar, stack and automatic memory – a structure with potential ] (PDF) . Kolloquium 14 Nov 2014 in Jena, Germany (in German). Bonn: Gesellschaft für Informatik.

ISBN 978-3-88579-426-4 .

External links [ edit ] Bergman, George Mark (2013).

"Order of arithmetic operations; in particular, the 48/2(9+3) question" . Dept. of Mathematics, University of California . Retrieved 2020-07-22 .

Zachary, Joseph L. (1997) "Operator Precedence", supplement to Introduction to Scientific Programming . University of Utah.

Maple worksheet , Mathematica notebook .

NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐x8ptn
Cached time: 20250817211859
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.065 seconds
Real time usage: 1.246 seconds
Preprocessor visited node count: 22290/1000000
Revision size: 48981/2097152 bytes
Post‐expand include size: 116419/2097152 bytes
Template argument size: 8099/2097152 bytes
Highest expansion depth: 24/100
Expensive parser function count: 7/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 184532/5000000 bytes
Lua time usage: 0.581/10.000 seconds
Lua memory usage: 20869684/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00% 1083.551      1 -total
 46.12%  499.701      2 Template:Reflist
 18.69%  202.534     68 Template:R
 17.38%  188.288     71 Template:R/ref
 15.97%  172.992     16 Template:Cite_web
  9.61%  104.087      4 Template:Unichar
  9.33%  101.115     14 Template:Cite_book
  9.16%   99.241      1 Template:Lang
  9.12%   98.851      4 Template:Unichar/main
  8.54%   92.521     11 Template:Cite_journal Saved in parser cache with key enwiki:pcache:212980:|#|:idhash:canonical and timestamp 20250817211859 and revision id 1301897988. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Order_of_operations&oldid=1301897988 " Categories : Mnemonics Operators (programming) Algebra Hidden categories: CS1 German-language sources (de) CS1 maint: DOI inactive as of July 2025 CS1 French-language sources (fr) Articles with short description Short description matches Wikidata Use dmy dates from February 2015 Use list-defined references from January 2022 Articles containing German-language text This page was last edited on 22 July 2025, at 08:06 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Order of operations 44 languages Add topic

