Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Formal notation Toggle Formal notation subsection 1.1 Substitution form 1.2 Set theory 1.2.1 Unions and intersections of any number of sets 1.3 Boolean algebra 1.4 Engineering 1.5 Text searching 2 History 3 Proof for Boolean algebra Toggle Proof for Boolean algebra subsection 3.1 Negation of a disjunction 3.2 Negation of a conjunction 4 Proof for set theory Toggle Proof for set theory subsection 4.1 Part 1 4.2 Part 2 4.3 Conclusion 5 Generalising De Morgan duality 6 Extension to predicate and modal logic 7 In intuitionistic logic 8 In computer engineering 9 See also 10 References 11 External links Toggle the table of contents De Morgan's laws 49 languages العربية Azərbaycanca 閩南語 / Bân-lâm-gí Беларуская (тарашкевіца) Български Català Čeština Cymraeg Dansk Deutsch Eesti Ελληνικά Español Euskara فارسی Français Galego 한국어 Հայերեն हिन्दी Bahasa Indonesia Íslenska Italiano עברית Latviešu Lietuvių Lombard Magyar Македонски Nederlands 日本語 Norsk bokmål Polski Português Română Русский Simple English Slovenčina Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska தமிழ் ไทย Türkçe Українська Tiếng Việt 中文 Kadazandusun Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikiversity Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Pair of logical equivalences Transformation rules Propositional calculus Rules of inference ( List ) Implication introduction / elimination ( modus ponens ) Biconditional introduction / elimination Conjunction introduction / elimination Disjunction introduction / elimination Disjunctive / hypothetical syllogism Constructive / destructive dilemma Absorption / modus tollens / modus ponendo tollens Modus non excipiens Negation introduction Rules of replacement Associativity Commutativity Distributivity Double negation De Morgan's laws Transposition Material implication Exportation Tautology Predicate logic Rules of inference Universal generalization / instantiation Existential generalization / instantiation v t e De Morgan's laws represented with Venn diagrams . In each case, the resultant set is the set of all points in any shade of blue.

In propositional logic and Boolean algebra , De Morgan's laws , [ 1 ] [ 2 ] [ 3 ] also known as De Morgan's theorem , [ 4 ] are a pair of transformation rules that are both valid rules of inference . They are named after Augustus De Morgan , a 19th-century British mathematician. The rules allow the expression of conjunctions and disjunctions purely in terms of each other via negation .

The rules can be expressed in English as: The negation of "A and B" is the same as "not A or not B".

The negation of "A or B" is the same as "not A and not B".

or The complement of the union of two sets is the same as the intersection of their complements The complement of the intersection of two sets is the same as the union of their complements or not (A or B) = (not A) and (not B) not (A and B) = (not A) or (not B) where "A or B" is an " inclusive or " meaning at least one of A or B rather than an " exclusive or " that means exactly one of A or B.

De Morgan's law with set subtraction operation Another form of De Morgan's law is the following as seen below.

A − − ( B ∪ ∪ C ) = ( A − − B ) ∩ ∩ ( A − − C ) , {\displaystyle A-(B\cup C)=(A-B)\cap (A-C),} A − − ( B ∩ ∩ C ) = ( A − − B ) ∪ ∪ ( A − − C ) .

{\displaystyle A-(B\cap C)=(A-B)\cup (A-C).} Applications of the rules include simplification of logical expressions in computer programs and digital circuit designs. De Morgan's laws are an example of a more general concept of mathematical duality .

Formal notation [ edit ] The negation of conjunction rule may be written in sequent notation: ¬ ¬ ( P ∧ ∧ Q ) ⊢ ⊢ ( ¬ ¬ P ∨ ∨ ¬ ¬ Q ) , and ( ¬ ¬ P ∨ ∨ ¬ ¬ Q ) ⊢ ⊢ ¬ ¬ ( P ∧ ∧ Q ) .

{\displaystyle {\begin{aligned}\neg (P\land Q)&\vdash (\neg P\lor \neg Q),{\text{and}}\\(\neg P\lor \neg Q)&\vdash \neg (P\land Q).\end{aligned}}} The negation of disjunction rule may be written as: ¬ ¬ ( P ∨ ∨ Q ) ⊢ ⊢ ( ¬ ¬ P ∧ ∧ ¬ ¬ Q ) , and ( ¬ ¬ P ∧ ∧ ¬ ¬ Q ) ⊢ ⊢ ¬ ¬ ( P ∨ ∨ Q ) .

{\displaystyle {\begin{aligned}\neg (P\lor Q)&\vdash (\neg P\land \neg Q),{\text{and}}\\(\neg P\land \neg Q)&\vdash \neg (P\lor Q).\end{aligned}}} In rule form : negation of conjunction ¬ ¬ ( P ∧ ∧ Q ) ∴ ∴ ¬ ¬ P ∨ ∨ ¬ ¬ Q ¬ ¬ P ∨ ∨ ¬ ¬ Q ∴ ∴ ¬ ¬ ( P ∧ ∧ Q ) {\displaystyle {\frac {\neg (P\land Q)}{\therefore \neg P\lor \neg Q}}\qquad {\frac {\neg P\lor \neg Q}{\therefore \neg (P\land Q)}}} and negation of disjunction ¬ ¬ ( P ∨ ∨ Q ) ∴ ∴ ¬ ¬ P ∧ ∧ ¬ ¬ Q ¬ ¬ P ∧ ∧ ¬ ¬ Q ∴ ∴ ¬ ¬ ( P ∨ ∨ Q ) {\displaystyle {\frac {\neg (P\lor Q)}{\therefore \neg P\land \neg Q}}\qquad {\frac {\neg P\land \neg Q}{\therefore \neg (P\lor Q)}}} and expressed as truth-functional tautologies or theorems of propositional logic: ¬ ¬ ( P ∧ ∧ Q ) ↔ ↔ ( ¬ ¬ P ∨ ∨ ¬ ¬ Q ) , ¬ ¬ ( P ∨ ∨ Q ) ↔ ↔ ( ¬ ¬ P ∧ ∧ ¬ ¬ Q ) .

{\displaystyle {\begin{aligned}\neg (P\land Q)&\leftrightarrow (\neg P\lor \neg Q),\\\neg (P\lor Q)&\leftrightarrow (\neg P\land \neg Q).\\\end{aligned}}} where P {\displaystyle P} and Q {\displaystyle Q} are propositions expressed in some formal system.

The generalized De Morgan's laws provide an equivalence for negating a conjunction or disjunction involving multiple terms.

For a set of propositions P 1 , P 2 , … … , P n {\displaystyle P_{1},P_{2},\dots ,P_{n}} , the generalized De Morgan's Laws are as follows: ¬ ¬ ( P 1 ∧ ∧ P 2 ∧ ∧ ⋯ ⋯ ∧ ∧ P n ) ↔ ↔ ¬ ¬ P 1 ∨ ∨ ¬ ¬ P 2 ∨ ∨ … … ∨ ∨ ¬ ¬ P n ¬ ¬ ( P 1 ∨ ∨ P 2 ∨ ∨ ⋯ ⋯ ∨ ∨ P n ) ↔ ↔ ¬ ¬ P 1 ∧ ∧ ¬ ¬ P 2 ∧ ∧ … … ∧ ∧ ¬ ¬ P n {\displaystyle {\begin{aligned}\lnot (P_{1}\land P_{2}\land \dots \land P_{n})\leftrightarrow \lnot P_{1}\lor \lnot P_{2}\lor \ldots \lor \lnot P_{n}\\\lnot (P_{1}\lor P_{2}\lor \dots \lor P_{n})\leftrightarrow \lnot P_{1}\land \lnot P_{2}\land \ldots \land \lnot P_{n}\end{aligned}}} These laws generalize De Morgan's original laws for negating conjunctions and disjunctions.

Substitution form [ edit ] De Morgan's laws are normally shown in the compact form above, with the negation of the output on the left and negation of the inputs on the right. A clearer form for substitution can be stated as: ( P ∧ ∧ Q ) ⟺ ⟺ ¬ ¬ ( ¬ ¬ P ∨ ∨ ¬ ¬ Q ) , ( P ∨ ∨ Q ) ⟺ ⟺ ¬ ¬ ( ¬ ¬ P ∧ ∧ ¬ ¬ Q ) .

{\displaystyle {\begin{aligned}(P\land Q)&\Longleftrightarrow \neg (\neg P\lor \neg Q),\\(P\lor Q)&\Longleftrightarrow \neg (\neg P\land \neg Q).\end{aligned}}} This emphasizes the need to invert both the inputs and the output, as well as change the operator when doing a substitution.

Set theory [ edit ] In set theory, it is often stated as "union and intersection interchange under complementation", [ 5 ] which can be formally expressed as: A ∪ ∪ B ¯ ¯ = A ¯ ¯ ∩ ∩ B ¯ ¯ , A ∩ ∩ B ¯ ¯ = A ¯ ¯ ∪ ∪ B ¯ ¯ , {\displaystyle {\begin{aligned}{\overline {A\cup B}}&={\overline {A}}\cap {\overline {B}},\\{\overline {A\cap B}}&={\overline {A}}\cup {\overline {B}},\end{aligned}}} where: A ¯ ¯ {\displaystyle {\overline {A}}} is the negation of A {\displaystyle A} , the overline being written above the terms to be negated, ∩ ∩ {\displaystyle \cap } is the intersection operator (AND), ∪ ∪ {\displaystyle \cup } is the union operator (OR).

Unions and intersections of any number of sets [ edit ] The generalized form is ⋂ ⋂ i ∈ ∈ I A i ¯ ¯ ≡ ≡ ⋃ ⋃ i ∈ ∈ I A i ¯ ¯ , ⋃ ⋃ i ∈ ∈ I A i ¯ ¯ ≡ ≡ ⋂ ⋂ i ∈ ∈ I A i ¯ ¯ , {\displaystyle {\begin{aligned}{\overline {\bigcap _{i\in I}A_{i}}}&\equiv \bigcup _{i\in I}{\overline {A_{i}}},\\{\overline {\bigcup _{i\in I}A_{i}}}&\equiv \bigcap _{i\in I}{\overline {A_{i}}},\end{aligned}}} where I is some, possibly countably or uncountably infinite, indexing set.

In set notation, De Morgan's laws can be remembered using the mnemonic "break the line, change the sign".

[ 6 ] Boolean algebra [ edit ] In Boolean algebra, similarly, this law which can be formally expressed as: A ∧ ∧ B ¯ ¯ = A ¯ ¯ ∨ ∨ B ¯ ¯ , A ∨ ∨ B ¯ ¯ = A ¯ ¯ ∧ ∧ B ¯ ¯ , {\displaystyle {\begin{aligned}{\overline {A\land B}}&={\overline {A}}\lor {\overline {B}},\\{\overline {A\lor B}}&={\overline {A}}\land {\overline {B}},\end{aligned}}} where: A ¯ ¯ {\displaystyle {\overline {A}}} is the negation of A {\displaystyle A} , the overline being written above the terms to be negated, ∧ ∧ {\displaystyle \land } is the logical conjunction operator (AND), ∨ ∨ {\displaystyle \lor } is the logical disjunction operator (OR).

which can be generalized to A 1 ∧ ∧ A 2 ∧ ∧ … … ∧ ∧ A n ¯ ¯ = A 1 ¯ ¯ ∨ ∨ A 2 ¯ ¯ ∨ ∨ … … ∨ ∨ A n ¯ ¯ , A 1 ∨ ∨ A 2 ∨ ∨ … … ∨ ∨ A n ¯ ¯ = A 1 ¯ ¯ ∧ ∧ A 2 ¯ ¯ ∧ ∧ … … ∧ ∧ A n ¯ ¯ .

{\displaystyle {\begin{aligned}{\overline {A_{1}\land A_{2}\land \ldots \land A_{n}}}={\overline {A_{1}}}\lor {\overline {A_{2}}}\lor \ldots \lor {\overline {A_{n}}},\\{\overline {A_{1}\lor A_{2}\lor \ldots \lor A_{n}}}={\overline {A_{1}}}\land {\overline {A_{2}}}\land \ldots \land {\overline {A_{n}}}.\end{aligned}}} Engineering [ edit ] In electrical and computer engineering , De Morgan's laws are commonly written as: ( A ⋅ ⋅ B ) ¯ ¯ ≡ ≡ ( A ¯ ¯ + B ¯ ¯ ) {\displaystyle {\overline {(A\cdot B)}}\equiv ({\overline {A}}+{\overline {B}})} and ( A + B ) ¯ ¯ ≡ ≡ ( A ¯ ¯ ⋅ ⋅ B ¯ ¯ ) , {\displaystyle {\overline {(A+B)}}\equiv ({\overline {A}}\cdot {\overline {B}}),} where: ⋅ ⋅ {\displaystyle \cdot } is the logical AND, + {\displaystyle +} is the logical OR, the overbar is the logical NOT of what is underneath the overbar.

Text searching [ edit ] De Morgan's laws commonly apply to text searching using Boolean operators AND, OR, and NOT. Consider a set of documents containing the words "cats" and "dogs". De Morgan's laws hold that these two searches will return the same set of documents: Search A: NOT (cats OR dogs) Search B: (NOT cats) AND (NOT dogs) The corpus of documents containing "cats" or "dogs" can be represented by four documents: Document 1: Contains only the word "cats".

Document 2: Contains only "dogs".

Document 3: Contains both "cats" and "dogs".

Document 4: Contains neither "cats" nor "dogs".

To evaluate Search A, clearly the search "(cats OR dogs)" will hit on Documents 1, 2, and 3. So the negation of that search (which is Search A) will hit everything else, which is Document 4.

Evaluating Search B, the search "(NOT cats)" will hit on documents that do not contain "cats", which is Documents 2 and 4. Similarly the search "(NOT dogs)" will hit on Documents 1 and 4. Applying the AND operator to these two searches (which is Search B) will hit on the documents that are common to these two searches, which is Document 4.

A similar evaluation can be applied to show that the following two searches will both return Documents 1, 2, and 4: Search C: NOT (cats AND dogs), Search D: (NOT cats) OR (NOT dogs).

History [ edit ] The laws are named after Augustus De Morgan (1806–1871), [ 7 ] who introduced a formal version of the laws to classical propositional logic . De Morgan's formulation was influenced by the algebraization of logic undertaken by George Boole , which later cemented De Morgan's claim to the find. Nevertheless, a similar observation was made by Aristotle , and was known to Greek and Medieval logicians.

[ 8 ] For example, in the 14th century, William of Ockham wrote down the words that would result by reading the laws out.

[ 9 ] Jean Buridan , in his Summulae de Dialectica , also describes rules of conversion that follow the lines of De Morgan's laws.

[ 10 ] Still, De Morgan is given credit for stating the laws in the terms of modern formal logic, and incorporating them into the language of logic. De Morgan's laws can be proved easily, and may even seem trivial.

[ 11 ] Nonetheless, these laws are helpful in making valid inferences in proofs and deductive arguments.

Proof for Boolean algebra [ edit ] De Morgan's theorem may be applied to the negation of a disjunction or the negation of a conjunction in all or part of a formula.

Negation of a disjunction [ edit ] In the case of its application to a disjunction, consider the following claim: "it is false that either of A or B is true", which is written as: ¬ ¬ ( A ∨ ∨ B ) .

{\displaystyle \neg (A\lor B).} In that it has been established that neither A nor B is true, then it must follow that both A is not true and B is not true, which may be written directly as: ( ¬ ¬ A ) ∧ ∧ ( ¬ ¬ B ) .

{\displaystyle (\neg A)\wedge (\neg B).} If either A or B were true, then the disjunction of A and B would be true, making its negation false. Presented in English, this follows the logic that "since two things are both false, it is also false that either of them is true".

Working in the opposite direction, the second expression asserts that A is false and B is false (or equivalently that "not A" and "not B" are true). Knowing this, a disjunction of A and B must be false also. The negation of said disjunction must thus be true, and the result is identical to the first claim.

Negation of a conjunction [ edit ] The application of De Morgan's theorem to conjunction is very similar to its application to a disjunction both in form and rationale. Consider the following claim: "it is false that A and B are both true", which is written as: ¬ ¬ ( A ∧ ∧ B ) .

{\displaystyle \neg (A\land B).} In order for this claim to be true, either or both of A or B must be false, for if they both were true, then the conjunction of A and B would be true, making its negation false. Thus, one (at least) or more of A and B must be false (or equivalently, one or more of "not A" and "not B" must be true). This may be written directly as, ( ¬ ¬ A ) ∨ ∨ ( ¬ ¬ B ) .

{\displaystyle (\neg A)\lor (\neg B).} Presented in a natural language like English, it is expressed as "since it is false that two things are both true, at least one of them must be false".

Working in the opposite direction again, the second expression asserts that at least one of "not A" and "not B" must be true, or equivalently that at least one of A and B must be false. Since at least one of them must be false, then their conjunction would likewise be false. Negating said conjunction thus results in a true expression, and this expression is identical to the first claim.

Proof for set theory [ edit ] Here we use A ¯ ¯ {\displaystyle {\overline {A}}} to denote the complement of A, as above in § Set theory and Boolean algebra . The proof that A ∩ ∩ B ¯ ¯ = A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle {\overline {A\cap B}}={\overline {A}}\cup {\overline {B}}} is completed in 2 steps by proving both A ∩ ∩ B ¯ ¯ ⊆ ⊆ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle {\overline {A\cap B}}\subseteq {\overline {A}}\cup {\overline {B}}} and A ¯ ¯ ∪ ∪ B ¯ ¯ ⊆ ⊆ A ∩ ∩ B ¯ ¯ {\displaystyle {\overline {A}}\cup {\overline {B}}\subseteq {\overline {A\cap B}}} .

Part 1 [ edit ] Let x ∈ ∈ A ∩ ∩ B ¯ ¯ {\displaystyle x\in {\overline {A\cap B}}} . Then, x ∉ A ∩ ∩ B {\displaystyle x\not \in A\cap B} .

Because A ∩ ∩ B = { y | y ∈ ∈ A ∧ ∧ y ∈ ∈ B } {\displaystyle A\cap B=\{\,y\ |\ y\in A\wedge y\in B\,\}} , it must be the case that x ∉ A {\displaystyle x\not \in A} or x ∉ B {\displaystyle x\not \in B} .

If x ∉ A {\displaystyle x\not \in A} , then x ∈ ∈ A ¯ ¯ {\displaystyle x\in {\overline {A}}} , so x ∈ ∈ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle x\in {\overline {A}}\cup {\overline {B}}} .

Similarly, if x ∉ B {\displaystyle x\not \in B} , then x ∈ ∈ B ¯ ¯ {\displaystyle x\in {\overline {B}}} , so x ∈ ∈ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle x\in {\overline {A}}\cup {\overline {B}}} .

Thus, ∀ ∀ x ( x ∈ ∈ A ∩ ∩ B ¯ ¯ ⟹ ⟹ x ∈ ∈ A ¯ ¯ ∪ ∪ B ¯ ¯ ) {\displaystyle \forall x{\Big (}x\in {\overline {A\cap B}}\implies x\in {\overline {A}}\cup {\overline {B}}{\Big )}} ; that is, A ∩ ∩ B ¯ ¯ ⊆ ⊆ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle {\overline {A\cap B}}\subseteq {\overline {A}}\cup {\overline {B}}} .

Part 2 [ edit ] To prove the reverse direction, let x ∈ ∈ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle x\in {\overline {A}}\cup {\overline {B}}} , and for contradiction assume x ∉ A ∩ ∩ B ¯ ¯ {\displaystyle x\not \in {\overline {A\cap B}}} .

Under that assumption, it must be the case that x ∈ ∈ A ∩ ∩ B {\displaystyle x\in A\cap B} , so it follows that x ∈ ∈ A {\displaystyle x\in A} and x ∈ ∈ B {\displaystyle x\in B} , and thus x ∉ A ¯ ¯ {\displaystyle x\not \in {\overline {A}}} and x ∉ B ¯ ¯ {\displaystyle x\not \in {\overline {B}}} .

However, that means x ∉ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle x\not \in {\overline {A}}\cup {\overline {B}}} , in contradiction to the hypothesis that x ∈ ∈ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle x\in {\overline {A}}\cup {\overline {B}}} , therefore, the assumption x ∉ A ∩ ∩ B ¯ ¯ {\displaystyle x\not \in {\overline {A\cap B}}} must not be the case, meaning that x ∈ ∈ A ∩ ∩ B ¯ ¯ {\displaystyle x\in {\overline {A\cap B}}} .

Hence, ∀ ∀ x ( x ∈ ∈ A ¯ ¯ ∪ ∪ B ¯ ¯ ⟹ ⟹ x ∈ ∈ A ∩ ∩ B ¯ ¯ ) {\displaystyle \forall x{\Big (}x\in {\overline {A}}\cup {\overline {B}}\implies x\in {\overline {A\cap B}}{\Big )}} , that is, A ¯ ¯ ∪ ∪ B ¯ ¯ ⊆ ⊆ A ∩ ∩ B ¯ ¯ {\displaystyle {\overline {A}}\cup {\overline {B}}\subseteq {\overline {A\cap B}}} .

Conclusion [ edit ] If A ¯ ¯ ∪ ∪ B ¯ ¯ ⊆ ⊆ A ∩ ∩ B ¯ ¯ {\displaystyle {\overline {A}}\cup {\overline {B}}\subseteq {\overline {A\cap B}}} and A ∩ ∩ B ¯ ¯ ⊆ ⊆ A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle {\overline {A\cap B}}\subseteq {\overline {A}}\cup {\overline {B}}} , then A ∩ ∩ B ¯ ¯ = A ¯ ¯ ∪ ∪ B ¯ ¯ {\displaystyle {\overline {A\cap B}}={\overline {A}}\cup {\overline {B}}} ; this concludes the proof of De Morgan's law.

The other De Morgan's law, A ∪ ∪ B ¯ ¯ = A ¯ ¯ ∩ ∩ B ¯ ¯ {\displaystyle {\overline {A\cup B}}={\overline {A}}\cap {\overline {B}}} , is proven similarly.

Generalising De Morgan duality [ edit ] De Morgan's Laws represented as a circuit with logic gates ( International Electrotechnical Commission diagrams) In extensions of classical propositional logic, the duality still holds (that is, to any logical operator one can always find its dual), since in the presence of the identities governing negation, one may always introduce an operator that is the De Morgan dual of another. This leads to an important property of logics based on classical logic , namely the existence of negation normal forms : any formula is equivalent to another formula where negations only occur applied to the non-logical atoms of the formula. The existence of negation normal forms drives many applications, for example in digital circuit design, where it is used to manipulate the types of logic gates , and in formal logic, where it is needed to find the conjunctive normal form and disjunctive normal form of a formula. Computer programmers use them to simplify or properly negate complicated logical conditions . They are also often useful in computations in elementary probability theory .

Let one define the dual of any propositional operator P( p , q , ...) depending on elementary propositions p , q , ... to be the operator P d {\displaystyle {\mbox{P}}^{d}} defined by P d ( p , q , .

.

.

) = ¬ ¬ P ( ¬ ¬ p , ¬ ¬ q , … … ) .

{\displaystyle {\mbox{P}}^{d}(p,q,...)=\neg P(\neg p,\neg q,\dots ).} Extension to predicate and modal logic [ edit ] This duality can be generalised to quantifiers, so for example the universal quantifier and existential quantifier are duals: ∀ ∀ x P ( x ) ≡ ≡ ¬ ¬ [ ∃ ∃ x ¬ ¬ P ( x ) ] {\displaystyle \forall x\,P(x)\equiv \neg [\exists x\,\neg P(x)]} ∃ ∃ x P ( x ) ≡ ≡ ¬ ¬ [ ∀ ∀ x ¬ ¬ P ( x ) ] {\displaystyle \exists x\,P(x)\equiv \neg [\forall x\,\neg P(x)]} To relate these quantifier dualities to the De Morgan laws, consider a domain of discourse D (with some small number of entities) to which properties are ascribed universally and existentially, such as D = { a , b , c }.

Then express universal quantifier equivalently by conjunction of individual statements ∀ ∀ x P ( x ) ≡ ≡ P ( a ) ∧ ∧ P ( b ) ∧ ∧ P ( c ) {\displaystyle \forall x\,P(x)\equiv P(a)\land P(b)\land P(c)} and existential quantifier by disjunction of individual statements ∃ ∃ x P ( x ) ≡ ≡ P ( a ) ∨ ∨ P ( b ) ∨ ∨ P ( c ) .

{\displaystyle \exists x\,P(x)\equiv P(a)\lor P(b)\lor P(c).} But, using De Morgan's laws, P ( a ) ∧ ∧ P ( b ) ∧ ∧ P ( c ) ≡ ≡ ¬ ¬ ( ¬ ¬ P ( a ) ∨ ∨ ¬ ¬ P ( b ) ∨ ∨ ¬ ¬ P ( c ) ) {\displaystyle P(a)\land P(b)\land P(c)\equiv \neg (\neg P(a)\lor \neg P(b)\lor \neg P(c))} and P ( a ) ∨ ∨ P ( b ) ∨ ∨ P ( c ) ≡ ≡ ¬ ¬ ( ¬ ¬ P ( a ) ∧ ∧ ¬ ¬ P ( b ) ∧ ∧ ¬ ¬ P ( c ) ) , {\displaystyle P(a)\lor P(b)\lor P(c)\equiv \neg (\neg P(a)\land \neg P(b)\land \neg P(c)),} verifying the quantifier dualities in the model.

Then, the quantifier dualities can be extended further to modal logic , relating the box ("necessarily") and diamond ("possibly") operators: ◻ ◻ p ≡ ≡ ¬ ¬ ◊ ◊ ¬ ¬ p , {\displaystyle \Box p\equiv \neg \Diamond \neg p,} ◊ ◊ p ≡ ≡ ¬ ¬ ◻ ◻ ¬ ¬ p .

{\displaystyle \Diamond p\equiv \neg \Box \neg p.} In its application to the alethic modalities of possibility and necessity, Aristotle observed this case, and in the case of normal modal logic , the relationship of these modal operators to the quantification can be understood by setting up models using Kripke semantics .

In intuitionistic logic [ edit ] Three out of the four implications of de Morgan's laws hold in intuitionistic logic . Specifically, we have ¬ ¬ ( P ∨ ∨ Q ) ↔ ↔ ( ( ¬ ¬ P ) ∧ ∧ ( ¬ ¬ Q ) ) , {\displaystyle \neg (P\lor Q)\,\leftrightarrow \,{\big (}(\neg P)\land (\neg Q){\big )},} and ( ( ¬ ¬ P ) ∨ ∨ ( ¬ ¬ Q ) ) → → ¬ ¬ ( P ∧ ∧ Q ) .

{\displaystyle {\big (}(\neg P)\lor (\neg Q){\big )}\,\to \,\neg (P\land Q).} The converse of the last implication does not hold in pure intuitionistic logic. That is, the failure of the joint proposition P ∧ ∧ Q {\displaystyle P\land Q} cannot necessarily be resolved to the failure of either of the two conjuncts . For example, from knowing it not to be the case that both Alice and Bob showed up to their date, it does not follow who did not show up. The latter principle is equivalent to the principle of the weak excluded middle W P E M {\displaystyle {\mathrm {WPEM} }} , ( ¬ ¬ P ) ∨ ∨ ¬ ¬ ( ¬ ¬ P ) .

{\displaystyle (\neg P)\lor \neg (\neg P).} This weak form can be used as a foundation for an intermediate logic .
For a refined version of the failing law concerning existential statements, see the lesser limited principle of omniscience L L P O {\displaystyle {\mathrm {LLPO} }} , which however is different from W L P O {\displaystyle {\mathrm {WLPO} }} .

The validity of the other three De Morgan's laws remains true if negation ¬ ¬ P {\displaystyle \neg P} is replaced by implication P → → C {\displaystyle P\to C} for some arbitrary constant predicate C, meaning that the above laws are still true in minimal logic .

Similarly to the above, the quantifier laws: ∀ ∀ x ¬ ¬ P ( x ) ↔ ↔ ¬ ¬ ∃ ∃ x P ( x ) {\displaystyle \forall x\,\neg P(x)\,\leftrightarrow \,\neg \exists x\,P(x)} and ∃ ∃ x ¬ ¬ P ( x ) → → ¬ ¬ ∀ ∀ x P ( x ) .

{\displaystyle \exists x\,\neg P(x)\,\to \,\neg \forall x\,P(x).} are tautologies even in minimal logic with negation replaced with implying a fixed Q {\displaystyle Q} , while the converse of the last law does not have to be true in general.

Further, one still has ( P ∨ ∨ Q ) → → ¬ ¬ ( ( ¬ ¬ P ) ∧ ∧ ( ¬ ¬ Q ) ) , {\displaystyle (P\lor Q)\,\to \,\neg {\big (}(\neg P)\land (\neg Q){\big )},} ( P ∧ ∧ Q ) → → ¬ ¬ ( ( ¬ ¬ P ) ∨ ∨ ( ¬ ¬ Q ) ) , {\displaystyle (P\land Q)\,\to \,\neg {\big (}(\neg P)\lor (\neg Q){\big )},} ∀ ∀ x P ( x ) → → ¬ ¬ ∃ ∃ x ¬ ¬ P ( x ) , {\displaystyle \forall x\,P(x)\,\to \,\neg \exists x\,\neg P(x),} ∃ ∃ x P ( x ) → → ¬ ¬ ∀ ∀ x ¬ ¬ P ( x ) , {\displaystyle \exists x\,P(x)\,\to \,\neg \forall x\,\neg P(x),} but their inversion implies excluded middle , P E M {\displaystyle {\mathrm {PEM} }} .

In computer engineering [ edit ] De Morgan's laws are widely used in computer engineering and digital logic for the purpose of simplifying circuit designs.

[ 12 ] In modern programming languages, compilers and interpreters use De Morgan's laws to optimize boolean expressions.  Therefore performance differences between logically equivalent expressions are usually negligible or completely absent.

See also [ edit ] Conjunction/disjunction duality Homogeneity (linguistics) Isomorphism List of Boolean algebra topics List of set identities and relations Positive logic De Morgan algebra References [ edit ] ^ Copi, Irving M.; Cohen, Carl; McMahon, Kenneth (2016).

Introduction to Logic .

doi : 10.4324/9781315510897 .

ISBN 9781315510880 .

^ Hurley, Patrick J. (2015), A Concise Introduction to Logic (12th ed.), Cengage Learning, ISBN 978-1-285-19654-1 ^ Moore, Brooke Noel (2012).

Critical thinking . Richard Parker (10th ed.). New York: McGraw-Hill.

ISBN 978-0-07-803828-0 .

OCLC 689858599 .

^ DeMorgan's [sic] Theorem ^ Boolean Algebra by R. L. Goodstein.

ISBN 0-486-45894-6 ^ 2000 Solved Problems in Digital Electronics by S. P. Bali ^ "DeMorgan's Theorems" .

Middle Tennessee State University . Archived from the original on 2008-03-23.

^ Bocheński, I. M.

(1961).

A History of Formal Logic . Notre Dame, Indiana: University of Notre Dame Press . p. 207.

LCCN 58014183 .

^ William of Ockham, Summa Logicae , part II, sections 32 and 33.

^ Jean Buridan, Summula de Dialectica . Trans. Gyula Klima. New Haven: Yale University Press, 2001. See especially Treatise 1, Chapter 7, Section 5.

ISBN 0-300-08425-0 ^ Robert H. Orr.

"Augustus De Morgan (1806–1871)" .

Indiana University–Purdue University Indianapolis . Archived from the original on 2010-07-15.

^ Wirth, Niklaus (1995), Digital Circuit Design for Computer Science Students: An Introductory Textbook , Springer, p. 16, ISBN 9783540585770 External links [ edit ] "Duality principle" , Encyclopedia of Mathematics , EMS Press , 2001 [1994] Weisstein, Eric W.

"de Morgan's Laws" .

MathWorld .

de Morgan's laws at PlanetMath .

Duality in Logic and Language , Internet Encyclopedia of Philosophy .

v t e Classical logic General Quantifiers Predicate Connective Tautology Truth tables Truth function Truth value Well-formed formula Logicism Problem of multiple generality Associativity Distribution Validity Soundness Classical logics Term Propositional First-order Second-order Higher-order Principles Commutativity of conjunction Excluded middle Bivalence Noncontradiction Monotonicity of entailment Explosion Rules De Morgan's laws Material implication Transposition modus ponens modus tollens modus ponendo tollens Constructive dilemma Destructive dilemma Disjunctive syllogism Hypothetical syllogism Absorption Introduction Negation Double negation Existential Universal Biconditional Conjunction Disjunction Elimination Double negation Existential Universal Biconditional Conjunction Disjunction People Bernard Bolzano George Boole Georg Cantor Richard Dedekind Augustus De Morgan Gottlob Frege Kurt Gödel Hugh MacColl Giuseppe Peano Charles Sanders Peirce Bertrand Russell Ernst Schröder Henry M. Sheffer Alfred Tarski Willard Van Orman Quine Ludwig Wittgenstein Jan Łukasiewicz Works Begriffsschrift Function and Concept The Principles of Mathematics Principia Mathematica Tractatus Logico-Philosophicus v t e Set theory Overview Set (mathematics) Axioms Adjunction Choice countable dependent global Constructibility (V=L) Determinacy projective Extensionality Infinity Limitation of size Pairing Power set Regularity Union Martin's axiom Axiom schema replacement specification Operations Cartesian product Complement (i.e. set difference) De Morgan's laws Disjoint union Identities Intersection Power set Symmetric difference Union Concepts Methods Almost Cardinality Cardinal number ( large ) Class Constructible universe Continuum hypothesis Diagonal argument Element ordered pair tuple Family Forcing One-to-one correspondence Ordinal number Set-builder notation Transfinite induction Venn diagram Set types Amorphous Countable Empty Finite ( hereditarily ) Filter base subbase Ultrafilter Fuzzy Infinite ( Dedekind-infinite ) Recursive Singleton Subset · Superset Transitive Uncountable Universal Theories Alternative Axiomatic Naive Cantor's theorem Zermelo General Principia Mathematica New Foundations Zermelo–Fraenkel von Neumann–Bernays–Gödel Morse–Kelley Kripke–Platek Tarski–Grothendieck Paradoxes Problems Russell's paradox Suslin's problem Burali-Forti paradox Set theorists Paul Bernays Georg Cantor Paul Cohen Richard Dedekind Abraham Fraenkel Kurt Gödel Thomas Jech John von Neumann Willard Quine Bertrand Russell Thoralf Skolem Ernst Zermelo Retrieved from " https://en.wikipedia.org/w/index.php?title=De_Morgan%27s_laws&oldid=1300924070 " Categories : Boolean algebra Duality theories Rules of inference Theorems in propositional logic Hidden categories: Articles with short description Short description is different from Wikidata Articles containing Latin-language text Articles containing proofs Pages that use a deprecated format of the math tags This page was last edited on 17 July 2025, at 04:23 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents De Morgan's laws 49 languages Add topic

