Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Variants 2 Computational complexity of evaluation 3 Decidability and complexity of satisfiability Toggle Decidability and complexity of satisfiability subsection 3.1 Use of satisfiability of MSO on trees in verification 4 See also 5 References Toggle the table of contents Monadic second-order logic 2 languages Deutsch Français Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Form of second-order logic In mathematical logic , monadic second-order logic ( MSO ) is the fragment of second-order logic where the second-order quantification is limited to quantification over sets.

[ 1 ] It is particularly important in the logic of graphs , because of Courcelle's theorem , which provides algorithms for evaluating monadic second-order formulas over graphs of bounded treewidth . It is also of fundamental importance in automata theory , where the Büchi–Elgot–Trakhtenbrot theorem gives a logical characterization of the regular languages .

Second-order logic allows quantification over predicates .  However, MSO is the fragment in which second-order quantification is limited to monadic predicates (predicates having a single argument).  This is often described as quantification over "sets" because monadic predicates are equivalent in expressive power to sets (the set of elements for which the predicate is true).

Variants [ edit ] Monadic second-order logic comes in two variants. In the variant considered over structures such as graphs and in Courcelle's theorem, the formula may involve non-monadic predicates (in this case the binary edge predicate E ( x , y ) {\displaystyle E(x,y)} ), but quantification is restricted to be over monadic predicates only. In the variant considered in automata theory and the Büchi–Elgot–Trakhtenbrot theorem, all predicates, including those in the formula itself, must be monadic, with the exceptions of equality ( = {\displaystyle =} ) and ordering ( < {\displaystyle <} ) relations.

Computational complexity of evaluation [ edit ] Existential monadic second-order logic (EMSO) is the fragment of MSO in which all quantifiers over sets must be existential quantifiers , outside of any other part of the formula. The first-order quantifiers are not restricted. By analogy to Fagin's theorem , according to which existential (non-monadic) second-order logic captures precisely the descriptive complexity of the complexity class NP , the class of problems that may be expressed in existential monadic second-order logic has been called monadic NP. The restriction to monadic logic makes it possible to prove separations in this logic that remain unproven for non-monadic second-order logic. For instance, in the logic of graphs , testing whether a graph is disconnected belongs to monadic NP, as the test can be represented by a formula that describes the existence of a proper subset of vertices with no edges connecting them to the rest of the graph; however, the complementary problem, testing whether a graph is connected, does not belong to monadic NP.

[ 2 ] [ 3 ] The existence of an analogous pair of complementary problems, only one of which has an existential second-order formula (without the restriction to monadic formulas) is equivalent to the inequality of NP and coNP , an open question in computational complexity.

By contrast, when we wish to check whether a Boolean MSO formula is satisfied by an input finite tree , this problem can be solved in linear time in the tree, by translating the Boolean MSO formula to a tree automaton [ 4 ] and evaluating the automaton on the tree. In terms of the query, however, the complexity of this process is generally nonelementary .

[ 5 ] Thanks to Courcelle's theorem , we can also evaluate a Boolean MSO formula in linear time on an input graph if the treewidth of the graph is bounded by a constant.

For MSO formulas that have free variables , when the input data is a tree or has bounded treewidth, there are efficient enumeration algorithms to produce the set of all solutions, [ 6 ] ensuring that the input data is preprocessed in linear time and that each solution is then produced in a delay linear in the size of each solution, i.e., constant-delay in the common case where all free variables of the query are first-order variables (i.e., they do not represent sets). There are also efficient algorithms for counting the number of solutions of the MSO formula in that case.

[ 7 ] Decidability and complexity of satisfiability [ edit ] The satisfiability problem for monadic second-order logic is undecidable in general because this logic subsumes first-order logic .

The monadic second-order theory of the infinite complete binary tree , called S2S , is decidable .

[ 8 ] As a consequence of this result, the following theories are decidable: The monadic second-order theory of trees.

The monadic second-order theory of N {\displaystyle \mathbb {N} } under successor (S1S).

WS2S and WS1S, which restrict quantification to finite subsets (weak monadic second-order logic).  Note that for binary numbers (represented by subsets), addition is definable even in WS1S.

For each of these theories (S2S, S1S, WS2S, WS1S), the complexity of the decision problem is nonelementary .

[ 5 ] [ 9 ] Use of satisfiability of MSO on trees in verification [ edit ] Monadic second-order logic of trees has applications in formal verification . Decision procedures for MSO satisfiability [ 10 ] [ 11 ] [ 12 ] have been used to prove properties of programs manipulating linked data structures , [ 13 ] as a form of shape analysis , and for symbolic reasoning in hardware verification .

[ 14 ] See also [ edit ] Descriptive complexity theory Monadic predicate calculus Second-order logic References [ edit ] ^ Courcelle, Bruno ; Engelfriet, Joost (2012-01-01).

Graph Structure and Monadic Second-Order Logic: A Language-Theoretic Approach . Cambridge University Press.

ISBN 978-0521898331 . Retrieved 2016-09-15 .

^ Fagin, Ronald (1975), "Monadic generalized spectra", Zeitschrift für Mathematische Logik und Grundlagen der Mathematik , 21 : 89– 96, doi : 10.1002/malq.19750210112 , MR 0371623 .

^ Fagin, R.

; Stockmeyer, L.

; Vardi, M. Y.

(1993), "On monadic NP vs. monadic co-NP", Proceedings of the Eighth Annual Structure in Complexity Theory Conference , Institute of Electrical and Electronics Engineers, doi : 10.1109/sct.1993.336544 , S2CID 32740047 .

^ Thatcher, J. W.; Wright, J. B. (1968-03-01). "Generalized finite automata theory with an application to a decision problem of second-order logic".

Mathematical Systems Theory .

2 (1): 57– 81.

doi : 10.1007/BF01691346 .

ISSN 1433-0490 .

S2CID 31513761 .

^ a b Meyer, Albert R. (1975). Parikh, Rohit (ed.). "Weak monadic second order theory of succesor is not elementary-recursive".

Logic Colloquium . Lecture Notes in Mathematics. Springer Berlin Heidelberg: 132– 154.

doi : 10.1007/bfb0064872 .

ISBN 9783540374831 .

^ Bagan, Guillaume (2006). Ésik, Zoltán (ed.). "MSO Queries on Tree Decomposable Structures Are Computable with Linear Delay".

Computer Science Logic . Lecture Notes in Computer Science.

4207 . Springer Berlin Heidelberg: 167– 181.

doi : 10.1007/11874683_11 .

ISBN 9783540454595 .

^ Arnborg, Stefan; Lagergren, Jens; Seese, Detlef (1991-06-01). "Easy problems for tree-decomposable graphs".

Journal of Algorithms .

12 (2): 308– 340.

doi : 10.1016/0196-6774(91)90006-K .

ISSN 0196-6774 .

^ Rabin, Michael O. (1969).

"Decidability of Second-Order Theories and Automata on Infinite Trees" .

Transactions of the American Mathematical Society .

141 : 1– 35.

doi : 10.2307/1995086 .

ISSN 0002-9947 .

JSTOR 1995086 .

^ Stockmeyer, Larry; Meyer, Albert R. (2002-11-01).

"Cosmological lower bound on the circuit complexity of a small problem in logic" .

Journal of the ACM .

49 (6): 753– 784.

doi : 10.1145/602220.602223 .

ISSN 0004-5411 .

S2CID 15515064 .

^ Henriksen, Jesper G.; Jensen, Jakob; Jørgensen, Michael; Klarlund, Nils; Paige, Robert; Rauhe, Theis; Sandholm, Anders (1995). Brinksma, E.; Cleaveland, W. R.; Larsen, K. G.; Margaria, T.

; Steffen, B. (eds.).

"Mona: Monadic second-order logic in practice" .

Tools and Algorithms for the Construction and Analysis of Systems . Lecture Notes in Computer Science.

1019 . Berlin, Heidelberg: Springer: 89– 110.

doi : 10.1007/3-540-60630-0_5 .

ISBN 978-3-540-48509-4 .

^ Fiedor, Tomáš; Holík, Lukáš; Lengál, Ondřej; Vojnar, Tomáš (2019-04-01).

"Nested antichains for WS1S" .

Acta Informatica .

56 (3): 205– 228.

doi : 10.1007/s00236-018-0331-z .

ISSN 1432-0525 .

S2CID 57189727 .

^ Traytel, Dmitriy; Nipkow, Tobias (2013-09-25).

"Verified decision procedures for MSO on words based on derivatives of regular expressions" .

ACM SIGPLAN Notices .

48 (9): 3–f12.

doi : 10.1145/2544174.2500612 .

hdl : 20.500.11850/106053 .

ISSN 0362-1340 .

^ Møller, Anders; Schwartzbach, Michael I. (2001-05-01).

"The pointer assertion logic engine" .

Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation . PLDI '01. Snowbird, Utah, USA: Association for Computing Machinery. pp.

221– 231.

doi : 10.1145/378795.378851 .

ISBN 978-1-58113-414-8 .

S2CID 11476928 .

^ Basin, David; Klarlund, Nils (1998-11-01).

"Automata based symbolic reasoning in hardware verification" .

Formal Methods in System Design .

13 (3): 255– 288.

doi : 10.1023/A:1008644009416 .

ISSN 0925-9856 .

v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal Retrieved from " https://en.wikipedia.org/w/index.php?title=Monadic_second-order_logic&oldid=1296430833 " Category : Mathematical logic Hidden categories: Articles with short description Short description is different from Wikidata This page was last edited on 19 June 2025, at 23:48 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Monadic second-order logic 2 languages Add topic

