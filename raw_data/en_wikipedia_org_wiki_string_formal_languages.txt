Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Purpose 2 History 3 String datatypes Toggle String datatypes subsection 3.1 String length 3.2 Character encoding 3.3 Implementations 3.4 Representations 3.4.1 Null-terminated 3.4.2 Byte- and bit-terminated 3.4.3 Length-prefixed 3.4.4 Strings as records 3.4.5 Other representations 3.5 Security concerns 4 Literal strings 5 Non-text strings 6 String processing algorithms 7 Character string-oriented languages and utilities 8 Character string functions 9 Formal theory Toggle Formal theory subsection 9.1 Concatenation and substrings 9.2 Prefixes and suffixes 9.3 Reversal 9.4 Rotations 9.5 Lexicographical ordering 9.6 String operations 9.7 Topology 10 See also 11 References Toggle the table of contents String (computer science) 44 languages Afrikaans العربية Basa Bali 閩南語 / Bân-lâm-gí Беларуская Български Català Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto فارسی Français 한국어 हिन्दी Ido Bahasa Indonesia Íslenska Italiano עברית Magyar Македонски മലയാളം Bahasa Melayu Nederlands 日本語 Norsk bokmål Polski Português Русский کوردی Српски / srpski Suomi Svenska Tagalog ไทย Türkçe Українська 吴语 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikifunctions Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from String (formal languages) ) Sequence of characters, data type Strings are typically made up of characters , and are often used to store human-readable data, such as words or sentences.

In computer programming , a string is traditionally a sequence of characters , either as a literal constant or as some kind of variable . The latter may allow its elements to be mutated and the length changed, or it may be fixed (after creation). A string is often implemented as an array data structure of bytes (or words ) that stores a sequence of elements, typically characters, using some character encoding . More general, string may also denote a sequence (or list ) of data other than just characters.

Depending on the programming language and precise data type used, a variable declared to be a string may either cause storage in memory to be statically allocated for a predetermined maximum length or employ dynamic allocation to allow it to hold a variable number of elements.

When a string appears literally in source code , it is known as a string literal or an anonymous string.

[ 1 ] In formal languages , which are used in mathematical logic and theoretical computer science , a string is a finite sequence of symbols that are chosen from a set called an alphabet .

Purpose [ edit ] A primary purpose of strings is to store human-readable text, like words and sentences. Strings are used to communicate information from a computer program to the user of the program.

[ 2 ] A program may also accept string input from its user. Further, strings may store data expressed as characters yet not intended for human reading.

Example strings and their purposes: A message like " file upload complete " is a string that software shows to end users . In the program's source code , this message would likely appear as a string literal .

User-entered text, like " I got a new job today " as a status update on a social media service. Instead of a string literal, the software would likely store this string in a database .

Alphabetical data, like " AGATGCCGT " representing nucleic acid sequences of DNA .

[ 3 ] Computer settings or parameters, like " ?action=edit " as a URL query string . Often these are intended to be somewhat human-readable, though their primary purpose is to communicate to computers.

The term string may also designate a sequence of data or computer records other than characters — like a "string of bits " — but when used without qualification it refers to strings of characters.

[ 4 ] History [ edit ] Use of the word "string" to mean any items arranged in a line, series or succession dates back centuries.

[ 5 ] [ 6 ] In 19th-century typesetting, compositors used the term "string" to denote a length of type printed on paper; the string would be measured to determine the compositor's pay.

[ 7 ] [ 4 ] [ 8 ] Use of the word "string" to mean "a sequence of symbols or linguistic elements in a definite order" emerged from mathematics, symbolic logic , and linguistic theory to speak about the formal behavior of symbolic systems, setting aside the symbols' meaning.

[ 4 ] For example, logician C. I. Lewis wrote in 1918: [ 9 ] A mathematical system is any set of strings of recognisable marks in which some of the strings are taken initially and the remainder derived from these by operations performed according to rules which are independent of any meaning assigned to the marks. That a system should consist of 'marks' instead of sounds or odours is immaterial.

According to Jean E. Sammet , "the first realistic string handling and pattern matching language" for computers was COMIT in the 1950s, followed by the SNOBOL language of the early 1960s.

[ 10 ] String datatypes [ edit ] See also: Comparison of programming languages (string functions) A string datatype is a datatype modeled on the idea of a formal string. Strings are such an important and useful datatype that they are implemented in nearly every programming language . In some languages they are available as primitive types and in others as composite types . The syntax of most high-level programming languages allows for a string, usually quoted in some way, to represent an instance of a string datatype; such a meta-string is called a literal or string literal .

String length [ edit ] Although formal strings can have an arbitrary finite length, the length of strings in real languages is often constrained to an artificial maximum. In general, there are two types of string datatypes: fixed-length strings , which have a fixed maximum length to be determined at compile time and which use the same amount of memory whether this maximum is needed or not, and variable-length strings , whose length is not arbitrarily fixed and which can use varying amounts of memory depending on the actual requirements at run time (see Memory management ). Most strings in modern programming languages are variable-length strings. Of course, even variable-length strings are limited in length by the amount of available memory. The string length can be stored as a separate integer (which may put another artificial limit on the length) or implicitly through a termination character, usually a character value with all bits zero such as in C programming language. See also " Null-terminated " below.

Character encoding [ edit ] String datatypes have historically allocated one byte per character, and, although the exact character set varied by region, character encodings were similar enough that programmers could often get away with ignoring this, since characters a program treated specially (such as period and space and comma) were in the same place in all the encodings a program would encounter. These character sets were typically based on ASCII or EBCDIC . If text in one encoding was displayed on a system using a different encoding, text was often mangled , though often somewhat readable and some computer users learned to read the mangled text.

Logographic languages such as Chinese , Japanese , and Korean (known collectively as CJK ) need far more than 256 characters (the limit of a one 8-bit byte per-character encoding) for reasonable representation. The normal solutions involved keeping single-byte representations for ASCII and using two-byte representations for CJK ideographs . Use of these with existing code led to problems with matching and cutting of strings, the severity of which depended on how the character encoding was designed. Some encodings such as the EUC family guarantee that a byte value in the ASCII range will represent only that ASCII character, making the encoding safe for systems that use those characters as field separators. Other encodings such as ISO-2022 and Shift-JIS do not make such guarantees, making matching on byte codes unsafe. These encodings also were not "self-synchronizing", so that locating character boundaries required backing up to the start of a string, and pasting two strings together could result in corruption of the second string.

Unicode has simplified the picture somewhat. Most programming languages now have a datatype for Unicode strings. Unicode's preferred byte stream format UTF-8 is designed not to have the problems described above for older multibyte encodings. UTF-8, UTF-16 and UTF-32 require the programmer to know that the fixed-size code units are different from the "characters", the main difficulty currently is incorrectly designed APIs that attempt to hide this difference (UTF-32 does make code points fixed-sized, but these are not "characters" due to composing codes).

Implementations [ edit ] Some languages, such as C++ , Perl and Ruby , normally allow the contents of a string to be changed after it has been created; these are termed mutable strings.  In other languages, such as Java , JavaScript , Lua , Python , and Go , the value is fixed and a new string must be created if any alteration is to be made; these are termed immutable strings. Some of these languages with immutable strings also provide another type that is mutable, such as Java and .NET 's StringBuilder , the thread-safe Java StringBuffer , and the Cocoa NSMutableString . There are both advantages and disadvantages to immutability: although immutable strings may require inefficiently creating many copies, they are simpler and completely thread-safe .

Strings are typically implemented as arrays of bytes, characters, or code units, in order to allow fast access to individual units or substrings—including characters when they have a fixed length.  A few languages such as Haskell implement them as linked lists instead.

A lot of high-level languages provide strings as a primitive data type, such as JavaScript and PHP , while most others provide them as a composite data type, some with special language support in writing literals, for example, Java and C# .

Some languages, such as C , Prolog and Erlang , avoid implementing a dedicated string datatype at all, instead adopting the convention of representing strings as lists of character codes. Even in programming languages having a dedicated string type, string can usually be iterated as a sequence character codes, like lists of integers or other values.

Representations [ edit ] Representations of strings depend heavily on the choice of character repertoire and the method of character encoding. Older string implementations were designed to work with repertoire and encoding defined by ASCII, or more recent extensions like the ISO 8859 series. Modern implementations often use the extensive repertoire defined by Unicode along with a variety of complex encodings such as UTF-8 and UTF-16.

The term byte string usually indicates a general-purpose string of bytes, rather than strings of only (readable) characters, strings of bits, or such. Byte strings often imply that bytes can take any value and any data can be stored as-is, meaning that there should be no value interpreted as a termination value.

Most string implementations are very similar to variable-length arrays with the entries storing the character codes of corresponding characters. The principal difference is that, with certain encodings, a single logical character may take up more than one entry in the array. This happens for example with UTF-8, where single codes ( UCS code points) can take anywhere from one to four bytes, and single characters can take an arbitrary number of codes. In these cases, the logical length of the string (number of characters) differs from the physical length of the array (number of bytes in use).

UTF-32 avoids the first part of the problem.

Null-terminated [ edit ] Main article: Null-terminated string The length of a string can be stored implicitly by using a special terminating character; often this is the null character (NUL), which has all bits zero, a convention used and perpetuated by the popular C programming language .

[ 11 ] Hence, this representation is commonly referred to as a C string . This representation of an n -character string takes n + 1 space (1 for the terminator), and is thus an implicit data structure .

In terminated strings, the terminating code is not an allowable character in any string. Strings with length field do not have this limitation and can also store arbitrary binary data .

An example of a null-terminated string stored in a 10-byte buffer , along with its ASCII (or more modern UTF-8 ) representation as 8-bit hexadecimal numbers is: F R A N K NUL k e f w 46 16 52 16 41 16 4E 16 4B 16 00 16 6B 16 65 16 66 16 77 16 The length of the string in the above example, " FRANK ", is 5 characters, but it occupies 6 bytes. Characters after the terminator do not form part of the representation; they may be either part of other data or just garbage. (Strings of this form are sometimes called ASCIZ strings , after the original assembly language directive used to declare them.) Byte- and bit-terminated [ edit ] Using a special byte other than null for terminating strings has historically appeared in both hardware and software, though sometimes with a value that was also a printing character.

$ was used by many assembler systems, : used by CDC systems (this character had a value of zero), and the ZX80 used " [ 12 ] since this was the string delimiter in its BASIC language.

Somewhat similar, "data processing" machines like the IBM 1401 used a special word mark bit to delimit strings at the left, where the operation would start at the right. This bit had to be clear in all other parts of the string. This meant that, while the IBM 1401 had a seven-bit word, almost no-one ever thought to use this as a feature, and override the assignment of the seventh bit to (for example) handle ASCII codes.

Early microcomputer software relied upon the fact that ASCII codes do not use the high-order bit, and set it to indicate the end of a string. It must be reset to 0 prior to output.

[ 13 ] Length-prefixed [ edit ] The length of a string can also be stored explicitly, for example by prefixing the string with the length as a byte value. This convention is used in many Pascal dialects; as a consequence, some people call such a string a Pascal string or P-string . Storing the string length as byte limits the maximum string length to 255. To avoid such limitations, improved implementations of P-strings use 16-, 32-, or 64-bit words to store the string length. When the length field covers the address space , strings are limited only by the available memory .

If the length is bounded, then it can be encoded in constant space, typically a machine word, thus leading to an implicit data structure , taking n + k space, where k is the number of characters in a word (8 for 8-bit ASCII on a 64-bit machine, 1 for 32-bit UTF-32/UCS-4 on a 32-bit machine, etc.).
If the length is not bounded, encoding a length n takes log( n ) space (see fixed-length code ), so length-prefixed strings are a succinct data structure , encoding a string of length n in log( n ) + n space.

In the latter case, the length-prefix field itself does not have fixed length, therefore the actual string data needs to be moved when the string grows such that the length field needs to be increased.

Here is a Pascal string stored in a 10-byte buffer, along with its ASCII / UTF-8 representation: length F R A N K k e f w 05 16 46 16 52 16 41 16 4E 16 4B 16 6B 16 65 16 66 16 77 16 Strings as records [ edit ] Many languages, including object-oriented ones, implement strings as records with an internal structure like: class string { size_t length ; char * text ; }; However, since the implementation is usually hidden , the string must be accessed and modified through member functions.

text is a pointer to a dynamically allocated memory area, which might be expanded as needed. See also string (C++) .

Other representations [ edit ] Both character termination and length codes limit strings: For example, C character arrays that contain null (NUL) characters cannot be handled directly by C string library functions: Strings using a length code are limited to the maximum value of the length code.

Both of these limitations can be overcome by clever programming.

It is possible to create data structures and functions that manipulate them that do not have the problems associated with character termination and can in principle overcome length code bounds. It is also possible to optimize the string represented using techniques from run length encoding (replacing repeated characters by the character value and a length) and Hamming encoding [ clarification needed ] .

While these representations are common, others are possible. Using ropes makes certain string operations, such as insertions, deletions, and concatenations more efficient.

The core data structure in a text editor is the one that manages the string (sequence of characters) that represents the current state of the file being edited.
While that state could be stored in a single long consecutive array of characters, a typical text editor instead uses an alternative representation as its sequence data structure—a gap buffer , a linked list of lines, a piece table , or a rope —which makes certain string operations, such as insertions, deletions, and undoing previous edits, more efficient.

[ 14 ] Security concerns [ edit ] The differing memory layout and storage requirements of strings can affect the security of the program accessing the string data. String representations requiring a terminating character are commonly susceptible to buffer overflow problems if the terminating character is not present, caused by a coding error or an attacker deliberately altering the data. String representations adopting a separate length field are also susceptible if the length can be manipulated. In such cases, program code accessing the string data requires bounds checking to ensure that it does not inadvertently access or change data outside of the string memory limits.

String data is frequently obtained from user input to a program. As such, it is the responsibility of the program to validate the string to ensure that it represents the expected format. Performing limited or no validation of user input can cause a program to be vulnerable to code injection attacks.

Literal strings [ edit ] Main article: String literal Sometimes, strings need to be embedded inside a text file that is both human-readable and intended for consumption by a machine.  This is needed in, for example, source code of programming languages, or in configuration files. In this case, the NUL character does not work well as a terminator since it is normally invisible (non-printable) and is difficult to input via a keyboard.  Storing the string length would also be inconvenient as manual computation and tracking of the length is tedious and error-prone.

Two common representations are: Surrounded by quotation marks (ASCII 0x22 double quote "str" or ASCII 0x27 single quote 'str' ), used by most programming languages. To be able to include special characters such as the quotation mark itself, newline characters, or non-printable characters, escape sequences are often available, usually prefixed with the backslash character (ASCII 0x5C).

Terminated by a newline sequence, for example in Windows INI files .

Non-text strings [ edit ] While character strings are very common uses of strings, a string in computer science may refer generically to any sequence of homogeneously typed data. A bit string or byte string , for example, may be used to represent non-textual binary data retrieved from a communications medium. This data may or may not be represented by a string-specific datatype, depending on the needs of the application, the desire of the programmer, and the capabilities of the programming language being used. If the programming language's string implementation is not 8-bit clean , data corruption may ensue.

C programmers draw a sharp distinction between a "string", aka a "string of characters", which by definition is always null terminated, vs. a "array of characters" which may be stored in the same array but is often not null terminated.
Using C string handling functions on such an array of characters often seems to work, but later leads to security problems .

[ 15 ] [ 16 ] [ 17 ] String processing algorithms [ edit ] "Stringology" redirects here. For the physical theory, see String theory .

There are many algorithms for processing strings, each with various trade-offs. Competing algorithms can be analyzed with respect to run time, storage requirements, and so forth. The name stringology was coined in 1984 by computer scientist Zvi Galil for the theory of algorithms and data structures used for string processing.

[ 18 ] [ 19 ] [ 20 ] Some categories of algorithms include: String searching algorithms for finding a given substring or pattern String manipulation algorithms Sorting algorithms Regular expression algorithms Parsing a string Sequence mining Advanced string algorithms often employ complex mechanisms and data structures, among them suffix trees and finite-state machines .

Character string-oriented languages and utilities [ edit ] Character strings are such a useful datatype that several languages have been designed in order to make string processing applications easy to write. Examples include the following languages: AWK Icon MUMPS Perl Rexx Ruby sed SNOBOL Tcl TTM Many Unix utilities perform simple string manipulations and can be used to easily program some powerful string processing algorithms. Files and finite streams may be viewed as strings.

Some APIs like Multimedia Control Interface , embedded SQL or printf use strings to hold commands that will be interpreted.

Many scripting programming languages , including Perl, Python , Ruby, and Tcl employ regular expressions to facilitate text operations. Perl is particularly noted for its regular expression use, [ 21 ] and many other languages and applications implement Perl compatible regular expressions .

Some languages such as Perl and Ruby support string interpolation , which permits arbitrary expressions to be evaluated and included in string literals.

Character string functions [ edit ] See also: Comparison of programming languages (string functions) String functions are used to create strings or change the contents of a mutable string. They also are used to query information about a string. The set of functions and their names varies depending on the computer programming language .

The most basic example of a string function is the string length function – the function that returns the length of a string (not counting any terminator characters or any of the string's internal structural information) and does not modify the string. This function is often named length or len . For example, length("hello world") would return 11. Another common function is concatenation , where a new string is created by appending two strings, often this is the + addition operator.

Some microprocessor 's instruction set architectures contain direct support for string operations, such as block copy (e.g. In intel x86m REPNZ MOVSB ).

[ 22 ] Formal theory [ edit ] See also: Tuple Let Σ be a finite set of distinct, unambiguous symbols (alternatively called characters), called the alphabet . A string (or word [ 23 ] or expression [ 24 ] ) over Σ is any finite sequence of symbols from Σ.

[ 25 ] For example, if Σ = {0, 1}, then 01011 is a string over Σ.

The length of a string s is the number of symbols in s (the length of the sequence) and can be any non-negative integer ; it is often denoted as | s |.  The empty string is the unique string over Σ of length 0, and is denoted ε or λ .

[ 25 ] [ 26 ] The set of all strings over Σ of length n is denoted Σ n .  For example, if Σ = {0, 1}, then Σ 2 = {00, 01, 10, 11}.  We have Σ 0 = {ε} for every alphabet Σ.

The set of all strings over Σ of any length is the Kleene closure of Σ and is denoted Σ * .  In terms of Σ n , Σ Σ ∗ ∗ = ⋃ ⋃ n ∈ ∈ N ∪ ∪ { 0 } Σ Σ n {\displaystyle \Sigma ^{*}=\bigcup _{n\in \mathbb {N} \cup \{0\}}\Sigma ^{n}} For example, if Σ = {0, 1}, then Σ * = {ε, 0, 1, 00, 01, 10, 11, 000, 001, 010, 011, ...}.  Although the set Σ * itself is countably infinite , each element of Σ * is a string of finite length.

A set of strings over Σ (i.e. any subset of Σ * ) is called a formal language over Σ.  For example, if Σ = {0, 1}, the set of strings with an even number of zeros, {ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111, ...}, is a formal language over Σ.

Concatenation and substrings [ edit ] Concatenation is an important binary operation on Σ * .  For any two strings s and t in Σ * , their concatenation is defined as the sequence of symbols in s followed by the sequence of characters in t , and is denoted st .  For example, if Σ = {a, b, ..., z}, s = bear , and t = hug , then st = bearhug and ts = hugbear .

String concatenation is an associative , but non- commutative operation. The empty string ε serves as the identity element ; for any string s , ε s = s ε = s .  Therefore, the set Σ * and the concatenation operation form a monoid , the free monoid generated by Σ.  In addition, the length function defines a monoid homomorphism from Σ * to the non-negative integers (that is, a function L : Σ Σ ∗ ∗ ↦ ↦ N ∪ ∪ { 0 } {\displaystyle L:\Sigma ^{*}\mapsto \mathbb {N} \cup \{0\}} , such that L ( s t ) = L ( s ) + L ( t ) ∀ ∀ s , t ∈ ∈ Σ Σ ∗ ∗ {\displaystyle L(st)=L(s)+L(t)\quad \forall s,t\in \Sigma ^{*}} ).

A string s is said to be a substring or factor of t if there exist (possibly empty) strings u and v such that t = usv .  The relation "is a substring of" defines a partial order on Σ * , the least element of which is the empty string.

Prefixes and suffixes [ edit ] A string s is said to be a prefix of t if there exists a string u such that t = su . If u is nonempty, s is said to be a proper prefix of t . Symmetrically, a string s is said to be a suffix of t if there exists a string u such that t = us . If u is nonempty, s is said to be a proper suffix of t . Suffixes and prefixes are substrings of t . Both the relations "is a prefix of" and "is a suffix of" are prefix orders .

Reversal [ edit ] The reverse of a string is a string with the same symbols but in reverse order. For example, if s = abc (where a, b, and c are symbols of the alphabet), then the reverse of s is cba. A string that is the reverse of itself (e.g., s = madam) is called a palindrome , which also includes the empty string and all strings of length 1.

Rotations [ edit ] A string s = uv is said to be a rotation of t if t = vu . For example, if Σ = {0, 1} the string 0011001 is a rotation of 0100110, where u = 00110 and v = 01. As another example, the string abc has three different rotations, viz. abc itself (with u =abc, v =ε), bca (with u =bc, v =a), and cab (with u =c, v =ab).

Lexicographical ordering [ edit ] It is often useful to define an ordering on a set of strings. If the alphabet Σ has a total order (cf.

alphabetical order ) one can define a total order on Σ * called lexicographical order . The lexicographical order is total if the alphabetical order is, but is not well-founded for any nontrivial alphabet, even if the alphabetical order is. For example, if Σ = {0, 1} and 0 < 1, then the lexicographical order on Σ * includes the relationships ε < 0 < 00 < 000 < ... < 0001 < ... < 001 < ... < 01 < 010 < ... < 011 < 0110 < ... < 01111 < ... < 1 < 10 < 100 < ... < 101 < ... < 111 < ... < 1111 < ... < 11111 ... With respect to this ordering, e.g. the infinite set { 1, 01, 001, 0001, 00001, 000001, ... } has no minimal element.

See Shortlex for an alternative string ordering that preserves well-foundedness.
For the example alphabet, the shortlex order is ε < 0 < 1 < 00 < 01 < 10 < 11 < 000 < 001 < 010 < 011 < 100 < 101 < 0110 < 111 < 0000 < 0001 < 0010 < 0011 < ... < 1111 < 00000 < 00001  ...

String operations [ edit ] A number of additional operations on strings commonly occur in the formal theory. These are given in the article on string operations .

Topology [ edit ] (Hyper)cube of binary strings of length 3 Strings admit the following interpretation as nodes on a graph, where k is the number of symbols in Σ: Fixed-length strings of length n can be viewed as the integer locations in an n -dimensional hypercube with sides of length k -1.

Variable-length strings (of finite length) can be viewed as nodes on a perfect k -ary tree .

Infinite strings (otherwise not considered here) can be viewed as infinite paths on a k -node complete graph .

The natural topology on the set of fixed-length strings or variable-length strings is the discrete topology, but the natural topology on the set of infinite strings is the limit topology , viewing the set of infinite strings as the inverse limit of the sets of finite strings. This is the construction used for the p -adic numbers and some constructions of the Cantor set , and yields the same topology.

Isomorphisms between string representations of topologies can be found by normalizing according to the lexicographically minimal string rotation .

See also [ edit ] Binary-safe — a property of string manipulating functions treating their input as raw data stream Bit array — a string of binary digits C string handling — overview of C string handling C++ string handling — overview of C++ string handling Comparison of programming languages (string functions) Connection string — passed to a driver to initiate a connection (e.g., to a database) Empty string — its properties and representation in programming languages Incompressible string — a string that cannot be compressed by any algorithm Rope (data structure) — a data structure for efficiently manipulating long strings String metric — notions of similarity between strings References [ edit ] ^ "Introduction To Java – MFC 158 G" .

Archived from the original on 2016-03-03.

String literals (or constants) are called 'anonymous strings' ^ de St. Germain, H. James.

"Strings" .

University of Utah, Kahlert School of Computing .

^ Francis, David M.; Merk, Heather L. (November 14, 2019).

"DNA as a Biochemical Entity and Data String" .

^ a b c Burchfield, R.W.

(1986). "string".

A Supplement to the Oxford English Dictionary . Oxford at the Clarendon Press.

^ "string".

The Oxford English Dictionary . Vol. X. Oxford at the Clarendon Press. 1933.

^ "string (n.)" .

Online Etymology Dictionary .

^ Whitney, William Dwight ; Smith, Benjamin E.

"string".

The Century Dictionary . New York: The Century Company. p. 5994.

^ "Old Union's Demise".

Milwaukee Sentinel . January 11, 1898. p. 3.

^ Lewis, C.I.

(1918).

A survey of symbolic logic . Berkeley: University of California Press. p. 355.

^ Sammet, Jean E. (July 1972).

"Programming Languages: History and Future" (PDF) .

Communications of the ACM .

15 (7).

doi : 10.1145/361454.361485 .

S2CID 2003242 .

^ Bryant, Randal E.

; David, O'Hallaron (2003), Computer Systems: A Programmer's Perspective (2003 ed.), Upper Saddle River, NJ: Pearson Education, p. 40, ISBN 0-13-034074-X , archived from the original on 2007-08-06 ^ Wearmouth, Geoff.

"An Assembly Listing of the ROM of the Sinclair ZX80" . Archived from the original on August 15, 2015.

^ Allison, Dennis.

"Design Notes for Tiny BASIC" .

Archived from the original on 2017-04-10.

^ Charles Crowley.

"Data Structures for Text Sequences" Archived 2016-03-04 at the Wayback Machine .
Section "Introduction" Archived 2016-04-04 at the Wayback Machine .

^ "strlcpy and strlcat - consistent, safe, string copy and concatenation." Archived 2016-03-13 at the Wayback Machine ^ "A rant about strcpy, strncpy and strlcpy." Archived 2016-02-29 at the Wayback Machine ^ Keith Thompson.
"No, strncpy() is not a "safer" strcpy()".
2012.

^ "The Prague Stringology Club" .

stringology.org .

Archived from the original on 1 June 2015 . Retrieved 23 May 2015 .

^ Evarts, Holly (18 March 2021).

"Former Dean Zvi Galil Named a Top 10 Most Influential Computer Scientist in the Past Decade" .

Columbia Engineering .

He invented the terms 'stringology,' which is a subfield of string algorithms, ^ Crochemore, Maxime (2002).

Jewels of stringology . Singapore. p. v.

ISBN 981-02-4782-6 .

The term stringology is a popular nickname for string algorithms as well as for text algorithms.

{{ cite book }} :  CS1 maint: location missing publisher ( link ) ^ "Essential Perl" .

Archived from the original on 2012-04-21.

Perl's most famous strength is in string manipulation with regular expressions.

^ "x86 string instructions" .

Archived from the original on 2015-03-27.

^ Fletcher, Peter; Hoyle, Hughes; Patty, C. Wayne (1991).

Foundations of Discrete Mathematics . PWS-Kent. p. 114.

ISBN 0-53492-373-9 .

Let Σ be an alphabet. A nonempty word over Σ is a finite sequence with domain I n (for some n ∈ ℕ) and codomain Σ.

^ Shoenfield, Joseph R.

(2010) [1967].

Mathematical Logic (Reprint ed.). CRC Press. p. 2.

ISBN 978-156881135-2 .

Any finite sequence of symbols of a language is called an expression of that language.

^ a b Barbara H. Partee; Alice ter Meulen ; Robert E. Wall (1990).

Mathematical Methods in Linguistics . Kluwer.

^ John E. Hopcroft, Jeffrey D. Ullman (1979).

Introduction to Automata Theory, Languages, and Computation . Addison-Wesley.

ISBN 0-201-02988-X .

Here: sect.1.1, p.1 v t e Strings String metric Approximate string matching Bitap algorithm Damerau–Levenshtein distance Edit distance Gestalt pattern matching Hamming distance Jaro–Winkler distance Lee distance Levenshtein automaton Levenshtein distance Wagner–Fischer algorithm String-searching algorithm Apostolico–Giancarlo algorithm Boyer–Moore string-search algorithm Boyer–Moore–Horspool algorithm Knuth–Morris–Pratt algorithm Rabin–Karp algorithm Raita algorithm Trigram search Two-way string-matching algorithm Zhu–Takaoka string matching algorithm Multiple string searching Aho–Corasick Commentz-Walter algorithm Regular expression Comparison of regular-expression engines Regular grammar Thompson's construction Nondeterministic finite automaton Sequence alignment BLAST Hirschberg's algorithm Needleman–Wunsch algorithm Smith–Waterman algorithm Data structure DAFSA Substring index Suffix array Suffix automaton Suffix tree Compressed suffix array LCP array FM-index Generalized suffix tree Rope Ternary search tree Trie Other Parsing Pattern matching Compressed pattern matching Longest common subsequence Longest common substring Sequential pattern mining Sorting String rewriting systems String operations v t e Data types Uninterpreted Bit Byte Trit Tryte Word Bit array Numeric Arbitrary-precision or bignum Complex Decimal Fixed point Block floating point Floating point Reduced precision Minifloat Half precision bfloat16 Single precision Double precision Quadruple precision Octuple precision Extended precision Long double Integer signedness Interval Rational Pointer Address physical virtual Reference Text Character String null-terminated Composite Algebraic data type generalized Array Associative array Class Dependent Equality Inductive Intersection List Object metaobject Option type Product Record or Struct Refinement Set Union tagged Other Boolean Bottom type Collection Enumerated type Exception Function type Opaque data type Recursive data type Semaphore Stream Strongly typed identifier Top type Type class Empty type Unit type Void Related topics Abstract data type Boxing Data structure Generic Kind metaclass Parametric polymorphism Primitive data type Interface Subtyping Type constructor Type conversion Type system Type theory Variable v t e Automata theory : formal languages and formal grammars Chomsky hierarchy Grammars Languages Abstract machines Type-0 — Type-1 — — — — — Type-2 — — Type-3 — — Unrestricted (no common name) Context-sensitive Positive range concatenation Indexed — Linear context-free rewriting systems Tree-adjoining Context-free Deterministic context-free Visibly pushdown Regular — Non-recursive Recursively enumerable Decidable Context-sensitive Positive range concatenation * Indexed * — Linear context-free rewriting language Tree-adjoining Context-free Deterministic context-free Visibly pushdown Regular Star-free Finite Turing machine Decider Linear-bounded PTIME Turing Machine Nested stack Thread automaton restricted Tree stack automaton Embedded pushdown Nondeterministic pushdown Deterministic pushdown Visibly pushdown Finite Counter-free (with aperiodic finite monoid) Acyclic finite Each category of languages, except those marked by a * , is a proper subset of the category directly above it.

Any language in each category is generated by a grammar and by an automaton in the category in the same line.

Authority control databases : National Germany Czech Republic NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐868ww
Cached time: 20250811235436
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.484 seconds
Real time usage: 0.787 seconds
Preprocessor visited node count: 2444/1000000
Revision size: 42367/2097152 bytes
Post‐expand include size: 85991/2097152 bytes
Template argument size: 1747/2097152 bytes
Highest expansion depth: 12/100
Expensive parser function count: 13/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 110981/5000000 bytes
Lua time usage: 0.279/10.000 seconds
Lua memory usage: 6755241/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  607.619      1 -total
 33.38%  202.853      1 Template:Reflist
 24.17%  146.880      4 Template:Code
 18.36%  111.538     10 Template:Cite_web
 10.30%   62.594      2 Template:Navbox
 10.22%   62.079      1 Template:Short_description
 10.02%   60.880      1 Template:Strings
  5.72%   34.750      1 Template:Authority_control
  5.62%   34.175      2 Template:Pagetype
  5.00%   30.385      6 Template:Cite_book Saved in parser cache with key enwiki:pcache:27701:|#|:idhash:canonical and timestamp 20250811235436 and revision id 1289908219. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=String_(computer_science)&oldid=1289908219#Formal_theory " Categories : String (computer science) Character encoding Data types Formal languages Combinatorics on words Primitive types Syntactic entities Algorithms on strings Hidden categories: CS1: unfit URL Webarchive template wayback links CS1 maint: location missing publisher Articles with short description Short description is different from Wikidata Wikipedia articles needing clarification from June 2015 This page was last edited on 11 May 2025, at 16:16 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents String (computer science) 44 languages Add topic

