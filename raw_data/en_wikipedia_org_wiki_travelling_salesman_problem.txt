Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History 2 Description Toggle Description subsection 2.1 As a graph problem 2.2 Asymmetric and symmetric 2.3 Related problems 3 Integer linear programming formulations Toggle Integer linear programming formulations subsection 3.1 Miller–Tucker–Zemlin formulation 3.2 Dantzig–Fulkerson–Johnson formulation 4 Computing a solution Toggle Computing a solution subsection 4.1 Exact algorithms 4.2 Heuristic and approximation algorithms 4.2.1 Constructive heuristics 4.2.2 The Algorithm of Christofides and Serdyukov 4.2.3 Pairwise exchange 4.2.4 k -opt heuristic, or Lin–Kernighan heuristics 4.2.5 V -opt heuristic 4.2.6 Randomized improvement 4.2.7 Constricting Insertion Heuristic 4.2.8 Ant colony optimization 5 Special cases Toggle Special cases subsection 5.1 Metric 5.2 Euclidean 5.3 Asymmetric 5.3.1 Conversion to symmetric 5.4 Analyst's problem 5.5 Path length for random sets of points in a square 5.5.1 Upper bound 5.5.2 Lower bound 6 Computational complexity Toggle Computational complexity subsection 6.1 Complexity of approximation 7 Human and animal performance 8 Natural computation 9 Benchmarks 10 Popular culture 11 See also 12 Notes 13 References 14 Further reading 15 External links Toggle the table of contents Travelling salesman problem 41 languages العربية Asturianu Azərbaycanca Català Čeština Dansk Deutsch Ελληνικά Español Euskara فارسی Français Galego 한국어 Hrvatski Bahasa Indonesia Italiano עברית Lietuvių Magyar മലയാളം Монгол Nederlands 日本語 Norsk bokmål Polski Português Română Русский Simple English Slovenčina Slovenščina Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska Türkçe Українська Tiếng Việt 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia NP-hard problem in combinatorial optimization The travelling salesman problem seeks to find the shortest possible loop that connects every red dot.

Solution of the above problem In the theory of computational complexity , the travelling salesman problem ( TSP ) asks the following question: "Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?" It is an NP-hard problem in combinatorial optimization , important in theoretical computer science and operations research .

The travelling purchaser problem , the vehicle routing problem and the ring star problem [ 1 ] are three generalizations of TSP.

The decision version of the TSP (where given a length L , the task is to decide whether the graph has a tour whose length is at most L ) belongs to the class of NP-complete problems. Thus, it is possible that the worst-case running time for any algorithm for the TSP increases superpolynomially (but no more than exponentially ) with the number of cities.

The problem was first formulated in 1930 and is one of the most intensively studied problems in optimization. It is used as a benchmark for many optimization methods. Even though the problem is computationally difficult, many heuristics and exact algorithms are known, so that some instances with tens of thousands of cities can be solved completely, and even problems with millions of cities can be approximated within a small fraction of 1%.

[ 2 ] The TSP has several applications even in its purest formulation, such as planning , logistics , and the manufacture of microchips . Slightly modified, it appears as a sub-problem in many areas, such as DNA sequencing . In these applications, the concept city represents, for example, customers, soldering points, or DNA fragments, and the concept distance represents travelling times or cost, or a similarity measure between DNA fragments. The TSP also appears in astronomy, as astronomers observing many sources want to minimize the time spent moving the telescope between the sources; in such problems, the TSP can be embedded inside an optimal control problem . In many applications, additional constraints such as limited resources or time windows may be imposed.

History [ edit ] The origins of the travelling salesman problem are unclear. A handbook for travelling salesmen from 1832 mentions the problem and includes example tours through Germany and Switzerland , but contains no mathematical treatment.

[ 3 ] William Rowan Hamilton, c. 1850 The TSP was mathematically formulated in the 19th century by the Irish mathematician William Rowan Hamilton and by the British mathematician Thomas Kirkman . Hamilton's icosian game was a recreational puzzle based on finding a Hamiltonian cycle .

[ 4 ] The general form of the TSP appears to have been first studied by mathematicians during the 1930s in Vienna and at Harvard , notably by Karl Menger , who defines the problem, considers the obvious brute-force algorithm , and observes the non-optimality of the nearest neighbour heuristic: We denote by messenger problem (since in practice this question should be solved by each postman, anyway also by many travelers) the task to find, for finitely many points whose pairwise distances are known, the shortest route connecting the points. Of course, this problem is solvable by finitely many trials. Rules which would push the number of trials below the number of permutations of the given points, are not known. The rule that one first should go from the starting point to the closest point, then to the point closest to this, etc., in general does not yield the shortest route.

[ 5 ] It was first considered mathematically in the 1930s by Merrill M. Flood , who was looking to solve a school bus routing problem.

[ 6 ] Hassler Whitney at Princeton University generated interest in the problem, which he called the "48 states problem". The earliest publication using the phrase "travelling [or traveling] salesman problem" was the 1949 RAND Corporation report by Julia Robinson , "On the Hamiltonian game (a traveling salesman problem)." [ 7 ] [ 8 ] In the 1950s and 1960s, the problem became increasingly popular in scientific circles in Europe and the United States after the RAND Corporation in Santa Monica offered prizes for steps in solving the problem.

[ 6 ] Notable contributions were made by George Dantzig , Delbert Ray Fulkerson , and Selmer M. Johnson from the RAND Corporation, who expressed the problem as an integer linear program and developed the cutting plane method for its solution. They wrote what is considered the seminal paper on the subject in which, with these new methods, they solved an instance with 49 cities to optimality by constructing a tour and proving that no other tour could be shorter. Dantzig, Fulkerson, and Johnson, however, speculated that, given a near-optimal solution, one may be able to find optimality or prove optimality by adding a small number of extra inequalities (cuts). They used this idea to solve their initial 49-city problem using a string model. They found they only needed 26 cuts to come to a solution for their 49 city problem. While this paper did not give an algorithmic approach to TSP problems, the ideas that lay within it were indispensable to later creating exact solution methods for the TSP, though it would take 15 years to find an algorithmic approach in creating these cuts.

[ 6 ] As well as cutting plane methods, Dantzig, Fulkerson, and Johnson used branch-and-bound algorithms perhaps for the first time.

[ 6 ] In 1959, Jillian Beardwood , J.H. Halton, and John Hammersley published an article entitled "The Shortest Path Through Many Points" in the journal of the Cambridge Philosophical Society .

[ 9 ] The Beardwood–Halton–Hammersley theorem provides a practical solution to the travelling salesman problem. The authors derived an asymptotic formula to determine the length of the shortest route for a salesman who starts at a home or office and visits a fixed number of locations before returning to the start.

In the following decades, the problem was studied by many researchers from mathematics , computer science , chemistry , physics , and other sciences. In the 1960s, however, a new approach was created that, instead of seeking optimal solutions, would produce a solution whose length is provably bounded by a multiple of the optimal length, and in doing so would create lower bounds for the problem; these lower bounds would then be used with branch-and-bound approaches. One method of doing this was to create a minimum spanning tree of the graph and then double all its edges, which produces the bound that the length of an optimal tour is at most twice the weight of a minimum spanning tree.

[ 6 ] In 1976, Christofides and Serdyukov (independently of each other) made a big advance in this direction: [ 10 ] the Christofides–Serdyukov algorithm yields a solution that, in the worst case, is at most 1.5 times longer than the optimal solution. As the algorithm was simple and quick, many hoped it would give way to a near-optimal solution method. However, this hope for improvement did not immediately materialize, and the Christofides–Serdyukov algorithm remained the method with the best worst-case scenario until 2011, when a (very) slightly improved approximation algorithm was developed for the subset of "graphical" TSPs.

[ 11 ] In 2020, this tiny improvement was extended to the full (metric) TSP.

[ 12 ] [ 13 ] Richard M. Karp showed in 1972 that the Hamiltonian cycle problem was NP-complete , which implies the NP-hardness of TSP. This supplied a mathematical explanation for the apparent computational difficulty of finding optimal tours.

Great progress was made in the late 1970s and 1980, when Grötschel, Padberg, Rinaldi and others managed to exactly solve instances with up to 2,392 cities, using cutting planes and branch-and-bound .

In the 1990s, Applegate , Bixby , Chvátal , and Cook developed the program Concorde that has been used in many recent record solutions. Gerhard Reinelt published the TSPLIB in 1991, a collection of benchmark instances of varying difficulty, which has been used by many research groups for comparing results. In 2006, Cook and others computed an optimal tour through an 85,900-city instance given by a microchip layout problem, currently the largest solved TSPLIB instance. For many other instances with millions of cities, solutions can be found that are guaranteed to be within 2–3% of an optimal tour.

[ 14 ] Description [ edit ] As a graph problem [ edit ] Symmetric TSP with four cities TSP can be modeled as an undirected weighted graph , such that cities are the graph's vertices , paths are the graph's edges , and a path's distance is the edge's weight. It is a minimization problem starting and finishing at a specified vertex after having visited each other vertex exactly once. Often, the model is a complete graph (i.e., each pair of vertices is connected by an edge). If no path exists between two cities, then adding a sufficiently long edge will complete the graph without affecting the optimal tour.

Asymmetric and symmetric [ edit ] In the symmetric TSP , the distance between two cities is the same in each opposite direction, forming an undirected graph . This symmetry halves the number of possible solutions. In the asymmetric TSP , paths may not exist in both directions or the distances might be different, forming a directed graph . Traffic congestion, one-way streets, and airfares for cities with different departure and arrival fees are real-world considerations that could yield a TSP problem in asymmetric form.

Related problems [ edit ] An equivalent formulation in terms of graph theory is: Given a complete weighted graph (where the vertices would represent the cities, the edges would represent the roads, and the weights would be the cost or distance of that road), find a Hamiltonian cycle with the least weight. This is more general than the Hamiltonian path problem , which only asks if a Hamiltonian path (or cycle) exists in a non-complete unweighted graph.

The requirement of returning to the starting city does not change the computational complexity of the problem; see Hamiltonian path problem .

Another related problem is the bottleneck travelling salesman problem : Find a Hamiltonian cycle in a weighted graph with the minimal weight of the weightiest edge . A real-world example is avoiding narrow streets with big buses.

[ 15 ] The problem is of considerable practical importance, apart from evident transportation and logistics areas. A classic example is in printed circuit manufacturing: scheduling of a route of the drill machine to drill holes in a PCB. In robotic machining or drilling applications, the "cities" are parts to machine or holes (of different sizes) to drill, and the "cost of travel" includes time for retooling the robot (single-machine job sequencing problem).

[ 16 ] The generalized travelling salesman problem , also known as the "travelling politician problem", deals with "states" that have (one or more) "cities", and the salesman must visit exactly one city from each state. One application is encountered in ordering a solution to the cutting stock problem in order to minimize knife changes. Another is concerned with drilling in semiconductor manufacturing; see e.g., U.S. patent 7,054,798 . Noon and Bean demonstrated that the generalized travelling salesman problem can be transformed into a standard TSP with the same number of cities, but a modified distance matrix .

The sequential ordering problem deals with the problem of visiting a set of cities, where precedence relations between the cities exist.

A common interview question at Google is how to route data among data processing nodes; routes vary by time to transfer the data, but nodes also differ by their computing power and storage, compounding the problem of where to send data.

The travelling purchaser problem deals with a purchaser who is charged with purchasing a set of products. He can purchase these products in several cities, but at different prices, and not all cities offer the same products. The objective is to find a route between a subset of the cities that minimizes total cost (travel cost + purchasing cost) and enables the purchase of all required products.

Integer linear programming formulations [ edit ] The TSP can be formulated as an integer linear program .

[ 17 ] [ 18 ] [ 19 ] Several formulations are known. Two notable formulations are the Miller–Tucker–Zemlin (MTZ) formulation and the Dantzig–Fulkerson–Johnson (DFJ) formulation. The DFJ formulation is stronger, though the MTZ formulation is still useful in certain settings.

[ 20 ] [ 21 ] Common to both these formulations is that one labels the cities with the numbers 1 , … … , n {\displaystyle 1,\ldots ,n} and takes c i j > 0 {\displaystyle c_{ij}>0} to be the cost (distance) from city i {\displaystyle i} to city j {\displaystyle j} . The main variables in the formulations are: x i j = { 1 the path goes from city i to city j 0 otherwise.

{\displaystyle x_{ij}={\begin{cases}1&{\text{the path goes from city }}i{\text{ to city }}j\\0&{\text{otherwise.}}\end{cases}}} It is because these are 0/1 variables that the formulations become integer programs; all other constraints are purely linear. In particular, the objective in the program is to minimize the tour length ∑ ∑ i = 1 n ∑ ∑ j ≠ ≠ i , j = 1 n c i j x i j .

{\displaystyle \sum _{i=1}^{n}\sum _{j\neq i,j=1}^{n}c_{ij}x_{ij}.} Without further constraints, the { x i j } i , j {\displaystyle \{x_{ij}\}_{i,j}} will effectively range over all subsets of the set of edges, which is very far from the sets of edges in a tour, and allows for a trivial minimum where all x i j = 0 {\displaystyle x_{ij}=0} . Therefore, both formulations also have the constraints that, at each vertex, there is exactly one incoming edge and one outgoing edge, which may be expressed as the 2 n {\displaystyle 2n} linear equations ∑ ∑ i = 1 , i ≠ ≠ j n x i j = 1 {\displaystyle \sum _{i=1,i\neq j}^{n}x_{ij}=1} for j = 1 , … … , n {\displaystyle j=1,\ldots ,n} and ∑ ∑ j = 1 , j ≠ ≠ i n x i j = 1 {\displaystyle \sum _{j=1,j\neq i}^{n}x_{ij}=1} for i = 1 , … … , n .

{\displaystyle i=1,\ldots ,n.} These ensure that the chosen set of edges locally looks like that of a tour, but still allow for solutions violating the global requirement that there is one tour which visits all vertices, as the edges chosen could make up several tours, each visiting only a subset of the vertices; arguably, it is this global requirement that makes TSP a hard problem. The MTZ and DFJ formulations differ in how they express this final requirement as linear constraints.

Miller–Tucker–Zemlin formulation [ edit ] In addition to the x i j {\displaystyle x_{ij}} variables as above, there is for each i = 1 , … … , n {\displaystyle i=1,\ldots ,n} a dummy variable u i {\displaystyle u_{i}} that keeps track of the order in which the cities are visited, counting from city 1 {\displaystyle 1} ; the interpretation is that u i < u j {\displaystyle u_{i}<u_{j}} implies city i {\displaystyle i} is visited before city j .

{\displaystyle j.} For a given tour (as encoded into values of the x i j {\displaystyle x_{ij}} variables), one may find satisfying values for the u i {\displaystyle u_{i}} variables by making u i {\displaystyle u_{i}} equal to the number of edges along that tour, when going from city 1 {\displaystyle 1} to city i .

{\displaystyle i.} [ 22 ] Because linear programming favors non-strict inequalities ( ≥ ≥ {\displaystyle \geq } ) over strict ( > {\displaystyle >} ), we would like to impose constraints to the effect that u j ≥ ≥ u i + 1 {\displaystyle u_{j}\geq u_{i}+1} if x i j = 1.

{\displaystyle x_{ij}=1.} Merely requiring u j ≥ ≥ u i + x i j {\displaystyle u_{j}\geq u_{i}+x_{ij}} would not achieve that, because this also requires u j ≥ ≥ u i {\displaystyle u_{j}\geq u_{i}} when x i j = 0 , {\displaystyle x_{ij}=0,} which is not correct. Instead MTZ use the n ( n − − 1 ) {\displaystyle n(n-1)} linear constraints u i − − u j + 1 ≤ ≤ ( n − − 1 ) ( 1 − − x i j ) {\displaystyle u_{i}-u_{j}+1\leq (n-1)(1-x_{ij})} for all distinct i , j ∈ ∈ { 2 , … … , n } , {\displaystyle i,j\in \{2,\dotsc ,n\},} where the constant term n − − 1 {\displaystyle n-1} provides sufficient slack that x i j = 0 {\displaystyle x_{ij}=0} does not impose a relation between u j {\displaystyle u_{j}} and u i .

{\displaystyle u_{i}.} The way that the u i {\displaystyle u_{i}} variables then enforce that a single tour visits all cities is that they increase by at least 1 {\displaystyle 1} for each step along a tour, with a decrease only allowed where the tour passes through city 1.

{\displaystyle 1.} That constraint would be violated by every tour which does not pass through city 1 , {\displaystyle 1,} so the only way to satisfy it is that the tour passing city 1 {\displaystyle 1} also passes through all other cities.

The MTZ formulation of TSP is thus the following integer linear programming problem: min ∑ ∑ i = 1 n ∑ ∑ j ≠ ≠ i , j = 1 n c i j x i j : : x i j ∈ ∈ { 0 , 1 } i , j = 1 , … … , n ; ∑ ∑ i = 1 , i ≠ ≠ j n x i j = 1 j = 1 , … … , n ; ∑ ∑ j = 1 , j ≠ ≠ i n x i j = 1 i = 1 , … … , n ; u i − − u j + 1 ≤ ≤ ( n − − 1 ) ( 1 − − x i j ) 2 ≤ ≤ i ≠ ≠ j ≤ ≤ n ; 2 ≤ ≤ u i ≤ ≤ n 2 ≤ ≤ i ≤ ≤ n .

{\displaystyle {\begin{aligned}\min \sum _{i=1}^{n}\sum _{j\neq i,j=1}^{n}c_{ij}x_{ij}&\colon &&\\x_{ij}\in {}&\{0,1\}&&i,j=1,\ldots ,n;\\\sum _{i=1,i\neq j}^{n}x_{ij}={}&1&&j=1,\ldots ,n;\\\sum _{j=1,j\neq i}^{n}x_{ij}={}&1&&i=1,\ldots ,n;\\u_{i}-u_{j}+1\leq {}&(n-1)(1-x_{ij})&&2\leq i\neq j\leq n;\\2\leq u_{i}\leq {}&n&&2\leq i\leq n.\end{aligned}}} The first set of equalities requires that each city is arrived at from exactly one other city, and the second set of equalities requires that from each city there is a departure to exactly one other city. The last constraint enforces that there is only a single tour covering all cities, and not two or more disjointed tours that only collectively cover all cities.

Dantzig–Fulkerson–Johnson formulation [ edit ] Label the cities with the numbers 1, ..., n and define: x i j = { 1 the path goes from city i to city j 0 otherwise.

{\displaystyle x_{ij}={\begin{cases}1&{\text{the path goes from city }}i{\text{ to city }}j\\0&{\text{otherwise.}}\end{cases}}} Take c i j > 0 {\displaystyle c_{ij}>0} to be the distance from city i to city j . Then TSP can be written as the following integer linear programming problem: min ∑ ∑ i = 1 n ∑ ∑ j ≠ ≠ i , j = 1 n c i j x i j : : ∑ ∑ i = 1 , i ≠ ≠ j n x i j = 1 j = 1 , … … , n ; ∑ ∑ j = 1 , j ≠ ≠ i n x i j = 1 i = 1 , … … , n ; ∑ ∑ i ∈ ∈ Q ∑ ∑ j ≠ ≠ i , j ∈ ∈ Q x i j ≤ ≤ | Q | − − 1 ∀ ∀ Q ⊊ ⊊ { 1 , … … , n } , | Q | ≥ ≥ 2.

{\displaystyle {\begin{aligned}\min &\sum _{i=1}^{n}\sum _{j\neq i,j=1}^{n}c_{ij}x_{ij}\colon &&\\&\sum _{i=1,i\neq j}^{n}x_{ij}=1&&j=1,\ldots ,n;\\&\sum _{j=1,j\neq i}^{n}x_{ij}=1&&i=1,\ldots ,n;\\&\sum _{i\in Q}{\sum _{j\neq i,j\in Q}{x_{ij}}}\leq |Q|-1&&\forall Q\subsetneq \{1,\ldots ,n\},|Q|\geq 2.\\\end{aligned}}} The last constraint of the DFJ formulation—called a subtour elimination constraint—ensures that no proper subset Q can form a sub-tour, so the solution returned is a single tour and not the union of smaller tours. Intuitively, for each proper subset Q of the cities, the constraint requires that there be fewer edges than cities in Q: if there were to be as many edges in Q as cities in Q, that would represent a subtour of the cities of Q. Because this leads to an exponential number of possible constraints, in practice it is solved with row generation .

[ 23 ] Computing a solution [ edit ] The traditional lines of attack for the NP-hard problems are the following: Devising exact algorithms , which work reasonably fast only for small problem sizes.

Devising "suboptimal" or heuristic algorithms , i.e., algorithms that deliver approximated solutions in a reasonable time.

Finding special cases for the problem ("subproblems") for which either better or exact heuristics are possible.

Exact algorithms [ edit ] The most direct solution would be to try all permutations (ordered combinations) and see which one is cheapest (using brute-force search ). The running time for this approach lies within a polynomial factor of O ( n !

) {\displaystyle O(n!)} , the factorial of the number of cities, so this solution becomes impractical even for only 20 cities.

One of the earliest applications of dynamic programming is the Held–Karp algorithm , which solves the problem in time O ( n 2 2 n ) {\displaystyle O(n^{2}2^{n})} .

[ 24 ] This bound has also been reached by Exclusion-Inclusion in an attempt preceding the dynamic programming approach.

Solution to a symmetric TSP with 7 cities using brute force search. Note: Number of permutations: (7−1)!/2 = 360 Improving these time bounds seems to be difficult. For example, it has not been determined whether a classical exact algorithm for TSP that runs in time O ( 1.9999 n ) {\displaystyle O(1.9999^{n})} exists.

[ 25 ] The currently best quantum exact algorithm for TSP due to Ambainis et al. runs in time O ( 1.728 n ) {\displaystyle O(1.728^{n})} .

[ 26 ] Other approaches include: Various branch-and-bound algorithms, which can be used to process TSPs containing thousands of cities.

Solution of a TSP with 7 cities using a simple Branch and bound algorithm. Note: The number of permutations is much less than Brute force search Progressive improvement algorithms, which use techniques reminiscent of linear programming . This works well for up to 200 cities.

Implementations of branch-and-bound and problem-specific cut generation ( branch-and-cut [ 27 ] ); [ 28 ] this is the method of choice for solving large instances. This approach holds the current record, solving an instance with 85,900 cities, see Applegate et al. (2006) .

An exact solution for 15,112 German towns from TSPLIB was found in 2001 using the cutting-plane method proposed by George Dantzig , Ray Fulkerson , and Selmer M. Johnson in 1954, based on linear programming . The computations were performed on a network of 110 processors located at Rice University and Princeton University . The total computation time was equivalent to 22.6 years on a single 500 MHz Alpha processor . In May 2004, the travelling salesman problem of visiting all 24,978 towns in Sweden was solved: a tour of length approximately 72,500 kilometres was found, and it was proven that no shorter tour exists.

[ 29 ] In March 2005, the travelling salesman problem of visiting all 33,810 points in a circuit board was solved using Concorde TSP Solver : a tour of length 66,048,945 units was found, and it was proven that no shorter tour exists. The computation took approximately 15.7 CPU-years (Cook et al. 2006). In April 2006 an instance with 85,900 points was solved using Concorde TSP Solver , taking over 136 CPU-years; see Applegate et al. (2006) .

Heuristic and approximation algorithms [ edit ] Various heuristics and approximation algorithms , which quickly yield good solutions, have been devised. These include the multi-fragment algorithm . Modern methods can find solutions for extremely large problems (millions of cities) within a reasonable time which are, with a high probability, just 2–3% away from the optimal solution.

[ 14 ] Several categories of heuristics are recognized.

Constructive heuristics [ edit ] Nearest Neighbour algorithm for a TSP with 7 cities. The solution changes as the starting point is changed The nearest neighbour (NN) algorithm (a greedy algorithm ) lets the salesman choose the nearest unvisited city as his next move. This algorithm quickly yields an effectively short route. For N cities randomly distributed on a plane, the algorithm on average yields a path 25% longer than the shortest possible path; [ 30 ] however, there exist many specially-arranged city distributions which make the NN algorithm give the worst route.

[ 31 ] This is true for both asymmetric and symmetric TSPs.

[ 32 ] Rosenkrantz et al.

[ 33 ] showed that the NN algorithm has the approximation factor Θ Θ ( log ⁡ ⁡ | V | ) {\displaystyle \Theta (\log |V|)} for instances satisfying the triangle inequality. A variation of the NN algorithm, called nearest fragment (NF) operator, which connects a group (fragment) of nearest unvisited cities, can find shorter routes with successive iterations.

[ 34 ] The NF operator can also be applied on an initial solution obtained by the NN algorithm for further improvement in an elitist model, where only better solutions are accepted.

The bitonic tour of a set of points is the minimum-perimeter monotone polygon that has the points as its vertices; it can be computed efficiently with dynamic programming .

Another constructive heuristic , Match Twice and Stitch (MTS), performs two sequential matchings , where the second matching is executed after deleting all the edges of the first matching, to yield a set of cycles. The cycles are then stitched to produce the final tour.

[ 35 ] The Algorithm of Christofides and Serdyukov [ edit ] Creating a matching Using a shortcut heuristic on the graph created by the matching above The algorithm of Christofides and Serdyukov follows a similar outline but combines the minimum spanning tree with a solution of another problem, minimum-weight perfect matching . This gives a TSP tour which is at most 1.5 times the optimal. It was one of the first approximation algorithms , and was in part responsible for drawing attention to approximation algorithms as a practical approach to intractable problems . As a matter of fact, the term "algorithm" was not commonly extended to approximation algorithms until later; the Christofides algorithm was initially referred to as the Christofides heuristic.

[ 10 ] This algorithm looks at things differently by using a result from graph theory which helps improve on the lower bound of the TSP which originated from doubling the cost of the minimum spanning tree. Given an Eulerian graph , we can find an Eulerian tour in ⁠ O ( n ) {\displaystyle O(n)} ⁠ time, [ 6 ] so if we had an Eulerian graph with cities from a TSP as vertices, then we can easily see that we could use such a method for finding an Eulerian tour to find a TSP solution. By the triangle inequality , we know that the TSP tour can be no longer than the Eulerian tour, and we therefore have a lower bound for the TSP. Such a method is described below.

Find a minimum spanning tree for the problem.

Create duplicates for every edge to create an Eulerian graph.

Find an Eulerian tour for this graph.

Convert to TSP: if a city is visited twice, then create a shortcut from the city before this in the tour to the one after this.

To improve the lower bound, a better way of creating an Eulerian graph is needed. By the triangle inequality, the best Eulerian graph must have the same cost as the best travelling salesman tour; hence, finding optimal Eulerian graphs is at least as hard as TSP. One way of doing this is by minimum weight matching using algorithms with a complexity of O ( n 3 ) {\displaystyle O(n^{3})} .

[ 6 ] Making a graph into an Eulerian graph starts with the minimum spanning tree; all the vertices of odd order must then be made even, so a matching for the odd-degree vertices must be added, which increases the order of every odd-degree vertex by 1.

[ 6 ] This leaves us with a graph where every vertex is of even order, which is thus Eulerian. Adapting the above method gives the algorithm of Christofides and Serdyukov: Find a minimum spanning tree for the problem.

Create a matching for the problem with the set of cities of odd order.

Find an Eulerian tour for this graph.

Convert to TSP using shortcuts.

Pairwise exchange [ edit ] An example of a 2-opt iteration The pairwise exchange or 2-opt technique involves iteratively removing two edges and replacing them with two different edges that reconnect the fragments created by edge removal into a new and shorter tour. Similarly, the 3-opt technique removes 3 edges and reconnects them to form a shorter tour. These are special cases of the k -opt method. The label Lin–Kernighan is an often heard misnomer for 2-opt; Lin–Kernighan is actually the more general k -opt method.

For Euclidean instances, 2-opt heuristics give on average solutions that are about 5% better than those yielded by Christofides' algorithm. If we start with an initial solution made with a greedy algorithm , then the average number of moves greatly decreases again and is ⁠ O ( n ) {\displaystyle O(n)} ⁠ ; however, for random starts, the average number of moves is ⁠ O ( n log ⁡ ⁡ ( n ) ) {\displaystyle O(n\log(n))} ⁠ . While this is a small increase in size, the initial number of moves for small problems is 10 times as big for a random start compared to one made from a greedy heuristic. This is because such 2-opt heuristics exploit 'bad' parts of a solution such as crossings. These types of heuristics are often used within vehicle routing problem heuristics to re-optimize route solutions.

[ 30 ] k -opt heuristic, or Lin–Kernighan heuristics [ edit ] The Lin–Kernighan heuristic is a special case of the V -opt or variable-opt technique. It involves the following steps: Given a tour, delete k mutually disjoint edges.

Reassemble the remaining fragments into a tour, leaving no disjoint subtours (that is, do not connect a fragment's endpoints together). This in effect simplifies the TSP under consideration into a much simpler problem.

Each fragment endpoint can be connected to 2 k − 2 other possibilities: of 2 k total fragment endpoints available, the two endpoints of the fragment under consideration are disallowed. Such a constrained 2 k -city TSP can then be solved with brute-force methods to find the least-cost recombination of the original fragments.

The most popular of the k -opt methods are 3-opt, as introduced by Shen Lin of Bell Labs in 1965. A special case of 3-opt is where the edges are not disjoint (two of the edges are adjacent to one another). In practice, it is often possible to achieve substantial improvement over 2-opt without the combinatorial cost of the general 3-opt by restricting the 3-changes to this special subset where two of the removed edges are adjacent. This so-called two-and-a-half-opt typically falls roughly midway between 2-opt and 3-opt, both in terms of the quality of tours achieved and the time required to achieve those tours.

V -opt heuristic [ edit ] The variable-opt method is related to, and a generalization of, the k -opt method. Whereas the k -opt methods remove a fixed number ( k ) of edges from the original tour, the variable-opt methods do not fix the size of the edge set to remove. Instead, they grow the set as the search process continues. The best-known method in this family is the Lin–Kernighan method (mentioned above as a misnomer for 2-opt).

Shen Lin and Brian Kernighan first published their method in 1972, and it was the most reliable heuristic for solving travelling salesman problems for nearly two decades. More advanced variable-opt methods were developed at Bell Labs in the late 1980s by David Johnson and his research team. These methods (sometimes called Lin–Kernighan–Johnson ) build on the Lin–Kernighan method, adding ideas from tabu search and evolutionary computing . The basic Lin–Kernighan technique gives results that are guaranteed to be at least 3-opt. The Lin–Kernighan–Johnson methods compute a Lin–Kernighan tour, and then perturb the tour by what has been described as a mutation that removes at least four edges and reconnects the tour in a different way, then V -opting the new tour. The mutation is often enough to move the tour from the local minimum identified by Lin–Kernighan.

V -opt methods are widely considered the most powerful heuristics for the problem, and are able to address special cases, such as the Hamilton Cycle Problem and other non-metric TSPs that other heuristics fail on. For many years, Lin–Kernighan–Johnson had identified optimal solutions for all TSPs where an optimal solution was known and had identified the best-known solutions for all other TSPs on which the method had been tried.

Randomized improvement [ edit ] Optimized Markov chain algorithms which use local searching heuristic sub-algorithms can find a route extremely close to the optimal route for 700 to 800 cities.

TSP is a touchstone for many general heuristics devised for combinatorial optimization such as genetic algorithms , simulated annealing , tabu search , ant colony optimization , river formation dynamics (see swarm intelligence ), and the cross entropy method .

Constricting Insertion Heuristic [ edit ] This starts with a sub-tour such as the convex hull and then inserts other vertices.

[ 36 ] Ant colony optimization [ edit ] Main article: Ant colony optimization algorithms Artificial intelligence researcher Marco Dorigo described in 1993 a method of heuristically generating "good solutions" to the TSP using a simulation of an ant colony called ACS ( ant colony system ).

[ 37 ] It models behavior observed in real ants to find short paths between food sources and their nest, an emergent behavior resulting from each ant's preference to follow trail pheromones deposited by other ants.

ACS sends out a large number of virtual ant agents to explore many possible routes on the map. Each ant probabilistically chooses the next city to visit based on a heuristic combining the distance to the city and the amount of virtual pheromone deposited on the edge to the city. The ants explore, depositing pheromone on each edge that they cross, until they have all completed a tour. At this point the ant which completed the shortest tour deposits virtual pheromone along its complete tour route ( global trail updating ). The amount of pheromone deposited is inversely proportional to the tour length: the shorter the tour, the more it deposits.

1) An ant chooses a path among all possible paths and lays a pheromone trail on it. 2) All the ants are travelling on different paths, laying a trail of pheromones proportional to the quality of the solution. 3) Each edge of the best path is more reinforced than others. 4) Evaporation ensures that the bad solutions disappear. The map is a work of Yves Aubry [2] .

Ant colony optimization algorithm for a TSP with 7 cities: Red and thick lines in the pheromone map indicate presence of more pheromone Special cases [ edit ] Metric [ edit ] In the metric TSP , also known as delta-TSP or Δ-TSP, the intercity distances satisfy the triangle inequality .

A very natural restriction of the TSP is to require that the distances between cities form a metric to satisfy the triangle inequality ; that is, the direct connection from A to B is never farther than the route via intermediate C : d A B ≤ ≤ d A C + d C B {\displaystyle d_{AB}\leq d_{AC}+d_{CB}} .

The edges then build a metric on the set of vertices. When the cities are viewed as points in the plane, many natural distance functions are metrics, and so many natural instances of TSP satisfy this constraint.

The following are some examples of metric TSPs for various metrics.

In the Euclidean TSP (see below), the distance between two cities is the Euclidean distance between the corresponding points.

In the rectilinear TSP, the distance between two cities is the sum of the absolute values of the differences of their x - and y -coordinates. This metric is often called the Manhattan distance or city-block metric.

In the maximum metric , the distance between two points is the maximum of the absolute values of differences of their x - and y -coordinates.

The last two metrics appear, for example, in routing a machine that drills a given set of holes in a printed circuit board . The Manhattan metric corresponds to a machine that adjusts first one coordinate, and then the other, so the time to move to a new point is the sum of both movements. The maximum metric corresponds to a machine that adjusts both coordinates simultaneously, so the time to move to a new point is the slower of the two movements.

In its definition, the TSP does not allow cities to be visited twice, but many applications do not need this constraint. In such cases, a symmetric, non-metric instance can be reduced to a metric one. This replaces the original graph with a complete graph in which the inter-city distance d A B {\displaystyle d_{AB}} is replaced by the shortest path length between A and B in the original graph.

Euclidean [ edit ] For points in the Euclidean plane , the optimal solution to the travelling salesman problem forms a simple polygon through all of the points, a polygonalization of the points.

[ 38 ] Any non-optimal solution with crossings can be made into a shorter solution without crossings by local optimizations. The Euclidean distance obeys the triangle inequality, so the Euclidean TSP forms a special case of metric TSP. However, even when the input points have integer coordinates, their distances generally take the form of square roots , and the length of a tour is a sum of radicals , making it difficult to perform the symbolic computation needed to perform exact comparisons of the lengths of different tours.

Like the general TSP, the exact Euclidean TSP is NP-hard, but the issue with sums of radicals is an obstacle to proving that its decision version is in NP, and therefore NP-complete. A discretized version of the problem with distances rounded to integers is NP-complete.

[ 39 ] With rational coordinates and the actual Euclidean metric, Euclidean TSP is known to be in the Counting Hierarchy, [ 40 ] a subclass of PSPACE. With arbitrary real coordinates, Euclidean TSP cannot be in such classes, since there are uncountably many possible inputs. Despite these complications, Euclidean TSP is much easier than the general metric case for approximation.

[ 41 ] For example, the minimum spanning tree of the graph associated with an instance of the Euclidean TSP is a Euclidean minimum spanning tree , and so can be computed in expected O ( n log n ) time for n points (considerably less than the number of edges). This enables the simple 2-approximation algorithm for TSP with triangle inequality above to operate more quickly.

In general, for any c > 0, where d is the number of dimensions in the Euclidean space, there is a polynomial-time algorithm that finds a tour of length at most (1 + 1/ c ) times the optimal for geometric instances of TSP in O ( n ( log ⁡ ⁡ n ) O ( c d ) d − − 1 ) {\displaystyle O{\left(n(\log n)^{O(c{\sqrt {d}})^{d-1}}\right)}} time; this is called a polynomial-time approximation scheme (PTAS).

[ 42 ] Sanjeev Arora and Joseph S. B. Mitchell were awarded the Gödel Prize in 2010 for their concurrent discovery of a PTAS for the Euclidean TSP.

In practice, simpler heuristics with weaker guarantees continue to be used.

Asymmetric [ edit ] In most cases, the distance between two nodes in the TSP network is the same in both directions. The case where the distance from A to B is not equal to the distance from B to A is called asymmetric TSP. A practical application of an asymmetric TSP is route optimization using street-level routing (which is made asymmetric by one-way streets, slip-roads, motorways, etc.).

The stacker crane problem can be viewed as a special case of the asymmetric TSP. In this problem, the input consists of ordered pairs of points in a metric space, which must be visited consecutively in order by the tour. These pairs of points can be viewed as the nodes of an asymmetric TSP, with asymmetric distances reflecting the combined cost of traveling from the first point of a pair to its second and then from the second point of a pair to the first point of the next pair.

Conversion to symmetric [ edit ] Solving an asymmetric TSP graph can be somewhat complex. The following is a 3×3 matrix containing all possible path weights between the nodes A , B and C . One option is to turn an asymmetric matrix of size N into a symmetric matrix of size 2 N .

[ 43 ] Asymmetric path weights A B C A 1 2 B 6 3 C 5 4 To double the size, each of the nodes in the graph is duplicated, creating a second ghost node , linked to the original node with a "ghost" edge of very low (possibly negative) weight, here denoted − w . (Alternatively, the ghost edges have weight 0, and weight w is added to all other edges.) The original 3×3 matrix shown above is visible in the bottom left and the transpose of the original in the top-right. Both copies of the matrix have had their diagonals replaced by the low-cost hop paths, represented by − w . In the new graph, no edge directly links original nodes and no edge directly links ghost nodes.

Symmetric path weights A B C A′ B′ C′ A − w 6 5 B 1 − w 4 C 2 3 − w A′ − w 1 2 B′ 6 − w 3 C′ 5 4 − w The weight − w of the "ghost" edges linking the ghost nodes to the corresponding original nodes must be low enough to ensure that all ghost edges must belong to any optimal symmetric TSP solution on the new graph ( w = 0 is not always low enough). As a consequence, in the optimal symmetric tour, each original node appears next to its ghost node (e.g. a possible path is A → A′ → C → C′ → B → B′ → A), and by merging the original and ghost nodes again we get an (optimal) solution of the original asymmetric problem (in our example, A → C → B → A).

Analyst's problem [ edit ] There is an analogous problem in geometric measure theory which asks the following: under what conditions may a subset E of Euclidean space be contained in a rectifiable curve (that is, when is there a curve with finite length that visits every point in E )? This problem is known as the analyst's travelling salesman problem .

Path length for random sets of points in a square [ edit ] Suppose X 1 , … … , X n {\displaystyle X_{1},\ldots ,X_{n}} are n {\displaystyle n} independent random variables with uniform distribution in the square [ 0 , 1 ] 2 {\displaystyle [0,1]^{2}} , and let L n ∗ ∗ {\displaystyle L_{n}^{\ast }} be the shortest path length (i.e. TSP solution) for this set of points, according to the usual Euclidean distance . It is known [ 9 ] that, almost surely, L n ∗ ∗ n → → β β when n → → ∞ ∞ , {\displaystyle {\frac {L_{n}^{*}}{\sqrt {n}}}\rightarrow \beta \qquad {\text{when }}n\to \infty ,} where β β {\displaystyle \beta } is a positive constant that is not known explicitly. Since L n ∗ ∗ ≤ ≤ 2 n + 2 {\displaystyle L_{n}^{*}\leq 2{\sqrt {n}}+2} (see below), it follows from bounded convergence theorem that β β = lim n → → ∞ ∞ E [ L n ∗ ∗ ] / n {\displaystyle \beta =\lim _{n\to \infty }\mathbb {E} [L_{n}^{*}]/{\sqrt {n}}} , hence lower and upper bounds on β β {\displaystyle \beta } follow from bounds on E [ L n ∗ ∗ ] {\displaystyle \mathbb {E} [L_{n}^{*}]} .

The almost-sure limit L n ∗ ∗ n → → β β {\displaystyle {\frac {L_{n}^{*}}{\sqrt {n}}}\rightarrow \beta } as n → → ∞ ∞ {\displaystyle n\to \infty } may not exist if the independent locations X 1 , … … , X n {\displaystyle X_{1},\ldots ,X_{n}} are replaced with observations from a stationary ergodic process with uniform marginals.

[ 44 ] Upper bound [ edit ] One has L ∗ ∗ ≤ ≤ 2 n + 2 {\displaystyle L^{*}\leq 2{\sqrt {n}}+2} , and therefore β β ≤ ≤ 2 {\displaystyle \beta \leq 2} , by using a naïve path which visits monotonically the points inside each of n {\displaystyle {\sqrt {n}}} slices of width 1 / n {\displaystyle 1/{\sqrt {n}}} in the square.

Few [ 45 ] proved L n ∗ ∗ ≤ ≤ 2 n + 1.75 {\displaystyle L_{n}^{*}\leq {\sqrt {2n}}+1.75} , hence β β ≤ ≤ 2 {\displaystyle \beta \leq {\sqrt {2}}} , later improved by Karloff (1987): β β ≤ ≤ 0.984 2 {\displaystyle \beta \leq 0.984{\sqrt {2}}} .

Fietcher [ 46 ] empirically suggested an upper bound of β β ≤ ≤ 0.73 … … {\displaystyle \beta \leq 0.73\dots } .

Lower bound [ edit ] By observing that E [ L n ∗ ∗ ] {\displaystyle \mathbb {E} [L_{n}^{*}]} is greater than n {\displaystyle n} times the distance between X 0 {\displaystyle X_{0}} and the closest point X i ≠ ≠ X 0 {\displaystyle X_{i}\neq X_{0}} , one gets (after a short computation) E [ L n ∗ ∗ ] ≥ ≥ 1 2 n .

{\displaystyle \mathbb {E} [L_{n}^{*}]\geq {\tfrac {1}{2}}{\sqrt {n}}.} A better lower bound is obtained by observing that E [ L n ∗ ∗ ] {\displaystyle \mathbb {E} [L_{n}^{*}]} is greater than n / 2 {\displaystyle n/2} times the sum of the distances between X 0 {\displaystyle X_{0}} and the closest and second closest points X i , X j ≠ ≠ X 0 {\displaystyle X_{i},X_{j}\neq X_{0}} , which gives [ 9 ] E [ L n ∗ ∗ ] ≥ ≥ ( 1 4 + 3 8 ) n = 5 8 n , {\displaystyle \mathbb {E} [L_{n}^{*}]\geq {\bigl (}{\tfrac {1}{4}}+{\tfrac {3}{8}}{\bigr )}{\sqrt {n}}={\tfrac {5}{8}}{\sqrt {n}},} The currently-best [ when?

] lower bound is [ 47 ] E [ L n ∗ ∗ ] ≥ ≥ ( 5 8 + 19 5184 ) n , {\displaystyle \mathbb {E} [L_{n}^{*}]\geq {\bigl (}{\tfrac {5}{8}}+{\tfrac {19}{5184}}{\bigr )}{\sqrt {n}},} Held and Karp gave a polynomial-time algorithm that provides numerical lower bounds for L n ∗ ∗ {\displaystyle L_{n}^{*}} , and thus for β β ( ≃ ≃ L n ∗ ∗ / n ) {\displaystyle \beta (\simeq L_{n}^{*}/{\sqrt {n}})} , which seem to be good up to more or less 1%.

[ 48 ] [ 49 ] In particular, David S. Johnson obtained a lower bound by computer experiment: [ 50 ] L n ∗ ∗ ≳ ≳ 0.7080 n + 0.522 , {\displaystyle L_{n}^{*}\gtrsim 0.7080{\sqrt {n}}+0.522,} where 0.522 comes from the points near the square boundary which have fewer neighbours, and Christine L. Valenzuela and Antonia J. Jones obtained the following other numerical lower bound: [ 51 ] L n ∗ ∗ ≳ ≳ 0.7078 n + 0.551 {\displaystyle L_{n}^{*}\gtrsim 0.7078{\sqrt {n}}+0.551} .

Computational complexity [ edit ] The problem has been shown to be NP-hard (more precisely, it is complete for the complexity class FP NP ; see function problem ), and the decision problem version ("given the costs and a number x , decide whether there is a round-trip route cheaper than x ") is NP-complete . The bottleneck travelling salesman problem is also NP-hard. The problem remains NP-hard even for the case when the cities are in the plane with Euclidean distances , as well as in a number of other restrictive cases. Removing the condition of visiting each city "only once" does not remove the NP-hardness, since in the planar case there is an optimal tour that visits each city only once (otherwise, by the triangle inequality , a shortcut that skips a repeated visit would not increase the tour length).

Complexity of approximation [ edit ] In the general case, finding a shortest travelling salesman tour is NPO -complete.

[ 52 ] If the distance measure is a metric (and thus symmetric), the problem becomes APX -complete, [ 53 ] and the algorithm of Christofides and Serdyukov approximates it within 1.5.

[ 54 ] [ 55 ] [ 10 ] If the distances are restricted to 1 and 2 (but still are a metric), then the approximation ratio becomes 8/7.

[ 56 ] In the asymmetric case with triangle inequality , in 2018, a constant factor approximation was developed by Svensson, Tarnawski, and Végh.

[ 57 ] An algorithm by Vera Traub and Jens Vygen [ de ] achieves a performance ratio of 22 + ε ε {\displaystyle 22+\varepsilon } .

[ 58 ] The best known inapproximability bound is 75/74.

[ 59 ] The corresponding maximization problem of finding the longest travelling salesman tour is approximable within 63/38.

[ 60 ] If the distance function is symmetric, then the longest tour can be approximated within 4/3 by a deterministic algorithm [ 61 ] and within ( 33 + ε ε ) / 25 {\displaystyle (33+\varepsilon )/25} by a randomized algorithm.

[ 62 ] Human and animal performance [ edit ] The TSP, in particular the Euclidean variant of the problem, has attracted the attention of researchers in cognitive psychology . It has been observed that humans are able to produce near-optimal solutions quickly, in a close-to-linear fashion, with performance that ranges from 1% less efficient, for graphs with 10–20 nodes, to 11% less efficient for graphs with 120 nodes.

[ 63 ] [ 64 ] The apparent ease with which humans accurately generate near-optimal solutions to the problem has led researchers to hypothesize that humans use one or more heuristics, with the two most popular theories arguably being the convex-hull hypothesis and the crossing-avoidance heuristic.

[ 65 ] [ 66 ] [ 67 ] However, additional evidence suggests that human performance is quite varied, and individual differences as well as graph geometry appear to affect performance in the task.

[ 68 ] [ 69 ] [ 70 ] Nevertheless, results suggest that computer performance on the TSP may be improved by understanding and emulating the methods used by humans for these problems, [ 71 ] and have also led to new insights into the mechanisms of human thought.

[ 72 ] The first issue of the Journal of Problem Solving was devoted to the topic of human performance on TSP, [ 73 ] and a 2011 review listed dozens of papers on the subject.

[ 72 ] A 2011 study in animal cognition titled "Let the Pigeon Drive the Bus," named after the children's book Don't Let the Pigeon Drive the Bus!

, examined spatial cognition in pigeons by studying their flight patterns between multiple feeders in a laboratory in relation to the travelling salesman problem. In the first experiment, pigeons were placed in the corner of a lab room and allowed to fly to nearby feeders containing peas. The researchers found that pigeons largely used proximity to determine which feeder they would select next. In the second experiment, the feeders were arranged in such a way that flying to the nearest feeder at every opportunity would be largely inefficient if the pigeons needed to visit every feeder. The results of the second experiment indicate that pigeons, while still favoring proximity-based solutions, "can plan several steps ahead along the route when the differences in travel costs between efficient and less efficient routes based on proximity become larger." [ 74 ] These results are consistent with other experiments done with non-primates, which have proven that some non-primates were able to plan complex travel routes. This suggests non-primates may possess a relatively sophisticated spatial cognitive ability.

Natural computation [ edit ] When presented with a spatial configuration of food sources, the amoeboid Physarum polycephalum adapts its morphology to create an efficient path between the food sources, which can also be viewed as an approximate solution to TSP.

[ 75 ] Benchmarks [ edit ] For benchmarking of TSP algorithms, TSPLIB [ 76 ] is a library of sample instances of the TSP and related problems is maintained; see the TSPLIB external reference. Many of them are lists of actual cities and layouts of actual printed circuits .

Popular culture [ edit ] Travelling Salesman , by director Timothy Lanzone, is the story of four mathematicians hired by the U.S. government to solve the most elusive problem in computer-science history: P vs. NP .

[ 77 ] Solutions to the problem are used by mathematician Robert A. Bosch in a subgenre called TSP art.

[ 78 ] See also [ edit ] Canadian traveller problem Exact algorithm Route inspection problem (also known as "Chinese postman problem") Set TSP problem Seven Bridges of Königsberg Steiner travelling salesman problem Subway Challenge Tube Challenge Vehicle routing problem Graph exploration Mixed Chinese postman problem Arc routing Snow plow routing problem Monge array Ring star problem Liner shipping network design and scheduling problem Transit route network design problem Notes [ edit ] ^ Labbé, Martine; Laporte, Gilbert; Martín, Inmaculada Rodríguez; González, Juan José Salazar (May 2004). "The Ring Star Problem: Polyhedral analysis and exact algorithm".

Networks .

43 (3): 177– 189.

doi : 10.1002/net.10114 .

ISSN 0028-3045 .

^ See the TSP world tour problem which has already been solved to within 0.05% of the optimal solution.

[1] ^ "Der Handlungsreisende – wie er sein soll und was er zu tun hat, um Aufträge zu erhalten und eines glücklichen Erfolgs in seinen Geschäften gewiß zu sein – von einem alten Commis-Voyageur" (The travelling salesman – how he must be and what he should do in order to get commissions and be sure of the happy success in his business – by an old commis-voyageur ) ^ A discussion of the early work of Hamilton and Kirkman can be found in Graph Theory, 1736–1936 by Biggs, Lloyd, and Wilson (Clarendon Press, 1986).

^ Cited and English translation in Schrijver (2005) . Original German: "Wir bezeichnen als Botenproblem (weil diese Frage in der Praxis von jedem Postboten, übrigens auch von vielen Reisenden zu lösen ist) die Aufgabe, für endlich viele Punkte, deren paarweise Abstände bekannt sind, den kürzesten die Punkte verbindenden Weg zu finden. Dieses Problem ist natürlich stets durch endlich viele Versuche lösbar. Regeln, welche die Anzahl der Versuche unter die Anzahl der Permutationen der gegebenen Punkte herunterdrücken würden, sind nicht bekannt. Die Regel, man solle vom Ausgangspunkt erst zum nächstgelegenen Punkt, dann zu dem diesem nächstgelegenen Punkt gehen usw., liefert im allgemeinen nicht den kürzesten Weg." ^ a b c d e f g h Lawler, E. L. (1985).

The Travelling Salesman Problem: A Guided Tour of Combinatorial Optimization (Repr. with corrections. ed.). John Wiley & sons.

ISBN 978-0-471-90413-7 .

^ Robinson, Julia (5 December 1949).

On the Hamiltonian game (a traveling salesman problem) (PDF) (Technical report). Santa Monica, CA: The RAND Corporation. RM-303 . Retrieved 2 May 2020 – via Defense Technical Information Center.

^ A detailed treatment of the connection between Menger and Whitney as well as the growth in the study of TSP can be found in Schrijver (2005) .

^ a b c Beardwood, Halton & Hammersley (1959) .

^ a b c van Bevern, René; Slugina, Viktoriia A. (2020). "A historical note on the 3/2-approximation algorithm for the metric traveling salesman problem".

Historia Mathematica .

53 : 118– 127.

arXiv : 2004.02437 .

doi : 10.1016/j.hm.2020.04.003 .

^ Klarreich, Erica (30 January 2013).

"Computer Scientists Find New Shortcuts for Infamous Traveling Salesman Problem" .

WIRED . Retrieved 14 June 2015 .

^ Klarreich, Erica (8 October 2020).

"Computer Scientists Break Traveling Salesperson Record" .

Quanta Magazine . Retrieved 13 October 2020 .

^ Karlin, Anna R.

; Klein, Nathan; Gharan, Shayan Oveis (2021), "A (slightly) improved approximation algorithm for metric TSP", in Khuller, Samir ; Williams, Virginia Vassilevska (eds.), STOC '21: 53rd Annual ACM SIGACT Symposium on Theory of Computing, Virtual Event, Italy, June 21-25, 2021 , pp.

32– 45, arXiv : 2007.01409 , doi : 10.1145/3406325.3451009 , ISBN 978-1-4503-8053-9 ^ a b Rego, César; Gamboa, Dorabela; Glover, Fred; Osterman, Colin (2011), "Traveling salesman problem heuristics: leading methods, implementations and latest advances", European Journal of Operational Research , 211 (3): 427– 441, doi : 10.1016/j.ejor.2010.09.010 , MR 2774420 .

^ " How Do You Fix School Bus Routes? Call MIT in Wall street Journal" (PDF) .

^ Behzad, Arash; Modarres, Mohammad (2002), "New Efficient Transformation of the Generalized Traveling Salesman Problem into Traveling Salesman Problem", Proceedings of the 15th International Conference of Systems Engineering (Las Vegas) ^ Papadimitriou, C.H.; Steiglitz, K. (1998), Combinatorial optimization: algorithms and complexity , Mineola, NY: Dover , pp.308-309.

^ Tucker, A. W. (1960), "On Directed Graphs and Integer Programs", IBM Mathematical research Project (Princeton University) ^ Dantzig, George B. (1963), Linear Programming and Extensions , Princeton, NJ: PrincetonUP, pp. 545–7, ISBN 0-691-08000-3 , sixth printing, 1974.

^ Velednitsky, Mark (2017). "Short combinatorial proof that the DFJ polytope is contained in the MTZ polytope for the Asymmetric Traveling Salesman Problem".

Operations Research Letters .

45 (4): 323– 324.

arXiv : 1805.06997 .

doi : 10.1016/j.orl.2017.04.010 .

^ Bektaş, Tolga; Gouveia, Luis (2014). "Requiem for the Miller–Tucker–Zemlin subtour elimination constraints?".

European Journal of Operational Research .

236 (3): 820– 832.

doi : 10.1016/j.ejor.2013.07.038 .

^ C. E. Miller, A. W. Tucker, and R. A. Zemlin. 1960. Integer Programming Formulation of Traveling Salesman Problems.

J. ACM 7, 4 (Oct. 1960), 326–329. DOI: https://doi.org/10.1145/321043.321046 ^ Dantzig, G.; Fulkerson, R.; Johnson, S. (November 1954). "Solution of a Large-Scale Traveling-Salesman Problem".

Journal of the Operations Research Society of America .

2 (4): 393– 410.

doi : 10.1287/opre.2.4.393 .

^ Bellman (1960) , Bellman (1962) , Held & Karp (1962) ^ Woeginger (2003) .

^ Ambainis, Andris; Balodis, Kaspars; Iraids, Jānis; Kokainis, Martins; Prūsis, Krišjānis; Vihrovs, Jevgēnijs (2019).

"Quantum Speedups for Exponential-Time Dynamic Programming Algorithms" .

Proceedings of the Thirtieth Annual ACM-SIAM Symposium on Discrete Algorithms . pp.

1783– 1793.

doi : 10.1137/1.9781611975482.107 .

ISBN 978-1-61197-548-2 .

^ Padberg & Rinaldi (1991) .

^ Traveling Salesman Problem - Branch and Bound on YouTube . How to cut unfruitful branches using reduced rows and columns as in Hungarian matrix algorithm ^ Applegate, David; Bixby, Robert; Chvátal, Vašek; Cook, William; Helsgaun, Keld (June 2004).

"Optimal Tour of Sweden" . Retrieved 11 November 2020 .

^ a b Johnson, D. S.

; McGeoch, L. A. (1997).

"The Traveling Salesman Problem: A Case Study in Local Optimization" (PDF) . In Aarts, E. H. L.; Lenstra, J. K.

(eds.).

Local Search in Combinatorial Optimisation . London: John Wiley and Sons Ltd. pp.

215– 310.

^ Gutina, Gregory; Yeob, Anders; Zverovich, Alexey (15 March 2002).

"Traveling salesman should not be greedy: domination analysis of greedy-type heuristics for the TSP" .

Discrete Applied Mathematics .

117 ( 1– 3): 81– 86.

doi : 10.1016/S0166-218X(01)00195-0 .

> ^ Zverovitch, Alexei; Zhang, Weixiong; Yeo, Anders; McGeoch, Lyle A.; Gutin, Gregory; Johnson, David S. (2007), "Experimental Analysis of Heuristics for the ATSP", The Traveling Salesman Problem and Its Variations , Combinatorial Optimization, Springer, Boston, MA, pp.

445– 487, CiteSeerX 10.1.1.24.2386 , doi : 10.1007/0-306-48213-4_10 , ISBN 978-0-387-44459-8 ^ Rosenkrantz, D. J.; Stearns, R. E.; Lewis, P. M. (14–16 October 1974).

Approximate algorithms for the traveling salesperson problem . 15th Annual Symposium on Switching and Automata Theory (swat 1974).

doi : 10.1109/SWAT.1974.4 .

^ Ray, S. S.; Bandyopadhyay, S.; Pal, S. K. (2007). "Genetic Operators for Combinatorial Optimization in TSP and Microarray Gene Ordering".

Applied Intelligence .

26 (3): 183– 195.

CiteSeerX 10.1.1.151.132 .

doi : 10.1007/s10489-006-0018-y .

^ Kahng, A. B.; Reda, S. (2004). "Match Twice and Stitch: A New TSP Tour Construction Heuristic".

Operations Research Letters .

32 (6): 499– 509.

doi : 10.1016/j.orl.2004.04.001 .

^ Alatartsev, Sergey; Augustine, Marcus; Ortmeier, Frank (2 June 2013).

"Constricting Insertion Heuristic for Traveling Salesman Problem with Neighborhoods" (PDF) .

Proceedings of the International Conference on Automated Planning and Scheduling .

23 : 2– 10.

doi : 10.1609/icaps.v23i1.13539 .

^ Dorigo, Marco; Gambardella, Luca Maria (1997). "Ant Colonies for the Traveling Salesman Problem".

Biosystems .

43 (2): 73– 81.

Bibcode : 1997BiSys..43...73D .

CiteSeerX 10.1.1.54.7734 .

doi : 10.1016/S0303-2647(97)01708-5 .

PMID 9231906 .

^ Quintas, L. V.; Supnick, Fred (1965). "On some properties of shortest Hamiltonian circuits".

The American Mathematical Monthly .

72 (9): 977– 980.

doi : 10.2307/2313333 .

JSTOR 2313333 .

MR 0188872 .

^ Papadimitriou (1977) .

^ Allender et al. (2007) .

^ Larson & Odoni (1981) .

^ Arora (1998) .

^ Jonker, Roy; Volgenant, Ton (1983). "Transforming asymmetric into symmetric traveling salesman problems".

Operations Research Letters .

2 ( 161– 163): 1983.

doi : 10.1016/0167-6377(83)90048-2 .

^ Arlotto, Alessandro; Steele, J. Michael (2016), "Beardwood–Halton–Hammersley theorem for stationary ergodic sequences: a counterexample", The Annals of Applied Probability , 26 (4): 2141– 2168, arXiv : 1307.0221 , doi : 10.1214/15-AAP1142 ^ Few, L. (1955). "The shortest path and the shortest road through n points".

Mathematika .

2 (2): 141– 144.

doi : 10.1112/s0025579300000784 .

^ Fiechter, C.-N. (1994).

"A parallel tabu search algorithm for large traveling salesman problems" .

Disc. Applied Math .

51 (3): 243– 267.

doi : 10.1016/0166-218X(92)00033-I .

^ Steinerberger (2015) .

^ Held, M.; Karp, R.M. (1970). "The Traveling Salesman Problem and Minimum Spanning Trees".

Operations Research .

18 (6): 1138– 1162.

doi : 10.1287/opre.18.6.1138 .

^ Goemans, Michel X.

; Bertsimas, Dimitris J.

(1991). "Probabilistic analysis of the Held and Karp lower bound for the Euclidean traveling salesman problem".

Mathematics of Operations Research .

16 (1): 72– 89.

doi : 10.1287/moor.16.1.72 .

^ Johnson, D. S.; McGeoch, L. A.; Rothberg, E. E. (1996).

"Asymptotic Experimental Analysis for the Held-Karp Traveling Salesman Bound" (PDF) . In Tardos, Éva (ed.).

Proceedings of the 7th Annual ACM-SIAM Symposium on Discrete Algorithms . Philadelphia: Society for Industrial and Applied Mathematics. pp.

341– 350.

ISBN 978-0-89871-366-4 . Archived from the original (PDF) on 16 June 2013.

^ Christine L. Valenzuela and Antonia J. Jones Archived 25 October 2007 at the Wayback Machine ^ Orponen, P.; Mannila, H.

(1987). On approximation preserving reductions: Complete problems and robust measures' (Report). Department of Computer Science, University of Helsinki. Technical Report C-1987–28.

^ Papadimitriou & Yannakakis (1993) .

^ Christofides (1976) .

^ Serdyukov, Anatoliy I. (1978), "О некоторых экстремальных обходах в графах" [On some extremal walks in graphs] (PDF) , Upravlyaemye Sistemy (in Russian), 17 : 76– 79 ^ Berman & Karpinski (2006) .

^ Svensson, Ola; Tarnawski, Jakub; Végh, László A. (2018).

"A constant-factor approximation algorithm for the asymmetric traveling salesman problem" (PDF) .

Proceedings of the 50th Annual ACM SIGACT Symposium on Theory of Computing . Stoc 2018. Los Angeles: ACM Press. pp.

204– 213.

doi : 10.1145/3188745.3188824 .

ISBN 978-1-4503-5559-9 .

^ Traub, Vera ; Vygen, Jens (8 June 2020).

"An improved approximation algorithm for ATSP" .

Proceedings of the 52nd Annual ACM SIGACT Symposium on Theory of Computing . Stoc 2020. Chicago, IL: ACM. pp.

1– 13.

arXiv : 1912.00670 .

doi : 10.1145/3357713.3384233 .

ISBN 978-1-4503-6979-4 .

^ Karpinski, Lampis & Schmied (2015) .

^ Kosaraju, Park & Stein (1994) .

^ Serdyukov (1984) .

^ Hassin & Rubinstein (2000) .

^ Macgregor, J. N.; Ormerod, T. (June 1996), "Human performance on the traveling salesman problem", Perception & Psychophysics , 58 (4): 527– 539, doi : 10.3758/BF03213088 , PMID 8934685 .

^ Dry, Matthew; Lee, Michael D.; Vickers, Douglas; Hughes, Peter (2006). "Human Performance on Visually Presented Traveling Salesperson Problems with Varying Numbers of Nodes".

The Journal of Problem Solving .

1 (1).

CiteSeerX 10.1.1.360.9763 .

doi : 10.7771/1932-6246.1004 .

^ Rooij, Iris Van; Stege, Ulrike; Schactman, Alissa (1 March 2003). "Convex hull and tour crossings in the Euclidean traveling salesperson problem: Implications for human performance studies".

Memory & Cognition .

31 (2): 215– 220.

CiteSeerX 10.1.1.12.6117 .

doi : 10.3758/bf03194380 .

PMID 12749463 .

^ MacGregor, James N.; Chu, Yun (2011).

"Human Performance on the Traveling Salesman and Related Problems: A Review" .

The Journal of Problem Solving .

3 (2).

doi : 10.7771/1932-6246.1090 .

^ MacGregor, James N.; Chronicle, Edward P.; Ormerod, Thomas C. (1 March 2004).

"Convex hull or crossing avoidance? Solution heuristics in the traveling salesperson problem" .

Memory & Cognition .

32 (2): 260– 270.

doi : 10.3758/bf03196857 .

PMID 15190718 .

^ Vickers, Douglas; Mayo, Therese; Heitmann, Megan; Lee, Michael D; Hughes, Peter (2004). "Intelligence and individual differences in performance on three types of visually presented optimisation problems".

Personality and Individual Differences .

36 (5): 1059– 1071.

doi : 10.1016/s0191-8869(03)00200-9 .

^ Kyritsis, Markos; Gulliver, Stephen R.; Feredoes, Eva (12 June 2017). "Acknowledging crossing-avoidance heuristic violations when solving the Euclidean travelling salesperson problem".

Psychological Research .

82 (5): 997– 1009.

doi : 10.1007/s00426-017-0881-7 .

PMID 28608230 .

^ Kyritsis, Markos; Blathras, George; Gulliver, Stephen; Varela, Vasiliki-Alexia (11 January 2017).

"Sense of direction and conscientiousness as predictors of performance in the Euclidean travelling salesman problem" .

Heliyon .

3 (11): e00461.

Bibcode : 2017Heliy...300461K .

doi : 10.1016/j.heliyon.2017.e00461 .

PMC 5727545 .

PMID 29264418 .

^ Kyritsis, Markos; Gulliver, Stephen R.; Feredoes, Eva; Din, Shahab Ud (December 2018). "Human behaviour in the Euclidean Travelling Salesperson Problem: Computational modelling of heuristics and figural effects".

Cognitive Systems Research .

52 : 387– 399.

doi : 10.1016/j.cogsys.2018.07.027 .

^ a b MacGregor, James N.; Chu, Yun (2011), "Human performance on the traveling salesman and related problems: A review" , Journal of Problem Solving , 3 (2), doi : 10.7771/1932-6246.1090 .

^ Journal of Problem Solving 1(1) , 2006, retrieved 2014-06-06.

^ Gibson, Brett; Wilkinson, Matthew; Kelly, Debbie (1 May 2012). "Let the pigeon drive the bus: pigeons can plan future routes in a room".

Animal Cognition .

15 (3): 379– 391.

doi : 10.1007/s10071-011-0463-9 .

PMID 21965161 .

^ Jones, Jeff; Adamatzky, Andrew (2014), "Computation of the travelling salesman problem by a shrinking blob" (PDF) , Natural Computing : 2, 13, arXiv : 1303.4969 ^ "TSPLIB" .

comopt.ifi.uni-heidelberg.de . Retrieved 10 October 2020 .

^ Geere, Duncan (26 April 2012).

" 'Travelling Salesman' movie considers the repercussions if P equals NP" .

Wired UK . Retrieved 26 April 2012 .

^ When the Mona Lisa is NP-Hard By Evelyn Lamb, Scientific American, 31 April 2015 References [ edit ] Applegate, D. L.; Bixby, R. M.; Chvátal, V.; Cook, W. J.

(2006), The Traveling Salesman Problem , Princeton University Press, ISBN 978-0-691-12993-8 .

Allender, Eric; Bürgisser, Peter; Kjeldgaard-Pedersen, Johan; Mitersen, Peter Bro (2007), "On the Complexity of Numerical Analysis" (PDF) , SIAM J. Comput.

, 38 (5): 1987– 2006, CiteSeerX 10.1.1.167.5495 , doi : 10.1137/070697926 .

Arora, Sanjeev (1998), "Polynomial time approximation schemes for Euclidean traveling salesman and other geometric problems" (PDF) , Journal of the ACM , 45 (5): 753– 782, doi : 10.1145/290179.290180 , MR 1668147 .

Beardwood, J.; Halton, J.H.; Hammersley, J.M. (October 1959), "The Shortest Path Through Many Points", Proceedings of the Cambridge Philosophical Society , 55 (4): 299– 327, Bibcode : 1959PCPS...55..299B , doi : 10.1017/s0305004100034095 .

Bellman, R. (1960), "Combinatorial Processes and Dynamic Programming", in Bellman, R.; Hall, M. Jr. (eds.), Combinatorial Analysis, Proceedings of Symposia in Applied Mathematics 10 , American Mathematical Society, pp.

217– 249 .

Bellman, R. (1962), "Dynamic Programming Treatment of the Travelling Salesman Problem", Journal of the Association for Computing Machinery , 9 : 61– 63, doi : 10.1145/321105.321111 .

Berman, Piotr; Karpinski, Marek (2006), "8/7-approximation algorithm for (1,2)-TSP", Proc. 17th ACM-SIAM Symposium on Discrete Algorithms (SODA '06) , pp.

641– 648, CiteSeerX 10.1.1.430.2224 , doi : 10.1145/1109557.1109627 , ISBN 978-0-89871-605-4 , ECCC TR05-069 .

Christofides, N. (1976), Worst-case analysis of a new heuristic for the travelling salesman problem , Technical Report 388, Graduate School of Industrial Administration, Carnegie-Mellon University, Pittsburgh .

Hassin, R.; Rubinstein, S. (2000), "Better approximations for max TSP", Information Processing Letters , 75 (4): 181– 186, CiteSeerX 10.1.1.35.7209 , doi : 10.1016/S0020-0190(00)00097-1 .

Held, M.

; Karp, R. M.

(1962), "A Dynamic Programming Approach to Sequencing Problems", Journal of the Society for Industrial and Applied Mathematics , 10 (1): 196– 210, doi : 10.1137/0110015 .

Kaplan, H.; Lewenstein, L.; Shafrir, N.; Sviridenko, M. (2004), "Approximation Algorithms for Asymmetric TSP by Decomposing Directed Regular Multigraphs", Proc. 44th IEEE Symp. on Foundations of Comput. Sci , pp.

56– 65 .

Karpinski, M.; Lampis, M.; Schmied, R. (2015), "New Inapproximability bounds for TSP", Journal of Computer and System Sciences , 81 (8): 1665– 1677, arXiv : 1303.6437 , doi : 10.1016/j.jcss.2015.06.003 Kosaraju, S. R.; Park, J. K.; Stein, C. (1994), "Long tours and short superstrings' ", Proc. 35th Ann. IEEE Symp. on Foundations of Comput. Sci , IEEE Computer Society, pp.

166– 177 .

Larson, Richard C.; Odoni, Amedeo R. (1981), "6.4.7: Applications of Network Models § Routing Problems §§ Euclidean TSP" , Urban Operations Research , Prentice-Hall, ISBN 978-0-13-939447-8 , OCLC 6331426 .

Padberg, M.; Rinaldi, G. (1991), "A Branch-and-Cut Algorithm for the Resolution of Large-Scale Symmetric Traveling Salesman Problems", SIAM Review , 33 : 60– 100, doi : 10.1137/1033004 .

Papadimitriou, Christos H.

(1977), "The Euclidean traveling salesman problem is NP-complete", Theoretical Computer Science , 4 (3): 237– 244, doi : 10.1016/0304-3975(77)90012-3 , MR 0455550 .

Papadimitriou, Christos H.; Yannakakis, Mihalis (1993), "The traveling salesman problem with distances one and two", Mathematics of Operations Research , 18 : 1– 11, doi : 10.1287/moor.18.1.1 .

Schrijver, Alexander (2005). "On the history of combinatorial optimization (till 1960)". In K. Aardal ; G.L. Nemhauser ; R. Weismantel (eds.).

Handbook of Discrete Optimization (PDF) . Amsterdam: Elsevier. pp.

1– 68.

Serdyukov, A. I. (1984), "An algorithm with an estimate for the traveling salesman problem of the maximum' ", Upravlyaemye Sistemy , 25 : 80– 86 .

Steinerberger, Stefan (2015), "New Bounds for the Traveling Salesman Constant", Advances in Applied Probability , 47 (1): 27– 36, arXiv : 1311.6338 , doi : 10.1239/aap/1427814579 .

Woeginger, G.J.

(2003), "Exact Algorithms for NP-Hard Problems: A Survey", Combinatorial Optimization – Eureka, You Shrink! Lecture notes in computer science, vol. 2570 , Springer, pp.

185– 207 .

Further reading [ edit ] Adleman, Leonard (1994), "Molecular Computation of Solutions To Combinatorial Problems" (PDF) , Science , 266 (5187): 1021– 4, Bibcode : 1994Sci...266.1021A , CiteSeerX 10.1.1.54.2565 , doi : 10.1126/science.7973651 , PMID 7973651 , archived from the original (PDF) on 6 February 2005 Babin, Gilbert; Deneault, Stéphanie; Laportey, Gilbert (2005), "Improvements to the Or-opt Heuristic for the Symmetric Traveling Salesman Problem", The Journal of the Operational Research Society , Cahiers du GERAD, G-2005-02 (3), Montreal: Group for Research in Decision Analysis: 402– 407, CiteSeerX 10.1.1.89.9953 , JSTOR 4622707 Cook, William (2012).

In Pursuit of the Traveling Salesman: Mathematics at the Limits of Computation . Princeton University Press.

ISBN 978-0-691-15270-7 .

Cook, William ; Espinoza, Daniel; Goycoolea, Marcos (2007), "Computing with domino-parity inequalities for the TSP", INFORMS Journal on Computing , 19 (3): 356– 365, doi : 10.1287/ijoc.1060.0204 Cormen, Thomas H.

; Leiserson, Charles E.

; Rivest, Ronald L.

; Stein, Clifford (31 July 2009).

"35.2: The traveling-salesman problem" .

Introduction to Algorithms (2nd ed.). MIT Press. pp.

1027– 1033.

ISBN 978-0-262-03384-8 .

Dantzig, G. B.

; Fulkerson, R.

; Johnson, S. M.

(1954), "Solution of a large-scale traveling salesman problem", Operations Research , 2 (4): 393– 410, doi : 10.1287/opre.2.4.393 , JSTOR 166695 , S2CID 311786 Garey, Michael R.; Johnson, David S. (1979). "A2.3: ND22–24".

Computers and Intractability: A Guide to the Theory of NP-completeness . W. H. Freeman. pp.

211– 212.

ISBN 978-0-7167-1044-8 .

Goldberg, D. E. (1989), "Genetic Algorithms in Search, Optimization & Machine Learning", Reading: Addison-Wesley , New York: Addison-Wesley, Bibcode : 1989gaso.book.....G , ISBN 978-0-201-15767-3 Gutin, G.; Yeo, A.; Zverovich, A. (15 March 2002).

"Traveling salesman should not be greedy: domination analysis of greedy-type heuristics for the TSP" .

Discrete Applied Mathematics .

117 ( 1– 3): 81– 86.

doi : 10.1016/S0166-218X(01)00195-0 .

Gutin, G.; Punnen, A. P. (18 May 2007).

The Traveling Salesman Problem and Its Variations . Springer US.

ISBN 978-0-387-44459-8 .

Johnson, D. S.

; McGeoch, L. A. (1997), "The Traveling Salesman Problem: A Case Study in Local Optimization", in Aarts, E. H. L.; Lenstra, J. K.

(eds.), Local Search in Combinatorial Optimisation (PDF) , John Wiley and Sons Ltd., pp.

215– 310 Lawler, E. L.; Shmoys, D. B.; Kan, A. H. G. Rinnooy; Lenstra, J. K. (1985).

The Traveling Salesman Problem . John Wiley & Sons, Incorporated.

ISBN 978-0-471-90413-7 .

MacGregor, J. N.; Ormerod, T. (1996), "Human performance on the traveling salesman problem", Perception & Psychophysics , 58 (4): 527– 539, doi : 10.3758/BF03213088 , PMID 8934685 Medvedev, Andrei; Lee, Michael; Butavicius, Marcus; Vickers, Douglas (1 February 2001). "Human performance on visually presented Traveling Salesman problems".

Psychological Research .

65 (1): 34– 45.

doi : 10.1007/s004260000031 .

PMID 11505612 .

Mitchell, J. S. B.

(1999), "Guillotine subdivisions approximate polygonal subdivisions: A simple polynomial-time approximation scheme for geometric TSP, k -MST, and related problems", SIAM Journal on Computing , 28 (4): 1298– 1309, doi : 10.1137/S0097539796309764 Rao, S.; Smith, W. (1998). "Approximating geometrical graphs via 'spanners' and 'banyans' ".

STOC '98: Proceedings of the thirtieth annual ACM symposium on Theory of computing . pp.

540– 550.

CiteSeerX 10.1.1.51.8676 .

Rosenkrantz, Daniel J.; Stearns, Richard E.; Lewis, Philip M. II (1977). "An Analysis of Several Heuristics for the Traveling Salesman Problem".

SIAM Journal on Computing .

6 (5). SIAM (Society for Industrial and Applied Mathematics): 563– 581.

doi : 10.1137/0206041 .

Walshaw, Chris (2000), A Multilevel Approach to the Travelling Salesman Problem , CMS Press Walshaw, Chris (2001), A Multilevel Lin-Kernighan-Helsgaun Algorithm for the Travelling Salesman Problem , CMS Press External links [ edit ] Wikimedia Commons has media related to Traveling salesman problem .

Traveling Salesman Problem at the Wayback Machine (archived 17 December 2013) at University of Waterloo TSPLIB, Sample instances for the TSP at the University of Heidelberg Traveling Salesman Problem by Jon McLoone at the Wolfram Demonstrations Project TSP visualization tool Authority control databases National Germany United States Israel Other Yale LUX NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐bxndg
Cached time: 20250811235053
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.183 seconds
Real time usage: 1.454 seconds
Preprocessor visited node count: 8024/1000000
Revision size: 89024/2097152 bytes
Post‐expand include size: 214527/2097152 bytes
Template argument size: 4926/2097152 bytes
Highest expansion depth: 18/100
Expensive parser function count: 6/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 308059/5000000 bytes
Lua time usage: 0.743/10.000 seconds
Lua memory usage: 8681149/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00% 1037.498      1 -total
 38.82%  402.779      1 Template:Reflist
 24.00%  249.015     40 Template:Citation
 21.31%  221.102     28 Template:Cite_journal
  8.16%   84.660     17 Template:Sfnp
  7.11%   73.720     12 Template:Cite_book
  5.84%   60.552      1 Template:Short_description
  5.38%   55.830      1 Template:Authority_control
  4.41%   45.718      1 Template:Commons_category
  4.22%   43.749      1 Template:Sister_project Saved in parser cache with key enwiki:pcache:31248:|#|:idhash:canonical and timestamp 20250811235053 and revision id 1305382989. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Travelling_salesman_problem&oldid=1305382989 " Categories : Travelling salesman problem NP-complete problems NP-hard problems Combinatorial optimization Graph algorithms Computational problems in graph theory Hamiltonian paths and cycles Metaphors referring to people Hidden categories: Webarchive template wayback links CS1 Russian-language sources (ru) Articles with short description Short description matches Wikidata Use Oxford spelling from August 2016 Use dmy dates from November 2020 All articles with vague or ambiguous time Vague or ambiguous time from April 2024 CS1: long volume value Commons category link is on Wikidata This page was last edited on 11 August 2025, at 19:10 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Travelling salesman problem 41 languages Add topic

