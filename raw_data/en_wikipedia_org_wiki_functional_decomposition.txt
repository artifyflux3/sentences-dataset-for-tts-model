Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Motivation for decomposition 2 Applications 3 Knowledge representation 4 Database theory 5 Machine learning 6 Software architecture 7 Signal processing 8 Systems engineering 9 See also 10 Further reading 11 Notes 12 References Toggle the table of contents Functional decomposition 2 languages Nederlands Norsk bokmål Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Expression of a function as the composition of two functions This article has multiple issues.

Please help improve it or discuss these issues on the talk page .

( Learn how and when to remove these messages ) This article is written like a personal reflection, personal essay, or argumentative essay that states a Wikipedia editor's personal feelings or presents an original argument about a topic.

Please help improve it by rewriting it in an encyclopedic style .

( May 2023 ) ( Learn how and when to remove this message ) This article possibly contains original research .

Please improve it by verifying the claims made and adding inline citations . Statements consisting only of original research should be removed.

( May 2023 ) ( Learn how and when to remove this message ) This article includes a list of general references , but it lacks sufficient corresponding inline citations .

Please help to improve this article by introducing more precise citations.

( September 2020 ) ( Learn how and when to remove this message ) ( Learn how and when to remove this message ) In engineering , functional decomposition is the process of resolving a functional relationship into its constituent parts in such a way that the original function can be reconstructed (i.e., recomposed) from those parts.

This process of decomposition may be undertaken to gain insight into the identity of the constituent components, which may reflect individual physical processes of interest. Also, functional decomposition may result in a compressed representation of the global function, a task which is feasible only when the constituent processes possess a certain level of modularity (i.e., independence or non-interaction).

Interaction (statistics) (a situation in which one causal variable depends on the state of a second causal variable) [ clarify ] between the components are critical to the function of the collection. All interactions may not be observable , or measured [ clarify ] , but possibly deduced through repetitive perception [ clarify ] , synthesis, validation and verification of composite behavior.

Motivation for decomposition [ edit ] Causal influences on West Side Highway traffic. Weather and GW Bridge traffic screen off other influences Decomposition of a function into non-interacting components generally permits more economical representations of the function.  Intuitively, this reduction in representation size is achieved simply because each variable depends only on a subset of the other variables. Thus, variable x 1 {\displaystyle x_{1}} only depends directly on variable x 2 {\displaystyle x_{2}} , rather than depending on the entire set of variables. We would say that variable x 2 {\displaystyle x_{2}} screens off variable x 1 {\displaystyle x_{1}} from the rest of the world. Practical examples of this phenomenon surround us.

Consider the particular case of "northbound traffic on the West Side Highway ."  Let us assume this variable ( x 1 {\displaystyle {x_{1}}} ) takes on three possible values of {"moving slow", "moving deadly slow", "not moving at all"}. Now, let's say the variable x 1 {\displaystyle {x_{1}}} depends on two other variables,  "weather" with values of {"sun", "rain", "snow"}, and " GW Bridge traffic" with values {"10mph", "5mph", "1mph"}.  The point here is that while there are certainly many secondary variables that affect the weather variable (e.g., low pressure system over Canada, butterfly flapping in Japan, etc.) and the Bridge traffic variable (e.g., an accident on I-95 , presidential motorcade, etc.) all these other secondary variables are not directly relevant to the West Side Highway traffic. All we need (hypothetically) in order to predict the West Side Highway traffic is the weather and the GW Bridge traffic, because these two variables screen off West Side Highway traffic from all other potential influences. That is, all other influences act through them.

Applications [ edit ] Practical applications of functional decomposition are found in Bayesian networks , structural equation modeling , linear systems , and database systems .

Knowledge representation [ edit ] Processes related to functional decomposition are prevalent throughout the fields of knowledge representation and machine learning . Hierarchical model induction techniques such as Logic circuit minimization , decision trees , grammatical inference , hierarchical clustering , and quadtree decomposition are all examples of function decomposition.

Many statistical inference methods can be thought of as implementing a function decomposition process in the presence of noise; that is, where functional dependencies are only expected to hold approximately . Among such models are mixture models and the recently popular methods referred to as "causal decompositions" or Bayesian networks .

Database theory [ edit ] See database normalization .

Machine learning [ edit ] In practical scientific applications, it is almost never possible to achieve perfect functional decomposition because of the incredible complexity of the systems under study. This complexity is manifested in the presence of "noise," which is just a designation for all the unwanted and untraceable influences on our observations.

However, while perfect functional decomposition is usually impossible, the spirit lives on in a large number of statistical methods that are equipped to deal with noisy systems.  When a natural or artificial system is intrinsically hierarchical, the joint distribution on system variables should provide evidence of this hierarchical structure. The task of an observer who seeks to understand the system is then to infer the hierarchical structure from observations of these variables. This is the notion behind the hierarchical decomposition of a joint distribution, the attempt to recover something of the intrinsic hierarchical structure which generated that joint distribution.

As an example, Bayesian network methods attempt to decompose a joint distribution along its causal fault lines, thus "cutting nature at its seams". The essential motivation behind these methods is again that within most systems (natural or artificial), relatively few components/events interact with one another directly on equal footing.

[ 1 ] Rather, one observes pockets of dense connections (direct interactions) among small subsets of components, but only loose connections between these densely connected subsets. There is thus a notion of "causal proximity" in physical systems under which variables naturally precipitate into small clusters. Identifying these clusters and using them to represent the joint provides the basis for great efficiency of storage (relative to the full joint distribution) as well as for potent inference algorithms.

Software architecture [ edit ] Main article: Functional decomposition (computer science) Main article: Structured analysis Main article: Structure chart Functional Decomposition is a design method intending to produce a non-implementation, architectural description of a computer program. The software architect first establishes a series of functions and types that accomplishes the main processing problem of the computer program, decomposes each to reveal common functions and types, and finally derives Modules from this activity.

Signal processing [ edit ] Functional decomposition is used in the analysis of many signal processing systems, such as LTI systems . The input signal to an LTI system can be expressed as a function, f ( t ) {\displaystyle f(t)} . Then f ( t ) {\displaystyle f(t)} can be decomposed into a linear combination of other functions, called component signals: f ( t ) = a 1 ⋅ ⋅ g 1 ( t ) + a 2 ⋅ ⋅ g 2 ( t ) + a 3 ⋅ ⋅ g 3 ( t ) + ⋯ ⋯ + a n ⋅ ⋅ g n ( t ) {\displaystyle f(t)=a_{1}\cdot g_{1}(t)+a_{2}\cdot g_{2}(t)+a_{3}\cdot g_{3}(t)+\dots +a_{n}\cdot g_{n}(t)} Here, { g 1 ( t ) , g 2 ( t ) , g 3 ( t ) , … … , g n ( t ) } {\displaystyle \{g_{1}(t),g_{2}(t),g_{3}(t),\dots ,g_{n}(t)\}} are the component signals. Note that { a 1 , a 2 , a 3 , … … , a n } {\displaystyle \{a_{1},a_{2},a_{3},\dots ,a_{n}\}} are constants. This decomposition aids in analysis, because now the output of the system can be expressed in terms of the components of the input. If we let T { } {\displaystyle T\{\}} represent the effect of the system, then the output signal is T { f ( t ) } {\displaystyle T\{f(t)\}} , which can be expressed as: T { f ( t ) } = T { a 1 ⋅ ⋅ g 1 ( t ) + a 2 ⋅ ⋅ g 2 ( t ) + a 3 ⋅ ⋅ g 3 ( t ) + ⋯ ⋯ + a n ⋅ ⋅ g n ( t ) } {\displaystyle T\{f(t)\}=T\{a_{1}\cdot g_{1}(t)+a_{2}\cdot g_{2}(t)+a_{3}\cdot g_{3}(t)+\dots +a_{n}\cdot g_{n}(t)\}} = a 1 ⋅ ⋅ T { g 1 ( t ) } + a 2 ⋅ ⋅ T { g 2 ( t ) } + a 3 ⋅ ⋅ T { g 3 ( t ) } + ⋯ ⋯ + a n ⋅ ⋅ T { g n ( t ) } {\displaystyle =a_{1}\cdot T\{g_{1}(t)\}+a_{2}\cdot T\{g_{2}(t)\}+a_{3}\cdot T\{g_{3}(t)\}+\dots +a_{n}\cdot T\{g_{n}(t)\}} In other words, the system can be seen as acting separately on each of the components of the input signal. Commonly used examples of this type of decomposition are the Fourier series and the Fourier transform .

Systems engineering [ edit ] Main article: Functional flow block diagram Functional decomposition in systems engineering refers to the process of defining a system in functional terms, then defining lower-level functions and sequencing relationships from these higher level systems functions.

[ 2 ] The basic idea is to try to divide a system in such a way that each block of a block diagram can be described without an "and" or "or" in the description.

This exercise forces each part of the system to have a pure function . When a system is designed as pure functions, they can be reused, or replaced. A usual side effect is that the interfaces between blocks become simple and generic. Since the interfaces usually become simple, it is easier to replace a pure function with a related, similar function.

For example, say that one needs to make a stereo system. One might functionally decompose this into speakers , amplifier , a tape deck and a front panel. Later, when a different model needs an audio CD , it can probably fit the same interfaces.

See also [ edit ] Bayesian networks Currying Database normalization Function composition (computer science) Inductive inference Knowledge representation Further reading [ edit ] Zupan, Blaž; Bohanec, Marko; Bratko, Ivan; Demšar, Janez (July 1997).

"Machine learning by function decomposition" . In Douglas H. Fisher (ed.).

Proceedings of the Fourteenth International Conference on Machine Learning .

ICML '97: July 8–12, 1997 . San Francisco: Morgan Kaufmann Publishers. pp.

421– 429.

ISBN 978-1-55860-486-5 .

A review of other applications and function decomposition. Also presents methods based on information theory and graph theory .

Notes [ edit ] ^ Simon (1963) .

^ Systems Engineering Fundamentals (PDF) (Report). Fort Belvoir, VA: Defense Acquisition University Press. January 2001. p. 45.

References [ edit ] 1. Fodor, Jerry (1983), The Modularity of Mind , Cambridge, Massachusetts: MIT Press {{ citation }} :  CS1 maint: numeric names: authors list ( link ) 2. Koestler, Arthur (1967), The Ghost in the Machine , New York: Macmillan {{ citation }} :  CS1 maint: numeric names: authors list ( link ) 3. Koestler, Athur (1973), "The tree and the candle", in Gray, William; Rizzo, Nicholas D. (eds.), Unity Through Diversity: A Festschrift for Ludwig von Bertalanffy , New York: Gordon and Breach, pp.

287– 314 {{ citation }} :  CS1 maint: numeric names: authors list ( link ) 4. Leyton, Michael (1992), Symmetry, Causality, Mind , Cambridge, Massachusetts: MIT Press {{ citation }} :  CS1 maint: numeric names: authors list ( link ) 5. McGinn, Colin (1994), "The Problem of Philosophy", Philosophical Studies , 76 ( 2– 3): 133– 156, doi : 10.1007/BF00989821 , S2CID 170454227 {{ citation }} :  CS1 maint: numeric names: authors list ( link ) 6. Resnikoff, Howard L. (1989), The Illusion of Reality , New York: Springer {{ citation }} :  CS1 maint: numeric names: authors list ( link ) Simon, Herbert A. (1963), "Causal Ordering and Identifiability", in Ando, Albert; Fisher, Franklin M.; Simon, Herbert A. (eds.), Essays on the Structure of Social Science Models , Cambridge , Massachusetts: MIT Press, pp.

5– 31 .

8. Simon, Herbert A. (1973), "The organization of complex systems", in Pattee, Howard H. (ed.), Hierarchy Theory: The Challenge of Complex Systems , New York : George Braziller, pp.

3– 27 {{ citation }} :  CS1 maint: numeric names: authors list ( link ) .

9. Simon, Herbert A. (1996), "The architecture of complexity: Hierarchic systems", The sciences of the artificial , Cambridge , Massachusetts: MIT Press, pp.

183– 216 {{ citation }} :  CS1 maint: numeric names: authors list ( link ) .

10. Tonge, Fred M. (1969), "Hierarchical aspects of computer languages", in Whyte, Lancelot Law; Wilson, Albert G.; Wilson, Donna (eds.), Hierarchical Structures , New York : American Elsevier, pp.

233– 251 {{ citation }} :  CS1 maint: numeric names: authors list ( link ) .

NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐pn6jc
Cached time: 20250812031830
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.360 seconds
Real time usage: 0.484 seconds
Preprocessor visited node count: 1921/1000000
Revision size: 13175/2097152 bytes
Post‐expand include size: 76037/2097152 bytes
Template argument size: 14321/2097152 bytes
Highest expansion depth: 20/100
Expensive parser function count: 10/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 39587/5000000 bytes
Lua time usage: 0.223/10.000 seconds
Lua memory usage: 7891233/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  372.495      1 -total
 19.68%   73.291     10 Template:Citation
 18.03%   67.168      1 Template:Cite_conference
 17.39%   64.782      1 Template:Multiple_issues
 14.66%   54.604      1 Template:Short_description
 10.12%   37.683      3 Template:Ambox
  8.95%   33.344      2 Template:Pagetype
  8.01%   29.845      3 Template:Clarify_span
  7.12%   26.535      3 Template:Fix-span
  6.94%   25.863      1 Template:Sfnp Saved in parser cache with key enwiki:pcache:11691:|#|:idhash:canonical and timestamp 20250812031830 and revision id 1252654252. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Functional_decomposition&oldid=1252654252 " Categories : Functions and mappings Philosophy of mathematics Philosophy of physics Hidden categories: Articles with short description Short description matches Wikidata Use dmy dates from May 2019 Wikipedia articles with style issues from May 2023 All articles with style issues Articles that may contain original research from May 2023 All articles that may contain original research Articles lacking in-text citations from September 2020 All articles lacking in-text citations Articles with multiple maintenance issues All Wikipedia articles needing clarification Wikipedia articles needing clarification from September 2020 CS1 maint: numeric names: authors list This page was last edited on 22 October 2024, at 10:45 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Functional decomposition 2 languages Add topic

