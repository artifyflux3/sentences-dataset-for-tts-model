Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Naming and pronunciation 2 Standards 3 History 4 Syntax Toggle Syntax subsection 4.1 Character encoding 4.2 Data types 5 Interoperability Toggle Interoperability subsection 5.1 Semantics 6 Metadata and schema 7 Uses 8 Safety 9 Alternatives Toggle Alternatives subsection 9.1 XML 10 Supersets Toggle Supersets subsection 10.1 YAML 10.2 CSON 10.3 HOCON 10.4 JSON5 10.5 JSONC 11 Derivatives 12 See also 13 Notes 14 References 15 External links Toggle the table of contents JSON 50 languages ÿßŸÑÿπÿ±ÿ®Ÿäÿ© Az…ôrbaycanca ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ –ë–µ–ª–∞—Ä—É—Å–∫–∞—è –ë—ä–ª–≥–∞—Ä—Å–∫–∏ Catal√† ƒåe≈°tina Deutsch Eesti ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨ Espa√±ol Euskara ŸÅÿßÿ±ÿ≥€å Fran√ßais Galego ÌïúÍµ≠Ïñ¥ ’Ä’°’µ’•÷Ä’•’∂ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä Hrvatski Ido Bahasa Indonesia Italiano ◊¢◊ë◊®◊ô◊™ –ö—ã—Ä–≥—ã–∑—á–∞ Latvie≈°u Lietuvi≈≥ Magyar ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç Bahasa Melayu Nederlands Êó•Êú¨Ë™û Norsk bokm√•l O ªzbekcha / —û–∑–±–µ–∫—á–∞ Polski Portugu√™s Qaraqalpaqsha Rom√¢nƒÉ –†—É—Å—Å–∫–∏–π Shqip Simple English –°—Ä–ø—Å–∫–∏ / srpski Suomi Svenska ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡πÑ‡∏ó‡∏¢ T√ºrk√ße –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ Ti·∫øng Vi·ªát Á≤µË™û ‰∏≠Êñá Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons MediaWiki Wikibooks Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Open standard file format and data interchange "Json" redirects here. For people with similar names, see J Son .

JavaScript Object Notation The JSON logo is a M√∂bius strip Filename extension .json Internet media¬†type application/json Type code TEXT Uniform Type Identifier¬†(UTI) public.json Type of format Data interchange Extended¬†from JavaScript Standard STD 90 ( RFC 8259 ), ECMA-404 , ISO/IEC 21778:2017 Open format ?

Yes Website json .org JSON ( JavaScript Object Notation , pronounced / Àà d í e…™ s …ôn / or / Àà d í e…™ Àå s …í n / ) is an open standard file format and data interchange format that uses human-readable text to store and transmit data objects consisting of name‚Äìvalue pairs and arrays (or other serializable values). It is a commonly used data format with diverse  uses in electronic data interchange , including that of web applications with servers .

JSON is a language-independent data format. It was derived from JavaScript , but many modern programming languages include code to generate and parse JSON-format data. JSON filenames use the extension .json .

Douglas Crockford originally specified the JSON format in the early 2000s.

[ 1 ] He and Chip Morningstar sent the first JSON message in April 2001.

Naming and pronunciation [ edit ] The 2017 international standard (ECMA-404 and ISO/IEC 21778:2017) specifies that "JSON" is "pronounced / Àà d í e…™ .

s …ô n / , as in ' Jason and The Argonauts ' ".

[ 2 ] [ 3 ] The first (2013) edition of ECMA-404 did not address the pronunciation.

[ 4 ] The UNIX and Linux System Administration Handbook states, " Douglas Crockford , who named and promoted the JSON format, says it's pronounced like the name Jason. But somehow, 'JAY-sawn' [ note 1 ] seems to have become more common in the technical community." [ 5 ] Crockford said in 2011, "There's a lot of argument about how you pronounce that, but I strictly don't care." [ 1 ] Standards [ edit ] After RFC 4627 had been available as its "informational" specification since 2006, JSON was first standardized in 2013, as ECMA -404.

[ 4 ] RFC 8259, published in 2017, is the current version of the Internet Standard STD 90, and it remains consistent with ECMA-404.

[ 6 ] That same year, JSON was also standardized as ISO/IEC 21778:2017.

[ 2 ] The ECMA and ISO/IEC standards describe only the allowed syntax, whereas the RFC covers some security and interoperability considerations.

[ 7 ] History [ edit ] Douglas Crockford at the Yahoo Building (2007) JSON grew out of a need for a real-time server-to-browser session communication protocol without using browser plugins such as Flash or Java applets, the dominant methods used in the early 2000s.

[ 8 ] Crockford first specified and popularized the JSON format.

[ 1 ] The acronym originated at State Software, a company cofounded by Crockford and others in March 2001. The cofounders agreed to build a system that used standard browser capabilities and provided an abstraction layer for Web developers to create stateful Web applications that had a persistent duplex connection to a Web server by holding two Hypertext Transfer Protocol (HTTP) connections open and recycling them before standard browser time-outs if no further data were exchanged. The cofounders had a round-table discussion and voted on whether to call the data format JSML (JavaScript Markup Language) or JSON (JavaScript Object Notation), as well as under what license type to make it available. The JSON.org [ 9 ] website was launched in 2001. In December 2005, Yahoo!

began offering some of its Web services in JSON.

[ 10 ] A precursor to the JSON libraries was used in a children's digital asset trading game project named Cartoon Orbit at Communities.com [ citation needed ] which used a browser side plug-in with a proprietary messaging format to manipulate DHTML elements. Upon discovery of early Ajax capabilities, digiGroups, Noosh, and others used frames to pass information into the user browsers' visual field without refreshing a Web application's visual context, realizing real-time rich Web applications using only the standard HTTP, HTML, and JavaScript capabilities of Netscape 4.0.5+ and Internet Explorer 5+. Crockford then found that JavaScript could be used as an object-based messaging format for such a system. The system was sold to Sun Microsystems , Amazon.com , and EDS .

JSON was based on a subset of the JavaScript scripting language (specifically, Standard ECMA -262 3rd Edition‚ÄîDecember 1999 [ 11 ] ) and is commonly used with JavaScript, but it is a language-independent data format. Code for parsing and generating JSON data is readily available in many programming languages . JSON's website lists JSON libraries by language.

In October 2013, Ecma International published the first edition of its JSON standard ECMA-404.

[ 4 ] That same year, RFC 7158 used ECMA-404 as a reference. In 2014, RFC 7159 became the main reference for JSON's Internet uses, superseding RFC 4627 and RFC 7158 (but preserving ECMA-262 and ECMA-404 as main references). In November 2017, ISO/IEC JTC 1/SC 22 published ISO/IEC 21778:2017 [ 2 ] as an international standard. On December 13, 2017, the Internet Engineering Task Force obsoleted RFC 7159 when it published RFC 8259 , which is the current version of the Internet Standard STD 90.

[ 12 ] [ 13 ] Crockford added a clause to the JSON license stating, "The Software shall be used for Good, not Evil", in order to open-source the JSON libraries while mocking corporate lawyers and those who are overly pedantic. On the other hand, this clause led to license compatibility problems of the JSON license with other open-source licenses since open-source software and free software usually imply no restrictions on the purpose of use.

[ 14 ] Syntax [ edit ] The following example shows a possible JSON representation describing a person.

{ "first_name" : "John" , "last_name" : "Smith" , "is_alive" : true , "age" : 27 , "address" : { "street_address" : "21 2nd Street" , "city" : "New York" , "state" : "NY" , "postal_code" : "10021-3100" }, "phone_numbers" : [ { "type" : "home" , "number" : "212 555-1234" }, { "type" : "office" , "number" : "646 555-4567" } ], "children" : [ "Catherine" , "Thomas" , "Trevor" ], "spouse" : null } Character encoding [ edit ] Although Crockford originally asserted that JSON is a strict subset of JavaScript and ECMAScript , [ 15 ] his specification actually allows valid JSON documents that are not valid JavaScript; JSON allows the Unicode line terminators U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR to appear unescaped in quoted strings, while ECMAScript 2018 and older do not.

[ 16 ] [ 17 ] This is a consequence of JSON disallowing only "control characters". For maximum portability, these characters are backslash-escaped.

JSON exchange in an open ecosystem must be encoded in UTF-8 .

[ 6 ] The encoding supports the full Unicode character set, including those characters outside the Basic Multilingual Plane (U+0000 to U+FFFF). However, if escaped, those characters must be written using UTF-16 surrogate pairs . For example, to include the Emoji character U+1F610 üòê NEUTRAL FACE in JSON: { "face" : "üòê" } // or { "face" : "\uD83D\uDE10" } JSON became a strict subset of ECMAScript as of the language's 2019 revision.

[ 17 ] [ 18 ] Data types [ edit ] JSON's basic data types are: Number: a signed decimal number that may contain a fractional part and may use exponential E notation but cannot include non-numbers such as NaN . The format makes no distinction between integer and floating-point. JavaScript uses IEEE-754 double-precision floating-point format for all its numeric values (later also supporting BigInt [ 19 ] ), but other languages implementing JSON may encode numbers differently.

String : a sequence of zero or more Unicode characters. Strings are delimited with double quotation marks and support a backslash escaping syntax.

Boolean : either of the values true or false Array : an ordered list of zero or more elements, each of which may be of any type. Arrays use square bracket notation with comma-separated elements.

Object : a collection of name‚Äìvalue pairs where the names (also called keys) are strings. The current ECMA standard states, "The JSON syntax does not impose any restrictions on the strings used as names, does not require that name strings be unique, and does not assign any significance to the ordering of name/value pairs." [ 20 ] Objects are delimited with curly brackets and use commas to separate each pair, while within each pair, the colon ":" character separates the key or name from its value.

null : an empty value, using the word null Whitespace is allowed and ignored around or between syntactic elements (values and punctuation, but not within a string value). Four specific characters are considered whitespace for this purpose: space , horizontal tab , line feed , and carriage return . In particular, the byte order mark must not be generated by a conforming implementation (though it may be accepted when parsing JSON). JSON does not provide syntax for comments .

[ 21 ] Early versions of JSON (such as specified by RFC 4627 ) required that a valid JSON text must consist of only an object or an array type, which could contain other types within them. This restriction was dropped in RFC 7158 , where a JSON text was redefined as any serialized value.

Numbers in JSON are agnostic with regard to their representation within programming languages. While this allows for numbers of arbitrary precision to be serialized, it may lead to portability issues. For example, since no differentiation is made between integer and floating-point values, some implementations may treat 42 , 42.0 , and 4.2E+1 as the same number, while others may not. The JSON standard makes no requirements regarding implementation details such as overflow , underflow , loss of precision, rounding, or signed zeros , but it does recommend expecting no more than IEEE 754 binary64 precision for "good interoperability". There is no inherent precision loss in serializing a machine-level binary representation of a floating-point number (like binary64) into a human-readable decimal representation (like numbers in JSON) and back; there exist published algorithms to do this conversion exactly and optimally.

[ 22 ] Comments were intentionally excluded from JSON. In 2012, Douglas Crockford described his design decision thus: "I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability." [ 21 ] JSON disallows "trailing commas", a comma after the last value inside a data structure.

[ 23 ] Trailing commas are a common feature of JSON derivatives to improve ease of use.

[ 24 ] Interoperability [ edit ] RFC 8259 describes certain aspects of JSON syntax that, while legal per the specifications, can cause interoperability problems.

Certain JSON implementations only accept JSON texts representing an object or an array. For interoperability, applications interchanging JSON should transmit messages that are objects or arrays.

The specifications allow JSON objects that contain multiple members with the same name. The behavior of implementations processing objects with duplicate names is unpredictable. For interoperability, applications should avoid duplicate names when transmitting JSON objects.

The specifications specifically say that the order of members in JSON objects is not significant. For interoperability, applications should avoid assigning meaning to member ordering even if the parsing software makes that ordering visible.

While the specifications place no limits on the magnitude or precision of JSON number literals, the widely used JavaScript implementation stores them as IEEE754 "binary64" quantities. For interoperability, applications should avoid transmitting numbers that cannot be represented in this way, for example, 1E400 or 3.141592653589793238462643383279.

While the specifications do not constrain the character encoding of the Unicode characters in a JSON text, the vast majority of implementations assume UTF-8 encoding; for interoperability, applications should always and only encode JSON messages in UTF-8.

The specifications do not forbid transmitting byte sequences that incorrectly represent Unicode characters. For interoperability, applications should transmit messages containing no such byte sequences.

The specification does not constrain how applications go about comparing Unicode strings. For interoperability, applications should always perform such comparisons code unit by code unit.

In 2015, the IETF published RFC 7493, describing the "I-JSON Message Format", a restricted profile of JSON that constrains the syntax and processing of JSON to avoid, as much as possible, these interoperability issues.

Semantics [ edit ] While JSON provides a syntactic framework for data interchange, unambiguous data interchange also requires agreement between producer and consumer on the semantics of specific use of the JSON syntax.

[ 25 ] One example of where such an agreement is necessary is the serialization of data types that are not part of the JSON standard, for example, dates and regular expressions .

Metadata and schema [ edit ] The official MIME type for JSON text is application/json , [ 26 ] and most modern implementations have adopted this. Legacy MIME types include text/json , text/x-json , and text/javascript .

[ 27 ] The standard filename extension is .json.

[ 28 ] JSON Schema specifies a JSON-based format to define the structure of JSON data for validation, documentation, and interaction control. It provides a contract for the JSON data required by a given application and how that data can be modified.

[ 29 ] JSON Schema is based on the concepts from XML Schema (XSD) but is JSON-based. As in XSD, the same serialization/deserialization tools can be used both for the schema and data, and it is self-describing. It is specified in an Internet Draft at the IETF, with the latest version as of 2024 being "Draft 2020-12".

[ 30 ] There are several validators available for different programming languages, [ 31 ] each with varying levels of conformance.

The JSON standard does not support object references , but an IETF draft standard for JSON-based object references exists.

[ 32 ] Uses [ edit ] JSON-RPC is a remote procedure call (RPC) protocol built on JSON, as a replacement for XML-RPC or SOAP . It is a simple protocol that defines only a handful of data types and commands. JSON-RPC lets a system send notifications (information to the server that does not require a response) and multiple calls to the server that can be answered out of order.

Asynchronous JavaScript and JSON (or AJAJ) refers to the same dynamic web page methodology as Ajax , but instead of XML , JSON is the data format. AJAJ is a web development technique that provides for the ability of a web page to request new data after it has loaded into the web browser . Typically, it renders new data from the server in response to user actions on that web page. For example, what the user types into a search box , client-side code then sends to the server, which immediately responds with a drop-down list of matching database items.

JSON has seen ad hoc usage as a configuration language . However, it does not support comments .
In 2012, Douglas Crockford, JSON creator, had this to say about comments in JSON when used as a configuration language: "I know that the lack of comments makes some people sad, but it shouldn't. Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin [ 33 ] before handing it to your JSON parser." [ 21 ] MongoDB uses JSON-like data for its document-oriented database .

Some relational databases have added support for native JSON data types, such as JSONB in PostgreSQL [ 34 ] and JSON in MySQL.

[ 35 ] This allows developers to insert JSON data directly without having to convert it to another  format.

Safety [ edit ] JSON being a subset of JavaScript can lead to the misconception that it is safe to pass JSON texts to the JavaScript eval () function. This is not safe, due to certain valid JSON texts, specifically those containing U+2028 LINE SEPARATOR or U+2029 PARAGRAPH SEPARATOR , not being valid JavaScript code until JavaScript specifications were updated in 2019, and so older engines may not support it.

[ 36 ] To avoid the many pitfalls caused by executing arbitrary code from the Internet, a new function, JSON .

parse () , was first added to the fifth edition of ECMAScript, [ 37 ] which as of 2017 is supported by all major browsers. For non-supported browsers, an API-compatible JavaScript library is provided by Douglas Crockford .

[ 38 ] In addition, the TC39 proposal "Subsume JSON" made ECMAScript a strict JSON superset as of the language's 2019 revision.

[ 17 ] [ 18 ] Various JSON parser implementations have suffered from denial-of-service attack and mass assignment vulnerability .

[ 39 ] [ 40 ] Alternatives [ edit ] See also: Comparison of data-serialization formats JSON is promoted as a low-overhead alternative to XML as both of these formats have widespread support for creation, reading, and decoding in the real-world situations where they are commonly used.

[ 41 ] Apart from XML, examples could include CSV and supersets of JSON.

Google Protocol Buffers can fill this role, although it is not a data interchange language.

CBOR has a superset of the JSON data types, but it is not text-based.

Ion is also a superset of JSON, with a wider range of primary types, annotations, comments, and allowing trailing commas.

[ 42 ] XML [ edit ] Main article: XML XML has been used to describe structured data and to serialize objects. Various XML-based protocols exist to represent the same kind of data structures as JSON for the same kind of data interchange purposes. Data can be encoded in XML in several ways. The most expansive form using tag pairs results in a much larger (in character count) representation than JSON, but if data is stored in attributes and short tag form where the closing tag is replaced with /> , the representation is often about the same size as JSON or just a little larger. However, an XML attribute can only have a single value and each attribute can appear at most once on each element.

XML separates data from metadata (via the use of elements and attributes), while JSON does not have such a concept.

Another key difference is the addressing of values. JSON has objects with a simple key-to-value mapping, whereas in XML addressing happens on nodes , each of which receives a unique ID via the XML processor. Additionally, the XML standard defines a common attribute xml:id , that can be used by the user, to set an ID explicitly.

XML tag names cannot contain any of the characters !"#$%&'()*+,/;<=>?@[\]^`{|}~ , nor a space character, and cannot begin with - , .

, or a numeric digit, whereas JSON keys can (even if quotation mark and backslash must be escaped).

[ 43 ] XML values are strings of characters , with no built-in type safety . XML has the concept of schema , that permits strong typing, user-defined types, predefined tags, and formal structure, allowing for formal validation of an XML stream. JSON has several types built-in and has a similar schema concept in JSON Schema .

XML supports comments, while JSON does not.

[ 44 ] [ 21 ] Supersets [ edit ] Support for comments and other features have been deemed useful, which has led to several nonstandard JSON supersets being created. Among them are HJSON, [ 45 ] HOCON, and JSON5 (which despite its name, is not the fifth version of JSON).

[ 46 ] [ 47 ] YAML [ edit ] See also: YAML ¬ß¬†JSON YAML version 1.2 is a superset of JSON; prior versions were not strictly compatible. For example, escaping a slash / with a backslash \ is valid in JSON, but was not valid in YAML.

[ 48 ] YAML supports comments, while JSON does not.

[ 48 ] [ 46 ] [ 21 ] CSON [ edit ] CSON (" CoffeeScript Object Notation") uses significant indentation and unquoted keys, and assumes an outer object declaration. It was used for configuring GitHub 's Atom text editor .

[ 49 ] [ 50 ] [ 51 ] There is also an unrelated project called CSON ("Cursive Script Object Notation") that is more syntactically similar to JSON.

[ 52 ] HOCON [ edit ] HOCON ("Human-Optimized Config Object Notation") is a format for human-readable data, and a superset of JSON.

[ 53 ] The uses of HOCON are: It is used mostly along with the Play Framework , [ 54 ] and is developed by Lightbend .

It is also supported as a configuration format for .NET projects via Akka.NET [ 55 ] [ 56 ] and Puppet .

[ 57 ] TIBCO Streaming: [ 58 ] HOCON is the primary configuration file format for the TIBCO Streaming [ 59 ] family of products (StreamBase, LiveView, and Artifact Management Server) as of TIBCO Streaming Release 10.

[ 60 ] It is also the primary configuration file format for several subsystems of Exabeam Advanced Analytics.

[ 61 ] Jitsi uses it as the "new" config system and .properties -Files as fallback [ 62 ] [ 63 ] JSON5 [ edit ] JSON5 ("JSON5 Data Interchange Format") is an extension of JSON syntax that, like JSON, is also valid JavaScript syntax. The specification was started in 2012 and finished in 2018 with version 1.0.0.

[ 64 ] The main differences to JSON syntax are: Optional trailing commas Unquoted object keys Single quoted and multiline strings Additional number formats Comments JSON5 syntax is supported in some software as an extension of JSON syntax, for instance in SQLite .

[ 65 ] JSONC [ edit ] JSONC (JSON with Comments) is a subset of JSON5 used in Microsoft's Visual Studio Code : [ 66 ] supports single-line comments ( // ) and block comments ( /* */ ) accepts trailing commas, but they are discouraged and the editor will display a warning Derivatives [ edit ] Several serialization formats have been built on or from the JSON specification. Examples include GeoJSON , a format designed for representing simple geographical features [ 67 ] [ 68 ] JSON-LD , a method of encoding linked data using JSON [ 69 ] [ 70 ] JSON-RPC , a remote procedure call protocol encoded in JSON [ 71 ] JsonML , a lightweight markup language used to map between XML and JSON [ 72 ] [ 73 ] Smile (data interchange format) [ 74 ] [ 75 ] UBJSON , a binary computer data interchange format imitating JSON, but requiring fewer bytes of data [ 76 ] [ 77 ] See also [ edit ] BSON Comparison of data serialization formats Extensible Data Notation Amazon Ion ‚Äì  a superset of JSON (though limited to UTF-8 , like JSON for interchange, unlike general JSON) Jackson (API) jaql ‚Äì a functional data processing and query language most commonly used for JSON query processing jq ‚Äì a "JSON query language" and high-level programming language JSONiq ‚Äì a JSON-oriented query and processing language based on XQuery JSON streaming S-expression Notes [ edit ] ^ / Àà d í e…™ Àå s …í n / , assuming the cot-caught merger References [ edit ] ^ a b c "Douglas Crockford: The JSON Saga" . YouTube. August 28, 2011 . Retrieved February 21, 2022 .

Transcript: Transcript Vids at the Wayback Machine (archived 2019-10-30) ^ a b c "ISO/IEC 21778:2017 Information technology ‚Äî The JSON data interchange syntax" .

ISO . Retrieved June 24, 2025 .

^ "ECMA-404: The JSON Data Interchange Syntax" (2nd¬†ed.).

Ecma International . December 2017. p.¬†iii, footnote.

Archived (PDF) from the original on October 27, 2019 . Retrieved April 29, 2024 .

^ a b c "ECMA-404: The JSON Data Interchange Format" (1st¬†ed.).

Ecma International . October 2013.

Archived (PDF) from the original on November 1, 2013 . Retrieved November 20, 2023 .

^ Nemeth, Evi; Snyder, Garth; Hein, Trent R.; Whaley, Ben; Mackin, Dan (2017).

"19: Web Hosting" .

UNIX and Linux System Administration Handbook (5th¬†ed.). Addison-Wesley Professional.

ISBN 9780134278292 . Retrieved October 29, 2019 .

^ a b Bray, T. (December 2017). Bray, T (ed.).

The JavaScript Object Notation (JSON) Data Interchange Format . IETF.

doi : 10.17487/RFC8259 .

S2CID 263868313 .

RFC 8259 . Retrieved February 16, 2018 .

^ Bray, Tim.

"JSON Redux AKA RFC7159" .

Ongoing . Retrieved March 16, 2014 .

^ "Unofficial Java History" .

Edu4Java . 26 May 2014. Archived from the original on 26 May 2014 . Retrieved 30 August 2019 .

In 1996, Macromedia launches Flash technology which occupies the space left by Java and ActiveX, becoming the de facto standard for animation on the client side.

^ "JSON" .

json.org .

^ Yahoo!.

"Using JSON with Yahoo! Web services" . Archived from the original on October 11, 2007 . Retrieved July 3, 2009 .

^ Crockford, Douglas (May 28, 2009).

"Introducing JSON" . json.org . Retrieved July 3, 2009 .

It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999.

^ Bray, Tim (December 2017).

"History for draft-ietf-jsonbis-rfc7159bis-04" .

IETF Datatracker . Internet Engineering Task Force . Retrieved October 24, 2019 .

2017-12-13 [...] RFC published ^ Bray, Tim (December 13, 2017).

"RFC 8259 - The JavaScript Object Notation (JSON) Data Interchange Format" .

IETF Datatracker . Internet Engineering Task Force . Retrieved October 24, 2019 .

Type: RFC - Internet Standard (December 2017; Errata); Obsoletes RFC 7159; Also known as STD 90 ^ " Apache and the JSON license " on LWN.net by Jake Edge (November 30, 2016).

^ Douglas Crockford (July 10, 2016).

"JSON in JavaScript" . Archived from the original on July 10, 2016 . Retrieved August 13, 2016 .

JSON is a subset of the object literal notation of JavaScript.

^ Holm, Magnus (May 15, 2011).

"JSON: The JavaScript subset that isn't" . The timeless repository. Archived from the original on May 13, 2012 . Retrieved September 23, 2016 .

^ a b c "Subsume JSON: Proposal to make all JSON text valid ECMA-262" . Ecma TC39. August 23, 2019 . Retrieved August 27, 2019 .

^ a b "Advance to Stage 4 - tc39/proposal-json-superset" .

GitHub . May 22, 2018.

^ "BigInt - MDN Web doc glossary" .

Mozilla . Retrieved October 18, 2020 .

^ ECMA-404, 2nd ed.

, p.¬†3: "The JSON syntax does not impose any restrictions on the strings used as names, does not require that name strings be unique, and does not assign any significance to the ordering of name/value pairs." ^ a b c d e Crockford, Douglas (April 30, 2012).

"Comments in JSON" . Archived from the original on July 4, 2015 . Retrieved August 30, 2019 .

I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability. I know that the lack of comments makes some people sad, but it shouldn't. Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.

^ Andrysco, Marc; Jhala, Ranjit; Lerner, Sorin (February 18, 2016).

Printing Floating-Point Numbers: An Always Correct Method (PDF) (Report) . Retrieved May 31, 2025 .

^ "Trailing commas - JavaScript | MDN" .

developer.mozilla.org . September 12, 2023 . Retrieved December 16, 2023 .

^ "JSON5" . json5. Archived from the original on November 29, 2020 . Retrieved December 16, 2020 .

^ ECMA-404, 2nd ed.

, p.¬†iii: "The JSON syntax is not a specification of a complete data interchange. Meaningful data interchange requires agreement between a producer and consumer on the semantics attached to a particular use of the JSON syntax. What JSON does provide is the syntactic framework to which such semantics can be attached" ^ "Media Types" .

iana.org . Retrieved September 13, 2015 .

^ "Correct Content-Type Header for JSON" .

ReqBin . January 13, 2023 . Retrieved March 23, 2024 .

^ Bray, Tim (December 2017). Bray, T. (ed.).

"11. IANA Considerations" .

RFC 8259: The JavaScript Object Notation (JSON) Data Interchange Format .

IETF .

doi : 10.17487/RFC8259 .

S2CID 263868313 .

^ "JSON Schema and Hyper-Schema" .

json-schema.org . Retrieved June 8, 2021 .

^ "JSON Schema - Specification Links" .

json-schema.org . Retrieved March 22, 2024 .

^ "JSON Schema Implementations" .

json-schema.org . Archived from the original on June 16, 2021 . Retrieved June 8, 2021 .

^ Zyp, Kris (September 16, 2012). Bryan, Paul C. (ed.).

"JSON Reference: draft-pbryan-zyp-json-ref-03" .

Internet Engineering Task Force .

^ Crockford, Douglas (May 16, 2019).

"JSMin" . Retrieved August 12, 2020 .

JSMin [2001] is a minification tool that removes comments and unnecessary whitespace from JavaScript files.

^ "JSONB data type" .

www.cockroachlabs.com . Retrieved April 1, 2025 .

^ "The JSON data type" .

dev.mysql.com . Retrieved April 1, 2025 .

^ "JSON: The JavaScript subset that isn't" . Magnus Holm. Archived from the original on May 13, 2012 . Retrieved May 16, 2011 .

^ "ECMA-262: ECMAScript Language Specification" (5th¬†ed.). December 2009.

Archived (PDF) from the original on April 14, 2011 . Retrieved March 18, 2011 .

^ "douglascrockford/JSON-js" .

GitHub . August 13, 2019.

^ "Denial of Service and Unsafe Object Creation Vulnerability in JSON (CVE-2013-0269)" . Retrieved January 5, 2016 .

^ "Microsoft .NET Framework JSON Content Processing Denial of Service Vulnerability" . Archived from the original on November 6, 2018 . Retrieved January 5, 2016 .

^ "JSON: The Fat-Free Alternative to XML" . json.org . Retrieved March 14, 2011 .

^ "Amazon Ion" .

Amazon .

Archived from the original on August 12, 2024 . Retrieved August 26, 2024 .

^ "XML 1.1 Specification" . World Wide Web Consortium . Retrieved August 26, 2019 .

^ Saternos, Casimir (2014).

Client-server web apps with Javascript and Java . "O'Reilly Media, Inc.". p.¬†45.

ISBN 9781449369316 .

^ Edelman, Jason; Lowe, Scott; Oswalt, Matt.

Network Programmability and Automation .

O'Reilly Media .

for data representation you can pick one of the following: YAML, YAMLEX, JSON, JSON5, HJSON, or even pure Python ^ a b McCombs, Thayne (July 16, 2018).

"Why JSON isn't a good configuration language" . Lucid Chart . Retrieved June 15, 2019 .

^ "HOCON (Human-Optimized Config Object Notation)" .

GitHub . January 28, 2019 . Retrieved August 28, 2019 .

The primary goal is: keep the semantics (tree structure; set of types; encoding/escaping) from JSON, but make it more convenient as a human-editable config file format.

^ a b "YAML Ain't Markup Language (YAML‚Ñ¢) Version 1.2" .

yaml.org . Retrieved September 13, 2015 .

^ Dohm, Lee (2014).

"CoffeeScript Object Notation" .

The Big Book of Atom .

Archived from the original on April 22, 2023 . Retrieved April 29, 2024 .

^ "Basic Customization" .

Atom Flight Manual .

GitHub .

Archived from the original on April 29, 2024 . Retrieved April 29, 2024 .

^ "CSON" . Bevry. December 20, 2023.

Archived from the original on April 23, 2024 . Retrieved April 29, 2024 ‚Äì via GitHub .

^ Seonghoon, Kang (July 1, 2021).

"CSON" .

Archived from the original on December 16, 2023 . Retrieved February 27, 2023 ‚Äì via GitHub .

^ "config/HOCON.md at master ¬∑ lightbend/config" .

GitHub . Retrieved August 5, 2021 .

^ "Config File - 2.5.x" .

www.playframework.com . Retrieved August 5, 2021 .

^ Akka.NET HOCON Docs ^ "Akka.NET Documentation | Akka.NET Documentation" .

getakka.net . Retrieved August 5, 2021 .

^ "Managing HOCON configuration files with Puppet" . Archived from the original on February 11, 2017 . Retrieved March 4, 2023 .

^ "StreamBase Documentation" .

docs.streambase.com . Retrieved August 5, 2021 .

^ "Configuration Guide" .

docs.streambase.com . Retrieved August 5, 2021 .

^ "StreamBase New and Noteworthy Archive" .

docs.streambase.com . Retrieved August 5, 2021 .

^ "Exabeam Advanced Analytics Release Notes" . Archived from the original on October 20, 2020 . Retrieved March 4, 2023 .

^ JITSI Project.

"Config phase 1" .

GitHub . Retrieved February 16, 2021 .

^ JITSI Project.

"reference.conf" .

GitHub . Retrieved February 16, 2021 .

^ "The JSON5 Data Interchange Format" . Retrieved June 25, 2022 .

^ SQLite.

"JSON Functions And Operators" . Retrieved June 25, 2023 .

^ "JSON with Comments - JSON editing in Visual Studio Code" .

Visual Studio Code .

Microsoft . Retrieved April 29, 2024 .

^ Butler, H.; Daly, M.; Doyle, A.; Gillies, Sean; Schaub, T.; Hagen, Stefan (August 2016).

"RFC 7946 - The GeoJSON Format" .

IETF Datatracker . Retrieved June 17, 2022 .

^ "GeoJSON" .

geojson.org . Retrieved August 7, 2022 .

^ "JSON-LD 1.1" .

World Wide Web Consortium . July 16, 2020 . Retrieved June 17, 2022 .

^ "JSON-LD - JSON for Linking Data" .

json-ld.org . Retrieved August 7, 2022 .

^ "JSON-RPC" .

jsonrpc.org . Retrieved June 17, 2022 .

^ "JsonML (JSON Markup Language)" .

JsonML.org . Retrieved June 17, 2022 .

^ McKamey, Stephen (June 14, 2022), JsonML , retrieved August 7, 2022 ^ "FasterXML/smile-format-specification: New home for Smile format" .

GitHub . Retrieved June 17, 2022 .

^ Gupta, Ayush (February 10, 2019).

"Understanding Smile ‚Äî A data format based on JSON" .

Code with Ayush . Retrieved August 7, 2022 .

^ "Universal Binary JSON Specification ‚Äì The universally compatible format specification for Binary JSON" .

ubjson.org . Retrieved June 17, 2022 .

^ "UBJSON - JSON for Modern C++" .

json.nlohmann.me . Retrieved August 7, 2022 .

External links [ edit ] JSON at Wikipedia's sister projects Definitions from Wiktionary Media from Commons Textbooks from Wikibooks Official website v t e Data exchange formats Human readable Atom CSV EDIFACT JSON Web Encryption Web Token Web Signature Property list RDF Rebol TOML XML YAML Binary AMF Ascii85 ASN.1 SMI Avro Base32 Base64 Bencode BSON UBJSON Cap'n Proto CBOR FlatBuffers MessagePack Property list Protocol Buffers Thrift Cyphal DSDL XDR uuencode yEnc Comparison of data-serialization formats v t e Standards of Ecma International Application interfaces ANSI escape code APIW Common Language Infrastructure Office Open XML OpenXPS File systems (tape) Advanced Intelligent Tape DDS DLT Super DLT Linear Tape-Open (Ultrium-1) VXA File systems (disk) CD-ROM CD File System (CDFS) FAT FAT12 FAT16 FAT16B FD UDF Ultra Density Optical Universal Media Disc Holographic Versatile Disc Graphics Universal 3D Programming languages C++/CLI C# Eiffel JavaScript ( E4X , ECMAScript ) Dart Minimal BASIC Full BASIC Radio link interfaces NFC UWB Other ECMA-35 JSON List of Ecma standards (1961 ‚Äì present) v t e International Organization for Standardization (ISO) standards List of ISO standards ‚Äì ISO romanizations ‚Äì IEC standards 1‚Äì9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000‚Äì19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 ( -2 ) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18760 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000‚Äì29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21778 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40314 40500 42010 45001 50001 55000 56000 80000 Category Authority control databases International FAST National Germany United States Israel Other Yale LUX Retrieved from " https://en.wikipedia.org/w/index.php?title=JSON&oldid=1306096383 " Categories : JSON Ajax (programming) Computer-related introductions in 2001 Ecma standards ISO standards Markup languages Open formats Hidden categories: Webarchive template wayback links Articles with short description Short description is different from Wikidata Use American English from March 2021 All Wikipedia articles written in American English Use mdy dates from March 2021 Pages using multiple image with auto scaled images All articles with unsourced statements Articles with unsourced statements from November 2022 Articles with example JavaScript code This page was last edited on 15 August 2025, at 22:44 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia¬Æ is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents JSON 50 languages Add topic

