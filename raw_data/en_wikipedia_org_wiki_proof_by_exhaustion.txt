Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Example 2 Elegance 3 Number of cases 4 See also 5 Notes Toggle the table of contents Proof by exhaustion 11 languages ƒåe≈°tina Cymraeg Deutsch Espa√±ol ŸÅÿßÿ±ÿ≥€å Fran√ßais Magyar Nederlands Portugu√™s Á≤µË™û ‰∏≠Êñá Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Type of mathematical proof This article is about the type of mathematical proof. For the method of calculating limits, see Method of exhaustion .

"Brute force method" redirects here. For similarly named methods in other disciplines, see Brute force (disambiguation) .

"Proof by cases" redirects here. For the concept in propositional logic, see Disjunction elimination .

Proof by exhaustion , also known as proof by cases , proof by case analysis , complete induction or the brute force method , is a method of mathematical proof in which the statement to be proved is split into a finite number of cases or sets of equivalent cases, and where each type of case is checked to see if the proposition in question holds.

[ 1 ] This is a method of direct proof . A proof by exhaustion typically contains two stages: A proof that the set of cases is exhaustive; i.e., that each instance of the statement to be proved matches the conditions of (at least) one of the cases.

A proof of each of the cases.

The prevalence of digital computers has greatly increased the convenience of using the method of exhaustion (e.g., the first computer-assisted proof of four color theorem in 1976), though such approaches can also be challenged on the basis of mathematical elegance .

Expert systems can be used to arrive at answers to many of the questions posed to them. In theory, the proof by exhaustion method can be used whenever the number of cases is finite. However, because most mathematical sets are infinite, this method is rarely used to derive general mathematical results.

[ 2 ] In the Curry‚ÄìHoward isomorphism , proof by exhaustion and case analysis are related to ML-style pattern matching .

[ citation needed ] Example [ edit ] Proof by exhaustion can be used to prove that if an integer is a perfect cube , then it must be either a multiple of 9, 1 more than a multiple of 9, or 1 less than a multiple of 9.

[ 3 ] Proof : Each perfect cube is the cube of some integer n , where n is either a multiple of 3, 1 more than a multiple of 3, or 1 less than a multiple of 3. So these three cases are exhaustive: Case 1: If n = 3 p , then n 3 = 27 p 3 , which is a multiple of 9.

Case 2: If n = 3 p +¬†1, then n 3 = 27 p 3 +¬†27 p 2 +¬†9 p +¬†1, which is 1 more than a multiple of 9. For instance, if n =¬†4 then n 3 = 64 = 9√ó7¬†+¬†1.

Case 3: If n = 3 p ‚àí¬†1, then n 3 =¬†27 p 3 ‚àí¬†27 p 2 +¬†9 p ‚àí¬†1, which is 1 less than a multiple of¬†9. For instance, if n =¬†5 then n 3 = 125 = 9√ó14¬†‚àí¬†1.

Q.E.D.

Elegance [ edit ] Mathematicians prefer to avoid proofs by exhaustion with large numbers of cases, which are viewed as inelegant . An illustration as to how such proofs might be inelegant is to look at the following proofs that all modern Summer Olympic Games are held in years which are divisible by 4: Proof : The first modern Summer Olympics were held in 1896, and then every 4 years thereafter (neglecting exceptional situations such as when the games' schedule were disrupted by World War I, World War II and the COVID-19 pandemic .). Since 1896 = 474 √ó 4 is divisible by 4, the next Olympics would be in year 474 √ó 4 + 4 = (474 + 1) √ó 4, which is also divisible by four, and so on (this is a proof by mathematical induction ). Therefore, the statement is proved.

The statement can also be proved by exhaustion by listing out every year in which the Summer Olympics were held, and checking that every one of them can be divided by four. With 28 total Summer Olympics as of 2016, this is a proof by exhaustion with 28 cases.

In addition to being less elegant, the proof by exhaustion will also require an extra case each time a new Summer Olympics is held. This is to be contrasted with the proof by mathematical induction, which proves the statement indefinitely into the future.

Number of cases [ edit ] There is no upper limit to the number of cases allowed in a proof by exhaustion. Sometimes there are only two or three cases. Sometimes there may be thousands or even millions. For example, rigorously solving a chess endgame puzzle might involve considering a very large number of possible positions in the game tree of that problem.

The first proof of the four colour theorem was a proof by exhaustion with 1834 cases.

[ 4 ] This proof was controversial because the majority of the cases were checked by a computer program, not by hand. The shortest known proof of the four colour theorem today still has over 600 cases.

In general the probability of an error in the whole proof increases with the number of cases. A proof with a large number of cases leaves an impression that the theorem is only true by coincidence, and not because of some underlying principle or connection. Other types of proofs‚Äîsuch as proof by induction ( mathematical induction )‚Äîare considered more elegant . However, there are some important theorems for which no other method of proof has been found, such as The proof that there is no finite projective plane of order 10.

The classification of finite simple groups .

The Kepler conjecture .

The Boolean Pythagorean triples problem .

See also [ edit ] British Museum algorithm Computer-assisted proof Enumerative induction Mathematical induction Proof by contradiction Disjunction elimination Notes [ edit ] ^ Reid, D. A; Knipping, C (2010), Proof in Mathematics Education: Research, Learning, and Teaching , Sense Publishers, p.¬†133, ISBN 978-9460912443 .

^ S., Epp, Susanna (2011-01-01).

Discrete mathematics with applications . Brooks/Cole.

ISBN 978-0495391326 .

OCLC 970542319 .

{{ cite book }} :  CS1 maint: multiple names: authors list ( link ) ^ Glaister, Elizabeth; Glaister, Paul (September 2017).

"Mathematical argument, language and proof ‚Äî AS/A Level 2017" (PDF) .

Mathematical Association . Retrieved October 25, 2019 .

^ Appel, Kenneth; Haken, Wolfgang; Koch, John (1977), "Every Planar Map is Four Colorable. II. Reducibility", Illinois Journal of Mathematics , 21 (3): 504, doi : 10.1215/ijm/1256049012 , MR 0543793 , Of the 1834 configurations in ùì§ v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems¬†( list ) and paradoxes G√∂del's completeness and incompleteness theorems Tarski's undefinability Banach‚ÄìTarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindstr√∂m's L√∂wenheim‚ÄìSkolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ‚àû Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schr√∂der‚ÄìBernstein theorem Isomorphism G√∂del numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo‚ÄìFraenkel axiom of choice continuum hypothesis General Kripke‚ÄìPlatek Morse‚ÄìKelley Naive New Foundations Tarski‚ÄìGrothendieck Von Neumann‚ÄìBernays‚ÄìG√∂del Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬¨ ‚à® ‚àß ‚Üí ‚Üî = Predicate functional variable propositional variable Proof Quantifier ‚àÉ !

‚àÄ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from¬†ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church‚ÄìTuring thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal Retrieved from " https://en.wikipedia.org/w/index.php?title=Proof_by_exhaustion&oldid=1254085701 " Categories : Mathematical proofs Methods of proof Problem solving methods Hidden categories: CS1 maint: multiple names: authors list Articles with short description Short description is different from Wikidata All articles with unsourced statements Articles with unsourced statements from March 2017 This page was last edited on 29 October 2024, at 10:37 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia¬Æ is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Proof by exhaustion 11 languages Add topic

