Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History Toggle History subsection 1.1 JuliaCon 1.2 Sponsors 1.3 The Julia company 2 Language features Toggle Language features subsection 2.1 Interoperability 2.2 Separately-compiled executables option 3 Interaction Toggle Interaction subsection 3.1 Use with other languages 4 Package system 5 Implementation Toggle Implementation subsection 5.1 Current and future platforms 6 Adoption Toggle Adoption subsection 6.1 Scientific computing and engineering 6.1.1 Pharmaceuticals and drug development 6.2 Economics, finance, and political science 7 See also 8 References 9 Further reading 10 External links Toggle the table of contents Julia (programming language) 32 languages العربية বাংলা Català Čeština Deutsch Español Esperanto Euskara فارسی Français Galego 한국어 Bahasa Indonesia Íslenska Italiano עברית മലയാളം Nederlands 日本語 Polski Português Русский Simple English Српски / srpski Suomi Svenska தமிழ் Türkçe Українська 粵語 中文 ꠍꠤꠟꠐꠤ Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Dynamic programming language Julia Paradigm Multi-paradigm : multiple dispatch (primary paradigm), functional , array , procedural ( imperative ), structured , reflective , meta , multistaged [ 1 ] Designed by Jeff Bezanson , Alan Edelman , Stefan Karpinski , Viral B. Shah Developer Jeff Bezanson , Stefan Karpinski , Viral B. Shah , and other contributors [ 2 ] [ 3 ] First appeared 2012 ; 13 years ago ( 2012 ) [ 4 ] Stable release 1.11.6 [ 5 ] / 10 July 2025 ; 38 days ago ( 10 July 2025 ) and 1.10.10 [ 9 ] ( LTS ) / 27 June 2025 ; 51 days ago ( 2025-06-27 ) Preview release 1.12.0-rc1 [ 6 ] [ 7 ] [ 8 ] /       12 July 2025 ; 36 days ago ( 2025-07-12 ) . Being worked on: 1.12.0-rc2 [ 10 ] and 1.13.0-DEV with daily updates Typing discipline Dynamic , [ 11 ] inferred , optional , nominative , parametric , strong [ 11 ] Implementation language Julia, C , C++ , LLVM , [ 12 ] Scheme (was used the parser; almost exclusively) Platform Tier 1: 64- and 32-bit Windows 10 +, Linux , and 64-bit macOS ; IA-32 , x86-64 , Apple silicon ( ARM64 ) Macs; Nvidia GPUs/ CUDA 11.0+ (on Linux; tier 2 for Windows) [ 13 ] Tier 2: 64-bit FreeBSD 13.4+, Linux on 64-bit Arm ; Apple GPUs/Metal on macOS 13+, Intel GPUs/ OneAPI 6.2+ and Nvidia GPUs (on Windows) Tier 3:  64-bit RISC-V , 64-bit musl (e.g.

Alpine Linux ); and AMD GPUs/ ROCm 5.3+.

OS Linux , macOS , Windows 10+ and FreeBSD License MIT Filename extensions .jl Website JuliaLang.org Influenced by Dylan [ 14 ] Lisp [ 4 ] [ 15 ] Lua [ 16 ] Mathematica [ 17 ] [ 18 ] MATLAB [ 4 ] Perl [ 16 ] Python [ 16 ] R [ 4 ] Ruby [ 16 ] Fortress Julia is a dynamic general-purpose programming language . As a high-level language, distinctive aspects of Julia's design include a type system with parametric polymorphism , the use of multiple dispatch as a core programming paradigm , just-in-time (JIT) compilation and a parallel garbage collection implementation. Notably Julia does not support classes with encapsulated methods but instead relies on the types of all of a function's arguments to determine which method will be called.

By default, Julia is run similarly to scripting languages, using its runtime, and allows for interactions , [ 19 ] but Julia programs/ source code can also optionally be sent to users in one ready-to-install/run file, which can be made quickly, not needing anything preinstalled.

[ 20 ] Julia programs can reuse libraries from other languages (or itself be reused from other); Julia has a special no-boilerplate keyword allowing calling e.g.

C , Fortran or Rust libraries, and e.g. PythonCall.jl uses it indirectly for you, and Julia (libraries) can also be called from other languages, e.g.

Python and R , and several Julia packages have been made easily available from those languages, in the form of Python and R libraries for corresponding Julia packages. Calling in either direction has been implemented for many languages, not just those and C++ .

Julia is supported by programmer tools like IDEs (see below) and by notebooks like Pluto.jl, Jupyter , and since 2025 Google Colab officially supports Julia natively.

Julia is sometimes used in embedded systems (e.g. has been used in a satellite in space on a Raspberry Pi Compute Module 4; 64-bit Pis work best with Julia, and Julia is supported in Raspbian ).

[ 21 ] History [ edit ] Work on Julia began in 2009, when Jeff Bezanson , Stefan Karpinski , Viral B. Shah , and Alan Edelman set out to create a free language that was both high-level and fast. On 14 February 2012, the team launched a website with a blog post explaining the language's mission.

[ 4 ] In an interview with InfoWorld in April 2012, Karpinski said of the name "Julia": "There's no good reason, really. It just seemed like a pretty name." [ 22 ] Bezanson said he chose the name on the recommendation of a friend, [ 23 ] then years later wrote: Maybe julia stands for " Jeff 's uncommon lisp is automated"?

[ 24 ] Julia's syntax is now considered stable, since version 1.0 in 2018, and Julia has a backward compatibility guarantee for 1.x and also a stability promise for the documented (stable) API , while in the years before in the early development prior to 0.7 the syntax (and semantics) was changed in new versions. All of the (registered package) ecosystem uses the new and improved syntax, and in most cases relies on new APIs that have been added regularly, and in some cases minor additional syntax added in a forward compatible way e.g. in Julia 1.7.

In the 10 years since the 2012 launch of pre-1.0 Julia, the community has grown. The Julia package ecosystem has over 11.8 million lines of code (including docs and tests).

[ 25 ] The JuliaCon academic conference for Julia users and developers has been held annually since 2014 with JuliaCon2020 [ 26 ] welcoming over 28,900 unique viewers, [ 27 ] and then JuliaCon2021 breaking all previous records (with more than 300 JuliaCon2021 presentations available for free on YouTube, up from 162 the year before), and 43,000 unique viewers during the conference.

[ 28 ] Three of the Julia co-creators are the recipients of the 2019 James H. Wilkinson Prize for Numerical Software (awarded every four years) "for the creation of Julia, an innovative environment for the creation of high-performance tools that enable the analysis and solution of computational science problems." [ 29 ] Also, Alan Edelman, professor of applied mathematics at MIT , has been selected to receive the 2019 IEEE Computer Society Sidney Fernbach Award "for outstanding breakthroughs in high-performance computing, linear algebra, and computational science and for contributions to the Julia programming language." [ 30 ] Both Julia 0.7 [ 31 ] and version 1.0 were released on 8 August 2018. Work on Julia 0.7 was a "huge undertaking" (e.g., because of an "entirely new optimizer"), and some changes were made to semantics, e.g. the iteration interface was simplified.

[ 32 ] Julia 1.6 was the largest release since 1.0, and it was the long-term support (LTS) version for the longest time, faster on many fronts, e.g. introduced parallel precompilation and faster loading of packages, in some cases "50x speedup in load times for large trees of binary artifacts".

[ 33 ] Since 1.7 Julia development is back to time-based releases .

[ 34 ] Julia 1.7 was released in November 2021 with many changes, e.g. a new faster random-number generator and Julia 1.7.3 fixed e.g. at least one security issue.

[ 35 ] Julia 1.8 was released in 2022 and 1.8.5 in January 2023, [ 36 ] with 1.8.x improvements for distributing Julia programs without source code,  and compiler speedup, in some cases by 25%, [ 37 ] and more controllable inlining (i.e. now also allowing applying @inline at the call site, not just on the function itself). Julia 1.9 was released on 7 May 2023. It has many improvements,  such as the ability to precompile packages to native machine code (older Julia versions also have precompilation for packages, but only partial, never fully to native code, so those earlier versions had a "first use" penalty, slowing down while waiting to fully compile). Precompiled packages, since version 1.9, can be up to hundreds of times faster on first use (e.g. for CSV.jl and DataFrames.jl ), and to improve precompilation of packages a new package PrecompileTools.jl has been introduced. Julia 1.10 was released on 25 December 2023 with many new features, e.g. parallel garbage collection, and improved package load times and a new parser, i.e. it rewritten in Julia, with better error messages and improved stacktrace rendering.

[ 38 ] Julia 1.11 was released on 7 October 2024 (and 1.11.6 on 9 July  2025), and with it 1.10.5 became the next long-term support (LTS) version (i.e. those are the only two supported versions), since replaced by 1.10.10 released on 27 June, and 1.6 is no longer an LTS version. Julia 1.11 adds e.g. parallel garbage collection and the new public keyword to signal safe public API (Julia users are advised to use such API, not internals, of Julia or packages, and package authors advised to use the keyword, generally indirectly, e.g. prefixed with the @compat macro, from Compat.jl , to also support older Julia versions, at least the LTS version). Julia 1.11.1 has much improved startup (over 1.11.0 that had a regression), and over 1.10, and this can be important for some benchmarks.

It's possible to compile very small binary executables using juliac which is available in the upcoming Julia 1.12 (now in beta3), and other compilers exist usable for older Julia versions, that also allows compiling though not to small binaries with the main one.

JuliaCon [ edit ] Since 2014, [ 39 ] the Julia Community has hosted an annual Julia Conference focused on developers and users. The first JuliaCon took place in Chicago and kickstarted the annual occurrence of the conference. Since 2014, the conference has taken place across a number of locations including MIT [ 40 ] and the University of Maryland, Baltimore.

[ 41 ] The event audience has grown from a few dozen people to over 28,900 unique attendees [ 42 ] during JuliaCon 2020, which took place virtually. JuliaCon 2021 also took place virtually [ 43 ] with keynote addresses from professors William Kahan , the primary architect of the IEEE 754 floating-point standard (which virtually all CPUs and languages, including Julia, use), [ 44 ] Jan Vitek, [ 45 ] Xiaoye Sherry Li , and Soumith Chintala, a co-creator of PyTorch .

[ 46 ] JuliaCon grew to 43,000 unique attendees and more than 300 presentations (still freely accessible, plus for older years). JuliaCon 2022 will also be virtual held between July 27 and July 29, 2022, for the first time in several languages, not just in English.

Sponsors [ edit ] The Julia language became a NumFOCUS fiscally sponsored project in 2014 in an effort to ensure the project's long-term sustainability.

[ 47 ] Jeremy Kepner at MIT Lincoln Laboratory was the founding sponsor of the Julia project in its early days. In addition, funds from the Gordon and Betty Moore Foundation , the Alfred P. Sloan Foundation , Intel , and agencies such as NSF , DARPA , NIH , NASA , and FAA have been essential to the development of Julia.

[ 48 ] Mozilla , the maker of Firefox web browser, with its research grants for H1 2019, sponsored "a member of the official Julia team" for the project "Bringing Julia to the Browser", [ 49 ] meaning to Firefox  and other web browsers.

[ 50 ] [ 51 ] [ 52 ] [ 53 ] The Julia language is also supported by individual donors on GitHub.

[ 54 ] The Julia company [ edit ] JuliaHub, Inc. was founded in 2015 as Julia Computing, Inc. by Viral B. Shah , Deepak Vinchhi, Alan Edelman , Jeff Bezanson , Stefan Karpinski and Keno Fischer .

[ 55 ] [ 56 ] In June 2017, Julia Computing raised US$4.6 million in seed funding from General Catalyst and Founder Collective, [ 57 ] the same month was "granted $910,000 by the Alfred P. Sloan Foundation to support open-source Julia development, including $160,000 to promote diversity in the Julia community", [ 58 ] and in December 2019 the company got $1.1 million funding from the US government to "develop a neural component machine learning tool to reduce the total energy consumption of heating, ventilation, and air conditioning (HVAC) systems in buildings".

[ 59 ] In July 2021, Julia Computing announced they raised a $24 million Series A round led by Dorilton Ventures, [ 60 ] which also owns Formula 1 team Williams Racing , that partnered with Julia Computing. Williams' Commercial Director said: "Investing in companies building best-in-class cloud technology is a strategic focus for Dorilton and Julia's versatile platform, with revolutionary capabilities in simulation and modelling, is hugely relevant to our business. We look forward to embedding Julia Computing in the world's most technologically advanced sport".

[ 61 ] In June 2023, JuliaHub received (again, now under its new name) a $13 million strategic new investment led by AE Industrial Partners HorizonX ("AEI HorizonX"). AEI HorizonX is a venture capital investment platform formed in partnership with The Boeing Company , which uses Julia.

[ 62 ] Tim Holy's work (at Washington University in St. Louis 's Holy Lab) on Julia 1.9 (improving responsiveness) was funded by the Chan Zuckerberg Initiative .

Language features [ edit ] Wikibooks has a book on the topic of: Introducing Julia Julia is a general-purpose programming language , [ 63 ] while also originally designed for numerical/technical computing. It is also useful for low-level systems programming , [ 64 ] as a specification language , [ 65 ] high-level synthesis (HLS) tool (for hardware, e.g.

FPGAs ), [ 66 ] and for web programming [ 67 ] at both server [ 68 ] [ 69 ] and client [ 70 ] [ 71 ] side.

The main features of the language are: Multiple dispatch: providing ability to define function behavior across combinations of argument types Dynamic type system: types for documentation, optimization, and dispatch Performance approaching that of statically-typed languages like C A built-in package manager Lisp -like macros and other metaprogramming facilities Designed for parallel and distributed computing Coroutines : lightweight green threading Automatic generation of code for different argument types Extensible conversions and promotions for numeric and other types Multiple dispatch (also termed multimethods in Lisp) is a generalization of single dispatch –  the polymorphic mechanism used in common object-oriented programming (OOP) languages, such as Python , C++ , Java , JavaScript , and Smalltalk –  that use inheritance .

In Julia, all concrete types are subtypes of abstract types, directly or indirectly subtypes of the Any type, which is the top of the type hierarchy. Concrete types cannot themselves be subtyped the way they can in other languages; composition is used instead (see also inheritance vs subtyping ).

By default, the Julia runtime must be pre-installed as user-provided source code is run. Alternatively, Julia (GUI) apps can be quickly bundled up into a single file with AppBundler.jl [ 20 ] for "building Julia GUI applications in modern desktop application installer formats. It uses Snap for Linux, MSIX for Windows, and DMG for MacOS as targets. It bundles full Julia within the app".

[ 72 ] PackageCompiler.jl can build standalone executables that need no Julia source code to run.

[ 19 ] In Julia, everything is an object, much like object-oriented languages; however, unlike most object-oriented languages, all functions use multiple dispatch to select methods, rather than single dispatch.

Most programming paradigms can be implemented using Julia's homoiconic macros and packages. Julia's syntactic macros (used for metaprogramming ), like Lisp macros, are more powerful than text-substitution macros used in the preprocessor of some other languages such as C, because they work at the level of abstract syntax trees (ASTs). Julia's macro system is hygienic , but also supports deliberate capture when desired (like for anaphoric macros ) using the esc construct.

Julia draws inspiration from various dialects of Lisp, including Scheme and Common Lisp , and it shares many features with Dylan , also a multiple-dispatch-oriented dynamic language (which features an infix syntax rather than a Lisp-like prefix syntax, while in Julia "everything" [ 73 ] is an expression ), and with Fortress , another numerical programming language (which features multiple dispatch and a sophisticated parametric type system). While Common Lisp Object System (CLOS) adds multiple dispatch to Common Lisp, not all functions are generic functions.

In Julia, Dylan, and Fortress, extensibility is the default, and the system's built-in functions are all generic and extensible. In Dylan, multiple dispatch is as fundamental as it is in Julia: all user-defined functions and even basic built-in operations like + are generic. Dylan's type system, however, does not fully support parametric types, which are more typical of the ML lineage of languages . By default, CLOS does not allow for dispatch on Common Lisp's parametric types; such extended dispatch semantics can only be added as an extension through the CLOS Metaobject Protocol . By convergent design, Fortress also features multiple dispatch on parametric types; unlike Julia, however, Fortress is statically rather than dynamically typed, with separate compiling and executing phases. The language features are summarized in the following table: Language Type system Generic functions Parametric types Julia Dynamic Default Yes Common Lisp Dynamic Opt-in Yes (but no dispatch) Dylan Dynamic Default Partial (no dispatch) Fortress Static Default Yes An example of the extensibility of Julia, the Unitful.jl package adds support for physical units of measurement to the language.

Interoperability [ edit ] Julia has built-in support for calling C or Fortran language libraries using the @ccall macro. Additional libraries allow users to call to or from other languages such as Python , [ 74 ] C++ , [ 75 ] [ 76 ] Rust , R , [ 77 ] Java [ 78 ] and to use with SQL .

[ 79 ] [ 80 ] [ 81 ] [ 82 ] Separately-compiled executables option [ edit ] Julia can be compiled to binary executables with PackageCompiler.jl .

[ 19 ] Smaller executables can also be written using a static subset of the language provided by StaticCompiler.jl that does not support runtime dispatch (nor garbage collection, since excludes the runtime that provides it).

[ 83 ] Interaction [ edit ] The Julia official distribution includes an interactive command-line read–eval–print loop (REPL), [ 84 ] with a searchable history, tab completion , and dedicated help and shell modes, [ 85 ] which can be used to experiment and test code quickly.

[ 86 ] The following fragment represents a sample session example where strings are concatenated automatically by println : [ 87 ] julia> p ( x ) = 2 x ^ 2 + 1 ; f ( x , y ) = 1 + 2 p ( x ) y julia> println ( "Hello world!" , " I'm on cloud " , f ( 0 , 4 ), " as Julia supports recognizable syntax!" ) Hello world! I'm on cloud 9 as Julia supports recognizable syntax!

The REPL gives user access to the system shell and to help mode, by pressing ; or ?

after the prompt (preceding each command), respectively. It also keeps the history of commands, including between sessions.

[ 88 ] Code can be tested inside Julia's interactive session or saved into a file with a .jl extension and run from the command line by typing: [ 73 ] $ julia <filename> Julia uses UTF-8 and LaTeX codes, allowing it to support common math symbols for many operators, such as ∈ for the in operator, typable with \in then pressing Tab ↹ (i.e. uses LaTeX codes, or also possible by simply copy-pasting, e.g. √ and ∛ possible for sqrt and cbrt functions). Julia has support for Unicode 15.1 (Julia 1.12.0-rc1 supports latest 16.0 release [ 89 ] ) for the languages of the world, even for source code, e.g. variable names (while it's recommended to use English for public code, and e.g. package names).

Julia is supported by Jupyter , an online interactive "notebooks" environment, [ 90 ] and Pluto.jl , a "reactive notebook" (where notebooks are saved as pure Julia files), a possible replacement for the former kind.

[ 91 ] In addition Posit's (formerly RStudio Inc's) Quarto publishing system supports Julia, Python, R and Observable JavaScript (those languages have official support by the company, and can even be weaved together in the same notebook document, more languages are unofficially supported).

[ 92 ] [ 93 ] The REPL can be extended with additional modes, and has been with packages, e.g. with an SQL mode, [ 94 ] for database access, and RCall.jl adds an R mode , to work with the R language .

[ 95 ] Julia's Visual Studio Code extension provides a fully featured integrated development environment with "built-in dynamic autocompletion, inline results, plot pane, integrated REPL, variable view, code navigation, and many other advanced language features" [ 96 ] e.g. debugging is possible, linting , and profiling .

[ 97 ] [ 98 ] [ 99 ] [ 100 ] Use with other languages [ edit ] Julia is in practice interoperable with other languages, in fact the majority of the top 20 languages in popular use. Julia can be used to call shared library functions individually, such as those written in C or Fortran, and packages are available to allow calling other languages (which do not provide C-exported functions directly), e.g. Python (with PythonCall.jl ), R, [ 101 ] MATLAB, C# (and other .NET languages with DotNET.jl , from them with JdotNET ), JavaScript, Java (and other JVM languages, such as Scala with JavaCall.jl ). And packages for other languages allow to call to Julia, e.g. from Python, R (to Julia 1.10.x currently possible [ 102 ] ), Rust , Ruby, or C#. Such as with juliacall (part of PythonCall.jl ) to call from Python and a different JuliaCall package for calling, Julia up to 1.10.x, from R. Julia has also been used for hardware, i.e. to compile to VHDL , as a high-level synthesis tool, for example FPGAs .

[ 66 ] Julia has packages supporting markup languages such as HTML (and also for HTTP ), XML , JSON and BSON , and for databases (such as PostgreSQL, [ 103 ] Mongo, [ 104 ] Oracle, including for TimesTen , [ 105 ] MySQL, SQLite, Microsoft SQL Server, [ 104 ] Amazon Redshift, Vertica, ODBC) and web use in general.

[ 106 ] [ 107 ] Package system [ edit ] Julia has a built-in package manager and includes a default registry system.

[ 108 ] Packages are most often distributed as source code hosted on GitHub , though alternatives can also be used just as well. Packages can also be installed as binaries, using artifacts.

[ 109 ] Julia's package manager is used to query and compile packages, as well as managing environments. Federated package registries are supported, allowing registries other than the official to be added locally.

[ 110 ] Implementation [ edit ] Julia's core is implemented in Julia and C , together with C++ for the LLVM dependency. The code parsing, code-lowering, and bootstrapping were implemented in FemtoLisp, a Scheme dialect, up to version 1.10.

[ 111 ] Since that version the new pure-Julia stdlib package JuliaSyntax.jl is used for the parsing (while the old one can still be chosen) [ 112 ] which improves speed and "greatly improves parser error messages in various cases".

[ 113 ] The LLVM compiler infrastructure project is used as the back end for generating optimized machine code for all commonly used platforms. With some exceptions, the standard library is implemented in Julia.

Current and future platforms [ edit ] Julia has tier 1 macOS support, for 64-bit Apple Silicon Macs, natively (previously such Apple M1 -based Macs were only supported by running in Rosetta 2 emulation [ 114 ] [ 115 ] ), and also fully supports Intel-based Macs.

Windows on ARM has no official support yet. OpenBSD has received "initial support" and is under active development.

Julia has four support tiers.

[ 116 ] All IA-32 processors completely implementing the i686 subarchitecture are supported and all 64-bit x86-64 (aka amd64 ), i.e. all less than about a decade old are supported. 64-bit Armv8 (and later; i.e.

AArch64 ) processors are supported on first tier (for macOS); otherwise second tier on Linux, and ARMv7 (AArch32) on third tier.

[ 117 ] Hundreds of packages are GPU-accelerated : [ 118 ] Nvidia GPUs have support with CUDA .jl (tier 1 on 64-bit Linux and tier 2 on 64-bit Windows, the package implementing PTX , for compute capability 3.5 (Kepler) or higher; both require CUDA 11+, older package versions work down to CUDA 9). There are also additionally packages supporting other accelerators, such as Google's TPUs , [ 119 ] and some Intel (integrated) GPUs, through oneAPI.jl , [ 120 ] and AMD's GPUs have support with e.g.

OpenCL ; and experimental support for the AMD ROCm stack.

[ 121 ] for several ARM platforms, from small Raspberry Pis to the world's fastest (at one point, until recently) supercomputer Fugaku 's ARM-based A64FX .

[ 122 ] PowerPC LE (64-bit) has tier 3 support, meaning it "may or may not build", and its tier will lower to 4 for 1.12, i.e. then no longer builds/works.

[ 123 ] Julia has official (tier 2) support for 64-bit ARMv8 meaning e.g. newer 64-bit (ARMv8-A) Raspberry Pi computers work with Julia (e.g. the Pi Compute Module 4 has been used in space running Julia code).

[ 124 ] For many Pis, especially older 32-bit ones, it helps to cross-compile the user's Julia code for them. The older 32-bit ARMv7 Pis worked in older Julia versions (still do, but for latest Julia version(s), note downgraded from tier 3 to its current tier 4: "Julia built at some point in the past, but is known not to build currently."). The original Raspberry Pi 1 has no official support (since it uses ARMv6 which has newer had a support tier; though some cut-down Julia  has been known to run on that Pi).

[ 125 ] [ 126 ] Pico versions of the Pi are known to no work (since using the M-profile Arm, not running under Linux; not yet supported). Julia is now supported in Raspbian [ 127 ] while support is better for newer Pis, e.g., those with Armv7 or newer; the Julia support is promoted by the Raspberry Pi Foundation .

[ 128 ] On some platforms, Julia may need to be compiled from source code (e.g., the original Raspberry Pi ), with specific build options, which has been done and unofficial pre-built binaries (and build instructions) are available.

[ 129 ] [ 130 ] Julia has also been built for 64-bit RISC-V (has tier 3 support), [ 131 ] [ 132 ] i.e. has some supporting code in core Julia.

While Julia requires an operating system by default, and has no official support to run without, or on embedded system platforms such as Arduino , Julia code has still been run on it, with some limitations, i.e. on a baremetal 16 MHz 8-bit ( ATmega328P ) AVR-microcontroller Arduino with 2 KB RAM (plus 32 KB of flash memory).

[ 133 ] [ 134 ] Adoption [ edit ] Julia has been adopted at many universities including MIT , Stanford , UC Berkeley , Ferdowsi University of Mashhad and the University of Cape Town . Large private firms across many sectors have adopted the language including Amazon , IBM , JP Morgan AI Research, [ 135 ] and ASML . Julia has also been used by government agencies including NASA and the FAA , as well as every US national energy laboratory.

[ 136 ] [ 137 ] Scientific computing and engineering [ edit ] Amazon , for quantum computing [ 138 ] and machine learning through Amazon SageMaker [ 139 ] ASML , for hard real-time programming with their machines [ 140 ] The Climate Modeling Alliance [ 141 ] for climate change modeling [ 142 ] CERN , to analyze data from the Large Hadron Collider ( LHCb experiment ) [ 143 ] [ 144 ] [ 145 ] [ 146 ] [ 147 ] [ 148 ] NASA and the Jet Propulsion Laboratory use Julia to model spacecraft separation dynamics, [ 149 ] [ 150 ] [ 151 ] analyze TRAPPIST exoplanet datasets, [ 152 ] [ 153 ] and analyze cosmic microwave background data from the Big Bang [ 154 ] The Brazilian INPE , for space missions and satellite simulations [ 155 ] Julia has also flown in space, on a small  satellite, [ 124 ] used for a GPS module. And Julia has also been used to design satellite constellations .

[ 156 ] Embedded hardware to plan and execute flight of autonomous U.S.

Air Force Research Laboratory VTOL drones [ 157 ] Pharmaceuticals and drug development [ edit ] Julia is widely used for drug development in the pharmaceutical industry, having been adopted by Moderna , Pfizer , AstraZeneca , Procter & Gamble , and United Therapeutics .

[ 158 ] [ 159 ] Economics, finance, and political science [ edit ] The Federal Reserve Bank of New York , for macroeconomic modeling in Julia since 2015, including estimates of COVID-19 shocks in 2021 [ 160 ] Also the Bank of Canada , central bank , for macroeconomic modeling [ 161 ] BlackRock , the world's largest asset manager, for financial time-series analysis [ 162 ] Aviva , the UK 's largest general insurer, for actuarial calculations [ 162 ] Mitre Corporation , for verification of published election results [ 163 ] Nobel laureate Thomas J. Sargent , for macroeconometric modeling [ 164 ] See also [ edit ] Computer programming portal Free and open-source software portal Comparison of numerical-analysis software Comparison of statistical packages Differentiable programming JuMP – an algebraic modeling language for mathematical optimization embedded in Julia Python Nim Ring Mojo References [ edit ] ^ "Smoothing data with Julia's @generated functions" . 5 November 2015.

Archived from the original on 4 March 2016 . Retrieved 9 December 2015 .

Julia's generated functions are closely related to the multistaged programming (MSP) paradigm popularized by Taha and Sheard, which generalizes the compile time/run time stages of program execution by allowing for multiple stages of delayed code execution.

^ "LICENSE.md" .

GitHub . September 2017.

Archived from the original on 23 January 2021 . Retrieved 20 October 2014 .

^ "Contributors to JuliaLang/julia" .

GitHub .

Archived from the original on 23 January 2021 . Retrieved 20 October 2014 .

^ a b c d e Jeff Bezanson; Stefan Karpinski; Viral Shah; Alan Edelman (February 2012).

"Why We Created Julia" .

Julia website .

Archived from the original on 2 May 2020 . Retrieved 7 February 2013 .

^ "Julia v1.11.6 has been released" .

^ "Backports for 1.12.0-rc1 by KristofferC · Pull Request #58956 · JuliaLang/julia" .

GitHub . Retrieved 12 July 2025 .

^ "Backports for 1.12.0-beta4 by KristofferC · Pull Request #58369 · JuliaLang/julia" .

GitHub . Retrieved 10 May 2025 .

^ "GitHub - JuliaLang/julia at v1.12.0-beta3" .

GitHub . Retrieved 12 May 2025 .

^ "GitHub - JuliaLang/julia at v1.10.9" .

GitHub . Retrieved 10 March 2025 .

^ "Backports for Julia 1.12-rc2 by KristofferC · Pull Request #59006 · JuliaLang/julia" .

GitHub . Retrieved 18 July 2025 .

^ a b Engheim, Erik (17 November 2017).

"Dynamically Typed Languages Are Not What You Think" .

Medium .

Archived from the original on 5 March 2021 . Retrieved 27 January 2021 .

^ "Building Julia (Detailed)" .

GitHub . September 2017.

Archived from the original on 16 May 2022 . Retrieved 16 May 2022 .

^ "NVIDIA CUDA ⋅ JuliaGPU" .

juliagpu.org .

Archived from the original on 29 January 2022 . Retrieved 17 January 2022 .

we have shown the performance to approach and even sometimes exceed that of CUDA C on a selection of applications from the Rodinia benchmark suite ^ Stokel-Walker, Chris.

"Julia: The Goldilocks language" .

Increment . Stripe.

Archived from the original on 9 November 2020 . Retrieved 23 August 2020 .

^ "JuliaCon 2016" . JuliaCon.

Archived from the original on 4 March 2017 . Retrieved 6 December 2016 .

He has co-designed the programming language Scheme, which has greatly influenced the design of Julia ^ a b c d "Home · The Julia Language" .

docs.julialang.org .

Archived from the original on 11 January 2021 . Retrieved 15 August 2018 .

^ "Programming Language Network" . GitHub. Archived from the original on 20 December 2020 . Retrieved 6 December 2016 .

^ Wolfram, Stephen (12 February 2013).

"What Should We Call the Language of Mathematica?—Stephen Wolfram Writings" .

writings.stephenwolfram.com .

Archived from the original on 4 September 2024 . Retrieved 24 June 2021 .

^ a b c "GitHub - JuliaLang/PackageCompiler.jl: Compile your Julia Package" . The Julia Language. 14 February 2019.

Archived from the original on 23 March 2019 . Retrieved 15 February 2019 .

^ a b "AppBundler.jl" . PeaceFounder. 13 December 2023.

Archived from the original on 18 December 2023 . Retrieved 18 December 2023 .

^ "Julia available in Raspbian on the Raspberry Pi" .

Julia works on all the Pi variants, we recommend using the Pi 3.

^ Krill, Paul (18 April 2012).

"New Julia language seeks to be the C for scientists" .

InfoWorld .

Archived from the original on 13 September 2014 . Retrieved 4 July 2021 .

^ Torre, Charles.

"Stefan Karpinski and Jeff Bezanson on Julia" .

Channel 9 . MSDN.

Archived from the original on 4 December 2018 . Retrieved 4 December 2018 .

^ Bezanson, Jeff (2 April 2021).

"CAS Benchmarks" .

discourse.julialang.org .

Archived from the original on 2 April 2021 . Retrieved 2 April 2021 .

^ "Newsletter August 2021 - Julia Computing Completes $24 Million Series A Fundraise and Former Snowflake CEO Bob Muglia Joins Julia Computing Board of Directors - JuliaHub" .

juliahub.com .

Archived from the original on 16 November 2022 . Retrieved 16 November 2022 .

^ "JuliaCon 2020" .

JuliaCon 2020 .

Archived from the original on 12 October 2023 . Retrieved 6 October 2023 .

^ "JuliaCon 2020 Wrap-up" .

julialang.org . 11 August 2020.

Archived from the original on 30 November 2020 . Retrieved 20 December 2020 .

^ "JuliaCon 2021 Highlights" .

julialang.org .

Archived from the original on 6 September 2021 . Retrieved 6 September 2021 .

^ "Julia language co-creators win James H. Wilkinson Prize for Numerical Software" .

MIT News . 26 December 2018.

Archived from the original on 28 January 2019 . Retrieved 22 January 2019 .

^ "Alan Edelman of MIT Recognized with Prestigious 2019 IEEE Computer Society Sidney Fernbach Award | IEEE Computer Society" (Press release). 1 October 2019.

Archived from the original on 9 October 2019 . Retrieved 9 October 2019 .

^ "What is Julia 0.7? How does it relate to 1.0?" .

JuliaLang . 26 March 2018.

Archived from the original on 27 July 2018 . Retrieved 17 October 2018 .

^ Davies, Eric.

"Writing Iterators in Julia 0.7" .

julialang.org .

Archived from the original on 6 August 2018 . Retrieved 5 August 2018 .

^ Jeff Bezanson; Stefan Karpinski; Viral Shah; Alan Edelman; et al.

"Julia 1.6 Highlights" .

julialang.org .

Archived from the original on 26 March 2021 . Retrieved 26 March 2021 .

^ "Upgrade to OpenBLAS 0.3.13 · Pull Request #39216 · JuliaLang/julia" .

GitHub .

Archived from the original on 23 March 2022 . Retrieved 26 April 2021 .

Given that 1.7 is not too far away (timed releases going forward) ^ "[Zlib_jll] Update to v1.2.12+3 by giordano · Pull Request #44810 · JuliaLang/julia" .

GitHub .

Archived from the original on 25 May 2022 . Retrieved 25 May 2022 .

^ "Backports for Julia 1.8.5 by KristofferC · Pull Request #48011 · JuliaLang/julia" .

GitHub .

Archived from the original on 4 January 2023 . Retrieved 8 January 2023 .

^ "compiler: speed up bootstrapping time by 25% by aviatesk · Pull Request #41794 · JuliaLang/julia" .

GitHub .

Archived from the original on 3 March 2022 . Retrieved 3 March 2022 .

the bootstrapping took about 80 seconds previously, but on this PR the time is reduced to about 60 seconds.

^ "julia/HISTORY.md at master · JuliaLang/julia" .

GitHub . Retrieved 1 December 2024 .

^ "JuliaCon 2014" .

juliacon.org . Retrieved 20 June 2021 .

^ "JuliaCon 2016 at MIT" .

mit.edu . 18 July 2016.

Archived from the original on 24 June 2021 . Retrieved 20 June 2021 .

^ "JuliaCon 2019 at UMB" .

technical.ly . 23 July 2019.

Archived from the original on 24 June 2021 . Retrieved 20 June 2021 .

^ "JuliaCon 2020 wrap up" .

julialang.org .

Archived from the original on 30 November 2020 . Retrieved 20 June 2021 .

^ "JuliaCon 2021" .

Juliacon.org .

Archived from the original on 20 June 2021 . Retrieved 20 June 2021 .

^ "JuliaCon 2021 Highlights" .

julialang.org .

Archived from the original on 6 September 2021 . Retrieved 3 March 2022 .

This year's JuliaCon was the biggest and best ever, with more than 300 presentations available for free on YouTube, more than 20,000 registrations, and more than 43,000 unique YouTube viewers during the conference, up from 162 presentations, 10,000 registrations, and 28,900 unique YouTube viewers during last year's conference.

^ "Jan Vitek Homepage" .

janvitek.org .

Archived from the original on 22 January 2024 . Retrieved 20 June 2021 .

^ "Soumith Chintala Homepage" .

soumith.ch .

Archived from the original on 24 June 2021 . Retrieved 20 June 2021 .

^ "Julia: NumFOCUS Sponsored Project since 2014" .

numfocus.org .

Archived from the original on 28 September 2020 . Retrieved 29 September 2020 .

^ "The Julia Language" .

julialang.org .

Archived from the original on 26 July 2019 . Retrieved 22 September 2019 .

^ Cimpanu, Catalin.

"Mozilla is funding a way to support Julia in Firefox" .

ZDNet .

Archived from the original on 10 July 2019 . Retrieved 22 September 2019 .

^ "Julia in Iodide" .

alpha.iodide.io . Archived from the original on 22 September 2019 . Retrieved 22 September 2019 .

^ "Language plugins - Iodide Documentation" .

iodide-project.github.io .

Archived from the original on 22 September 2019 . Retrieved 22 September 2019 .

^ "Mozilla Research Grants 2019H1" .

Mozilla . Archived from the original on 9 October 2019 . Retrieved 22 September 2019 .

running language interpreters in WebAssembly. To further increase access to leading data science tools, we're looking for someone to port R or Julia to WebAssembly and to attempt to provide a level 3 language plugin for Iodide: automatic conversion of data basic types between R/Julia and Javascript, and the ability to share class instances between R/Julia and Javascript.

^ "Literate scientific computing and communication for the web: iodide-project/iodide" . iodide. 20 September 2019.

Archived from the original on 24 August 2018 . Retrieved 22 September 2019 .

We envision a future workflow that allows you to do your data munging in Python, fit a quick model in R or JAGS, solve some differential equations in Julia, and then display your results with a live interactive d3+JavaScript visualization ... and all that within a single, portable, sharable, and hackable file.

^ "Sponsor the Julia Language" .

github.com .

Archived from the original on 5 July 2021 . Retrieved 5 June 2021 .

^ "About Us – Julia Computing" .

juliacomputing.com .

Archived from the original on 1 September 2019 . Retrieved 12 September 2017 .

^ "About Us - JuliaHub" .

juliahub.com .

Archived from the original on 16 November 2022 . Retrieved 16 November 2022 .

^ "Julia Computing Raises $4.6M in Seed Funding" (Press release). Archived from the original on 10 May 2019.

^ "Julia Computing Awarded $910,000 Grant by Alfred P. Sloan Foundation, Including $160,000 for STEM Diversity" .

juliacomputing.com . 26 June 2017. Archived from the original on 3 August 2020 . Retrieved 28 July 2020 .

^ "DIFFERENTIATE—Design Intelligence Fostering Formidable Energy Reduction (and) Enabling Novel Totally Impactful Advanced Technology Enhancements" (PDF) .

^ "Julia Computing raises $24 mln in funding round led by Dorilton Ventures" .

Reuters . 19 July 2021.

Archived from the original on 18 August 2021 . Retrieved 18 August 2021 .

^ "Williams welcomes Julia Computing as Dorilton Ventures partner" .

www.williamsf1.com (Press release).

Archived from the original on 2 September 2021 . Retrieved 2 September 2021 .

^ "JuliaHub Receives $13 Million Strategic Investment from AE Industrial Partners HorizonX" .

info.juliahub.com (Press release). 27 June 2023 . Retrieved 30 June 2023 .

^ "The Julia Language" (official website).

Archived from the original on 21 February 2017 . Retrieved 9 December 2016 .

General Purpose [..] Julia lets you write UIs, statically compile your code, or even deploy it on a webserver.

^ Green, Todd (10 August 2018).

"Low-Level Systems Programming in High-Level Julia" . Archived from the original on 5 November 2018 . Retrieved 5 November 2018 .

^ Moss, Robert (26 June 2015).

"Using Julia as a Specification Language for the Next-Generation Airborne Collision Avoidance System" (PDF) .

Archived from the original on 1 July 2015 . Retrieved 29 June 2015 .

Airborne collision avoidance system ^ a b Biggs, Benjamin; McInerney, Ian; Kerrigan, Eric C.; Constantinides, George A. (2022). "High-level Synthesis using the Julia Language".

arXiv : 2201.11522 [ cs.SE ].

We present a prototype Julia HLS tool, written in Julia, that transforms Julia code to VHDL.

^ "Announcing Dash for Julia" .

plotly (Press release). 26 October 2020.

Archived from the original on 2 September 2021 . Retrieved 2 September 2021 .

^ Anaya, Richard (28 April 2019).

"How to create a multi-threaded HTTP server in Julia" .

Medium .

Archived from the original on 25 July 2019 . Retrieved 25 July 2019 .

In summary, even though Julia lacks a multi-threaded server solution currently out of box, we can easily take advantage of its process distribution features and a highly popular load balancing tech to get full CPU utilization for HTTP handling.

^ Anthoff, David (1 June 2019).

"Node.js installation for julia" .

GitHub .

Archived from the original on 4 September 2024 . Retrieved 25 July 2019 .

^ "Translate Julia to JavaScript" . JuliaGizmos. 7 July 2019.

Archived from the original on 28 March 2019 . Retrieved 25 July 2019 .

^ Fischer, Keno (22 July 2019).

"Running julia on wasm" .

GitHub .

Archived from the original on 21 November 2020 . Retrieved 25 July 2019 .

^ "[ANN] AppBundler.jl - Bundle Your Julia GUI Application" .

Julia Programming Language . 30 November 2023.

Archived from the original on 4 September 2024 . Retrieved 18 December 2023 .

^ a b "Learn Julia in Y Minutes" .

Learnxinyminutes.com .

Archived from the original on 15 August 2018 . Retrieved 31 May 2017 .

^ "PythonCall & JuliaCall" . JuliaPy. 29 October 2023.

Archived from the original on 31 October 2023 . Retrieved 30 October 2023 .

^ Cords, Clem (12 November 2024).

"Clemapfel/jluna" .

GitHub . Retrieved 26 November 2024 .

^ "CxxWrap" . JuliaInterop. 28 October 2023 . Retrieved 30 October 2023 .

^ "RCall.jl" . JuliaInterop. 16 October 2023.

Archived from the original on 30 April 2019 . Retrieved 30 October 2023 .

^ "Julia and Spark, Better Together" .

juliacomputing.com . 2 June 2020. Archived from the original on 14 July 2020.

^ Foster, Claire (23 October 2023).

"SQLREPL.jl" .

GitHub .

Archived from the original on 27 September 2022 . Retrieved 31 October 2023 .

^ Noh, WooKyoung (18 October 2023).

"Octo.jl" .

GitHub . Retrieved 31 October 2023 .

^ "Usage Guide · FunSQL.jl" .

mechanicalrabbit.github.io .

Archived from the original on 31 October 2023 . Retrieved 31 October 2023 .

^ "Using Julia with Oracle Databases" . 21 October 2022.

Archived from the original on 8 November 2022 . Retrieved 8 November 2022 .

^ Short, Tom (30 October 2023).

"StaticCompiler" .

GitHub .

Archived from the original on 31 October 2023 . Retrieved 30 October 2023 .

^ "The Julia REPL · The Julia Language" .

docs.julialang.org .

Archived from the original on 22 September 2019 . Retrieved 22 September 2019 .

^ "Introducing Julia/The REPL - Wikibooks, open books for an open world" .

en.wikibooks.org .

Archived from the original on 23 June 2019 . Retrieved 22 September 2019 .

you can install the Julia package OhMyREPL.jl [..] which lets you customize the REPL's appearance and behaviour ^ "Getting Started · The Julia Language" .

docs.julialang.org .

Archived from the original on 10 August 2019 . Retrieved 15 August 2018 .

^ See also: docs .julialang .org /en /v1 /manual /strings / for string interpolation and the string(greet, ", ", whom, ".\n") example for preferred ways to concatenate strings.  Julia has the println and print functions, but also a @printf macro (i.e., not in function form) to eliminate run-time overhead of formatting (unlike the same function in C).

^ "Julia Documentation" .

JuliaLang.org .

Archived from the original on 17 December 2016 . Retrieved 18 November 2014 .

^ "support Unicode 16 via utf8proc 2.10.0 by stevengj · Pull Request #56925 · JuliaLang/julia" .

GitHub . Retrieved 8 January 2025 .

^ "Project Jupyter" .

Archived from the original on 29 June 2017 . Retrieved 19 August 2015 .

^ Boudreau, Emmett (16 October 2020).

"Could Pluto Be A Real Jupyter Replacement?" .

Medium .

Archived from the original on 12 April 2023 . Retrieved 8 December 2020 .

^ Machlis, Sharon (27 July 2022).

"RStudio changes name to Posit, expands focus to include Python and VS Code" .

InfoWorld . Retrieved 18 January 2023 .

^ "Heads up! Quarto is here to stay. Immediately combine R & Python in your next document: An extension on a recent post" .

ds-econ . 20 July 2022. Archived from the original on 31 January 2023 . Retrieved 18 January 2023 .

^ Foster, Chris (4 April 2022).

"SQLREPL.jl" .

GitHub .

Archived from the original on 27 September 2022 . Retrieved 27 September 2022 .

^ "Getting Started · RCall.jl" .

juliainterop.github.io .

Archived from the original on 4 September 2024 . Retrieved 27 September 2022 .

^ "Julia in Visual Studio Code" .

^ Holy, Tim (13 September 2019).

"GitHub - timholy/ProfileView.jl: Visualization of Julia profiling data" .

GitHub .

Archived from the original on 31 January 2020 . Retrieved 22 September 2019 .

^ Gregg, Brendan (20 September 2019).

"GitHub - brendangregg/FlameGraph: Stack trace visualizer" .

GitHub .

Archived from the original on 26 September 2019 . Retrieved 22 September 2019 .

^ "A Julia interpreter and debugger" .

julialang.org . Retrieved 10 April 2019 .

^ "Home · Rebugger.jl" .

timholy.github.io .

Archived from the original on 31 March 2019 . Retrieved 10 April 2019 .

^ "Julia crashes on installation of the RCall module" .

Julia Programming Language . 21 October 2024 . Retrieved 22 October 2024 .

For me RCall loads without issue on Julia 1.11 on MacOS ^ "juliacall fails in julia 1.11 with 'undefined symbol: jl_stdout_obj' · Issue #234 · Non-Contradiction/JuliaCall" .

GitHub . Retrieved 22 October 2024 .

^ "Home · LibPQ.jl" .

invenia.github.io . Archived from the original on 8 November 2022 . Retrieved 8 November 2022 .

^ a b "Home · FunSQL.jl" .

docs.juliahub.com .

Archived from the original on 8 November 2022 . Retrieved 8 November 2022 .

^ Hood, Doug (21 October 2022).

"Using Julia with Oracle Databases" .

Archived from the original on 8 November 2022 . Retrieved 8 November 2022 .

^ "Genie Builder - Visual Studio Marketplace" .

marketplace.visualstudio.com .

Archived from the original on 8 November 2022 . Retrieved 8 November 2022 .

^ "How to Build Your First Web App in Julia with Genie.jl" .

freeCodeCamp.org . 1 February 2022.

Archived from the original on 8 November 2022 . Retrieved 8 November 2022 .

^ "JuliaRegistries / General" .

GitHub .

Archived from the original on 3 August 2020 . Retrieved 30 April 2020 .

^ "Pkg.jl - Artifacts" .

Archived from the original on 2 August 2020 . Retrieved 4 June 2020 .

^ "Pkg.jl - Registries" .

Archived from the original on 13 June 2020 . Retrieved 30 April 2020 .

^ Bezanson, Jeff (6 June 2019).

"JeffBezanson/femtolisp" .

GitHub .

Archived from the original on 22 December 2022 . Retrieved 16 June 2019 .

^ "JuliaSyntax" . The Julia Programming Language. 28 August 2022.

Archived from the original on 28 August 2022 . Retrieved 28 August 2022 .

^ "Enable JuliaSyntax.jl as an alternative Julia parser by c42f · Pull Request #46372 · JuliaLang/julia" .

GitHub .

Archived from the original on 28 August 2022 . Retrieved 28 August 2022 .

^ "Julia v1.7.3 has been released" .

JuliaLang . 25 May 2022.

Archived from the original on 26 May 2022 . Retrieved 26 May 2022 .

^ "Darwin/ARM64 tracking issue · Issue #36617 · JuliaLang/julia" .

GitHub .

Archived from the original on 11 November 2020 . Retrieved 8 December 2020 .

^ "Julia Downloads" .

julialang.org .

Archived from the original on 26 January 2021 . Retrieved 17 May 2019 .

^ "julia/arm.md" . The Julia Language. 7 October 2021.

Archived from the original on 15 May 2022 . Retrieved 15 May 2022 .

A list of known issues for ARM is available.

^ "JuliaGPU" .

juliagpu.org .

Archived from the original on 23 May 2020 . Retrieved 16 November 2022 .

Almost 300 packages rely directly or indirectly on Julia's GPU capabilities.

^ "Julia on TPUs" . JuliaTPU. 26 November 2019.

Archived from the original on 30 April 2019 . Retrieved 29 November 2019 .

^ "Introducing: oneAPI.jl ⋅ JuliaGPU" .

juliagpu.org . Retrieved 6 September 2021 .

^ "AMD ROCm · JuliaGPU" .

juliagpu.org .

Archived from the original on 13 June 2020 . Retrieved 20 April 2020 .

^ Giordano, Mosè (29 September 2022).

"Julia on Fugaku (2022-07-23)" .

GitHub .

Archived from the original on 8 November 2022 . Retrieved 8 November 2022 .

^ "PowerPC will be demoted to Tier 4 in Julia 1.12 and later" .

Julia Programming Language . 18 February 2025 . Retrieved 23 February 2025 .

^ a b "Julia and the GPS payload onboard Waratah Seed-1 satellite" .

Julia Programming Language . 13 December 2024 . Retrieved 4 February 2025 .

We flew our GPS receiver payload, Harry v3 on Waratah Seed-1 6U cubesat [..]  Julia can also run on Raspberry Pi CM4, the processor I used on our GPS payload computer.

^ "Cross-compiling for ARMv6" . Retrieved 16 May 2015 .

I believe #10917 should fix this. The CPU used there arm1176jzf-s . Please reopen if it does not.

^ "ARM build failing during bootstrap on Raspberry Pi 2" . Retrieved 16 May 2015 .

I can confirm (FINALLY) that it works on the Raspberry Pi 2 [..] I guess we can announce alpha support for arm in 0.4 as well.

^ "Julia available in Raspbian on the Raspberry Pi" .

Archived from the original on 4 May 2017 . Retrieved 6 June 2017 .

Julia works on all the Pi variants, we recommend using the Pi 3.

^ "Julia language for Raspberry Pi" .

Raspberry Pi Foundation . 12 May 2017.

Archived from the original on 2 June 2017 . Retrieved 6 June 2017 .

^ "Build Julia for RaspberryPi Zero" .

Gist .

Archived from the original on 1 December 2020 . Retrieved 14 August 2020 .

^ "JuliaBerry: Julia on the Raspberry Pi" .

juliaberry.github.io .

Archived from the original on 8 July 2020 . Retrieved 14 August 2020 .

^ "Release v1.12-0a92fecc12 · maleadt/julia" .

GitHub . Retrieved 12 October 2024 .

^ "julia/doc/src/devdocs/build/riscv.md at master · alexfanqi/julia" .

GitHub . Retrieved 9 October 2024 .

^ "Running Julia baremetal on an Arduino" .

seelengrab.github.io .

Archived from the original on 24 May 2022 . Retrieved 24 May 2022 .

^ Sukera (31 July 2023).

"AVRDevices.jl" .

GitHub .

Archived from the original on 5 August 2023 . Retrieved 5 August 2023 .

^ Chen, Jiahao.

"Jiahao Chen" .

Jiahao Chen . Archived from the original on 23 February 2023 . Retrieved 23 February 2023 .

^ " 'Why We Created Julia' Turns Ten Years Old" .

juliahub.com .

Archived from the original on 16 November 2022 . Retrieved 16 November 2022 .

^ "Newsletter January 2022 - Julia Growth Statistics - Julia Computing" .

juliacomputing.com .

Archived from the original on 26 January 2022 . Retrieved 26 January 2022 .

^ "Introducing Braket.jl - Quantum Computing with Julia" .

Julia Community 🟣 . 15 November 2022.

Archived from the original on 19 June 2024 . Retrieved 23 February 2023 .

Almost all of the Python SDK's features are reimplemented in Julia — for those few that aren't, we are also providing a subsidiary package, PyBraket.jl, which allows you to translate Julia objects into their Python equivalents and call the Python SDK.

^ "Getting started with Julia on Amazon SageMaker: Step-by-step Guide" (PDF) . May 2020.

Archived (PDF) from the original on 9 March 2024 . Retrieved 23 February 2023 .

^ "Towards Using Julia for Real-Time applications in ASML JuliaCon 2022" .

pretalx.com . 27 July 2022.

Archived from the original on 23 February 2023 . Retrieved 23 February 2023 .

^ "Home - CliMA" .

CliMA – Climate Modeling Alliance .

Archived from the original on 18 June 2023 . Retrieved 18 June 2023 .

^ "Julia Computing Brings Support for NVIDIA GPU Computing on Arm Powered Servers - JuliaHub" .

juliahub.com (Press release).

Archived from the original on 16 November 2022 . Retrieved 16 November 2022 .

^ "Julia for HEP Mini-workshop" .

indico.cern.c h . 27 September 2021.

Archived from the original on 11 August 2022 . Retrieved 23 August 2022 .

Julia and the first observation of Ω − _b → Ξ + _c K − π − ^ Mikhasenko, Misha (29 July 2022).

"ThreeBodyDecay" .

GitHub .

Archived from the original on 23 August 2022 . Retrieved 23 August 2022 .

^ Mikhasenko, Misha (July 2021).

"Julia for QCD spectroscopy" (PDF) .

indico.cern.ch .

Archived (PDF) from the original on 23 August 2022 . Retrieved 23 August 2022 .

Summary: Julia is ready to be used in physics HEP analysis .

^ "JuliaHEP/UnROOT.jl" . JuliaHEP. 19 August 2022.

Archived from the original on 19 June 2024 . Retrieved 23 August 2022 .

^ "Julia · Search · GitLab" .

GitLab .

Archived from the original on 23 August 2022 . Retrieved 23 August 2022 .

^ "Commits · master · sft / lcgcmake · GitLab" .

GitLab .

Archived from the original on 12 April 2023 . Retrieved 23 August 2022 .

bump julia version to 1.7.3 ^ "Modeling Spacecraft Separation Dynamics in Julia - Jonathan Diegelman" .

YouTube . 9 March 2021.

Archived from the original on 6 September 2021 . Retrieved 6 September 2021 .

^ "Circuitscape/Circuitscape.jl" . Circuitscape. 25 February 2020.

Archived from the original on 30 July 2020 . Retrieved 26 May 2020 .

^ "Conservation through Coding: 5 Questions with Viral Shah | Science Mission Directorate" .

science.nasa.gov . Archived from the original on 25 May 2020 . Retrieved 26 May 2020 .

^ "Julia in the Wild - Julia Data Science" .

juliadatascience.io .

Archived from the original on 12 September 2022 . Retrieved 12 September 2022 .

^ "Seven Rocky TRAPPIST-1 Planets May Be Made of Similar Stuff" .

Exoplanet Exploration: Planets Beyond our Solar System . 21 January 2021.

Archived from the original on 6 October 2022 . Retrieved 6 October 2022 .

^ "Julia in Astronomy & Astrophysics Research | Eric B. Ford | JuliaCon 2022" .

YouTube . 25 July 2022.

Archived from the original on 6 October 2022 . Retrieved 6 October 2022 .

^ "JuliaSpace/SatelliteToolbox.jl" . JuliaSpace. 20 May 2020.

Archived from the original on 16 June 2021 . Retrieved 26 May 2020 .

^ The Julia Programming Language (1 October 2024).

Designing satellites constellations with Julia | Clement de Givry | JuliaCon 2024 . Retrieved 4 February 2025 – via YouTube.

^ Hobbs, Kerianne (December 2022).

"Year of Autonomy in Alaskan Glaciers, Flight, Earth Orbit, Cislunar Space and Mars" . Aerospace America Year in Review. p. 48.

Archived from the original on 19 June 2024 . Retrieved 26 January 2023 .

The flight test team was able to demonstrate … a vertical takeoff and landing vehicle with both electric and conventional fuel propulsion systems onboard. The [uncrewed aerial system] was able to plan and execute these missions autonomously using onboard hardware. It was the first time the Julia programming language was flown on the embedded hardware - algorithms were precompiled ahead of time.

^ "Case Study - JuliaHub" .

juliahub.com .

Archived from the original on 10 February 2023 . Retrieved 10 February 2023 .

^ "Pumas-AI" .

Pumas-AI .

Archived from the original on 10 February 2023 . Retrieved 10 February 2023 .

^ "Release v1.3.0 · FRBNY-DSGE/DSGE.jl" .

GitHub .

Archived from the original on 3 January 2022 . Retrieved 3 January 2022 .

New subspecs of Model1002 for estimating the DSGE with COVID-19 shocks ^ "Finance and Economics Use Cases" .

Julia Programming Language . 2 May 2023 . Retrieved 4 May 2023 .

^ a b D'Cunha, Suparna Dutt (20 September 2017).

"How A New Programming Language Created By Four Scientists Now Used By The World's Biggest Companies" .

Forbes .

Archived from the original on 1 October 2022 . Retrieved 1 October 2022 .

^ "Julia for Election Security" . Julia Forem. 23 September 2022.

Archived from the original on 4 September 2024 . Retrieved 27 September 2022 .

^ "Nobel Laureate Thomas J. Sargent - JuliaHub" .

juliahub.com .

Archived from the original on 10 February 2023 . Retrieved 10 February 2023 .

Further reading [ edit ] Nagar, Sandeep (2017).

Beginning Julia Programming: For Engineers and Scientists . Springer.

ISBN 978-1-4842-3171-5 .

Bezanson, J; Edelman, A; Karpinski, S; Shah, V. B (2017). "Julia: A fresh approach to numerical computing".

SIAM Review .

59 (1): 65– 98.

arXiv : 1411.1607 .

CiteSeerX 10.1.1.760.8894 .

doi : 10.1137/141000671 .

S2CID 13026838 .

Joshi, Anshul (2016).

Julia for Data Science － Explore the world of data science from scratch with Julia by your side . Packt.

ISBN 978-1-78355-386-0 .

Tobin A Driscoll and Richard J. Braun (Aug. 2022).

Fundamentals of Numerical Computation: Julia Edition . SIAM.

ISBN 978-1-611977-00-4 .

C. T. Kelley (2022).

Solving Nonlinear Equations with Iterative Methods: Solvers and Examples in Julia , SIAM.

ISBN 978-1-611977-26-4 .

Kalicharan, Noel (2021).

Julia - Bit by Bit . Undergraduate Topics in Computer Science. Springer.

doi : 10.1007/978-3-030-73936-2 .

ISBN 978-3-030-73936-2 .

S2CID 235917112 .

Clemens Heitzinger (2022): Algorithms with Julia , Springer, ISBN 978-3-031-16559-7.

Kenneth Lange (Jun. 2025): Algorithms from THE BOOK (2nd Ed.), SIAM, ISBN 978-1-61197-838-4.

External links [ edit ] Wikibooks has a book on the topic of: Introducing Julia Official website Julia on GitHub v t e Programming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more...

Lists: Alphabetical Categorical Generational Non-English-based Category v t e Free and open-source software General Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Software packages Audio Bioinformatics Codecs Configuration management Drivers Graphics Wireless Health Mathematics Office suites Operating systems Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Events Advocacy Organisations Free Software Movement of India Free Software Foundation Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU AGPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Challenges Digital rights management License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Tivoization Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category v t e Numerical-analysis software Free Advanced Simulation Library ADMB Chapel Euler Mathematical Toolbox FreeFem++ FreeMat Genius Gmsh GNU Octave gretl Julia Jupyter ( Ju lia, Pyt hon, R ; IPython ) MFEM OpenFOAM Python R SageMath Salome ScicosLab Scilab X10 Weka Discontinued Fortress Proprietary DADiSP FEATool Multiphysics GAUSS LabVIEW Maple Mathcad Mathematica MATLAB MWorks SAS ( SAS Viya ) Speakeasy VisSim Comparison v t e Mathematical optimization software Data formats Mathematica MPS nl sol Modeling tools AIMMS AMPL APMonitor ECLiPSe -CLP Gekko GAMS GNU MathProg JuMP LINDO OPL Mathematica MiniZinc OptimJ PuLP Pyomo TOMLAB Xpress Mosel ZIMPL CasADi Solvers LP , MILP ∗ APOPT ∗ ANTIGONE ∗ Artelys Knitro ∗ BCP ∗ CLP CBC ∗ CPLEX ∗ FortMP ∗ GCG ∗ GLOP ∗ GLPK/GLPSOL ∗ Gurobi Optimizer ∗ HiGHS ∗ LINDO ∗ Lp_solve LOQO Mathematica MINOS MINTO ∗ MOSEK ∗ NAG SCIP ∗ SoPlex Octeract Engine ∗ SYMPHONY ∗ Xpress Optimizer ∗ QP , MIQP ∗ APOPT ∗ ANTIGONE ∗ Artelys Knitro ∗ CBC ∗ CLP CPLEX ∗ FortMP ∗ HiGHS Gurobi Optimizer ∗ IPOPT LINDO ∗ Mathematica MINOS MOSEK ∗ NAG Octeract Engine ∗ SCIP ∗ Xpress Optimizer ∗ QCP , MIQCP ∗ APOPT ∗ ANTIGONE ∗ Artelys Knitro ∗ CPLEX ∗ Gurobi Optimizer ∗ IPOPT LINDO ∗ Mathematica MINOS MOSEK ∗ NAG SCIP ∗ Octeract Engine ∗ Xpress Optimizer ∗ Xpress NonLinear ∗ SOCP , MISOCP ∗ Artelys Knitro ∗ CPLEX ∗ Gurobi Optimizer ∗ LINDO ∗ LOQO Mathematica MOSEK ∗ NAG SCIP ∗ Xpress Optimizer ∗ SDP , MISDP ∗ Mathematica MOSEK NAG NLP , MINLP ∗ AOA ∗ APOPT ∗ ANTIGONE ∗ Artelys Knitro ∗ BARON ∗ Couenne ∗ Galahad library Gurobi Optimizer ∗ IPOPT LINDO ∗ LOQO MIDACO ∗ MINOS NAG NLPQLP NPSOL SCIP ∗ SNOPT ∗ Octeract Engine ∗ WORHP Xpress NonLinear ∗ GO ANTIGONE ∗ BARON Couenne ∗ Xpress Global Mathematica LINDO SCIP Octeract Engine CP Artelys Kalis Comet CPLEX CP Optimizer Gecode Mathematica JaCoP Xpress Kalis List of optimization software Comparison of optimization software v t e Statistical software Public domain Dataplot Epi Info CSPro X-12-ARIMA Open-source ADMB DAP gretl jamovi JASP JAGS JMulTi Julia Jupyter ( Ju lia, Py thon, R ) GNU Octave OpenBUGS Orange PSPP Python (statsmodels, PyMC , IPython , IDLE ) R ( RStudio ) SageMath SimFiT SOFA Statistics Stan XLispStat Freeware BV4.1 CumFreq SegReg XploRe WinBUGS Commercial Cross-platform Data Desk GAUSS GraphPad InStat GraphPad Prism IBM SPSS Statistics IBM SPSS Modeler JMP Maple Mathcad Mathematica MATLAB OxMetrics RATS Revolution Analytics SAS ( SAS Viya ) SmartPLS Stata StatView SUDAAN S-PLUS TSP World Programming System (WPS) Windows only BMDP EViews GenStat LIMDEP LISREL MedCalc Microfit Minitab MLwiN NCSS Shazam SigmaStat Statistica StatsDirect StatXact SYSTAT The Unscrambler Unistat Excel add-ons Analyse-it Unistat for Excel XLfit RExcel Comparison • Category v t e Differentiable computing General Differentiable programming Information geometry Statistical manifold Automatic differentiation Neuromorphic computing Pattern recognition Ricci calculus Computational learning theory Inductive bias Hardware IPU TPU VPU Memristor SpiNNaker Software libraries TensorFlow PyTorch Keras scikit-learn Theano JAX Flux.jl MindSpore Portals Computer programming Technology Authority control databases International FAST National United States France BnF data Israel Other Yale LUX Retrieved from " https://en.wikipedia.org/w/index.php?title=Julia_(programming_language)&oldid=1301136329 " Categories : 2012 software Array programming languages Notebook interface Cross-platform software Data mining and machine learning software Data-centric programming languages Dynamically typed programming languages Free and open source compilers Free and open source interpreters Free computer libraries Free data analysis software Free data and information visualization software Free software programmed in C Free software programmed in Julia Free software projects Free statistical software Functional languages High-level programming languages Homoiconic programming languages Lisp programming language family Multi-paradigm programming languages Numerical analysis software for Linux Numerical analysis software for macOS Numerical analysis software for Windows Numerical libraries Numerical linear algebra Numerical programming languages Object-oriented programming languages Parallel computing Procedural programming languages Programming languages Programming languages created in 2012 Software using the MIT license Statistical programming languages Text-oriented programming languages Programming languages supporting units of measure Hidden categories: CS1: unfit URL Articles with short description Short description is different from Wikidata Use dmy dates from October 2015 Official website different in Wikidata and Wikipedia Articles with example Julia code This page was last edited on 18 July 2025, at 07:45 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Julia (programming language) 32 languages Add topic

