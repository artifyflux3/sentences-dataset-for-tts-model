Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Statement in Church's and Turing's words 2 History Toggle History subsection 2.1 Circa 1930–1952 2.2 Later developments 2.3 The thesis as a definition 3 Success of the thesis 4 Informal usage in proofs 5 Variations 6 Philosophical implications 7 Non-computable functions 8 See also 9 Footnotes 10 References 11 External links Toggle the table of contents Church–Turing thesis 35 languages العربية Български Català Čeština Dansk Deutsch Eesti Español Esperanto فارسی Français 한국어 Hrvatski Bahasa Indonesia Italiano עברית Magyar മലയാളം Nederlands 日本語 Piemontèis Polski Português Română Русский Simple English Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska Tagalog Türkçe Українська 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Thesis on the nature of computability "Church's thesis" redirects here. For the axiom CT in constructive mathematics, see Church's thesis (constructive mathematics) .

In computability theory , the Church–Turing thesis (also known as computability thesis , [ 1 ] the Turing–Church thesis , [ 2 ] the Church–Turing conjecture , Church's thesis , Church's conjecture , and Turing's thesis ) is a thesis about the nature of computable functions . It states that a function on the natural numbers can be calculated by an effective method if and only if it is computable by a Turing machine . The thesis is named after American mathematician Alonzo Church and the British mathematician Alan Turing . Before the precise definition of computable function, mathematicians often used the informal term effectively calculable to describe functions that are computable by paper-and-pencil methods. In the 1930s, several independent attempts were made to formalize the notion of computability : In 1933, Kurt Gödel , with Jacques Herbrand , formalized the definition of the class of general recursive functions : the smallest class of functions (with arbitrarily many arguments) that is closed under composition , recursion , and minimization , and includes zero , successor , and all projections .

In 1936, Alonzo Church created a method for defining functions called the λ-calculus . Within λ-calculus, he defined an encoding of the natural numbers called the Church numerals . A function on the natural numbers is called λ-computable if the corresponding function on the Church numerals can be represented by a term of the λ-calculus.

Also in 1936, before learning of Church's work, [ 6 ] Alan Turing created a theoretical model for machines, now called Turing machines, that could carry out calculations from inputs by manipulating symbols on a tape. Given a suitable encoding of the natural numbers as sequences of symbols, a function on the natural numbers is called Turing computable if some Turing machine computes the corresponding function on encoded natural numbers.

Church, [ 7 ] Kleene , [ 8 ] and Turing [ 9 ] [ 11 ] proved that these three formally defined classes of computable functions coincide: a function is λ-computable if and only if it is Turing computable, and if and only if it is general recursive . This has led mathematicians and computer scientists to believe that the concept of computability is accurately characterized by these three equivalent processes. Other formal attempts to characterize computability have subsequently strengthened this belief (see below ).

On the other hand, the Church–Turing thesis states that the above three formally defined classes of computable functions coincide with the informal notion of an effectively calculable function. Although the thesis has near-universal acceptance, it cannot be formally proven, as the concept of effective calculability is only informally defined.

Since its inception, variations on the original thesis have arisen, including statements about what can physically be realized by a computer in our universe ( physical Church-Turing thesis ) and what can be efficiently computed ( Church–Turing thesis (complexity theory) ). These variations are not due to Church or Turing, but arise from later work in complexity theory and digital physics . The thesis also has implications for the philosophy of mind (see below ).

Statement in Church's and Turing's words [ edit ] See also: Effective method J. B. Rosser ( 1939 ) addresses the notion of "effective computability" as follows: "Clearly the existence of CC and RC (Church's and Rosser's proofs) presupposes a precise definition of 'effective'. 'Effective method' is here used in the rather special sense of a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps".

[ 12 ] Thus the adverb-adjective "effective" is used in a sense of "1a: producing a decided, decisive, or desired effect", and "capable of producing a result".

[ 13 ] [ 14 ] In the following, the words "effectively calculable" will mean "produced by any intuitively 'effective' means whatsoever" and "effectively computable" will mean "produced by a Turing-machine or equivalent mechanical device". Turing's "definitions" given in a footnote in his 1938 Ph.D. thesis Systems of Logic Based on Ordinals , supervised by Church, are virtually the same: † We shall use the expression "computable function" to mean a function calculable by a machine, and let "effectively calculable" refer to the intuitive idea without particular identification with any one of these definitions.

[ 15 ] The thesis can be stated as: Every effectively calculable function is a computable function .

[ 16 ] Church also stated that "No computational procedure will be considered as an algorithm unless it can be represented as a Turing Machine".

[ 17 ] Turing stated it this way: It was stated ... that "a function is effectively calculable if its values can be found by some purely mechanical process". We may take this literally, understanding that by a purely mechanical process one which could be carried out by a machine. The development ... leads to ... an identification of computability † with effective calculability. [ † is the footnote quoted above.] [ 15 ] History [ edit ] Main article: History of the Church–Turing thesis One of the important problems for logicians in the 1930s was the Entscheidungsproblem of David Hilbert and Wilhelm Ackermann , [ 18 ] which asked whether there was a mechanical procedure for separating mathematical truths from mathematical falsehoods. This quest required that the notion of "algorithm" or "effective calculability" be pinned down, at least well enough for the quest to begin.

[ 19 ] But from the very outset Alonzo Church's attempts began with a debate that continues to this day.

[ 20 ] Was [ clarify ] the notion of "effective calculability" to be (i) an "axiom or axioms" in an axiomatic system, (ii) merely a definition that "identified" two or more propositions, (iii) an empirical hypothesis to be verified by observation of natural events, or (iv) just a proposal for the sake of argument (i.e. a "thesis")?

Circa 1930–1952 [ edit ] In the course of studying the problem, Church and his student Stephen Kleene introduced the notion of λ-definable functions , and they were able to prove that several large classes of functions frequently encountered in number theory were λ-definable.

[ 21 ] The debate began when Church proposed to Gödel that one should define the "effectively computable" functions as the λ-definable functions. Gödel, however, was not convinced and called the proposal "thoroughly unsatisfactory".

[ 22 ] Rather, in correspondence with Church (c. 1934–1935), Gödel proposed axiomatizing the notion of "effective calculability"; indeed, in a 1935 letter to Kleene, Church reported that: His [Gödel's] only idea at the time was that it might be possible, in terms of effective calculability as an undefined notion, to state a set of axioms which would embody the generally accepted properties of this notion, and to do something on that basis.

[ 23 ] But Gödel offered no further guidance. Eventually, he would suggest his recursion, modified by Herbrand's suggestion, that Gödel had detailed in his 1934 lectures in Princeton, New Jersey (Kleene and Rosser transcribed the notes). But he did not think that the two ideas could be satisfactorily identified "except heuristically".

[ 24 ] Next, it was necessary to identify and prove the equivalence of two notions of effective calculability. Equipped with the λ-calculus and "general" recursion, Kleene with help of Church and J. Barkley Rosser produced proofs (1933, 1935) to show that the two calculi are equivalent. Church subsequently modified his methods to include use of Herbrand–Gödel recursion and then proved (1936) that the Entscheidungsproblem is unsolvable: there is no algorithm that can determine whether a well formed formula has a beta normal form .

[ 25 ] Many years later in a letter to Davis (c. 1965), Gödel said that "he was, at the time of these [1934] lectures, not at all convinced that his concept of recursion comprised all possible recursions".

[ 26 ] By 1963–1964 Gödel would disavow Herbrand–Gödel recursion and the λ-calculus in favor of the Turing machine as the definition of "algorithm" or "mechanical procedure" or "formal system".

[ 27 ] A hypothesis leading to a natural law?

: In late 1936 Alan Turing's paper (also proving that the Entscheidungsproblem is unsolvable) was delivered orally, but had not yet appeared in print.

[ 28 ] On the other hand, Emil Post 's 1936 paper had appeared and was certified independent of Turing's work.

[ 29 ] Post strongly disagreed with Church's "identification" of effective computability with the λ-calculus and recursion, stating: Actually the work already done by Church and others carries this identification considerably beyond the working hypothesis stage. But to mask this identification under a definition ... blinds us to the need of its continual verification.

[ 30 ] Rather, he regarded the notion of "effective calculability" as merely a "working hypothesis" that might lead by inductive reasoning to a " natural law " rather than by "a definition or an axiom".

[ 31 ] This idea was "sharply" criticized by Church.

[ 32 ] Thus, Post in his 1936 paper was also discounting Gödel's suggestion to Church in 1934–1935 that the thesis might be expressed as an axiom or set of axioms.

[ 23 ] Turing adds another definition, Rosser equates all three : Within just a short time, Turing's 1936–1937 paper "On Computable Numbers, with an Application to the Entscheidungsproblem " [ 28 ] appeared. In it he stated another notion of "effective computability" with the introduction of his a-machines (now known as the Turing machine abstract computational model). In a proof-sketch added as an appendix to his 1936–1937 paper, Turing showed that the classes of functions defined by λ-calculus and Turing machines coincided.

[ 33 ] Church was quick to recognise how compelling Turing's analysis was. In his review of Turing's paper he made clear that Turing's notion made "the identification with effectiveness in the ordinary (not explicitly defined) sense evident immediately".

[ 34 ] In a few years (1939) Turing would propose, like Church and Kleene before him, that his formal definition of mechanical computing agent was the correct one.

[ 35 ] Thus, by 1939, both Church (1934) and Turing (1939) had individually proposed that their "formal systems" should be definitions of "effective calculability"; [ 36 ] neither framed their statements as theses .

Rosser (1939) formally identified the three notions-as-definitions: All three definitions are equivalent, so it does not matter which one is used.

[ 37 ] Kleene proposes Thesis I : This left the overt expression of a "thesis" to Kleene. In 1943 Kleene proposed his "Thesis I": [ 38 ] This heuristic fact [general recursive functions are effectively calculable] ... led Church to state the following thesis. The same thesis is implicit in Turing's description of computing machines.

Thesis I.

Every effectively calculable function (effectively decidable predicate) is general recursive [Kleene's italics] Since a precise mathematical definition of the term effectively calculable (effectively decidable) has been wanting, we can take this thesis ... as a definition of it ...

...the thesis has the character of an hypothesis—a point emphasized by Post and by Church. If we consider the thesis and its converse as definition, then the hypothesis is an hypothesis about the application of the mathematical theory developed from the definition. For the acceptance of the hypothesis, there are, as we have suggested, quite compelling grounds.

The Church–Turing Thesis : Stephen Kleene, in Introduction to Metamathematics , finally goes on to formally name "Church's Thesis" and "Turing's Thesis", using his theory of recursive realizability, having switched from presenting his work in the terminology of Church–Kleene lambda definability to that of Gödel–Kleene recursiveness (partial recursive functions). In this transition, Kleene modified Gödel's general recursive functions to allow for proofs of the unsolvability of problems in the intuitionism of E. J. Brouwer. In his graduate textbook on logic, "Church's thesis" is introduced and basic mathematical results are demonstrated to be unrealizable. Next, Kleene proceeds to present "Turing's thesis", where results are shown to be uncomputable, using his simplified derivation of a Turing machine based on the work of Emil Post. Both theses are proven equivalent by use of "Theorem XXX".

Thesis I.

Every effectively calculable function (effectively decidable predicate) is general recursive .

[ 39 ] Theorem XXX: The following classes of partial functions are coextensive, i.e. have the same members: (a) the partial recursive functions, (b) the computable functions ...

[ 40 ] Turing's thesis: Turing's thesis that every function which would naturally be regarded as computable is computable under his definition, i.e. by one of his machines, is equivalent to Church's thesis by Theorem XXX.

[ 40 ] Kleene, finally, uses for the first time the term the "Church-Turing thesis" in a section in which he helps to give clarifications to concepts in Alan Turing's paper "The Word Problem in Semi-Groups with Cancellation", as demanded in a critique from William Boone.

[ 41 ] Later developments [ edit ] An attempt to better understand the notion of "effective computability" led Robin Gandy (Turing's student and friend) in 1980 to analyze machine computation (as opposed to human-computation acted out by a Turing machine). Gandy's curiosity about, and analysis of, cellular automata (including Conway's game of life ), parallelism, and crystalline automata, led him to propose four "principles (or constraints) ... which it is argued, any machine must satisfy." [ 42 ] His most-important fourth, "the principle of causality" is based on the "finite velocity of propagation of effects and signals; contemporary physics rejects the possibility of instantaneous action at a distance".

[ 43 ] From these principles and some additional constraints—(1a) a lower bound on the linear dimensions of any of the parts, (1b) an upper bound on speed of propagation (the velocity of light), (2) discrete progress of the machine, and (3) deterministic behavior—he produces a theorem that "What can be calculated by a device satisfying principles I–IV is computable." [ 44 ] In the late 1990s Wilfried Sieg analyzed Turing's and Gandy's notions of "effective calculability" with the intent of "sharpening the informal notion, formulating its general features axiomatically, and investigating the axiomatic framework".

[ 45 ] In his 1997 and 2002 work Sieg presents a series of constraints on the behavior of a computor —"a human computing agent who proceeds mechanically". These constraints reduce to: "(B.1) (Boundedness) There is a fixed bound on the number of symbolic configurations a computor can immediately recognize.

"(B.2) (Boundedness) There is a fixed bound on the number of internal states a computor can be in.

"(L.1) (Locality) A computor can change only elements of an observed symbolic configuration.

"(L.2) (Locality) A computor can shift attention from one symbolic configuration to another one, but the new observed configurations must be within a bounded distance of the immediately previously observed configuration.

"(D) (Determinacy) The immediately recognizable (sub-)configuration determines uniquely the next computation step (and id [instantaneous description])"; stated another way: "A computor's internal state together with the observed configuration fixes uniquely the next computation step and the next internal state." [ 46 ] The matter remains in active discussion within the academic community.

[ 47 ] [ 48 ] The thesis as a definition [ edit ] The thesis can be viewed as nothing but an ordinary mathematical definition. Comments by Gödel on the subject suggest this view, e.g. "the correct definition of mechanical computability was established beyond any doubt by Turing".

[ 49 ] The case for viewing the thesis as nothing more than a definition is made explicitly by Robert I. Soare , [ 5 ] where it is also argued that Turing's definition of computability is no less likely to be correct than the epsilon-delta definition of a continuous function .

Success of the thesis [ edit ] Other formalisms (besides recursion, the λ-calculus, and the Turing machine) have been proposed for describing effective calculability/computability. Kleene (1952) adds to the list the functions " reckonable in the system S 1 " of Kurt Gödel 1936, and Emil Post's (1943, 1946) " canonical [also called normal ] systems ".

[ 50 ] In the 1950s Hao Wang and Martin Davis greatly simplified the one-tape Turing-machine model (see Post–Turing machine ).

Marvin Minsky expanded the model to two or more tapes and greatly simplified the tapes into "up-down counters", which Melzak and Lambek further evolved into what is now known as the counter machine model. In the late 1960s and early 1970s researchers expanded the counter machine model into the register machine , a close cousin to the modern notion of the computer . Other models include combinatory logic and Markov algorithms . Gurevich adds the pointer machine model of Kolmogorov and Uspensky (1953, 1958): "... they just wanted to ... convince themselves that there is no way to extend the notion of computable function." [ 51 ] All these contributions involve proofs that the models are computationally equivalent to the Turing machine; such models are said to be Turing complete . Because all these different attempts at formalizing the concept of "effective calculability/computability" have yielded equivalent results, it is now generally assumed that the Church–Turing thesis is correct. In fact, Gödel (1936) proposed something stronger than this; he observed that there was something "absolute" about the concept of "reckonable in S 1 ": It may also be shown that a function which is computable ['reckonable'] in one of the systems S i , or even in a system of transfinite type, is already computable [reckonable] in S 1 . Thus the concept 'computable' ['reckonable'] is in a certain definite sense 'absolute', while practically all other familiar metamathematical concepts (e.g. provable, definable, etc.) depend quite essentially on the system to which they are defined ...

[ 52 ] Informal usage in proofs [ edit ] Proofs in computability theory often invoke the Church–Turing thesis in an informal way to establish the computability of functions while avoiding the (often very long) details which would be involved in a rigorous, formal proof.

[ 53 ] To establish that a function is computable by Turing machine, it is usually considered sufficient to give an informal English description of how the function can be effectively computed, and then conclude "by the Church–Turing thesis" that the function is Turing computable (equivalently, partial recursive).

Dirk van Dalen gives the following example for the sake of illustrating this informal use of the Church–Turing thesis: [ 54 ] Example: Each infinite recursively enumerable (RE) set contains an infinite recursive set .

Proof: Let A be infinite RE. We list the elements of A effectively, n 0 , n 1 , n 2 , n 3 , ...

From this list we extract an increasing sublist: put m 0 = n 0 , after finitely many steps we find an n k such that n k > m 0 , put m 1 = n k . We repeat this procedure to find m 2 > m 1 , etc. this yields an effective listing of the subset B={m 0 , m 1 , m 2 ,...} of A, with the property m i < m i+1 .

Claim . B is decidable. For, in order to test k in B we must check if k = m i for some i. Since the sequence of m i 's is increasing we have to produce at most k+1 elements of the list and compare them with k. If none of them is equal to k, then k not in B. Since this test is effective, B is decidable and, by Church's thesis , recursive.

In order to make the above example completely rigorous, one would have to carefully construct a Turing machine, or λ-function, or carefully invoke recursion axioms, or at best, cleverly invoke various theorems of computability theory. But because the computability theorist believes that Turing computability correctly captures what can be computed effectively, and because an effective procedure is spelled out in English for deciding the set B, the computability theorist accepts this as proof that the set is indeed recursive.

Variations [ edit ] The success of the Church–Turing thesis prompted variations of the thesis to be proposed. For example, the physical Church–Turing thesis states: "All physically computable functions are Turing-computable." [ 55 ] : 101 The Church–Turing thesis says nothing about the efficiency with which one model of computation can simulate another. It has been proved for instance that a (multi-tape) universal Turing machine only suffers a logarithmic slowdown factor in simulating any Turing machine.

[ 56 ] A variation of the Church–Turing thesis addresses whether an arbitrary but "reasonable" model of computation can be efficiently simulated. This is called the feasibility thesis , [ 57 ] also known as the ( classical ) complexity-theoretic Church–Turing thesis or the extended Church–Turing thesis , which is not due to Church or Turing, but rather was realized gradually in the development of complexity theory . It states: [ 58 ] "A probabilistic Turing machine can efficiently simulate any realistic model of computation." The word 'efficiently' here means up to polynomial-time reductions . This thesis was originally called computational complexity-theoretic Church–Turing thesis by Ethan Bernstein and Umesh Vazirani (1997). The complexity-theoretic Church–Turing thesis, then, posits that all 'reasonable' models of computation yield the same class of problems that can be computed in polynomial time. Assuming the conjecture that probabilistic polynomial time ( BPP ) equals deterministic polynomial time ( P ), the word 'probabilistic' is optional in the complexity-theoretic Church–Turing thesis. A similar thesis, called the invariance thesis , was introduced by Cees F. Slot and Peter van Emde Boas. It states: " 'Reasonable' machines can simulate each other within a polynomially bounded overhead in time and a constant-factor overhead in space." [ 59 ] The thesis originally appeared in a paper at STOC '84, which was the first paper to show that polynomial-time overhead and constant-space overhead could be simultaneously achieved for a simulation of a Random Access Machine on a Turing machine.

[ 60 ] If BQP is shown to be a strict superset of BPP , it would invalidate the complexity-theoretic Church–Turing thesis. In other words, there would be efficient quantum algorithms that perform tasks that do not have efficient probabilistic algorithms . This would not however invalidate the original Church–Turing thesis, since a quantum computer can always be simulated by a Turing machine, but it would invalidate the classical complexity-theoretic Church–Turing thesis for efficiency reasons. Consequently, the quantum complexity-theoretic Church–Turing thesis states: [ 58 ] "A quantum Turing machine can efficiently simulate any realistic model of computation." Eugene Eberbach and Peter Wegner claim that the Church–Turing thesis is sometimes interpreted too broadly, stating "Though [...] Turing machines express the behavior of algorithms, the broader assertion that algorithms precisely capture what can be computed is invalid".

[ 61 ] They claim that forms of computation not captured by the thesis are relevant today, terms which they call super-Turing computation .

Philosophical implications [ edit ] Philosophers have interpreted the Church–Turing thesis as having implications for the philosophy of mind .

[ 62 ] [ 63 ] [ 64 ] B. Jack Copeland states that it is an open empirical question whether there are actual deterministic physical processes that, in the long run, elude simulation by a Turing machine; furthermore, he states that it is an open empirical question whether any such processes are involved in the working of the human brain.

[ 65 ] There are also some important open questions which cover the relationship between the Church–Turing thesis and physics, and the possibility of hypercomputation . When applied to physics, the thesis has several possible meanings: The universe is equivalent to a Turing machine; thus, computing non-recursive functions is physically impossible. This has been termed the strong Church–Turing thesis, or Church–Turing–Deutsch principle , and is a foundation of digital physics .

The universe is not equivalent to a Turing machine (i.e., the laws of physics are not Turing-computable), but incomputable physical events are not "harnessable" for the construction of a hypercomputer . For example, a universe in which physics involves random real numbers , as opposed to computable reals , would fall into this category.

The universe is a hypercomputer , and it is possible to build physical devices to harness this property and calculate non-recursive functions. For example, it is an open question whether all quantum mechanical events are Turing-computable, although it is known that rigorous models such as quantum Turing machines are equivalent to deterministic Turing machines. (They are not necessarily efficiently equivalent; see above.) John Lucas and Roger Penrose have suggested that the human mind might be the result of some kind of quantum-mechanically enhanced, "non-algorithmic" computation.

[ 66 ] [ 67 ] There are many other technical possibilities which fall outside or between these three categories, but these serve to illustrate the range of the concept.

Philosophical aspects of the thesis, regarding both physical and biological computers, are also discussed in Odifreddi's 1989 textbook on recursion theory.

[ 68 ] : 101–123 Non-computable functions [ edit ] This section relies largely or entirely upon a single source .

Relevant discussion may be found on the talk page . Please help improve this article by introducing citations to additional sources at this section.

( November 2017 ) ( Learn how and when to remove this message ) One can formally define functions that are not computable. A well-known example of such a function is the Busy Beaver function. This function takes an input n and returns the largest number of symbols that a Turing machine with n states can print before halting, when run with no input. Finding an upper bound on the busy beaver function is equivalent to solving the halting problem , a problem known to be unsolvable by Turing machines. Since the busy beaver function cannot be computed by Turing machines, the Church–Turing thesis states that this function cannot be effectively computed by any method.

Several computational models allow for the computation of (Church-Turing) non-computable functions. These are known as hypercomputers .

Mark Burgin argues that super-recursive algorithms such as inductive Turing machines disprove the Church–Turing thesis.

[ 69 ] [ page needed ] His argument relies on a definition of algorithm broader than the ordinary one, so that non-computable functions obtained from some inductive Turing machines are called computable. This interpretation of the Church–Turing thesis differs from the interpretation commonly accepted in computability theory, discussed above. The argument that super-recursive algorithms are indeed algorithms in the sense of the Church–Turing thesis has not found broad acceptance within the computability research community.

[ citation needed ] See also [ edit ] Abstract machine Church's thesis in constructive mathematics Church–Turing–Deutsch principle , which states that every physical process can be simulated by a universal computing device Computability logic Computability theory Decidability Hypercomputation Model of computation Oracle (computer science) Super-recursive algorithm Turing completeness Footnotes [ edit ] ^ Soare, Robert I. (2009-09-01).

"Turing oracle machines, online computing, and three displacements in computability theory" .

Annals of Pure and Applied Logic . Computation and Logic in the Real World: CiE 2007.

160 (3): 368– 399.

doi : 10.1016/j.apal.2009.01.008 .

ISSN 0168-0072 .

^ Conrad, Michael (May 1985). "On design principles for a molecular computer".

Communications of the ACM .

28 (5): 464– 480.

doi : 10.1145/3532.3533 .

^ Correspondence between Max Newman and Church in Alonzo Church papers ^ Turing, Alan (2004).

The essential Turing : seminal writings in computing, logic, philosophy, artificial intelligence, and artificial life, plus the secrets of Enigma (PDF) . Oxford: Clarendon Press. p. 44.

ISBN 9780198250791 . Retrieved 2021-12-06 .

^ a b Soare, Robert I.

(September 1996). "Computability and Recursion".

Bulletin of Symbolic Logic .

2 (3): 284– 321.

CiteSeerX 10.1.1.35.5803 .

doi : 10.2307/420992 .

JSTOR 420992 .

S2CID 5894394 .

^ Church's paper was presented to the American Mathematical Society on 19 April 1935 and published on 15 April 1936. Turing, who had made substantial progress in writing up his own results, was disappointed to learn of Church's proof upon its publication.

[ 3 ] [ 4 ] Turing quickly completed his paper and rushed it to publication; it was received by the Proceedings of the London Mathematical Society on 28 May 1936, read on 12 November 1936, and published in series 2, volume 42 (1936–1937); it appeared in two sections: in Part 3 (pages 230–240), issued on 30 November 1936 and in Part 4 (pages 241–265), issued on 23 December 1936; Turing added corrections in volume 43 (1937), pp. 544–546.

[ 5 ] : 45 ^ Church 1936a ^ Kleene 1936 ^ Turing 1937a ^ Kleene 1936 ^ Turing 1937b . Proof outline on p. 153: λ λ -definable {\displaystyle \lambda {\mbox{-definable}}} ⟹ ⟹ t r i v {\displaystyle {\stackrel {triv}{\implies }}} λ λ - K -definable {\displaystyle \lambda {\mbox{-}}K{\mbox{-definable}}} ⟹ ⟹ 160 {\displaystyle {\stackrel {160}{\implies }}} Turing computable {\displaystyle {\mbox{Turing computable}}} ⟹ ⟹ 161 {\displaystyle {\stackrel {161}{\implies }}} μ μ -recursive {\displaystyle \mu {\mbox{-recursive}}} ⟹ ⟹ K l e e n e {\displaystyle {\stackrel {Kleene}{\implies }}} [ 10 ] λ λ -definable {\displaystyle \lambda {\mbox{-definable}}} ^ Rosser 1939 in Davis 1965 :225.

^ "effective".

Merriam Webster's New Collegiate Dictionary (9th ed.).

^ See also "effective".

Merriam-Webster's Online Dictionary (11th ed.) . Retrieved 2014-07-26 , which also gives these definitions for "effective" – the first ["producing a decided, decisive, or desired effect"] as the definition for sense "1a" of the word "effective", and the second ["capable of producing a result"] as part of the "Synonym Discussion of EFFECTIVE" there, (in the introductory part, where it summarizes the similarities between the meanings of the words "effective", "effectual", "efficient", and "efficacious").

^ a b Turing, A. M. (1938).

Systems of Logic Based on Ordinals (PDF) (PhD). Princeton University. p. 8. Archived from the original (PDF) on 2012-10-23 . Retrieved 2012-06-23 .

^ Gandy (1980 :123) states it this way: "What is effectively calculable is computable." He calls this "Church's Thesis".

^ Copeland, B. Jack (2024), Zalta, Edward N.; Nodelman, Uri (eds.), "The Church-Turing Thesis" , The Stanford Encyclopedia of Philosophy (Winter 2024 ed.), Metaphysics Research Lab, Stanford University , retrieved 2025-06-11 ^ Hilbert, David; Ackermann, Wilhelm (1972) [1st ed. 1928].

Grundzüge der theoretischen Logik [ Fundamentals of Theoretical Logic ] (in German) (6th ed.). Berlin, Germany: Springer.

ISBN 3-540-05843-5 .

Published in English translation as Principles of Mathematical Logic (1950). Providence, Rhode Island, USA: AMS Chelsea Publishing.

^ Davis's commentary before Church 1936 harvnb error: no target: CITEREFChurch1936 ( help ) [ ambiguous ] in Davis 1965 :88. Church uses the words "effective calculability" on page 100ff.

^ In his review of Church's Thesis after 70 Years edited by Adam Olszewski et al. 2006, Peter Smith 's criticism of a paper by Muraswski and Wolenski suggests 4 "lines" re the status of the Church–Turing Thesis: (1) empirical hypothesis, (2) axiom or theorem, (3) definition, (4) explication. But Smith opines that (4) is indistinguishable from (3).

Smith, Peter (2007-07-11).

"Church's Thesis after 70 Years" (PDF) .

Logic Matters .

^ Footnote 3 in Church 1936a An Unsolvable Problem of Elementary Number Theory , in Davis 1965 :89.

^ Dawson 1997 :99.

^ a b Sieg 1997 :160 harvcolnb error: no target: CITEREFSieg1997 ( help ) .

[ missing long citation ] ^ Sieg 1997 :160 harvcolnb error: no target: CITEREFSieg1997 ( help ) , [ missing long citation ] quoting from the 1935 letter written by Church to Kleene, Footnote 3 in Gödel 1934 harvnb error: no target: CITEREFGödel1934 ( help ) in Davis 1965 :44.

^ Church 1936 harvnb error: no target: CITEREFChurch1936 ( help ) [ ambiguous ] in Davis 1965 :105ff.

^ Davis's commentary before Gödel 1934 harvnb error: no target: CITEREFGödel1934 ( help ) in Davis 1965 :40.

^ For a detailed discussion of Gödel's adoption of Turing's machines as models of computation, see Shagrir, Oron (2006-06-15).

"Gödel on Turing on Computability" (PDF) .

Church's Thesis After 70 Years . De Gruyter. pp.

393– 419.

doi : 10.1515/9783110325461.393 .

ISBN 978-3-11-032494-5 . Archived from the original (PDF) on 2015-12-17 . Retrieved 2016-02-08 .

^ a b Turing 1937a .

^ Editor's footnote to Post 1936 Finite Combinatory Process. Formulation I.

at Davis 1965 :289.

^ Post 1936 in Davis 1965 :291, footnote 8.

^ Post 1936 in Davis 1952 :291 harvcolnb error: no target: CITEREFDavis1952 ( help ) .

^ Sieg 1997 :171 and 176–177 harvcolnb error: no target: CITEREFSieg1997 ( help ) .

[ missing long citation ] ^ Turing 1936–1937 in Davis 1965 :263ff.

^ Church 1937 .

^ Turing 1939 in Davis:160.

[ year needed ] ^ Church 1934 in Davis 1965 :100, also Turing 1939 in Davis 1965 :160.

^ Italics added, Rosser 1939 in Davis 1965 :226.

^ Kleene 1943 , p. 60 in Davis 1965 :274. Footnotes omitted.

^ Kleene 1952 :300.

^ a b Kleene 1952 :376.

^ Kleene 1952 :382, 536 ^ Gandy 1980 :123ff.

^ Gandy 1980 :135 ^ Gandy 1980 :126 ^ Sieg 1998–1999 in Sieg, Sommer & Talcott 2002 :390ff.; also Sieg 1997 :154ff.

harvcolnb error: no target: CITEREFSieg1997 ( help ) ^ In a footnote Sieg breaks Post's 1936 (B) into (B.1) and (B.2) and (L) into (L.1) and (L.2) and describes (D) differently. With respect to his proposed Gandy machine he later adds LC.1, LC.2, GA.1 and GA.2. These are complicated; see Sieg 1998–1999 in Sieg, Sommer & Talcott 2002 :390ff.

^ A collection of papers can be found in Olszewski, Woleński & Janusz (2006) . Also a review of this collection: Smith, Peter (2007-07-11).

"Church's Thesis after 70 Years" (PDF) .

^ See also Hodges, Andrew (2005).

"Did Church and Turing Have a Thesis about Machines?" (PDF) . Archived from the original (PDF) on 2016-03-04 . Retrieved 2014-07-27 .

^ Gödel, Kurt (1995) [193?].

"Undecidable Diophantine Propositions" . In Feferman, Solomon (ed.).

Collected Works . Vol. 3. New York: Oxford University Press . p.

168 .

ISBN 978-0-19-507255-6 .

OCLC 928791907 .

^ Kleene 1952:320 ^ Gurevich 1988:2 ^ Translation of Gödel (1936) by Davis in The Undecidable p. 83, differing in the use of the word 'reckonable' in the translation in Kleene (1952) p. 321 ^ Horsten in Olszewski, Woleński & Janusz 2006 :256.

^ Gabbay 2001 :284 ^ Piccinini, Gualtiero (January 2007).

"Computationalism, the Church–Turing Thesis, and the Church–Turing Fallacy" (PDF) .

Synthese .

154 (1): 97– 120.

CiteSeerX 10.1.1.360.9796 .

doi : 10.1007/s11229-005-0194-z .

S2CID 494161 .

Archived (PDF) from the original on 2008-04-24.

^ Arora, Sanjeev; Barak, Boaz (2009).

Complexity Theory: A Modern Approach .

Cambridge University Press .

ISBN 978-0-521-42426-4 .

Sections 1.4, "Machines as strings and the universal Turing machine" and 1.7, "Proof of theorem 1.9".

^ "Official Problem Description" (PDF) . Archived from the original (PDF) on 2005-11-24.

^ a b Kaye, Phillip; Laflamme, Raymond; Mosca, Michele (2007).

An introduction to quantum computing . Oxford University Press. pp.

5– 6.

ISBN 978-0-19-857049-3 .

^ van Emde Boas, Peter (1990). "Machine Models and Simulations".

Handbook of Theoretical Computer Science A .

Elsevier . p. 5.

^ Slot, C.; van Emde Boas, P. (December 1984).

On tape versus core: an application of space efficient perfect hash functions to the invariance of space .

STOC .

^ Eberbach & Wegner 2003 , p. 287.

^ Abramson, Darren (2011).

"Philosophy of mind is (in part) philosophy of computer science" .

Minds and Machines .

21 (2): 203– 219.

doi : 10.1007/s11023-011-9236-0 .

S2CID 32116031 .

^ Copeland, B. Jack (2017-11-10).

"The Church-Turing Thesis" . In Zalta, Edward N.

(ed.).

Stanford Encyclopedia of Philosophy .

^ For a good place to encounter original papers see Chalmers, David J.

, ed. (2002).

Philosophy of Mind: Classical and Contemporary Readings . New York: Oxford University Press.

ISBN 978-0-19-514581-6 .

OCLC 610918145 .

^ Copeland, B. Jack (2004). "Computation". In Floridi, Luciano (ed.).

The Blackwell guide to the philosophy of computing and information . Wiley-Blackwell. p. 15.

ISBN 978-0-631-22919-3 .

^ cf.

Penrose, Roger (1990). "Algorithms and Turing machines".

The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics . Oxford: Oxford University Press. pp.

47– 49.

ISBN 978-0-19-851973-7 .

OCLC 456785846 .

^ Also the description of "the non-algorithmic nature of mathematical insight", Penrose, Roger (1990). "Where lies the physics of mind?".

The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics . Oxford: Oxford University Press. pp.

416– 418.

ISBN 978-0-19-851973-7 .

OCLC 456785846 .

^ Piergiorgio Odifreddi (1989).

Classical Recursion Theory . Studies in Logic and the Foundations of Mathematics. Vol. 125. Amsterdam, Netherlands: North Holland.

^ Burgin, Mark (2005).

Super-Recursive Algorithms . Monographs in Computer Science. New York: Springer.

ISBN 978-0-387-95569-8 .

OCLC 990755791 .

References [ edit ] Barwise, Jon ; Keisler, H.J.

; Kunen, Kenneth , eds. (1980).

The Kleene Symposium . Amsterdam: North-Holland Publishing Company.

ISBN 978-0-444-85345-5 .

Ben-Amram, A. M. (2005).

"The Church-Turing Thesis and its Look-Alikes" .

SIGACT News .

36 (3): 113– 116.

CiteSeerX 10.1.1.74.7308 .

doi : 10.1145/1086649.1086651 .

S2CID 13566703 . Archived from the original (PS) on 2017-07-06 . Retrieved 2017-10-24 .

Bernstein, E.; Vazirani, U. (1997). "Quantum complexity theory".

SIAM Journal on Computing .

26 (5): 1411– 1473.

CiteSeerX 10.1.1.655.1186 .

doi : 10.1137/S0097539796300921 .

Blass, Andreas ; Gurevich, Yuri (October 2003).

"Algorithms: A Quest for Absolute Definitions" (PDF) .

Bulletin of European Association for Theoretical Computer Science (81).

Archived (PDF) from the original on 2004-07-27.

[ page needed ] Burgin, Mark (2005). "Super-recursive algorithms".

Monographs in computer science . Springer.

ISBN 978-0-387-95569-8 .

Church, Alonzo (1932). "A set of Postulates for the Foundation of Logic".

Annals of Mathematics .

33 (2): 346– 366.

doi : 10.2307/1968337 .

JSTOR 1968337 .

Church, Alonzo (April 1936a).

"An Unsolvable Problem of Elementary Number Theory" (PDF) .

American Journal of Mathematics .

58 (2): 345– 363.

doi : 10.2307/2371045 .

JSTOR 2371045 .

S2CID 14181275 . Archived from the original (PDF) on 2020-02-27.

Church, Alonzo (June 1936b). "A Note on the Entscheidungsproblem".

Journal of Symbolic Logic .

1 (1): 40– 41.

doi : 10.2307/2269326 .

JSTOR 2269326 .

S2CID 42323521 .

Church, Alonzo (March 1937). "Review: A. M. Turing, On Computable Numbers, with an Application to the Entscheidungsproblem".

Journal of Symbolic Logic .

2 (1): 42– 43.

doi : 10.2307/2268810 .

JSTOR 2268810 .

Church, Alonzo (1941).

The Calculi of Lambda-Conversion . Princeton: Princeton University Press.

Cooper, S. B.; Odifreddi, P. (2003). "Incomputability in Nature". In S. B. Cooper; S. S. Goncharov (eds.).

Computability and Models: Perspectives East and West . Kluwer Academic/Plenum Publishers. pp.

137– 160.

Davis, Martin , ed. (1965).

The Undecidable, Basic Papers on Undecidable Propositions, Unsolvable Problems And Computable Functions . New York: Raven Press.

Includes original papers by Gödel, Church, Turing, Rosser, Kleene, and Post mentioned in this section.

Dawson, John W. Jr. (1997).

Logical Dilemmas: The Life and Work of Kurt Gödel . Wellesley, Massachusetts, US: A. K. Peters .

Eberbach, E.; Wegner, P. (October 2003).

"Beyond Turing Machines" (PDF) .

Bulletin of the European Association for Theoretical Computer Science (81): 279– 304.

CiteSeerX 10.1.1.61.9759 .

Archived (PDF) from the original on 2016-03-15.

Gabbay, D. M. (2001).

Handbook of Philosophical Logic . Vol. 1 (2nd ed.).

Gandy, Robin (1980). "Church's Thesis and the Principles for Mechanisms". In H. J. Barwise; H. J. Keisler; K. Kunen (eds.).

The Kleene Symposium . North-Holland Publishing Company. pp.

123– 148.

Gandy, Robin (1994). Herken, Rolf (ed.).

The universal Turing Machine: A Half-Century Survey . New York: Wien Springer–Verlag. pp. 51ff.

ISBN 978-3-211-82637-9 .

Gödel, Kurt (1965) [1934]. "On Undecidable Propositions of Formal Mathematical Systems". In Davis, Martin (ed.).

The Undecidable . Kleene and Rosser (lecture note-takers); Institute for Advanced Study (lecture sponsor). New York: Raven Press.

Gödel, Kurt (1936). "Über die Lāange von Beweisen" [On The Length of Proofs].

Ergenbnisse Eines Mathematishen Kolloquiums (in German) (7). Heft: 23– 24.

Cited by Kleene (1952) .

Gurevich, Yuri (June 1988). "On Kolmogorov Machines and Related Issues".

Bulletin of European Association for Theoretical Computer Science (35): 71– 82.

Gurevich, Yuri (July 2000).

"Sequential Abstract State Machines Capture Sequential Algorithms" (PDF) .

ACM Transactions on Computational Logic .

1 (1): 77– 111.

CiteSeerX 10.1.1.146.3017 .

doi : 10.1145/343369.343384 .

S2CID 2031696 .

Archived (PDF) from the original on 2003-10-16.

Herbrand, Jacques (1932). "Sur la non-contradiction de l'arithmétique".

Journal für die Reine und Angewandte Mathematik (in French).

166 : 1– 8.

doi : 10.1515/crll.1932.166.1 .

S2CID 116636410 .

Hofstadter, Douglas R.

(1999-02-05). "Chapter XVII: Church, Turing, Tarski, and Others".

Gödel, Escher, Bach: an Eternal Golden Braid (Twentieth-anniversary ed.).

Basic Books . pp.

559– 585.

ISBN 0-465-02656-7 .

Kleene, Stephen Cole (January 1935). "A Theory of Positive Integers in Formal Logic".

American Journal of Mathematics .

57 (1): 153–173 & 219–244.

doi : 10.2307/2372027 .

JSTOR 2372027 .

Kleene, Stephen Cole (1936). "Lambda-Definability and Recursiveness".

Duke Mathematical Journal .

2 (2): 340– 353.

doi : 10.1215/s0012-7094-36-00227-2 .

Kleene, Stephen Cole (1943).

"Recursive Predicates and Quantifiers" .

Transactions of the American Mathematical Society .

53 (1): 41– 73.

doi : 10.2307/1990131 .

JSTOR 1990131 .

Reprinted in The Undecidable , p. 255ff. Kleene refined his definition of "general recursion" and proceeded in his chapter "12. Algorithmic theories" to posit "Thesis I" (p. 274); he would later repeat this thesis (in Kleene 1952 :300) and name it "Church's Thesis" ( Kleene 1952 :317) (i.e., the Church thesis ).

Kleene, Stephen Cole (1952).

Introduction to Metamathematics . North-Holland.

OCLC 523942 .

Knuth, Donald (1973).

The Art of Computer Programming . Vol. 1/Fundamental Algorithms (2nd ed.). Addison–Wesley.

Kugel, Peter (November 2005). "It's time to think outside the computational box".

Communications of the ACM .

48 (11): 32– 37.

CiteSeerX 10.1.1.137.6939 .

doi : 10.1145/1096000.1096001 .

S2CID 29843806 .

Lewis, H.R.

; Papadimitriou, C.H.

(1998).

Elements of the Theory of Computation . Upper Saddle River, New Jersey, US: Prentice-Hall.

Manna, Zohar (2003) [1974].

Mathematical Theory of Computation . Dover.

ISBN 978-0-486-43238-0 .

{{ cite book }} :  CS1 maint: location missing publisher ( link ) Markov, A. A.

(1960) [1954]. "The Theory of Algorithms".

American Mathematical Society Translations .

2 (15): 1– 14.

Olszewski, Adam; Woleński, Jan; Janusz, Robert, eds. (2006).

Church's Thesis After 70 Years . Frankfurt: Ontos.

ISBN 978-3-938793-09-1 .

OCLC 909679288 .

Pour-El, M. B.

; Richards, J.I. (1989).

Computability in Analysis and Physics .

Springer Verlag .

Rosser, J. B.

(1939). "An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem".

The Journal of Symbolic Logic .

4 (2): 53– 60.

doi : 10.2307/2269059 .

JSTOR 2269059 .

S2CID 39499392 .

Sieg, Wilfried; Sommer, Richard; Talcott, Carolyn, eds. (2002).

Reflections on the Foundations of Mathematics: Essays in Honor of Solomon Feferman . Lecture Notes in Logic. Vol. 15.

A. K. Peters, Ltd.

ISBN 978-1-56881-169-7 .

Syropoulos, Apostolos (2008).

Hypercomputation: Computing Beyond the Church–Turing Barrier . Springer.

ISBN 978-0-387-30886-9 .

Turing, A. M.

(1937a) [Delivered to the Society November 1936], "On Computable Numbers, with an Application to the Entscheidungsproblem" (PDF) , Proceedings of the London Mathematical Society , 2, vol. 42, pp.

230– 265, doi : 10.1112/plms/s2-42.1.230 , S2CID 73712 and Turing, A. M. (1938). "On Computable Numbers, with an Application to the Entscheidungsproblem: A correction".

Proceedings of the London Mathematical Society . 2. Vol. 43 (published 1937). pp.

544– 546.

doi : 10.1112/plms/s2-43.6.544 .

(See also: Davis 1965 :115ff.) Turing, Alan Mathison (December 1937b).

"Computability and λ-Definability" (PDF) .

Journal of Symbolic Logic .

2 (4): 153– 163.

doi : 10.2307/2268280 .

JSTOR 2268280 .

S2CID 2317046 . Archived from the original (PDF) on 2020-08-09.

External links [ edit ] "The Church–Turing Thesis" entry  by B. Jack Copeland in the Stanford Encyclopedia of Philosophy .

"Computation in Physical Systems" entry  by Gualtiero Piccinini in the Stanford Encyclopedia of Philosophy —a comprehensive philosophical treatment of relevant issues.

Kaznatcheev, Artem (2014-09-11).

"Transcendental idealism and Post's variant of the Church-Turing thesis" .

Journal of Symbolic Logic .

1 (3): 103– 105.

A special issue (Vol. 28, No. 4, 1987) of the Notre Dame Journal of Formal Logic was devoted to the Church–Turing thesis.

v t e Alonzo Church Notable ideas Lambda calculus Simply typed lambda calculus Church–Turing thesis Church encoding Frege–Church ontology Church–Rosser theorem Students Alan Turing C. Anthony Anderson Peter Andrews George Alfred Barnard William Boone Martin Davis William Easton Alfred Foster Leon Henkin John George Kemeny Stephen Cole Kleene Simon B. Kochen Maurice L'Abbé Gary R. Mar Michael O. Rabin Nicholas Rescher Hartley Rogers, Jr J. Barkley Rosser Dana Scott Norman Shapiro Raymond Smullyan Institutions Princeton University University of California, Los Angeles Family Alonzo Church (college president) A. C. Croom v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal v t e Metalogic and metamathematics Cantor's theorem Entscheidungsproblem Church–Turing thesis Consistency Effective method Foundations of mathematics of geometry Gödel's completeness theorem Gödel's incompleteness theorems Soundness Completeness Decidability Interpretation Löwenheim–Skolem theorem Metatheorem Satisfiability Independence Type–token distinction Use–mention distinction Authority control databases National Germany France BnF data Other IdRef NewPP limit report
Parsed by mw‐web.codfw.main‐597b4b5bbd‐d5hqz
Cached time: 20250814215004
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.454 seconds
Real time usage: 1.754 seconds
Preprocessor visited node count: 9881/1000000
Revision size: 59037/2097152 bytes
Post‐expand include size: 263489/2097152 bytes
Template argument size: 17957/2097152 bytes
Highest expansion depth: 22/100
Expensive parser function count: 15/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 250471/5000000 bytes
Lua time usage: 0.945/10.000 seconds
Lua memory usage: 23419912/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00% 1485.098      1 -total
 27.30%  405.442      1 Template:Reflist
 20.84%  309.462     32 Template:Cite_book
 14.90%  221.213      4 Template:R
 14.43%  214.310      4 Template:R/ref
 10.03%  148.975      4 Template:Lang
  9.94%  147.547     25 Template:Cite_journal
  8.75%  129.927      6 Template:Navbox
  5.83%   86.636      1 Template:Alonzo_Church
  5.79%   85.976      1 Template:Short_description Saved in parser cache with key enwiki:pcache:6854:|#|:idhash:canonical and timestamp 20250814215004 and revision id 1304952422. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Church–Turing_thesis&oldid=1304952422 " Categories : Computability theory Alan Turing Theory of computation Philosophy of computer science Hidden categories: CS1 German-language sources (de) Harv and Sfn no-target errors Wikipedia articles needing clarification from March 2025 All articles with incomplete citations Articles with incomplete citations from March 2025 Articles needing the year an event occurred from March 2025 Articles with short description Short description is different from Wikidata Use dmy dates from August 2022 Articles containing German-language text All Wikipedia articles needing clarification Wikipedia articles needing clarification from March 2019 Articles containing Latin-language text Articles needing additional references from November 2017 All articles needing additional references Wikipedia articles needing page number citations from November 2017 All articles with unsourced statements Articles with unsourced statements from May 2020 CS1 French-language sources (fr) CS1: long volume value CS1 maint: location missing publisher Articles with Stanford Encyclopedia of Philosophy links This page was last edited on 9 August 2025, at 04:25 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Church–Turing thesis 35 languages Add topic

