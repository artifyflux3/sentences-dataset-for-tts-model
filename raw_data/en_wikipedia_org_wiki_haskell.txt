Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History Toggle History subsection 1.1 Haskell 1.0 to 1.4 1.2 Haskell 98 1.3 Haskell 2010 1.4 Future standards 2 Features 3 Code examples 4 Implementations 5 Notable applications Toggle Notable applications subsection 5.1 Industry 5.2 Web 6 Criticism 7 Related languages 8 Conferences and workshops 9 References 10 Bibliography 11 External links Toggle the table of contents Haskell 54 languages العربية Azərbaycanca বাংলা Беларуская Български Català Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego 한국어 Հայերեն हिन्दी Hrvatski Ido Bahasa Indonesia Íslenska Italiano עברית Қазақша Latina Latviešu Lëtzebuergesch Magyar മലയാളം मराठी Bahasa Melayu Nederlands 日本語 Norsk bokmål ਪੰਜਾਬੀ Polski Português Română Русский Shqip Simple English Slovenčina Slovenščina Српски / srpski Suomi Svenska ไทย Türkçe Українська Tiếng Việt 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikiquote Wikiversity Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Functional programming language For other uses, see Haskell (disambiguation) .

Haskell Paradigm Purely functional Designed by Lennart Augustsson , Dave Barton, Brian Boutel, Warren Burton, Joseph Fasel, Kevin Hammond, Ralf Hinze, Paul Hudak , John Hughes , Thomas Johnsson, Mark Jones, Simon Peyton Jones , John Launchbury , Erik Meijer , John Peterson, Alastair Reid, Colin Runciman, Philip Wadler First appeared 1990 ; 35 years ago ( 1990 ) [ 1 ] Stable release Haskell 2010 [ 2 ] / July 2010 ; 15 years ago ( 2010-07 ) Preview release Haskell 2020 announced [ 3 ] Typing discipline Inferred , static , strong OS Cross-platform Filename extensions .hs, .lhs Website haskell .org Major implementations GHC , Hugs , NHC, JHC, Yhc , UHC Dialects Gofer Influenced by Clean , [ 4 ] FP , [ 4 ] Gofer , [ 4 ] Hope and Hope + , [ 4 ] Id , [ 4 ] ISWIM , [ 4 ] KRC , [ 4 ] Lisp , [ 4 ] Miranda , [ 4 ] ML and Standard ML , [ 4 ] Orwell , SASL , [ 4 ] Scheme , [ 4 ] SISAL [ 4 ] Influenced Agda , [ 5 ] Bluespec , [ 6 ] C++11 / Concepts , [ 7 ] C# / LINQ , [ 8 ] [ 9 ] [ 10 ] [ 11 ] CAL, [ citation needed ] Cayenne , [ 8 ] Clean , [ 8 ] Clojure , [ 12 ] CoffeeScript , [ 13 ] Curry , [ 8 ] Elm , Epigram , [ citation needed ] Escher , [ 14 ] F# , [ 15 ] Hack , [ 16 ] Idris , [ 17 ] Isabelle , [ 8 ] Java / Generics , [ 8 ] LiveScript , [ 18 ] Mercury , [ 8 ] Ωmega , PureScript , [ 19 ] Python , [ 8 ] [ 20 ] Raku , [ 21 ] Rust , [ 22 ] Scala , [ 8 ] [ 23 ] Swift , [ 24 ] Visual Basic 9.0 [ 8 ] [ 9 ] Haskell ( / ˈ h æ s k əl / [ 25 ] ) is a general-purpose , statically typed , purely functional programming language with type inference and lazy evaluation .

[ 26 ] [ 27 ] Haskell pioneered several programming language features such as type classes , which enable type-safe operator overloading , and monadic input/output (IO). It is named after logician Haskell Curry .

[ 1 ] Haskell's main implementation is the Glasgow Haskell Compiler (GHC).

Haskell's semantics are historically based on those of the Miranda programming language, which served to focus the efforts of the initial Haskell working group.

[ 28 ] The last formal specification of the language was made in July 2010, while the development of GHC continues to expand Haskell via language extensions.

Haskell is used in academia and industry.

[ 29 ] [ 30 ] [ 31 ] As of May 2021 [update] , Haskell was the 28th most popular programming language by Google searches for tutorials, [ 32 ] and made up less than 1% of active users on the GitHub source code repository.

[ 33 ] History [ edit ] After the release of Miranda by Research Software Ltd. in 1985, interest in lazy functional languages grew. By 1987, more than a dozen non- strict , purely functional programming languages existed. Miranda was the most widely used, but it was proprietary software . At the conference on Functional Programming Languages and Computer Architecture (FPCA '87) in Portland, Oregon , there was a strong consensus that a committee be formed to define an open standard for such languages. The committee's purpose was to consolidate existing functional languages into a common one to serve as a basis for future research in functional-language design.

[ 34 ] Haskell 1.0 to 1.4 [ edit ] Haskell was developed by a committee, attempting to bring together off the shelf solutions where possible.

Type classes , which enable type-safe operator overloading , were first proposed by Philip Wadler and Stephen Blott to address the ad-hoc handling of equality types and arithmetic overloading in languages at the time.

[ 35 ] In early versions of Haskell up until and including version 1.2, user interaction and input/output (IO) were handled by both streams based and continuation based mechanisms which were widely considered unsatisfactory.

[ 36 ] In version 1.3, monadic IO was introduced, along with the generalisation of type classes to higher kinds (type constructors). Along with "do notation", which provides syntactic sugar for the Monad type class, this gave Haskell an effect system that maintained referential transparency and was convenient.

Other notable changes in early versions were the approach to the 'seq' function, which creates a data dependency between values, and is used in lazy languages to avoid excessive memory consumption; with it moving from a type class to a standard function to make refactoring more practical.

The first version of Haskell ("Haskell 1.0") was defined in 1990.

[ 1 ] The committee's efforts resulted in a series of language definitions (1.0, 1.1, 1.2, 1.3, 1.4).

Hierarchy of type classes in the Haskell prelude as of GHC 7.10.  The inclusion of Foldable and Traversable (with corresponding changes to the type signatures of some functions), and of Applicative as intermediate between Functor and Monad, are deviations from the Haskell 2010 standard.

Haskell 98 [ edit ] In late 1997, the series culminated in Haskell 98 , intended to specify a stable, minimal, portable version of the language and an accompanying standard library for teaching, and as a base for future extensions. The committee expressly welcomed creating extensions and variants of Haskell 98 via adding and incorporating experimental features.

[ 34 ] In February 1999, the Haskell 98 language standard was originally published as The Haskell 98 Report .

[ 34 ] In January 2003, a revised version was published as Haskell 98 Language and Libraries: The Revised Report .

[ 27 ] The language continues to evolve rapidly, with the Glasgow Haskell Compiler (GHC) implementation representing the current de facto standard.

[ 37 ] Haskell 2010 [ edit ] In early 2006, the process of defining a successor to the Haskell 98 standard, informally named Haskell Prime , began.

[ 38 ] This was intended to be an ongoing incremental process to revise the language definition, producing a new revision up to once per year. The first revision, named Haskell 2010 , was announced in November 2009 [ 2 ] and published in July 2010.

Haskell 2010 is an incremental update to the language, mostly incorporating several well-used and uncontroversial features previously enabled via compiler-specific flags.

Hierarchical module names. Module names are allowed to consist of dot-separated sequences of capitalized identifiers, rather than only one such identifier. This lets modules be named in a hierarchical manner (e.g., Data.List instead of List ), although technically modules are still in a single monolithic namespace. This extension was specified in an addendum to Haskell 98 and was in practice universally used.

The foreign function interface (FFI) allows bindings to other programming languages. Only bindings to C are specified in the Report, but the design allows for other language bindings. To support this, data type declarations were permitted to contain no constructors, enabling robust nonce types for foreign data that could not be constructed in Haskell. This extension was also previously specified in an Addendum to the Haskell 98 Report and widely used.

So-called n + k patterns (definitions of the form fact (n+1) = (n+1) * fact n ) were no longer allowed. This syntactic sugar had misleading semantics, in which the code looked like it used the (+) operator, but in fact desugared to code using (-) and (>=) .

The rules of type inference were relaxed to allow more programs to type check.

Some syntax issues (changes in the formal grammar) were fixed: pattern guards were added, allowing pattern matching within guards; resolution of operator fixity was specified in a simpler way that reflected actual practice; an edge case in the interaction of the language's lexical syntax of operators and comments was addressed, and the interaction of do-notation and if-then-else was tweaked to eliminate unexpected syntax errors.

The LANGUAGE pragma was specified. By 2010, dozens of extensions to the language were in wide use, and GHC (among other compilers) provided the LANGUAGE pragma to specify individual extensions with a list of identifiers. Haskell 2010 compilers are required to support the Haskell2010 extension and are encouraged to support several others, which correspond to extensions added in Haskell 2010.

Future standards [ edit ] The next formal specification had been planned for 2020.

[ 3 ] On 29 October 2021, with GHC version 9.2.1, the GHC2021 extension was released. While this is not a formal language spec, it combines several stable, widely-used GHC extensions to Haskell 2010.

[ 39 ] [ 40 ] Features [ edit ] Main article: Haskell features See also: Glasgow Haskell Compiler § Extensions to Haskell Haskell features lazy evaluation , lambda expressions , pattern matching , list comprehension , type classes and type polymorphism . It is a purely functional programming language, which means that functions generally have no side effects . A distinct construct exists to represent side effects, orthogonal to the type of functions. A pure function can return a side effect that is subsequently executed, modeling the impure functions of other languages.

Haskell has a strong , static type system based on Hindley–Milner type inference . Its principal innovation in this area is type classes, originally conceived as a principled way to add overloading to the language, [ 41 ] but since finding many more uses.

[ 42 ] The construct that represents side effects is an example of a monad : a general framework which can model various computations such as error handling, nondeterminism , parsing and software transactional memory . They are defined as ordinary datatypes, but Haskell provides some syntactic sugar for their use.

Haskell has an open, published specification, [ 27 ] and multiple implementations exist . Its main implementation, the Glasgow Haskell Compiler (GHC), is both an interpreter and native-code compiler that runs on most platforms. GHC is noted for its rich type system incorporating recent innovations such as generalized algebraic data types and type families.

The Computer Language Benchmarks Game also highlights its high-performance implementation of concurrency and parallelism .

[ 43 ] An active, growing community exists around the language, and more than 5,400 third-party open-source libraries and tools are available in the online package repository Hackage .

[ 44 ] Code examples [ edit ] See also: Haskell features § Examples A "Hello, World!" program in Haskell (only the last line is strictly necessary): module Main ( main ) where -- not needed in interpreter, is the default in a module file main :: IO () -- the compiler can infer this type definition main = putStrLn "Hello, World!" The factorial function in Haskell, defined in a few different ways (the first line is the type annotation , which is optional and is the same for each implementation): factorial :: ( Integral a ) => a -> a -- Using recursion (with the "ifthenelse" expression) factorial n = if n < 2 then 1 else n * factorial ( n - 1 ) -- Using recursion (with pattern matching) factorial 0 = 1 factorial n = n * factorial ( n - 1 ) -- Using recursion (with guards) factorial n | n < 2 = 1 | otherwise = n * factorial ( n - 1 ) -- Using a list and the "product" function factorial n = product [ 1 ..

n ] -- Using fold (implements "product") factorial n = foldl ( * ) 1 [ 1 ..

n ] -- Point-free style factorial = foldr ( * ) 1 .

enumFromTo 1 Using Haskell's Fixed-point combinator allows this function to be written without any explicit recursion.

import Data.Function ( fix ) factorial = fix fac where fac f x | x < 2 = 1 | otherwise = x * f ( x - 1 ) As the Integer type has arbitrary-precision , this code will compute values such as factorial 100000 (a 456,574-digit number), with no loss of precision.

An implementation of an algorithm similar to quick sort over lists, where the first element is taken as the pivot: -- Type annotation (optional, same for each implementation) quickSort :: Ord a => [ a ] -> [ a ] -- Using list comprehensions quickSort [] = [] -- The empty list is already sorted quickSort ( x : xs ) = quickSort [ a | a <- xs , a < x ] -- Sort the left part of the list ++ [ x ] ++ -- Insert pivot between two sorted parts quickSort [ a | a <- xs , a >= x ] -- Sort the right part of the list -- Using filter quickSort [] = [] quickSort ( x : xs ) = quickSort ( filter ( < x ) xs ) ++ [ x ] ++ quickSort ( filter ( >= x ) xs ) Implementations [ edit ] All listed implementations are distributed under open source licenses .

[ 45 ] Implementations that fully or nearly comply with the Haskell 98 standard include: The Glasgow Haskell Compiler (GHC) compiles to native code on many different processor architectures, and to ANSI C , via one of two intermediate languages : C-- , or in more recent versions, LLVM (formerly Low Level Virtual Machine) bitcode.

[ 46 ] [ 47 ] GHC has become the de facto standard Haskell dialect.

[ 48 ] There are libraries (e.g., bindings to OpenGL ) that work only with GHC. GHC was also distributed with the Haskell platform . GHC features an asynchronous runtime that also schedules threads across multiple CPU cores similar to the Go runtime .

Jhc, a Haskell compiler written by John Meacham, emphasizes speed and efficiency of generated programs and exploring new program transformations.

Ajhc is a fork of Jhc.

The Utrecht Haskell Compiler (UHC) is a Haskell implementation from Utrecht University .

[ 49 ] It supports almost all Haskell 98 features plus many experimental extensions. It is implemented using attribute grammars and is primarily used for research on generated type systems and language extensions.

Implementations no longer actively maintained include: The Haskell User's Gofer System ( Hugs ) is a bytecode interpreter. It was once one of the implementations used most widely, alongside the GHC compiler, [ 50 ] but has now been mostly replaced by GHCi. It also comes with a graphics library.

HBC is an early implementation supporting Haskell 1.4. It was implemented by Lennart Augustsson in, and based on, Lazy ML . It has not been actively developed for some time.

nhc98 is a bytecode compiler focusing on minimizing memory use.

The York Haskell Compiler ( Yhc ) was a fork of nhc98, with the goals of being simpler, more portable and efficient, and integrating support for Hat, the Haskell tracer. It also had a JavaScript backend, allowing users to run Haskell programs in web browsers .

Implementations not fully Haskell 98 compliant, and using a variant Haskell language, include: Eta and Frege are dialects of Haskell targeting the Java virtual machine .

Gofer is an educational dialect of Haskell, with a feature called constructor classes , developed by Mark Jones. It is supplanted by Haskell User's Gofer System (Hugs).

Helium, a newer dialect of Haskell. The focus is on making learning easier via clearer error messages by disabling type classes as a default.

Notable applications [ edit ] Agda is a proof assistant written in Haskell.

[ 51 ] Cabal is a tool for building and packaging Haskell libraries and programs.

[ 52 ] Darcs is a revision control system written in Haskell, with several innovative features, such as more precise control of patches to apply.

Glasgow Haskell Compiler (GHC) is also often a testbed for advanced functional programming features and optimizations in other programming languages.

Git-annex is a tool to manage (big) data files under Git version control. It also provides a distributed file synchronization system (git-annex assistant).

Linspire Linux chose Haskell for system tools development.

[ 53 ] Pandoc is a tool to convert one markup format into another.

Pugs is a compiler and interpreter for the programming language then named Perl 6, but since renamed Raku .

TidalCycles is a domain special language for live coding musical patterns, embedded in Haskell.

[ 54 ] Xmonad is a window manager for the X Window System , written fully in Haskell.

[ 55 ] GarganText [ 56 ] is a collaborative tool to map through semantic analysis texts on any web browser , written fully in Haskell and PureScript , which is used for instance in the research community to draw up state-of-the-art reports and roadmaps.

[ 57 ] Industry [ edit ] Bluespec SystemVerilog (BSV) is a language extension of Haskell, for designing electronics . It is an example of a domain-specific language embedded into Haskell. Further, Bluespec, Inc.'s tools are implemented in Haskell.

Cryptol , a language and toolchain for developing and verifying cryptography algorithms, is implemented in Haskell.

Facebook implements its anti-spam programs [ 58 ] in Haskell, maintaining the underlying data access library as open-source software .

[ 59 ] The Cardano blockchain platform is implemented in Haskell.

[ 60 ] GitHub implemented Semantic, an open-source library to analyze, diff, and interpret untrusted source code for many languages, in Haskell.

[ 61 ] Standard Chartered 's financial modelling language Mu is syntactic Haskell running on a strict runtime.

[ 62 ] seL4 , the first formally verified microkernel , [ 63 ] used Haskell as a prototyping language for the OS developer.

[ 63 ] : p.2 At the same time, the Haskell code defined an executable specification with which to reason, for automatic translation by the theorem-proving tool.

[ 63 ] : p.3 The Haskell code thus served as an intermediate prototype before final C refinement.

[ 63 ] : p.3 Target stores' supply chain optimization software is written in Haskell.

[ 64 ] Co–Star [ 65 ] Mercury Technologies ' back end is written in Haskell.

[ 66 ] Web [ edit ] Notable web frameworks written for Haskell include: [ 67 ] IHP Servant Snap Yesod Criticism [ edit ] Jan-Willem Maessen, in 2002, and Simon Peyton Jones , in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motives for it.

[ 68 ] [ 69 ] In addition to purely practical considerations such as improved performance, [ 70 ] they note that lazy evaluation makes it more difficult for programmers to reason about the performance of their code (particularly its space use).

Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners: "The subtle syntax and sophisticated type system of Haskell are a double edged sword—highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages." [ 71 ] To address the error messages researchers from Utrecht University developed an advanced interpreter called Helium, which improved the user-friendliness of error messages by limiting the generality of some Haskell features. In particular it disables type classes by default.

[ 72 ] Ben Lippmeier designed Disciple [ 73 ] as a strict-by-default (lazy by explicit annotation) dialect of Haskell with a type-and-effect system, to address Haskell's difficulties in reasoning about lazy evaluation and in using traditional data structures such as mutable arrays.

[ 74 ] He argues (p. 20) that "destructive update furnishes the programmer with two important and powerful tools ... a set of efficient array-like data structures for managing collections of objects, and ... the ability to broadcast a new value to all parts of a program with minimal burden on the programmer." Robert Harper , one of the authors of Standard ML, has given his reasons for not using Haskell to teach introductory programming. Among these are the difficulty of reasoning about resource use with non-strict evaluation, that lazy evaluation complicates the definition of datatypes and inductive reasoning, [ 75 ] and the "inferiority" of Haskell's (old) class system compared to ML's module system.

[ 76 ] Haskell's build tool, Cabal , has historically been criticized for poorly handling multiple versions of the same library, a problem known as "Cabal hell". The Stackage server and Stack build tool were made in response to these criticisms.

[ 77 ] Cabal has since addressed this problem by borrowing ideas from the package manager Nix , [ 78 ] with the new approach becoming the default in 2019.

Related languages [ edit ] Clean is a close, slightly older relative of Haskell. Its biggest deviation from Haskell is in the use of uniqueness types instead of monads for input/output (I/O) and side effects.

A series of languages inspired by Haskell, but with different type systems, have been developed, including: Agda , a functional language with dependent types .

Cayenne , with dependent types.

Elm , a functional language to create web front-end apps, no support for user-defined or higher- kinded type classes or instances.

Epigram , a functional language with dependent types suitable for proving properties of programs.

Idris , a general purpose functional language with dependent types, developed at the University of St Andrews .

PureScript transpiles to JavaScript.

Ωmega , a strict language that allows introduction of new kinds , and programming at the type level.

Other related languages include: Curry , a functional/logic programming language based on Haskell.

Notable Haskell variants include: Generic Haskell , a version of Haskell with type system support for generic programming .

Hume , a strict functional language for embedded systems based on processes as stateless automata over a sort of tuples of one element mailbox channels where the state is kept by feedback into the mailboxes, and a mapping description from outputs to channels as box wiring, with a Haskell-like expression language and syntax.

Conferences and workshops [ edit ] The Haskell community meets regularly for research and development activities. The main events are: International Conference on Functional Programming (ICFP) Haskell Symposium (formerly the Haskell Workshop) Haskell Implementors Workshop Commercial Users of Functional Programming (CUFP) ZuriHac, [ 79 ] kind of Hackathon held every year in Zurich Starting in 2006, a series of organized hackathons has occurred, the Hac series, aimed at improving the programming language tools and libraries.

[ 80 ] References [ edit ] ^ a b c Hudak et al. 2007 .

^ a b Marlow, Simon (24 November 2009).

"Announcing Haskell 2010" .

Haskell (Mailing list) . Retrieved 12 March 2011 .

^ a b Riedel, Herbert (28 April 2016).

"ANN: Haskell Prime 2020 committee has formed" .

Haskell-prime (Mailing list) . Retrieved 6 May 2017 .

^ a b c d e f g h i j k l m Peyton Jones 2003 , p. xi ^ Norell, Ulf (2008).

"Dependently Typed Programming in Agda" (PDF) . Gothenburg: Chalmers University . Retrieved 9 February 2012 .

^ Hudak et al. 2007 , pp. 12–38, 43.

^ Stroustrup, Bjarne ; Sutton, Andrew (2011).

"Design of Concept Libraries for C++" (PDF) .

Software Language Engineering . Archived from the original (PDF) on 10 February 2012.

^ a b c d e f g h i j Hudak et al. 2007 , pp. 12-45–46.

^ a b Meijer, Erik (2006). "Confessions of a Used Programming Language Salesman: Getting the Masses Hooked on Haskell".

Oopsla 2007 .

CiteSeerX 10.1.1.72.868 .

^ Meijer, Erik (1 October 2009).

"C9 Lectures: Dr. Erik Meijer – Functional Programming Fundamentals, Chapter 1 of 13" .

Channel 9 . Microsoft. Archived from the original on 16 June 2012 . Retrieved 9 February 2012 .

^ Drobi, Sadek (4 March 2009).

"Erik Meijer on LINQ" .

InfoQ . QCon SF 2008: C4Media Inc . Retrieved 9 February 2012 .

{{ cite news }} :  CS1 maint: location ( link ) ^ Hickey, Rich.

"Clojure Bookshelf" .

Listmania!

. Archived from the original on 3 October 2017 . Retrieved 3 October 2017 .

^ Heller, Martin (18 October 2011).

"Turn up your nose at Dart and smell the CoffeeScript" .

InfoWorld . Retrieved 2020-07-15 .

^ "Declarative programming in Escher" (PDF) . Retrieved 7 October 2015 .

^ Syme, Don ; Granicz, Adam; Cisternino, Antonio (2007).

Expert F# .

Apress . p. 2.

F# also draws from Haskell particularly with regard to two advanced language features called sequence expressions and workflows .

^ "Facebook Introduces 'Hack,' the Programming Language of the Future" .

WIRED . 20 March 2014.

^ "Idris, a dependently typed language" . Retrieved 26 October 2014 .

^ "LiveScript Inspiration" . Retrieved 4 February 2014 .

^ Freeman, Phil (2016).

"PureScript by Example" . Leanpub . Retrieved 23 April 2017 .

^ Kuchling, A. M.

"Functional Programming HOWTO" .

Python v2.7.2 documentation . Python Software Foundation . Retrieved 9 February 2012 .

^ "Glossary of Terms and Jargon" .

Perl Foundation Perl 6 Wiki .

The Perl Foundation . Archived from the original on 21 January 2012 . Retrieved 9 February 2012 .

^ "Influences - The Rust Reference" .

The Rust Reference . Retrieved 31 December 2023 .

^ Fogus, Michael (6 August 2010).

"MartinOdersky take(5) toList" .

Send More Paramedics . Retrieved 9 February 2012 .

^ Lattner, Chris (3 June 2014).

"Chris Lattner's Homepage" . Chris Lattner . Retrieved 3 June 2014 .

The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ Chevalier, Tim (28 January 2008).

"anybody can tell me the pronunciation of "haskell"?" .

Haskell-cafe (Mailing list) . Retrieved 12 March 2011 .

^ Type inference originally using Hindley-Milner type inference ^ a b c Peyton Jones 2003 .

^ Edward Kmett, Edward Kmett – Type Classes vs. the World ^ Mossberg, Erik (8 June 2020), erkmos/haskell-companies , retrieved 22 June 2020 ^ O'Sullivan, Bryan; Goerzen, John; Stewart, Donald Bruce (15 November 2008).

Real World Haskell: Code You Can Believe In . "O'Reilly Media, Inc.". pp.

xxviii– xxxi.

ISBN 978-0-596-55430-9 .

^ "Haskell in Production: Riskbook" .

Serokell Software Development Company . Retrieved 7 September 2021 .

^ "PYPL PopularitY of Programming Language index" .

pypl.github.io . May 2021. Archived from the original on 7 May 2021 . Retrieved 16 May 2021 .

^ Frederickson, Ben.

"Ranking Programming Languages by GitHub Users" .

www.benfrederickson.com . Retrieved 6 September 2019 .

^ a b c Peyton Jones 2003 , Preface.

^ Wadler, Philip (October 1988).

"How to make ad-hoc polymorphism less ad hoc" .

^ Peyton Jones, Simon (2003).

"Wearing the hair shirt: a retrospective on Haskell" .

Microsoft .

^ "Haskell Wiki: Implementations" . Retrieved 18 December 2012 .

^ "Welcome to Haskell' " .

The Haskell' Wiki . Archived from the original on 20 February 2016 . Retrieved 11 February 2016 .

^ GHC 2020 Team (29 October 2021) GHC 9.2.1 released ^ Proposed compiler and language changes for GHC and GHC/Haskell ^ Wadler, P.; Blott, S. (1989). "How to make ad-hoc polymorphism less ad hoc".

Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages - POPL '89 .

ACM . pp.

60– 76.

doi : 10.1145/75277.75283 .

ISBN 978-0-89791-294-5 .

S2CID 15327197 .

^ Hallgren, T. (January 2001).

"Fun with Functional Dependencies, or Types as Values in Static Computations in Haskell" .

Proceedings of the Joint CS/CE Winter Meeting . Varberg, Sweden.

^ Computer Language Benchmarks Game ^ "HackageDB statistics" . Hackage.haskell.org. Archived from the original on 3 May 2013 . Retrieved 26 June 2013 .

^ "Implementations" at the Haskell Wiki ^ "The LLVM Backend" .

GHC Trac . 29 March 2019.

^ Terei, David A.; Chakravarty, Manuel M. T. (2010).

"An LLVM Backend for GHC" .

Proceedings of ACM SIGPLAN Haskell Symposium 2010 . ACM Press.

^ C. Ryder and S. Thompson (2005).

"Porting HaRe to the GHC API" ^ Utrecht Haskell Compiler ^ Hudak et al. 2007 , pp. 12–22.

^ Agda 2 , Agda Github Community, 15 October 2021 , retrieved 16 October 2021 ^ "The Haskell Cabal" . Retrieved 8 April 2015 .

^ "Linspire/Freespire Core OS Team and Haskell" .

Debian Haskell mailing list . May 2006. Archived from the original on 27 December 2017 . Retrieved 14 June 2006 .

^ "Live code with Tidal Cycles" .

Tidal Cycles . Retrieved 19 January 2022 .

^ xmonad.org ^ "Gargantext – Main" . 13 July 2023.

^ David, Chavalarias; et al. (8 May 2023).

Toward a Research Agenda on Digital Media and Humanity Well-Being (report).

^ "Fighting spam with Haskell" .

Facebook Code . 26 June 2015 . Retrieved 11 August 2019 .

^ "Open-sourcing Haxl, a library for Haskell" .

Facebook Code . 10 June 2014 . Retrieved 11 August 2019 .

^ "input-output-hk/cardano-node: The core component that is used to participate in a Cardano decentralised blockchain" . GitHub . Retrieved 18 March 2022 .

^ Stocks, Nathan (CleanCut) (7 June 2019).

"Parsing, analyzing, and comparing source code across many languages" .

GitHub/semantic . Retrieved 19 July 2025 .

^ "Commercial Users of Functional Programming Workshop Report" (PDF) . Retrieved 10 June 2022 .

^ a b c d A formal proof of functional correctness was completed in 2009.

Klein, Gerwin; Elphinstone, Kevin; Heiser, Gernot ; Andronick, June; Cock, David; Derrin, Philip; Elkaduwe, Dhammika; Engelhardt, Kai; Kolanski, Rafal; Norrish, Michael; Sewell, Thomas; Tuch, Harvey; Winwood, Simon (October 2009).

"seL4: Formal verification of an OS kernel" (PDF) .

22nd ACM Symposium on Operating System Principles . Big Sky, Montana, USA.

^ "Tikhon Jelvis: Haskell at Target" .

YouTube . 22 April 2017.

^ "Why Co–Star uses Haskell" .

Co–Star . Retrieved 30 September 2023 .

^ "Haskell in Production: Mercury" .

Serokell . Retrieved 11 October 2024 .

^ "Web/Frameworks – HaskellWiki" .

wiki.haskell.org . Retrieved 17 September 2022 .

^ Jan-Willem Maessen.

Eager Haskell: Resource-bounded execution yields efficient iteration . Proceedings of the 2002 Association for Computing Machinery (ACM) SIGPLAN workshop on Haskell.

^ [ dead link ] Simon Peyton Jones.

Wearing the hair shirt: a retrospective on Haskell . Invited talk at POPL 2003.

^ "Lazy evaluation can lead to excellent performance, such as in The Computer Language Benchmarks Game" . 27 June 2006.

^ Heeren, Bastiaan; Leijen, Daan; van IJzendoorn, Arjan (2003).

"Helium, for learning Haskell" (PDF) .

Proceedings of the 2003 ACM SIGPLAN workshop on Haskell . pp.

62– 71.

doi : 10.1145/871895.871902 .

ISBN 1581137583 .

S2CID 11986908 .

^ "Helium Compiler Docs" . GitHub . Retrieved 9 June 2023 .

^ "DDC – HaskellWiki" . Haskell.org. 3 December 2010 . Retrieved 26 June 2013 .

^ Ben Lippmeier, Type Inference and Optimisation for an Impure World , Australian National University (2010) PhD thesis, chapter 1 ^ Robert Harper (25 April 2011).

"The point of laziness" .

^ Robert Harper (16 April 2011).

"Modules matter most" .

^ "Solving Cabal Hell" .

www.yesodweb.com . Retrieved 11 August 2019 .

^ "Announcing cabal new-build: Nix-style local builds" . Retrieved 1 October 2019 .

^ "Zürich Friends of Haskell" .

zfoh.ch . Retrieved 13 March 2025 .

^ "Hackathon – HaskellWiki" .

Bibliography [ edit ] Reports Peyton Jones, Simon , ed. (2003).

Haskell 98 Language and Libraries: The Revised Report . Cambridge University Press.

ISBN 978-0521826143 .

Marlow, Simon , ed. (2010).

Haskell 2010 Language Report (PDF) . Haskell.org.

Textbooks Davie, Antony (1992).

An Introduction to Functional Programming Systems Using Haskell . Cambridge University Press.

ISBN 978-0-521-25830-2 .

Bird, Richard (1998).

Introduction to Functional Programming using Haskell (2nd ed.). Prentice Hall Press.

ISBN 978-0-13-484346-9 .

Hudak, Paul (2000).

The Haskell School of Expression: Learning Functional Programming through Multimedia . New York: Cambridge University Press.

ISBN 978-0521643382 .

Hutton, Graham (2007).

Programming in Haskell . Cambridge University Press.

ISBN 978-0521692694 .

O'Sullivan, Bryan; Stewart, Don; Goerzen, John (2008).

Real World Haskell . Sebastopol: O'Reilly.

ISBN 978-0-596-51498-3 .

Real World Haskell (full text).

Thompson, Simon (2011).

Haskell: The Craft of Functional Programming (3rd ed.). Addison-Wesley.

ISBN 978-0201882957 .

Lipovača, Miran (April 2011).

Learn You a Haskell for Great Good!

. San Francisco: No Starch Press.

ISBN 978-1-59327-283-8 .

( full text ) Bird, Richard (2014).

Thinking Functionally with Haskell . Cambridge University Press.

ISBN 978-1-107-45264-0 .

Bird, Richard ; Gibbons, Jeremy (July 2020).

Algorithm Design with Haskell . Cambridge University Press.

ISBN 978-1-108-49161-7 .

Tutorials Hudak, Paul ; Peterson, John; Fasel, Joseph (June 2000).

"A Gentle Introduction To Haskell, Version 98" .

Haskell.org .

Learn You a Haskell for Great Good! - A community version ( learnyouahaskell.github.io ) . An up-to-date community maintained version of the renowned "Learn You a Haskell" (LYAH) guide.

Daumé, Hal III.

Yet Another Haskell Tutorial (PDF) .

Assumes far less prior knowledge than official tutorial.

Yorgey, Brent (12 March 2009).

"The Typeclassopedia" (PDF) .

The Monad.Reader (13): 17– 68.

Maguire, Sandy (2018).

Thinking with Types: Type-Level Programming in Haskell .

History Hudak, Paul ; Hughes, John ; Peyton Jones, Simon ; Wadler, Philip (2007).

"A history of Haskell" (PDF) .

Proceedings of the third ACM SIGPLAN conference on History of programming languages . pp. 12–1–55.

doi : 10.1145/1238844.1238856 .

ISBN 978-1-59593-766-7 .

S2CID 52847907 .

Hamilton, Naomi (19 September 2008).

"The A-Z of Programming Languages: Haskell" .

Computerworld .

External links [ edit ] Wikibooks has a book on the topic of: Haskell Wikibooks has a book on the topic of: Write Yourself a Scheme in 48 Hours Wikiversity has learning resources about Haskell programming in plain view Official website Portal : Computer programming v t e Haskell programming Software Implementations ( features ) Generic Haskell ° Glasgow Haskell Compiler ° Template Haskell ° Gofer ° → Hugs ° York Haskell Compiler ° ( Yhc ) Dialects Agda ° Cryptol ° Curry ° Elm ° Hume ° Idris ° Ωmega ° Orwell ° Pugs ° PureScript ° TidalCycles ° Ur ° Electronic design Atom ° Bluespec SystemVerilog (BSV) Libraries Concurrent Haskell ° Haskell Platform ° Parsec ° QuickCheck ° Package managers Cabal ° Stack ° Windowing systems Fudgets wxHaskell ° xmonad ° Web frameworks Servant ° Snap ° Yesod ° Cardano ° Darcs ° Ganeti ° git-annex ° Haddock ° HaXml ° Liquid Haskell ° LOLITA Pandoc ° Paradox ° SQream DB Book Real World Haskell Community Eponym Haskell Curry Arvind Lennart Augustsson Richard Bird Jeremy Gibbons Andrew D. Gordon Paul Hudak John Hughes John Launchbury John MacFarlane Simon Marlow Conor McBride Erik Meijer Simon Peyton Jones David Roundy Joe Stoy Audrey Tang Simon Thompson Philip Wadler Italics = discontinued • ° = Open-source software Book Category:Family Category:Software v t e Haskell Curry Namesakes : mathematics , computer programming Curry–Howard correspondence Currying Curry's paradox Programming languages Brook ° Curry ° Haskell ° Italics = discontinued ° = Open-source software Category:Mathematical philosophers Category:Mathematicians Category:Logicians v t e Programming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more...

Lists: Alphabetical Categorical Generational Non-English-based Category Authority control databases National Germany United States France BnF data Czech Republic Spain Israel Other Yale LUX NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐chj8s
Cached time: 20250817051724
Cache expiry: 1276966
Reduced expiry: true
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.261 seconds
Real time usage: 1.553 seconds
Preprocessor visited node count: 8689/1000000
Revision size: 51123/2097152 bytes
Post‐expand include size: 229131/2097152 bytes
Template argument size: 15258/2097152 bytes
Highest expansion depth: 26/100
Expensive parser function count: 15/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 313391/5000000 bytes
Lua time usage: 0.813/10.000 seconds
Lua memory usage: 9757173/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00% 1373.100      1 -total
 38.50%  528.610      1 Template:Reflist
 17.40%  238.899     44 Template:Cite_web
 16.20%  222.510      2 Template:Infobox
 14.51%  199.198      1 Template:Infobox_programming_language
  8.24%  113.119      8 Template:Navbox
  7.73%  106.149     18 Template:Cite_book
  7.20%   98.883     21 Template:Sfn
  6.84%   93.908      1 Template:Haskell_programming
  6.77%   92.959      3 Template:Cite_mailing_list Saved in parser cache with key enwiki:pcache:27404990:|#|:idhash:canonical and timestamp 20250817051724 and revision id 1305633154. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Haskell&oldid=1305633154 " Categories : Academic programming languages Educational programming languages Functional languages Haskell programming language family Literate programming Pattern matching programming languages Programming languages created in 1990 Statically typed programming languages Hidden categories: CS1 maint: location All articles with dead external links Articles with dead external links from May 2022 Articles with short description Short description is different from Wikidata Use dmy dates from November 2019 All articles with unsourced statements Articles with unsourced statements from February 2012 Articles containing potentially dated statements from May 2021 All articles containing potentially dated statements Articles with example Haskell code This page was last edited on 13 August 2025, at 06:05 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Haskell 54 languages Add topic

