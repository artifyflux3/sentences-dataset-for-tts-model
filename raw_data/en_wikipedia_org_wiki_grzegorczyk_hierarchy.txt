Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Definition 2 Properties 3 Relation to primitive recursive functions 4 Extensions 5 See also 6 Notes 7 References 8 Bibliography Toggle the table of contents Grzegorczyk hierarchy 5 languages Català Français 日本語 Português Українська Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Functions in computability theory The Grzegorczyk hierarchy ( / ɡ r ɛ ˈ ɡ ɔːr tʃ ə k / , Polish pronunciation: [ɡʐɛˈɡɔrt͡ʂɨk] ), named after the Polish logician Andrzej Grzegorczyk , is a hierarchy of functions used in computability theory .

[ 1 ] Every function in the Grzegorczyk hierarchy is a primitive recursive function , and every primitive recursive function appears in the hierarchy at some level. The hierarchy deals with the rate at which the values of the functions grow; intuitively, functions in lower levels of the hierarchy grow slower than functions in the higher levels.

Definition [ edit ] First we introduce an infinite set of functions, denoted E i for some natural number i . We define E 0 ( x , y ) = x + y E 1 ( x ) = x 2 + 2 E n + 2 ( 0 ) = 2 E n + 2 ( x + 1 ) = E n + 1 ( E n + 2 ( x ) ) {\displaystyle {\begin{array}{lcl}E_{0}(x,y)&=&x+y\\E_{1}(x)&=&x^{2}+2\\E_{n+2}(0)&=&2\\E_{n+2}(x+1)&=&E_{n+1}(E_{n+2}(x))\\\end{array}}} E 0 {\displaystyle E_{0}} is the addition function, and E 1 {\displaystyle E_{1}} is a unary function which squares its argument and adds two. Then, for each n greater than 1, E n ( x ) = E n − − 1 x ( 2 ) {\displaystyle E_{n}(x)=E_{n-1}^{x}(2)} , i.e. the x -th iterate of E n − − 1 {\displaystyle E_{n-1}} evaluated at 2.

From these functions we define the Grzegorczyk hierarchy.

E n {\displaystyle {\mathcal {E}}^{n}} , the n -th set in the hierarchy, contains the following functions: E k for k < n the zero function ( Z ( x ) = 0); the successor function ( S ( x ) = x + 1); the projection functions ( p i m ( t 1 , t 2 , … … , t m ) = t i {\displaystyle p_{i}^{m}(t_{1},t_{2},\dots ,t_{m})=t_{i}} ); the (generalized) compositions of functions in the set (if h , g 1 , g 2 , ... and g m are in E n {\displaystyle {\mathcal {E}}^{n}} , then f ( u ¯ ¯ ) = h ( g 1 ( u ¯ ¯ ) , g 2 ( u ¯ ¯ ) , … … , g m ( u ¯ ¯ ) ) {\displaystyle f({\bar {u}})=h(g_{1}({\bar {u}}),g_{2}({\bar {u}}),\dots ,g_{m}({\bar {u}}))} is as well); [ note 1 ] and the results of limited (primitive) recursion applied to functions in the set, (if g , h and j are in E n {\displaystyle {\mathcal {E}}^{n}} and f ( t , u ¯ ¯ ) ≤ ≤ j ( t , u ¯ ¯ ) {\displaystyle f(t,{\bar {u}})\leq j(t,{\bar {u}})} for all t and u ¯ ¯ {\displaystyle {\bar {u}}} , and further f ( 0 , u ¯ ¯ ) = g ( u ¯ ¯ ) {\displaystyle f(0,{\bar {u}})=g({\bar {u}})} and f ( t + 1 , u ¯ ¯ ) = h ( t , u ¯ ¯ , f ( t , u ¯ ¯ ) ) {\displaystyle f(t+1,{\bar {u}})=h(t,{\bar {u}},f(t,{\bar {u}}))} , then f is in E n {\displaystyle {\mathcal {E}}^{n}} as well).

[ note 1 ] In other words, E n {\displaystyle {\mathcal {E}}^{n}} is the closure of set B n = { Z , S , ( p i m ) i ≤ ≤ m , E k : k < n } {\displaystyle B_{n}=\{Z,S,(p_{i}^{m})_{i\leq m},E_{k}:k<n\}} with respect to function composition and limited recursion (as defined above).

Properties [ edit ] These sets clearly form the hierarchy E 0 ⊆ ⊆ E 1 ⊆ ⊆ E 2 ⊆ ⊆ ⋯ ⋯ {\displaystyle {\mathcal {E}}^{0}\subseteq {\mathcal {E}}^{1}\subseteq {\mathcal {E}}^{2}\subseteq \cdots } because they are closures over the B n {\displaystyle B_{n}} 's and B 0 ⊆ ⊆ B 1 ⊆ ⊆ B 2 ⊆ ⊆ ⋯ ⋯ {\displaystyle B_{0}\subseteq B_{1}\subseteq B_{2}\subseteq \cdots } .

They are strict subsets.

[ 2 ] [ 3 ] In other words E 0 ⊊ ⊊ E 1 ⊊ ⊊ E 2 ⊊ ⊊ ⋯ ⋯ {\displaystyle {\mathcal {E}}^{0}\subsetneq {\mathcal {E}}^{1}\subsetneq {\mathcal {E}}^{2}\subsetneq \cdots } because the hyperoperation H n {\displaystyle H_{n}} is in E n {\displaystyle {\mathcal {E}}^{n}} but not in E n − − 1 {\displaystyle {\mathcal {E}}^{n-1}} .

E 0 {\displaystyle {\mathcal {E}}^{0}} includes functions such as x + 1 , x + 2 , … … {\displaystyle x+1,\;x+2,\;\ldots } Every unary function f ( x ) {\displaystyle f(x)} in E 0 {\displaystyle {\mathcal {E}}^{0}} is upper bounded by some x + n {\displaystyle x+n} .

However, E 0 {\displaystyle {\mathcal {E}}^{0}} also includes more complicated functions like x − − ˙ ˙ 1 {\displaystyle x\mathbin {\dot {-}} 1} , [ 4 ] x − − ˙ ˙ y {\displaystyle x\mathbin {\dot {-}} y} , [ 4 ] x mod y , … … {\displaystyle x{\bmod {y}},\;\ldots } E 1 {\displaystyle {\mathcal {E}}^{1}} provides all addition functions, such as x + y , 4 x , … … {\displaystyle x+y,\;4x,\;\ldots } E 2 {\displaystyle {\mathcal {E}}^{2}} provides all multiplication functions, such as x y , x 4 , … … {\displaystyle xy,\;x^{4},\;\ldots } E 3 {\displaystyle {\mathcal {E}}^{3}} provides all exponentiation functions, such as x y , 2 2 2 x {\displaystyle x^{y},\;2^{2^{2^{x}}}} , and is exactly the elementary recursive functions .

E 4 {\displaystyle {\mathcal {E}}^{4}} provides all tetration functions, and so on.

Notably, both the function U {\displaystyle U} and the characteristic function of the predicate T {\displaystyle T} from the Kleene normal form theorem are definable in a way such that they lie at level E 0 {\displaystyle {\mathcal {E}}^{0}} of the Grzegorczyk hierarchy. This implies in particular that every recursively enumerable set is enumerable by some E 0 {\displaystyle {\mathcal {E}}^{0}} -function.

Relation to primitive recursive functions [ edit ] The definition of E n {\displaystyle {\mathcal {E}}^{n}} is the same as that of the primitive recursive functions , PR , except that recursion is limited ( f ( t , u ¯ ¯ ) ≤ ≤ j ( t , u ¯ ¯ ) {\displaystyle f(t,{\bar {u}})\leq j(t,{\bar {u}})} for some j in E n {\displaystyle {\mathcal {E}}^{n}} ) and the functions ( E k ) k < n {\displaystyle (E_{k})_{k<n}} are explicitly included in E n {\displaystyle {\mathcal {E}}^{n}} . Thus the Grzegorczyk hierarchy can be seen as a way to limit the power of primitive recursion to different levels.

It is clear from this fact that all functions in any level of the Grzegorczyk hierarchy are primitive recursive functions (i.e.

E n ⊆ ⊆ P R {\displaystyle {\mathcal {E}}^{n}\subseteq {\mathsf {PR}}} ) and thus: ⋃ ⋃ n E n ⊆ ⊆ P R {\displaystyle \bigcup _{n}{{\mathcal {E}}^{n}}\subseteq {\mathsf {PR}}} It can also be shown that all primitive recursive functions are in some level of the hierarchy, [ 2 ] [ 3 ] thus ⋃ ⋃ n E n = P R {\displaystyle \bigcup _{n}{{\mathcal {E}}^{n}}={\mathsf {PR}}} and the sets E 0 , E 1 − − E 0 , E 2 − − E 1 , … … , E n − − E n − − 1 , … … {\displaystyle {\mathcal {E}}^{0},{\mathcal {E}}^{1}-{\mathcal {E}}^{0},{\mathcal {E}}^{2}-{\mathcal {E}}^{1},\dots ,{\mathcal {E}}^{n}-{\mathcal {E}}^{n-1},\dots } partition the set of primitive recursive functions, PR .

Meyer and Ritchie introduced another hierarchy subdividing the primitive recursive functions, based on the nesting depth of loops needed to write a LOOP program that computes the function. For a natural number i {\displaystyle i} , let L i {\displaystyle {\mathcal {L}}_{i}} denote the set of functions computable by a LOOP program with LOOP and END commands nested no deeper than i {\displaystyle i} levels.

[ 5 ] Fachini and Maggiolo-Schettini showed that L i {\displaystyle {\mathcal {L}}_{i}} coincides with E i + 1 {\displaystyle {\mathcal {E}}_{i+1}} for all integers i > 1 {\displaystyle i>1} .

[ 6 ] Extensions [ edit ] Main article: Fast-growing hierarchy The Grzegorczyk hierarchy can be extended to transfinite ordinals . Such extensions define a fast-growing hierarchy . To do this, the generating functions E α α {\displaystyle E_{\alpha }} must be recursively defined for limit ordinals (note they have already been recursively defined for successor ordinals by the relation E α α + 1 ( n ) = E α α n ( 2 ) {\displaystyle E_{\alpha +1}(n)=E_{\alpha }^{n}(2)} ). If there is a standard way of defining a fundamental sequence λ λ m {\displaystyle \lambda _{m}} , whose limit ordinal is λ λ {\displaystyle \lambda } , then the generating functions can be defined E λ λ ( n ) = E λ λ n ( n ) {\displaystyle E_{\lambda }(n)=E_{\lambda _{n}}(n)} . However, this definition depends upon a standard way of defining the fundamental sequence.

Rose (1984) suggests a standard way for all ordinals α < ε 0 .

The original extension was due to Martin Löb and Stan S. Wainer and is sometimes called the Löb–Wainer hierarchy .

[ 7 ] See also [ edit ] ELEMENTARY Fast-growing hierarchy Ordinal analysis Notes [ edit ] ^ a b Here u ¯ ¯ {\displaystyle {\bar {u}}} represents a tuple of inputs to f . The notation f ( u ¯ ¯ ) {\displaystyle f({\bar {u}})} means that f takes some arbitrary number of arguments and if u ¯ ¯ = ( x , y , z ) {\displaystyle {\bar {u}}=(x,y,z)} , then f ( u ¯ ¯ ) = f ( x , y , z ) {\displaystyle f({\bar {u}})=f(x,y,z)} . In the notation f ( t , u ¯ ¯ ) {\displaystyle f(t,{\bar {u}})} , the first argument, t , is specified explicitly and the rest as the arbitrary tuple u ¯ ¯ {\displaystyle {\bar {u}}} . Thus, if u ¯ ¯ = ( x , y , z ) {\displaystyle {\bar {u}}=(x,y,z)} , then f ( t , u ¯ ¯ ) = f ( t , x , y , z ) {\displaystyle f(t,{\bar {u}})=f(t,x,y,z)} . This notation allows composition and limited recursion to be defined for functions, f , of any number of arguments.

References [ edit ] ^ Wagner & Wechsung 1986 , p. 43.

^ a b Rose 1984 .

^ a b Gakwaya 1997 .

^ a b where − − ˙ ˙ {\displaystyle \mathbin {\dot {-}} } is the monus function defined as x − − ˙ ˙ y = max ( x − − y , 0 ) {\displaystyle x\mathbin {\dot {-}} y=\max(x-y,\,0)} ^ Meyer & Ritchie 1967 .

^ Fachini & Maggiolo-Schettini 1979 , p. 63.

^ Löb & Wainer 1970 .

Bibliography [ edit ] Brainerd, Walter S.; Landweber, Lawrence H. (1974).

Theory of computation . Wiley.

ISBN 9780471095859 .

Cichon, E. A.; Wainer, S. S. (1983). "The slow-growing and the Grzegorczyk hierarchies".

Journal of Symbolic Logic .

48 (2): 399– 408.

doi : 10.2307/2273557 .

ISSN 0022-4812 .

JSTOR 2273557 .

MR 0704094 .

S2CID 1390729 .

Fachini, Emanuela; Maggiolo-Schettini, Andrea (1979).

"A hierarchy of primitive recursive sequence functions" (PDF) .

R.A.I.R.O. - Informatique Théorique - Theoretical Informatics .

13 (1): 49– 67.

doi : 10.1051/ita/1979130100491 .

Gakwaya, Jean-Sylvestre (1997). "A survey on the Grzegorczyk Hierarchy and its Extension through the BSS Model of Computability".

CiteSeerX 10.1.1.69.4621 .

Grzegorczyk, Andrzej (1953).

"Some classes of recursive functions" (PDF) .

Rozprawy Matematyczne .

4 : 1– 45.

Löb, Martin Hugo ; Wainer, Stan S.

(1970). "Hierarchies of Number Theoretic Functions I, II: A Correction".

Archiv für mathematische Logik und Grundlagenforschung .

14 ( 3– 4): 198– 199.

doi : 10.1007/bf01991855 .

S2CID 119830535 .

Meyer, Albert R.

; Ritchie, Dennis MacAlistair (1967).

The complexity of loop programs (PDF) . ACM '67: Proceedings of the 1967 22nd national conference. pp.

465– 469.

doi : 10.1145/800196.806014 .

Rose, H.E. (1984).

Subrecursion: Functions and hierarchies .

Oxford University Press .

ISBN 0-19-853189-3 .

Wagner, K.; Wechsung, G. (1986). "Computational Complexity".

Mathematics and Its Applications .

21 . Springer.

ISBN 978-90-277-2146-4 .

v t e Complexity classes Considered feasible DLOGTIME AC 0 ACC 0 TC TC 0 L SL RL FL NL NL-complete NC SC CC P P-complete ZPP RP BPP BQP APX FP Suspected infeasible UP NP NP-complete NP-hard co-NP co-NP-complete TFNP FNP AM QMA PH ⊕P PP #P #P-complete IP PSPACE PSPACE-complete Considered infeasible EXPTIME NEXPTIME EXPSPACE 2-EXPTIME ELEMENTARY PR R RE ALL Class hierarchies Polynomial hierarchy Exponential hierarchy Grzegorczyk hierarchy Arithmetical hierarchy Boolean hierarchy Families of classes DTIME NTIME DSPACE NSPACE Probabilistically checkable proof Interactive proof system List of complexity classes v t e Hyperoperations Primary Successor (0) Addition (1) Multiplication (2) Exponentiation (3) Tetration (4) Pentation (5) Hexation (6) Inverse for left argument Predecessor (0) Subtraction (1) Division (2) Root extraction (3) Super-root (4) Inverse for right argument Predecessor (0) Subtraction (1) Division (2) Logarithm (3) Super-logarithm (4) Related articles Ackermann function Conway chained arrow notation Grzegorczyk hierarchy Knuth's up-arrow notation Steinhaus–Moser notation v t e Large numbers Examples in numerical order Hundred Thousand Ten thousand Hundred thousand Million Billion Trillion Quadrillion Quintillion Sextillion Septillion Octillion Nonillion Decillion Eddington number Googol Shannon number Googolplex Skewes's number Moser's number Graham's number TREE(3) SSCG(3) BH(3) Rayo's number Expression methods Notations Scientific notation Knuth's up-arrow notation Conway chained arrow notation Steinhaus–Moser notation Operators Hyperoperation Tetration Pentation Ackermann function Grzegorczyk hierarchy Fast-growing hierarchy Related articles (alphabetical order) Busy beaver Extended real number line Indefinite and fictitious numbers Infinitesimal Largest known prime number List of numbers Long and short scales Number systems Number names Orders of magnitude Power of two Power of three Power of 10 Sagan Unit Names History NewPP limit report
Parsed by mw‐web.codfw.main‐597b4b5bbd‐wqtw4
Cached time: 20250815072555
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.509 seconds
Real time usage: 0.811 seconds
Preprocessor visited node count: 1864/1000000
Revision size: 11061/2097152 bytes
Post‐expand include size: 54664/2097152 bytes
Template argument size: 1254/2097152 bytes
Highest expansion depth: 8/100
Expensive parser function count: 2/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 55236/5000000 bytes
Lua time usage: 0.309/10.000 seconds
Lua memory usage: 16632699/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  489.482      1 -total
 20.02%   97.978      1 Template:IPA
 15.68%   76.759      4 Template:Navbox
 14.85%   72.680      1 Template:ComplexityClasses
 14.31%   70.055      2 Template:Cite_book
 12.99%   63.596      1 Template:Short_description
  9.35%   45.757      1 Template:IPAc-en
  9.33%   45.646      8 Template:Sfn
  8.00%   39.151      2 Template:Pagetype
  5.83%   28.547      5 Template:Cite_journal Saved in parser cache with key enwiki:pcache:14334415:|#|:idhash:canonical and timestamp 20250815072555 and revision id 1303405161. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Grzegorczyk_hierarchy&oldid=1303405161 " Categories : Computability theory Hierarchy of functions Hidden categories: Articles with short description Short description is different from Wikidata Pages with Polish IPA This page was last edited on 30 July 2025, at 20:22 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Grzegorczyk hierarchy 5 languages Add topic

