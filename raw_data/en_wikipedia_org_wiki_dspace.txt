Title: DSPACE

URL Source: https://en.wikipedia.org/wiki/DSPACE

Published Time: 2004-05-16T14:37:15Z

Markdown Content:
From Wikipedia, the free encyclopedia

For digital repositories, see [DSpace](https://en.wikipedia.org/wiki/DSpace "DSpace").

In [computational complexity theory](https://en.wikipedia.org/wiki/Computational_complexity_theory "Computational complexity theory"), **DSPACE** or **SPACE** is the [computational resource](https://en.wikipedia.org/wiki/Computational_resource "Computational resource") describing the resource of [memory space](https://en.wikipedia.org/wiki/Memory_space_(computational_resource) "Memory space (computational resource)") for a [deterministic Turing machine](https://en.wikipedia.org/wiki/Deterministic_Turing_machine "Deterministic Turing machine"). It represents the total amount of memory space that a "normal" physical computer would need to solve a given [computational problem](https://en.wikipedia.org/wiki/Computational_problem "Computational problem") with a given [algorithm](https://en.wikipedia.org/wiki/Algorithm "Algorithm").

The measure **DSPACE** is used to define [complexity classes](https://en.wikipedia.org/wiki/Complexity_class "Complexity class"), sets of all of the [decision problems](https://en.wikipedia.org/wiki/Decision_problem "Decision problem") that can be solved using a certain amount of memory space. For each function _f_(_n_), there is a [complexity class](https://en.wikipedia.org/wiki/Complexity_class "Complexity class") SPACE(_f_(_n_)), the set of [decision problems](https://en.wikipedia.org/wiki/Decision_problem "Decision problem") that can be solved by a [deterministic Turing machine](https://en.wikipedia.org/wiki/Deterministic_Turing_machine "Deterministic Turing machine") using space _O_(_f_(_n_)). There is no restriction on the amount of [computation time](https://en.wikipedia.org/wiki/Computation_time "Computation time") that can be used, though there may be restrictions on some other complexity measures (like [alternation](https://en.wikipedia.org/wiki/Alternation_(complexity) "Alternation (complexity)")).

Several important complexity classes are defined in terms of **DSPACE**. These include:

*   [REG](https://en.wikipedia.org/wiki/Regular_language "Regular language") = DSPACE(_O_(1)), where **REG** is the class of [regular languages](https://en.wikipedia.org/wiki/Regular_language "Regular language"). In fact, REG = DSPACE(_o_(log log _n_)) (that is, Ω(log log _n_) space is required to recognize any non-regular language).[[1]](https://en.wikipedia.org/wiki/DSPACE#cite_note-AS28-1)[[2]](https://en.wikipedia.org/wiki/DSPACE#cite_note-2)

_Proof:_ Suppose that there exists a non-regular language _L_ ∈ DSPACE(_s_(_n_)), for _s_(_n_) = _o_(log log _n_). Let _M_ be a [Turing machine](https://en.wikipedia.org/wiki/Turing_machine "Turing machine") deciding _L_ in space _s_(_n_). By our assumption _L_ ∉ DSPACE(_O_(1)); thus, for any arbitrary ![Image 1: {\displaystyle k\in \mathbb {N} }](https://wikimedia.org/api/rest_v1/media/math/render/svg/2a5bc4b7383031ba693b7433198ead7170954c1d), there exists an input of _M_ requiring more space than _k_.

Let _x_ be an input of smallest size, denoted by n, that requires more space than _k_, and ![Image 2: {\displaystyle {\mathcal {C}}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/e7b3edab7022ca9e2976651bc59c489513ee9019) be the set of all [configurations](https://en.wikipedia.org/wiki/Turing_machine "Turing machine") of _M_ on input _x_. Because _M_ ∈ DSPACE(_s_(_n_)), then ![Image 3: {\displaystyle |{\mathcal {C}}|\leq 2^{c.s(n)}=o(\log n)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/629490e1a733eda7213fa1dcb695ca5fb702a7ba), where _c_ is a constant depending on _M_.

Let _S_ denote the set of all possible [crossing sequences](https://en.wikipedia.org/wiki/Crossing_sequence_(Turing_machines) "Crossing sequence (Turing machines)") of _M_ on _x_. Note that the length of a crossing sequence of _M_ on _x_ is at most ![Image 4: {\displaystyle |{\mathcal {C}}|}](https://wikimedia.org/api/rest_v1/media/math/render/svg/fdb08d532e1fc4ab01ec67f37082fef36f051caf): if it is longer than that, then some configuration will repeat, and _M_ will go into an infinite loop. There are also at most ![Image 5: {\displaystyle |{\mathcal {C}}|}](https://wikimedia.org/api/rest_v1/media/math/render/svg/fdb08d532e1fc4ab01ec67f37082fef36f051caf) possibilities for every element of a crossing sequence, so the number of different crossing sequences of _M_ on _x_ is

![Image 6: {\displaystyle |S|\leq |{\mathcal {C}}|^{|{\mathcal {C}}|}\leq (2^{c.s(n)})^{2^{c.s(n)}}=2^{c.s(n).2^{c.s(n)}}<2^{2^{2c.s(n)}}=2^{2^{o(\log \log n)}}=o(n)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/a6789665a68dea7cdfa02d594265b5d5e016c223)
According to [pigeonhole principle](https://en.wikipedia.org/wiki/Pigeonhole_principle "Pigeonhole principle"), there exist indexes _i_<_j_ such that ![Image 7: {\displaystyle {\mathcal {C}}_{i}(x)={\mathcal {C}}_{j}(x)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/2dde774de461304265d9d0134143cc34aaa88ac5), where ![Image 8: {\displaystyle {\mathcal {C}}_{i}(x)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/74ae7f117507a98a0902333638409c8631d1db59) and ![Image 9: {\displaystyle {\mathcal {C}}_{j}(x)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/fc19e4bc66f2c8fee7b133dcb8716ce6ad1b79b3) are the crossing sequences at boundary _i_ and _j_, respectively.

Let x' be the string obtained from x by removing all cells from _i_ + 1 to _j_. The machine M still behaves exactly the same way on input x' as on input x, so it needs the same space to compute x' as to compute x. However, |_x'_| < |_x_|, contradicting the definition of x. Hence, there does not exist such a language L as assumed. □

The above theorem implies the necessity of the [space-constructible function](https://en.wikipedia.org/wiki/Space-constructible_function "Space-constructible function") assumption in the [space hierarchy theorem](https://en.wikipedia.org/wiki/Space_hierarchy_theorem "Space hierarchy theorem").

**DSPACE** is traditionally measured on a [deterministic Turing machine](https://en.wikipedia.org/wiki/Deterministic_Turing_machine "Deterministic Turing machine"). Several important space complexity classes are [sublinear](https://en.wikipedia.org/wiki/Sublinear "Sublinear"), that is, smaller than the size of the input. Thus, "charging" the algorithm for the size of the input, or for the size of the output, would not truly capture the memory space used. This is solved by defining the [multi-tape Turing machine with input and output](https://en.wikipedia.org/wiki/Multi-tape_Turing_machine_with_input_and_output "Multi-tape Turing machine with input and output"), which is a standard multi-tape Turing machine, except that the input tape may never be written-to, and the output tape may never be read from. This allows smaller space classes, such as [L](https://en.wikipedia.org/wiki/L_(complexity) "L (complexity)") (logarithmic space), to be defined in terms of the amount of space used by all of the work tapes (excluding the special input and output tapes).

Since many symbols might be packed into one by taking a suitable power of the alphabet, for all _c_ ≥ 1 and _f_ such that _f_(_n_) ≥ _1_, the class of languages recognizable in _c f_(_n_) space is the same as the class of languages recognizable in _f_(_n_) space. This justifies usage of [big O notation](https://en.wikipedia.org/wiki/Big_O_notation "Big O notation") in the definition.

The [space hierarchy theorem](https://en.wikipedia.org/wiki/Space_hierarchy_theorem "Space hierarchy theorem") shows that, for every [space-constructible function](https://en.wikipedia.org/wiki/Space-constructible_function "Space-constructible function")![Image 10: {\displaystyle f:\mathbb {N} \to \mathbb {N} }](https://wikimedia.org/api/rest_v1/media/math/render/svg/dfa847e103c9e2e5075b1b510f67aad8ceae9349), there exists some language L which is decidable in space ![Image 11: {\displaystyle O(f(n))}](https://wikimedia.org/api/rest_v1/media/math/render/svg/756b4d8648334719f65bf5e6269c7a2b3a502f13) but not in space ![Image 12: {\displaystyle o(f(n))}](https://wikimedia.org/api/rest_v1/media/math/render/svg/4d3b141eaaade4d03df43ccad39e1cd95ccc66e2).

Relation with other complexity classes
--------------------------------------

[[edit](https://en.wikipedia.org/w/index.php?title=DSPACE&action=edit&section=4 "Edit section: Relation with other complexity classes")]

**DSPACE** is the deterministic counterpart of **[NSPACE](https://en.wikipedia.org/wiki/NSPACE "NSPACE")**, the class of [memory space](https://en.wikipedia.org/wiki/Memory_space_(computational_resource) "Memory space (computational resource)") on a [non-deterministic Turing machine](https://en.wikipedia.org/wiki/Non-deterministic_Turing_machine "Non-deterministic Turing machine"). By [Savitch's theorem](https://en.wikipedia.org/wiki/Savitch%27s_theorem "Savitch's theorem"),[[3]](https://en.wikipedia.org/wiki/DSPACE#cite_note-AB86-3) we have that

![Image 13: {\displaystyle {\mathsf {DSPACE}}(s(n))\subseteq {\mathsf {NSPACE}}(s(n))\subseteq {\mathsf {DSPACE}}{\bigl (}(s(n))^{2}{\bigr )}.}](https://wikimedia.org/api/rest_v1/media/math/render/svg/3fd4061e265a3d2428fa8faa26a052d516ad38bf)
**[NTIME](https://en.wikipedia.org/wiki/NTIME "NTIME")** is related to DSPACE in the following way. For any [time constructible](https://en.wikipedia.org/wiki/Time_constructible "Time constructible") function _t_(_n_), we have

![Image 14: {\displaystyle {\mathsf {NTIME}}(t(n))\subseteq {\mathsf {DSPACE}}(t(n))}](https://wikimedia.org/api/rest_v1/media/math/render/svg/b3f58e34156e07c95a8de880d5835371fc711101).
A much better simulation is known for [deterministic time](https://en.wikipedia.org/wiki/DTIME "DTIME"): if ![Image 15: {\displaystyle t(n)\geq n}](https://wikimedia.org/api/rest_v1/media/math/render/svg/5440978d72a0d53db6562fe1550a6cf3c925e086),

![Image 16: {\displaystyle {\mathsf {DTIME}}(t(n))\subseteq {\mathsf {DSPACE}}\left({\sqrt {t(n)\log t(n)}}\right)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/af7555c5f9cc22d988e2cb769247da8ddb3c0236)
by a result of [Williams](https://en.wikipedia.org/wiki/Ryan_Williams_(computer_scientist) "Ryan Williams (computer scientist)"),[[4]](https://en.wikipedia.org/wiki/DSPACE#cite_note-4) improving an older bound of ![Image 17: {\displaystyle O(t/\log t)}](https://wikimedia.org/api/rest_v1/media/math/render/svg/142b024c34d0d37855bb4ab84f03a447002a7f9e) by [Hopcroft](https://en.wikipedia.org/wiki/John_Hopcroft "John Hopcroft"), Paul, and [Valiant](https://en.wikipedia.org/wiki/Leslie_Valiant "Leslie Valiant").[[5]](https://en.wikipedia.org/wiki/DSPACE#cite_note-5)

On the other hand, for any function ![Image 18: {\displaystyle s(n)\geq \log n}](https://wikimedia.org/api/rest_v1/media/math/render/svg/7b5d4a7e4835ea1b4ec7d77eabdcca3aafb028d0),

![Image 19: {\displaystyle {\mathsf {DSPACE}}(s(n))\subseteq {\mathsf {DTIME}}{\bigl (}2^{O(s(n))}{\bigr )}}](https://wikimedia.org/api/rest_v1/media/math/render/svg/287ce0f8fbd1cbf0af3a38b1e8279fbd3bd9ec24).

1.   **[^](https://en.wikipedia.org/wiki/DSPACE#cite_ref-AS28_1-0)**Szepietowski (1994) p. 28
2.   **[^](https://en.wikipedia.org/wiki/DSPACE#cite_ref-2)**Alberts, Maris (1985), _Space complexity of alternating Turing machines_
3.   **[^](https://en.wikipedia.org/wiki/DSPACE#cite_ref-AB86_3-0)**Arora & Barak (2009) p. 86
4.   **[^](https://en.wikipedia.org/wiki/DSPACE#cite_ref-4)**Ryan Williams, R. (2025-06-15). ["Simulating Time with Square-Root Space"](https://doi.org/10.1145/3717823.3718225). _Proceedings of the 57th Annual ACM Symposium on Theory of Computing_. ACM. pp.13–23. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/3717823.3718225](https://doi.org/10.1145%2F3717823.3718225). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[979-8-4007-1510-5](https://en.wikipedia.org/wiki/Special:BookSources/979-8-4007-1510-5 "Special:BookSources/979-8-4007-1510-5").
5.   **[^](https://en.wikipedia.org/wiki/DSPACE#cite_ref-5)**Hopcroft, John; Paul, Wolfgang; Valiant, Leslie (April 1977). ["On Time Versus Space"](https://dl.acm.org/doi/10.1145/322003.322015). _Journal of the ACM_. **24** (2): 332–337. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/322003.322015](https://doi.org/10.1145%2F322003.322015). [ISSN](https://en.wikipedia.org/wiki/ISSN_(identifier) "ISSN (identifier)")[0004-5411](https://search.worldcat.org/issn/0004-5411).

*   Szepietowski, Andrzej (1994). _Turing Machines with Sublogarithmic Space_. [Springer Science+Business Media](https://en.wikipedia.org/wiki/Springer_Science%2BBusiness_Media "Springer Science+Business Media"). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-3-540-58355-4](https://en.wikipedia.org/wiki/Special:BookSources/978-3-540-58355-4 "Special:BookSources/978-3-540-58355-4").
*   [Arora, Sanjeev](https://en.wikipedia.org/wiki/Sanjeev_Arora "Sanjeev Arora"); Barak, Boaz (2009). _Computational complexity. A modern approach_. [Cambridge University Press](https://en.wikipedia.org/wiki/Cambridge_University_Press "Cambridge University Press"). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-0-521-42426-4](https://en.wikipedia.org/wiki/Special:BookSources/978-0-521-42426-4 "Special:BookSources/978-0-521-42426-4"). [Zbl](https://en.wikipedia.org/wiki/Zbl_(identifier) "Zbl (identifier)")[1193.68112](https://zbmath.org/?format=complete&q=an:1193.68112).

*   _[Complexity Zoo](https://en.wikipedia.org/wiki/Complexity\_Zoo "Complexity Zoo")_: [DSPACE(_f_(_n_))](https://complexityzoo.net/Complexity_Zoo:D#dspace).
