Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Rotations and motions 2 Formalism alternatives Toggle Formalism alternatives subsection 2.1 Rotation matrix 2.2 Euler axis and angle (rotation vector) 2.3 Euler rotations 2.4 Quaternions 2.5 Rodrigues vector 2.6 Conformal rotation vector 2.7 Cayley–Klein parameters 2.8 Higher-dimensional analogues 2.9 Vector transformation law 3 Conversion formulae between formalisms Toggle Conversion formulae between formalisms subsection 3.1 Rotation matrix ↔ Euler angles 3.1.1 Rotation matrix → Euler angles ( z - x - z extrinsic) 3.1.2 Euler angles ( z - y ′- x ″ intrinsic) → rotation matrix 3.2 Rotation matrix ↔ Euler axis/angle 3.3 Rotation matrix ↔ quaternion 3.4 Euler angles ↔ quaternion 3.4.1 Euler angles ( z - x - z extrinsic) → quaternion 3.4.2 Euler angles ( z - y ′- x ″ intrinsic) → quaternion 3.4.3 Quaternion → Euler angles ( z - x - z extrinsic) 3.4.4 Quaternion → Euler angles ( z - y ′- x ″ intrinsic) 3.5 Euler axis–angle ↔ quaternion 3.6 Rotation matrix ↔ Rodrigues vector 3.6.1 Rodrigues vector → Rotation matrix 4 Conversion formulae for derivatives Toggle Conversion formulae for derivatives subsection 4.1 Rotation matrix ↔ angular velocities 4.2 Quaternion ↔ angular velocities 5 Rotors in a geometric algebra 6 See also 7 References 8 Further reading 9 External links Toggle the table of contents Rotation formalisms in three dimensions 3 languages Español فارسی 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Ways to represent 3D rotations For broader coverage of this topic, see 3D rotation group .

In geometry , there exist various rotation formalisms to express a rotation in three dimensions as a mathematical transformation . In physics, this concept is applied to classical mechanics where rotational (or angular) kinematics is the science of quantitative description of a purely rotational motion . The orientation of an object at a given instant is described with the same tools, as it is defined as an imaginary rotation from a reference placement in space, rather than an actually observed rotation from a previous placement in space.

According to Euler's rotation theorem , the rotation of a rigid body (or three-dimensional coordinate system with a fixed origin ) is described by a single rotation about some axis. Such a rotation may be uniquely described by a minimum of three real parameters. However, for various reasons, there are several ways to represent it. Many of these representations use more than the necessary minimum of three parameters, although each of them still has only three degrees of freedom .

An example where rotation representation is used is in computer vision , where an automated observer needs to track a target. Consider a rigid body, with three orthogonal unit vectors fixed to its body (representing the three axes of the object's local coordinate system ). The basic problem is to specify the orientation of these three unit vectors , and hence the rigid body, with respect to the observer's coordinate system, regarded as a reference placement in space.

Rotations and motions [ edit ] Main articles: Motion (geometry) and Rotation (mathematics) Rotation formalisms are focused on proper ( orientation-preserving ) motions of the Euclidean space with one fixed point , that a rotation refers to. Although physical motions with a fixed point are an important case (such as ones described in the center-of-mass frame , or motions of a joint ), this approach creates a knowledge about all motions. Any proper motion of the Euclidean space decomposes to a rotation around the origin and a translation . Whichever the order of their composition will be, the "pure" rotation component wouldn't change, uniquely determined by the complete motion.

One can also understand "pure" rotations as linear maps in a vector space equipped with Euclidean structure, not as maps of points of a corresponding affine space . In other words, a rotation formalism captures only the rotational part of a motion, that contains three degrees of freedom, and ignores the translational part, that contains another three.

When representing a rotation as numbers in a computer, some people prefer the quaternion representation or the axis+angle representation, because they avoid the gimbal lock that can occur with Euler rotations.

[ 1 ] Formalism alternatives [ edit ] Rotation matrix [ edit ] Main article: Rotation matrix The above-mentioned triad of unit vectors is also called a basis . Specifying the coordinates ( components ) of vectors of this basis in its current (rotated) position, in terms of the reference (non-rotated) coordinate axes, will completely describe the rotation. The three unit vectors, û , v̂ and ŵ , that form the rotated basis each consist of 3 coordinates, yielding a total of 9 parameters.

These parameters can be written as the elements of a 3 × 3 matrix A , called a rotation matrix . Typically, the coordinates of each of these vectors are arranged along a column of the matrix (however, beware that an alternative definition of rotation matrix exists and is widely used, where the vectors' coordinates defined above are arranged by rows [ 2 ] ) A = [ u ^ ^ x v ^ ^ x w ^ ^ x u ^ ^ y v ^ ^ y w ^ ^ y u ^ ^ z v ^ ^ z w ^ ^ z ] {\displaystyle \mathbf {A} ={\begin{bmatrix}{\hat {\mathbf {u} }}_{x}&{\hat {\mathbf {v} }}_{x}&{\hat {\mathbf {w} }}_{x}\\{\hat {\mathbf {u} }}_{y}&{\hat {\mathbf {v} }}_{y}&{\hat {\mathbf {w} }}_{y}\\{\hat {\mathbf {u} }}_{z}&{\hat {\mathbf {v} }}_{z}&{\hat {\mathbf {w} }}_{z}\\\end{bmatrix}}} The elements of the rotation matrix are not all independent—as Euler's rotation theorem dictates, the rotation matrix has only three degrees of freedom.

The rotation matrix has the following properties: A is a real, orthogonal matrix , hence each of its rows or columns represents a unit vector .

The eigenvalues of A are { 1 , e ± ± i θ θ } = { 1 , cos ⁡ ⁡ θ θ + i sin ⁡ ⁡ θ θ , cos ⁡ ⁡ θ θ − − i sin ⁡ ⁡ θ θ } {\displaystyle \left\{1,e^{\pm i\theta }\right\}=\{1,\ \cos \theta +i\sin \theta ,\ \cos \theta -i\sin \theta \}} where i is the standard imaginary unit with the property i 2 = −1 The determinant of A is +1, equivalent to the product of its eigenvalues.

The trace of A is 1 + 2 cos θ , equivalent to the sum of its eigenvalues.

The angle θ which appears in the eigenvalue expression corresponds to the angle of the Euler axis and angle representation. The eigenvector corresponding to the eigenvalue of 1 is the accompanying Euler axis, since the axis is the only (nonzero) vector which remains unchanged by left-multiplying (rotating) it with the rotation matrix.

The above properties are equivalent to | u ^ ^ | = | v ^ ^ | = | w ^ ^ | = 1 u ^ ^ ⋅ ⋅ v ^ ^ = 0 u ^ ^ × × v ^ ^ = w ^ ^ , {\displaystyle {\begin{aligned}|{\hat {\mathbf {u} }}|=|{\hat {\mathbf {v} }}|=|{\hat {\mathbf {w} }}|&=1\\{\hat {\mathbf {u} }}\cdot {\hat {\mathbf {v} }}&=0\\{\hat {\mathbf {u} }}\times {\hat {\mathbf {v} }}&={\hat {\mathbf {w} }}\,,\end{aligned}}} which is another way of stating that ( û , v̂ , ŵ ) form a 3D orthonormal basis . These statements comprise a total of 6 conditions (the cross product contains 3), leaving the rotation matrix with just 3 degrees of freedom, as required.

Two successive rotations represented by matrices A 1 and A 2 are easily combined as elements of a group, A total = A 2 A 1 {\displaystyle \mathbf {A} _{\text{total}}=\mathbf {A} _{2}\mathbf {A} _{1}} (Note the order, since the vector being rotated is multiplied from the right).

The ease by which vectors can be rotated using a rotation matrix, as well as the ease of combining successive rotations, make the rotation matrix a useful and popular way to represent rotations, even though it is less concise than other representations.

Euler axis and angle (rotation vector) [ edit ] A visualization of a rotation represented by an Euler axis and angle.

Main article: Axis–angle representation From Euler's rotation theorem we know that any rotation can be expressed as a single rotation about some axis. The axis is the unit vector (unique except for sign) which remains unchanged by the rotation. The magnitude of the angle is also unique, with its sign being determined by the sign of the rotation axis.

The axis can be represented as a three-dimensional unit vector e ^ ^ = [ e x e y e z ] {\displaystyle {\hat {\mathbf {e} }}={\begin{bmatrix}e_{x}\\e_{y}\\e_{z}\end{bmatrix}}} and the angle by a scalar θ .

Since the axis is normalized, it has only two degrees of freedom . The angle adds the third degree of freedom to this rotation representation.

One may wish to express rotation as a rotation vector , or Euler vector , an un-normalized three-dimensional vector the direction of which specifies the axis, and the length of which is θ , r = θ θ e ^ ^ .

{\displaystyle \mathbf {r} =\theta {\hat {\mathbf {e} }}\,.} The rotation vector is useful in some contexts, as it represents a three-dimensional rotation with only three scalar values (its components), representing the three degrees of freedom. This is also true for representations based on sequences of three Euler angles (see below).

If the rotation angle θ is zero, the axis is not uniquely defined. Combining two successive rotations, each represented by an Euler axis and angle, is not straightforward, and in fact does not satisfy the law of vector addition, which shows that finite rotations are not really vectors at all. It is best to employ the rotation matrix or quaternion notation, calculate the product, and then convert back to Euler axis and angle.

Euler rotations [ edit ] Euler rotations of the Earth.

Intrinsic (green), precession (blue) and nutation (red) Main article: Euler rotations The idea behind Euler rotations is to split the complete rotation of the coordinate system into three simpler constitutive rotations, called precession , nutation , and intrinsic rotation , being each one of them an increment on one of the Euler angles . Notice that the outer matrix will represent a rotation around one of the axes of the reference frame, and the inner matrix represents a rotation around one of the moving frame axes. The middle matrix represents a rotation around an intermediate axis called line of nodes .

However, the definition of Euler angles is not unique and in the literature many different conventions are used. These conventions depend on the axes about which the rotations are carried out, and their sequence (since rotations on a sphere are non-commutative ).

The convention being used is usually indicated by specifying the axes about which the consecutive rotations (before being composed) take place, referring to them by index (1, 2, 3) or letter (X, Y, Z) . The engineering and robotics communities typically use 3-1-3 Euler angles. Notice that after composing the independent rotations, they do not rotate about their axis anymore. The most external matrix rotates the other two, leaving the second rotation matrix over the line of nodes, and the third one in a frame comoving with the body. There are 3 × 3 × 3 = 27 possible combinations of three basic rotations but only 3 × 2 × 2 = 12 of them can be used for representing arbitrary 3D rotations as Euler angles. These 12 combinations avoid consecutive rotations around the same axis (such as XXY) which would reduce the degrees of freedom that can be represented.

Therefore, Euler angles are never expressed in terms of the external frame, or in terms of the co-moving rotated body frame, but in a mixture. Other conventions (e.g., rotation matrix or quaternions ) are used to avoid this problem.

In aviation orientation of the aircraft is usually expressed as intrinsic Tait-Bryan angles following the z - y ′- x ″ convention, which are called heading , elevation , and bank (or synonymously, yaw , pitch , and roll ).

Quaternions [ edit ] Main article: Quaternions and spatial rotation Quaternions , which form a four-dimensional vector space , have proven very useful in representing rotations due to several advantages over the other representations mentioned in this article.

A quaternion representation of rotation is written as a versor (normalized quaternion): q ^ ^ = q i i + q j j + q k k + q r = [ q i q j q k q r ] {\displaystyle {\hat {\mathbf {q} }}=q_{i}\mathbf {i} +q_{j}\mathbf {j} +q_{k}\mathbf {k} +q_{r}={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\\q_{r}\end{bmatrix}}} The above definition stores the quaternion as an array following the convention used in (Wertz 1980) and (Markley 2003). An alternative definition, used for example in (Coutsias 1999) and (Schmidt 2001), defines the "scalar" term as the first quaternion element, with the other elements shifted down one position.

In terms of the Euler axis e ^ ^ = [ e x e y e z ] {\displaystyle {\hat {\mathbf {e} }}={\begin{bmatrix}e_{x}\\e_{y}\\e_{z}\end{bmatrix}}} and angle θ this versor's components are expressed as follows: q i = e x sin ⁡ ⁡ θ θ 2 q j = e y sin ⁡ ⁡ θ θ 2 q k = e z sin ⁡ ⁡ θ θ 2 q r = cos ⁡ ⁡ θ θ 2 {\displaystyle {\begin{aligned}q_{i}&=e_{x}\sin {\frac {\theta }{2}}\\q_{j}&=e_{y}\sin {\frac {\theta }{2}}\\q_{k}&=e_{z}\sin {\frac {\theta }{2}}\\q_{r}&=\cos {\frac {\theta }{2}}\end{aligned}}} Inspection shows that the quaternion parametrization obeys the following constraint: q i 2 + q j 2 + q k 2 + q r 2 = 1 {\displaystyle q_{i}^{2}+q_{j}^{2}+q_{k}^{2}+q_{r}^{2}=1} The last term (in our definition) is often called the scalar term, which has its origin in quaternions when understood as the mathematical extension of the complex numbers, written as a + b i + c j + d k with a , b , c , d ∈ ∈ R {\displaystyle a+bi+cj+dk\qquad {\text{with }}a,b,c,d\in \mathbb {R} } and where { i , j , k } are the hypercomplex numbers satisfying i 2 = j 2 = k 2 = − − 1 i j = − − j i = k j k = − − k j = i k i = − − i k = j {\displaystyle {\begin{array}{ccccccc}i^{2}&=&j^{2}&=&k^{2}&=&-1\\ij&=&-ji&=&k&&\\jk&=&-kj&=&i&&\\ki&=&-ik&=&j&&\end{array}}} Quaternion multiplication, which is used to specify a composite rotation, is performed in the same manner as multiplication of complex numbers , except that the order of the elements must be taken into account, since multiplication is not commutative. In matrix notation we can write quaternion multiplication as q ~ ~ ⊗ ⊗ q = [ q r q k − − q j q i − − q k q r q i q j q j − − q i q r q k − − q i − − q j − − q k q r ] [ q ~ ~ i q ~ ~ j q ~ ~ k q ~ ~ r ] = [ q ~ ~ r − − q ~ ~ k q ~ ~ j q ~ ~ i q ~ ~ k q ~ ~ r − − q ~ ~ i q ~ ~ j − − q ~ ~ j q ~ ~ i q ~ ~ r q ~ ~ k − − q ~ ~ i − − q ~ ~ j − − q ~ ~ k q ~ ~ r ] [ q i q j q k q r ] {\displaystyle {\tilde {\mathbf {q} }}\otimes \mathbf {q} ={\begin{bmatrix}\;\;\,q_{r}&\;\;\,q_{k}&-q_{j}&\;\;\,q_{i}\\-q_{k}&\;\;\,q_{r}&\;\;\,q_{i}&\;\;\,q_{j}\\\;\;\,q_{j}&-q_{i}&\;\;\,q_{r}&\;\;\,q_{k}\\-q_{i}&-q_{j}&-q_{k}&\;\;\,q_{r}\end{bmatrix}}{\begin{bmatrix}{\tilde {q}}_{i}\\{\tilde {q}}_{j}\\{\tilde {q}}_{k}\\{\tilde {q}}_{r}\end{bmatrix}}={\begin{bmatrix}\;\;\,{\tilde {q}}_{r}&-{\tilde {q}}_{k}&\;\;\,{\tilde {q}}_{j}&\;\;\,{\tilde {q}}_{i}\\\;\;\,{\tilde {q}}_{k}&\;\;\,{\tilde {q}}_{r}&-{\tilde {q}}_{i}&\;\;\,{\tilde {q}}_{j}\\-{\tilde {q}}_{j}&\;\;\,{\tilde {q}}_{i}&\;\;\,{\tilde {q}}_{r}&\;\;\,{\tilde {q}}_{k}\\-{\tilde {q}}_{i}&-{\tilde {q}}_{j}&-{\tilde {q}}_{k}&\;\;\,{\tilde {q}}_{r}\end{bmatrix}}{\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\\q_{r}\end{bmatrix}}} Combining two consecutive quaternion rotations is therefore just as simple as using the rotation matrix. Just as two successive rotation matrices, A 1 followed by A 2 , are combined as A 3 = A 2 A 1 , {\displaystyle \mathbf {A} _{3}=\mathbf {A} _{2}\mathbf {A} _{1},} we can represent this with quaternion parameters in a similarly concise way: q 3 = q 2 ⊗ ⊗ q 1 {\displaystyle \mathbf {q} _{3}=\mathbf {q} _{2}\otimes \mathbf {q} _{1}} Quaternions are a very popular parametrization due to the following properties: More compact than the matrix representation and less susceptible to round-off errors Expression of the rotation matrix in terms of quaternion parameters involves no trigonometric functions It is simple to combine two individual rotations represented as quaternions using a quaternion product Like rotation matrices, quaternions must sometimes be renormalized due to rounding errors, to make sure that they correspond to valid rotations. The computational cost of renormalizing a quaternion, however, is much less than for normalizing a 3 × 3 matrix.

Quaternions also capture the spinorial character of rotations in three dimensions. For a three-dimensional object connected to its (fixed) surroundings by slack strings or bands, the strings or bands can be untangled after two complete turns about some fixed axis from an initial untangled state. Algebraically, the quaternion describing such a rotation changes from a scalar +1 (initially), through (scalar + pseudovector) values to scalar −1 (at one full turn), through (scalar + pseudovector) values back to scalar +1 (at two full turns). This cycle repeats every 2 turns. After 2 n turns (integer n > 0 ), without any intermediate untangling attempts, the strings/bands can be partially untangled back to the 2( n − 1) turns state with each application of the same procedure used in untangling from 2 turns to 0 turns. Applying the same procedure n times will take a 2 n -tangled object back to the untangled or 0 turn state. The untangling process also removes any rotation-generated twisting about the strings/bands themselves. Simple 3D mechanical models can be used to demonstrate these facts.

Rodrigues vector [ edit ] See also: Rodrigues' rotation formula The Rodrigues vector (sometimes called the Gibbs vector , with coordinates called Rodrigues parameters ) [ 3 ] [ 4 ] can be expressed in terms of the axis and angle of the rotation as follows: g = e ^ ^ tan ⁡ ⁡ θ θ 2 {\displaystyle \mathbf {g} ={\hat {\mathbf {e} }}\tan {\frac {\theta }{2}}} This representation is a higher-dimensional analog of the gnomonic projection , mapping unit quaternions from a 3-sphere onto the 3-dimensional pure-vector hyperplane.

It has a discontinuity at 180° ( π radians): as any rotation vector r tends to an angle of π radians, its tangent tends to infinity.

A rotation g followed by a rotation f in the Rodrigues representation has the simple rotation composition form ( g , f ) = g + f − − f × × g 1 − − g ⋅ ⋅ f .

{\displaystyle (\mathbf {g} ,\mathbf {f} )={\frac {\mathbf {g} +\mathbf {f} -\mathbf {f} \times \mathbf {g} }{1-\mathbf {g} \cdot \mathbf {f} }}\,.} Today, the most straightforward way to prove this formula is in the (faithful) doublet representation , where g = n̂ tan a , etc.

The combinatoric features of the Pauli matrix derivation just mentioned are also identical to the equivalent quaternion derivation below.  Construct a quaternion associated with a spatial rotation R as, S = cos ⁡ ⁡ ϕ ϕ 2 + sin ⁡ ⁡ ϕ ϕ 2 S .

{\displaystyle S=\cos {\frac {\phi }{2}}+\sin {\frac {\phi }{2}}\mathbf {S} .} Then the composition of the rotation R B with R A is the rotation R C = R B R A , with rotation axis and angle defined by the product of the quaternions, A = cos ⁡ ⁡ α α 2 + sin ⁡ ⁡ α α 2 A and B = cos ⁡ ⁡ β β 2 + sin ⁡ ⁡ β β 2 B , {\displaystyle A=\cos {\frac {\alpha }{2}}+\sin {\frac {\alpha }{2}}\mathbf {A} \quad {\text{and}}\quad B=\cos {\frac {\beta }{2}}+\sin {\frac {\beta }{2}}\mathbf {B} ,} that is C = cos ⁡ ⁡ γ γ 2 + sin ⁡ ⁡ γ γ 2 C = ( cos ⁡ ⁡ β β 2 + sin ⁡ ⁡ β β 2 B ) ( cos ⁡ ⁡ α α 2 + sin ⁡ ⁡ α α 2 A ) .

{\displaystyle C=\cos {\frac {\gamma }{2}}+\sin {\frac {\gamma }{2}}\mathbf {C} =\left(\cos {\frac {\beta }{2}}+\sin {\frac {\beta }{2}}\mathbf {B} \right)\left(\cos {\frac {\alpha }{2}}+\sin {\frac {\alpha }{2}}\mathbf {A} \right).} Expand this quaternion product to cos ⁡ ⁡ γ γ 2 + sin ⁡ ⁡ γ γ 2 C = ( cos ⁡ ⁡ β β 2 cos ⁡ ⁡ α α 2 − − sin ⁡ ⁡ β β 2 sin ⁡ ⁡ α α 2 B ⋅ ⋅ A ) + ( sin ⁡ ⁡ β β 2 cos ⁡ ⁡ α α 2 B + sin ⁡ ⁡ α α 2 cos ⁡ ⁡ β β 2 A + sin ⁡ ⁡ β β 2 sin ⁡ ⁡ α α 2 B × × A ) .

{\displaystyle \cos {\frac {\gamma }{2}}+\sin {\frac {\gamma }{2}}\mathbf {C} =\left(\cos {\frac {\beta }{2}}\cos {\frac {\alpha }{2}}-\sin {\frac {\beta }{2}}\sin {\frac {\alpha }{2}}\mathbf {B} \cdot \mathbf {A} \right)+\left(\sin {\frac {\beta }{2}}\cos {\frac {\alpha }{2}}\mathbf {B} +\sin {\frac {\alpha }{2}}\cos {\frac {\beta }{2}}\mathbf {A} +\sin {\frac {\beta }{2}}\sin {\frac {\alpha }{2}}\mathbf {B} \times \mathbf {A} \right).} Divide both sides of this equation by the identity resulting from the previous one, cos ⁡ ⁡ γ γ 2 = cos ⁡ ⁡ β β 2 cos ⁡ ⁡ α α 2 − − sin ⁡ ⁡ β β 2 sin ⁡ ⁡ α α 2 B ⋅ ⋅ A , {\displaystyle \cos {\frac {\gamma }{2}}=\cos {\frac {\beta }{2}}\cos {\frac {\alpha }{2}}-\sin {\frac {\beta }{2}}\sin {\frac {\alpha }{2}}\mathbf {B} \cdot \mathbf {A} ,} and evaluate tan ⁡ ⁡ γ γ 2 C = tan ⁡ ⁡ β β 2 B + tan ⁡ ⁡ α α 2 A + tan ⁡ ⁡ β β 2 tan ⁡ ⁡ α α 2 B × × A 1 − − tan ⁡ ⁡ β β 2 tan ⁡ ⁡ α α 2 B ⋅ ⋅ A .

{\displaystyle \tan {\frac {\gamma }{2}}\mathbf {C} ={\frac {\tan {\frac {\beta }{2}}\mathbf {B} +\tan {\frac {\alpha }{2}}\mathbf {A} +\tan {\frac {\beta }{2}}\tan {\frac {\alpha }{2}}\mathbf {B} \times \mathbf {A} }{1-\tan {\frac {\beta }{2}}\tan {\frac {\alpha }{2}}\mathbf {B} \cdot \mathbf {A} }}.} This is Rodrigues' formula for the axis of a composite rotation defined in terms of the axes of the two component rotations.  He derived this formula in 1840 (see page 408).

[ 3 ] The three rotation axes A , B , and C form a spherical triangle and the dihedral angles between the planes formed by the sides of this triangle are defined by the rotation angles.

Conformal rotation vector [ edit ] Main article: Conformal rotation vector The stereographic projection of a unit quaternion onto the pure-imaginary hyperplane is called the conformal rotation vector , with coordinates sometimes called Modified Rodrigues parameters (MRPs).

The conformal rotation vector can be expressed in terms of Euler axis and angle by p = e ^ ^ tan ⁡ ⁡ θ θ 4 .

{\displaystyle \mathbf {p} ={\hat {\mathbf {e} }}\tan {\frac {\theta }{4}}\,.} The MRPs can be expressed in terms of the components of a unit quaternion representing the same rotation as p x , y , z = q i , j , k 1 + q r .

{\displaystyle p_{x,y,z}={\frac {q_{i,j,k}}{1+q_{r}}}\,.} The stereographic projection of the opposite quaternion − q results in a different conformal rotation vector p s than the projection of the original quaternion q .  Comparing components one obtains that p x , y , z s = − − q i , j , k 1 − − q r = − − p x , y , z p 2 .

{\displaystyle p_{x,y,z}^{s}={\frac {-q_{i,j,k}}{1-q_{r}}}={\frac {-p_{x,y,z}}{\mathbf {p} ^{2}}}\,.} Notably, if one of these vectors lies inside the unit 3-sphere, the other will lie outside.

Using the same notation as above, a unit quaternion is obtained with: s = 2 1 + ‖ ‖ p ‖ ‖ 2 , { q r = s − − 1 , q i = s p x , q j = s p y , q k = s p z .

{\displaystyle s={\frac {2}{1+\lVert \mathbf {p} \rVert ^{2}}},\qquad {\begin{cases}q_{r}&=s-1,\\q_{i}&=s\,p_{x},\\q_{j}&=s\,p_{y},\\q_{k}&=s\,p_{z}.\end{cases}}} Cayley–Klein parameters [ edit ] Further information: Euler–Rodrigues formula § Cayley–Klein parameters See definition at Wolfram Mathworld .

Higher-dimensional analogues [ edit ] See also: Rotations in 4-dimensional Euclidean space Vector transformation law [ edit ] Active rotations of a 3D vector p in Euclidean space around an axis n over an angle η can be easily written in terms of dot and cross products as follows: p ′ = p ∥ ∥ n + cos ⁡ ⁡ η η p ⊥ ⊥ + sin ⁡ ⁡ η η p ∧ ∧ n {\displaystyle \mathbf {p} '=p_{\parallel }\mathbf {n} +\cos {\eta }\,\mathbf {p} _{\perp }+\sin {\eta }\,\mathbf {p} \wedge \mathbf {n} } wherein p ∥ ∥ = p ⋅ ⋅ n {\displaystyle p_{\parallel }=\mathbf {p} \cdot \mathbf {n} } is the longitudinal component of p along n , given by the dot product , p ⊥ ⊥ = p − − ( p ⋅ ⋅ n ) n {\displaystyle \mathbf {p} _{\perp }=\mathbf {p} -(\mathbf {p} \cdot \mathbf {n} )\mathbf {n} } is the transverse component of p with respect to n , and p ∧ ∧ n {\displaystyle \mathbf {p} \wedge \mathbf {n} } is the cross product of p with n .

The above formula shows that the longitudinal component of p remains unchanged, whereas the transverse portion of p is rotated in the plane perpendicular to n . This plane is spanned by the transverse portion of p itself and a direction perpendicular to both p and n . The rotation is directly identifiable in the equation as a 2D rotation over an angle η .

Passive rotations can be described by the same formula, but with an inverse sign of either η or n .

Conversion formulae between formalisms [ edit ] Main article: Charts on SO(3) Rotation matrix ↔ Euler angles [ edit ] The Euler angles ( φ , θ , ψ ) can be extracted from the rotation matrix A by inspecting the rotation matrix in analytical form.

Rotation matrix → Euler angles ( z - x - z extrinsic) [ edit ] Using the x -convention, the 3-1-3 extrinsic Euler angles φ , θ and ψ (around the z -axis, x -axis and again the Z {\displaystyle Z} -axis) can be obtained as follows: ϕ ϕ = atan2 ⁡ ⁡ ( A 31 , A 32 ) θ θ = arccos ⁡ ⁡ ( A 33 ) ψ ψ = − − atan2 ⁡ ⁡ ( A 13 , A 23 ) {\displaystyle {\begin{aligned}\phi &=\operatorname {atan2} \left(A_{31},A_{32}\right)\\\theta &=\arccos \left(A_{33}\right)\\\psi &=-\operatorname {atan2} \left(A_{13},A_{23}\right)\end{aligned}}} Note that atan2( a , b ) is equivalent to arctan ⁠ a / b ⁠ where it also takes into account the quadrant that the point ( b , a ) is in; see atan2 .

When implementing the conversion, one has to take into account several situations: [ 5 ] There are generally two solutions in the interval [− π , π ] 3 . The above formula works only when θ is within the interval [0, π ] .

For the special case A 33 = 0 , φ and ψ will be derived from A 11 and A 12 .

There are infinitely many but countably many solutions outside of the interval [− π , π ] 3 .

Whether all mathematical solutions apply for a given application depends on the situation.

Euler angles ( z - y ′- x ″ intrinsic) → rotation matrix [ edit ] Main article: Davenport chained rotations § Tait–Bryan chained rotations The rotation matrix A is generated from the 3-2-1 intrinsic Euler angles by multiplying the three matrices generated by rotations about the axes.

A = A 3 A 2 A 1 = A Z A Y A X {\displaystyle \mathbf {A} =\mathbf {A} _{3}\mathbf {A} _{2}\mathbf {A} _{1}=\mathbf {A} _{Z}\mathbf {A} _{Y}\mathbf {A} _{X}} The axes of the rotation depend on the specific convention being used. For the x -convention the rotations are about the x -, y - and z -axes with angles ϕ , θ and ψ , the individual matrices are as follows: A X = [ 1 0 0 0 cos ⁡ ⁡ ϕ ϕ − − sin ⁡ ⁡ ϕ ϕ 0 sin ⁡ ⁡ ϕ ϕ cos ⁡ ⁡ ϕ ϕ ] A Y = [ cos ⁡ ⁡ θ θ 0 sin ⁡ ⁡ θ θ 0 1 0 − − sin ⁡ ⁡ θ θ 0 cos ⁡ ⁡ θ θ ] A Z = [ cos ⁡ ⁡ ψ ψ − − sin ⁡ ⁡ ψ ψ 0 sin ⁡ ⁡ ψ ψ cos ⁡ ⁡ ψ ψ 0 0 0 1 ] {\displaystyle {\begin{aligned}\mathbf {A} _{X}&={\begin{bmatrix}1&0&0\\0&\cos \phi &-\sin \phi \\0&\sin \phi &\cos \phi \end{bmatrix}}\\[5px]\mathbf {A} _{Y}&={\begin{bmatrix}\cos \theta &0&\sin \theta \\0&1&0\\-\sin \theta &0&\cos \theta \end{bmatrix}}\\[5px]\mathbf {A} _{Z}&={\begin{bmatrix}\cos \psi &-\sin \psi &0\\\sin \psi &\cos \psi &0\\0&0&1\end{bmatrix}}\end{aligned}}} This yields A = [ cos ⁡ ⁡ θ θ cos ⁡ ⁡ ψ ψ − − cos ⁡ ⁡ ϕ ϕ sin ⁡ ⁡ ψ ψ + sin ⁡ ⁡ ϕ ϕ sin ⁡ ⁡ θ θ cos ⁡ ⁡ ψ ψ sin ⁡ ⁡ ϕ ϕ sin ⁡ ⁡ ψ ψ + cos ⁡ ⁡ ϕ ϕ sin ⁡ ⁡ θ θ cos ⁡ ⁡ ψ ψ cos ⁡ ⁡ θ θ sin ⁡ ⁡ ψ ψ cos ⁡ ⁡ ϕ ϕ cos ⁡ ⁡ ψ ψ + sin ⁡ ⁡ ϕ ϕ sin ⁡ ⁡ θ θ sin ⁡ ⁡ ψ ψ − − sin ⁡ ⁡ ϕ ϕ cos ⁡ ⁡ ψ ψ + cos ⁡ ⁡ ϕ ϕ sin ⁡ ⁡ θ θ sin ⁡ ⁡ ψ ψ − − sin ⁡ ⁡ θ θ sin ⁡ ⁡ ϕ ϕ cos ⁡ ⁡ θ θ cos ⁡ ⁡ ϕ ϕ cos ⁡ ⁡ θ θ ] {\displaystyle \mathbf {A} ={\begin{bmatrix}\cos \theta \cos \psi &-\cos \phi \sin \psi +\sin \phi \sin \theta \cos \psi &\sin \phi \sin \psi +\cos \phi \sin \theta \cos \psi \\\cos \theta \sin \psi &\cos \phi \cos \psi +\sin \phi \sin \theta \sin \psi &-\sin \phi \cos \psi +\cos \phi \sin \theta \sin \psi \\-\sin \theta &\sin \phi \cos \theta &\cos \phi \cos \theta \\\end{bmatrix}}} Note: This is valid for a right-hand system, which is the convention used in almost all engineering and physics disciplines.

The interpretation of these right-handed rotation matrices is that they express coordinate transformations ( passive ) as opposed to point transformations ( active ). Because A expresses a rotation from the local frame 1 to the global frame 0 (i.e., A encodes the axes of frame 1 with respect to frame 0 ), the elementary rotation matrices are composed as above. Because the inverse rotation is just the rotation transposed, if we wanted the global-to-local rotation from frame 0 to frame 1 , we would write A T = ( A Z A Y A X ) T = A X T A Y T A Z T .

{\displaystyle \mathbf {A} ^{\mathsf {T}}=(\mathbf {A} _{Z}\mathbf {A} _{Y}\mathbf {A} _{X})^{\mathsf {T}}=\mathbf {A} _{X}^{\mathsf {T}}\mathbf {A} _{Y}^{\mathsf {T}}\mathbf {A} _{Z}^{\mathsf {T}}\,.} Rotation matrix ↔ Euler axis/angle [ edit ] If the Euler angle θ is not a multiple of π , the Euler axis ê and angle θ can be computed from the elements of the rotation matrix A as follows: θ θ = arccos ⁡ ⁡ A 11 + A 22 + A 33 − − 1 2 e 1 = A 32 − − A 23 2 sin ⁡ ⁡ θ θ e 2 = A 13 − − A 31 2 sin ⁡ ⁡ θ θ e 3 = A 21 − − A 12 2 sin ⁡ ⁡ θ θ {\displaystyle {\begin{aligned}\theta &=\arccos {\frac {A_{11}+A_{22}+A_{33}-1}{2}}\\e_{1}&={\frac {A_{32}-A_{23}}{2\sin \theta }}\\e_{2}&={\frac {A_{13}-A_{31}}{2\sin \theta }}\\e_{3}&={\frac {A_{21}-A_{12}}{2\sin \theta }}\end{aligned}}} Alternatively, the following method can be used: Eigendecomposition of the rotation matrix yields the eigenvalues 1 and cos θ ± i sin θ . The Euler axis is the eigenvector corresponding to the eigenvalue of 1, and θ can be computed from the remaining eigenvalues.

The Euler axis can be also found using singular value decomposition since it is the normalized vector spanning the null-space of the matrix I − A .

To convert the other way the rotation matrix corresponding to an Euler axis ê and angle θ can be computed according to Rodrigues' rotation formula (with appropriate modification) as follows: A = I 3 cos ⁡ ⁡ θ θ + ( 1 − − cos ⁡ ⁡ θ θ ) e ^ ^ e ^ ^ T + [ e ^ ^ ] × × sin ⁡ ⁡ θ θ {\displaystyle \mathbf {A} =\mathbf {I} _{3}\cos \theta +(1-\cos \theta ){\hat {\mathbf {e} }}{\hat {\mathbf {e} }}^{\mathsf {T}}+\left[{\hat {\mathbf {e} }}\right]_{\times }\sin \theta } with I 3 the 3 × 3 identity matrix , and [ e ^ ^ ] × × = [ 0 − − e 3 e 2 e 3 0 − − e 1 − − e 2 e 1 0 ] {\displaystyle \left[{\hat {\mathbf {e} }}\right]_{\times }={\begin{bmatrix}0&-e_{3}&e_{2}\\e_{3}&0&-e_{1}\\-e_{2}&e_{1}&0\end{bmatrix}}} is the cross-product matrix .

This expands to: A 11 = ( 1 − − cos ⁡ ⁡ θ θ ) e 1 2 + cos ⁡ ⁡ θ θ A 12 = ( 1 − − cos ⁡ ⁡ θ θ ) e 1 e 2 − − e 3 sin ⁡ ⁡ θ θ A 13 = ( 1 − − cos ⁡ ⁡ θ θ ) e 1 e 3 + e 2 sin ⁡ ⁡ θ θ A 21 = ( 1 − − cos ⁡ ⁡ θ θ ) e 2 e 1 + e 3 sin ⁡ ⁡ θ θ A 22 = ( 1 − − cos ⁡ ⁡ θ θ ) e 2 2 + cos ⁡ ⁡ θ θ A 23 = ( 1 − − cos ⁡ ⁡ θ θ ) e 2 e 3 − − e 1 sin ⁡ ⁡ θ θ A 31 = ( 1 − − cos ⁡ ⁡ θ θ ) e 3 e 1 − − e 2 sin ⁡ ⁡ θ θ A 32 = ( 1 − − cos ⁡ ⁡ θ θ ) e 3 e 2 + e 1 sin ⁡ ⁡ θ θ A 33 = ( 1 − − cos ⁡ ⁡ θ θ ) e 3 2 + cos ⁡ ⁡ θ θ {\displaystyle {\begin{aligned}A_{11}&=(1-\cos \theta )e_{1}^{2}+\cos \theta \\A_{12}&=(1-\cos \theta )e_{1}e_{2}-e_{3}\sin \theta \\A_{13}&=(1-\cos \theta )e_{1}e_{3}+e_{2}\sin \theta \\A_{21}&=(1-\cos \theta )e_{2}e_{1}+e_{3}\sin \theta \\A_{22}&=(1-\cos \theta )e_{2}^{2}+\cos \theta \\A_{23}&=(1-\cos \theta )e_{2}e_{3}-e_{1}\sin \theta \\A_{31}&=(1-\cos \theta )e_{3}e_{1}-e_{2}\sin \theta \\A_{32}&=(1-\cos \theta )e_{3}e_{2}+e_{1}\sin \theta \\A_{33}&=(1-\cos \theta )e_{3}^{2}+\cos \theta \end{aligned}}} See also: Rotation matrix § Rotation matrix from axis and angle Rotation matrix ↔ quaternion [ edit ] When computing a quaternion from the rotation matrix there is a sign ambiguity, since q and − q represent the same rotation.

One way of computing the quaternion q = [ q i q j q k q r ] = q i i + q j j + q k k + q r {\displaystyle \mathbf {q} ={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\\q_{r}\end{bmatrix}}=q_{i}\mathbf {i} +q_{j}\mathbf {j} +q_{k}\mathbf {k} +q_{r}} from the rotation matrix A is as follows: q r = 1 2 1 + A 11 + A 22 + A 33 q i = 1 4 q r ( A 32 − − A 23 ) q j = 1 4 q r ( A 13 − − A 31 ) q k = 1 4 q r ( A 21 − − A 12 ) {\displaystyle {\begin{aligned}q_{r}&={\frac {1}{2}}{\sqrt {1+A_{11}+A_{22}+A_{33}}}\\q_{i}&={\frac {1}{4q_{r}}}\left(A_{32}-A_{23}\right)\\q_{j}&={\frac {1}{4q_{r}}}\left(A_{13}-A_{31}\right)\\q_{k}&={\frac {1}{4q_{r}}}\left(A_{21}-A_{12}\right)\end{aligned}}} There are three other mathematically equivalent ways to compute q . Numerical inaccuracy can be reduced by avoiding situations in which the denominator is close to zero. One of the other three methods looks as follows: [ 6 ] [ 7 ] q i = 1 2 1 + A 11 − − A 22 − − A 33 q j = 1 4 q i ( A 12 + A 21 ) q k = 1 4 q i ( A 13 + A 31 ) q r = 1 4 q i ( A 32 − − A 23 ) {\displaystyle {\begin{aligned}q_{i}&={\frac {1}{2}}{\sqrt {1+A_{11}-A_{22}-A_{33}}}\\q_{j}&={\frac {1}{4q_{i}}}\left(A_{12}+A_{21}\right)\\q_{k}&={\frac {1}{4q_{i}}}\left(A_{13}+A_{31}\right)\\q_{r}&={\frac {1}{4q_{i}}}\left(A_{32}-A_{23}\right)\end{aligned}}} The rotation matrix corresponding to the quaternion q can be computed as follows: A = ( q r 2 − − q ˇ ˇ T q ˇ ˇ ) I 3 + 2 q ˇ ˇ q ˇ ˇ T + 2 q r Q {\displaystyle \mathbf {A} =\left(q_{r}^{2}-{\check {\mathbf {q} }}^{\mathsf {T}}{\check {\mathbf {q} }}\right)\mathbf {I} _{3}+2{\check {\mathbf {q} }}{\check {\mathbf {q} }}^{\mathsf {T}}+2q_{r}\mathbf {\mathcal {Q}} } where q ˇ ˇ = [ q i q j q k ] , Q = [ 0 − − q k q j q k 0 − − q i − − q j q i 0 ] {\displaystyle {\check {\mathbf {q} }}={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\end{bmatrix}}\,,\quad \mathbf {\mathcal {Q}} ={\begin{bmatrix}0&-q_{k}&q_{j}\\q_{k}&0&-q_{i}\\-q_{j}&q_{i}&0\end{bmatrix}}} which gives A = [ 1 − − 2 q j 2 − − 2 q k 2 2 ( q i q j − − q k q r ) 2 ( q i q k + q j q r ) 2 ( q i q j + q k q r ) 1 − − 2 q i 2 − − 2 q k 2 2 ( q j q k − − q i q r ) 2 ( q i q k − − q j q r ) 2 ( q j q k + q i q r ) 1 − − 2 q i 2 − − 2 q j 2 ] {\displaystyle \mathbf {A} ={\begin{bmatrix}1-2q_{j}^{2}-2q_{k}^{2}&2\left(q_{i}q_{j}-q_{k}q_{r}\right)&2\left(q_{i}q_{k}+q_{j}q_{r}\right)\\2\left(q_{i}q_{j}+q_{k}q_{r}\right)&1-2q_{i}^{2}-2q_{k}^{2}&2\left(q_{j}q_{k}-q_{i}q_{r}\right)\\2\left(q_{i}q_{k}-q_{j}q_{r}\right)&2\left(q_{j}q_{k}+q_{i}q_{r}\right)&1-2q_{i}^{2}-2q_{j}^{2}\end{bmatrix}}} or equivalently A = [ − − 1 + 2 q i 2 + 2 q r 2 2 ( q i q j − − q k q r ) 2 ( q i q k + q j q r ) 2 ( q i q j + q k q r ) − − 1 + 2 q j 2 + 2 q r 2 2 ( q j q k − − q i q r ) 2 ( q i q k − − q j q r ) 2 ( q j q k + q i q r ) − − 1 + 2 q k 2 + 2 q r 2 ] {\displaystyle \mathbf {A} ={\begin{bmatrix}-1+2q_{i}^{2}+2q_{r}^{2}&2\left(q_{i}q_{j}-q_{k}q_{r}\right)&2\left(q_{i}q_{k}+q_{j}q_{r}\right)\\2\left(q_{i}q_{j}+q_{k}q_{r}\right)&-1+2q_{j}^{2}+2q_{r}^{2}&2\left(q_{j}q_{k}-q_{i}q_{r}\right)\\2\left(q_{i}q_{k}-q_{j}q_{r}\right)&2\left(q_{j}q_{k}+q_{i}q_{r}\right)&-1+2q_{k}^{2}+2q_{r}^{2}\end{bmatrix}}} This is called the Euler–Rodrigues formula for the transformation matrix A {\displaystyle \mathbf {A} } Euler angles ↔ quaternion [ edit ] Main article: Conversion between quaternions and Euler angles Euler angles ( z - x - z extrinsic) → quaternion [ edit ] We will consider the x -convention 3-1-3 extrinsic Euler angles for the following algorithm. The terms of the algorithm depend on the convention used.

We can compute the quaternion q = [ q i q j q k q r ] = q i i + q j j + q k k + q r {\displaystyle \mathbf {q} ={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\\q_{r}\end{bmatrix}}=q_{i}\mathbf {i} +q_{j}\mathbf {j} +q_{k}\mathbf {k} +q_{r}} from the Euler angles ( ϕ , θ , ψ ) as follows: q i = cos ⁡ ⁡ ϕ ϕ − − ψ ψ 2 sin ⁡ ⁡ θ θ 2 q j = sin ⁡ ⁡ ϕ ϕ − − ψ ψ 2 sin ⁡ ⁡ θ θ 2 q k = sin ⁡ ⁡ ϕ ϕ + ψ ψ 2 cos ⁡ ⁡ θ θ 2 q r = cos ⁡ ⁡ ϕ ϕ + ψ ψ 2 cos ⁡ ⁡ θ θ 2 {\displaystyle {\begin{aligned}q_{i}&=\cos {\frac {\phi -\psi }{2}}\sin {\frac {\theta }{2}}\\q_{j}&=\sin {\frac {\phi -\psi }{2}}\sin {\frac {\theta }{2}}\\q_{k}&=\sin {\frac {\phi +\psi }{2}}\cos {\frac {\theta }{2}}\\q_{r}&=\cos {\frac {\phi +\psi }{2}}\cos {\frac {\theta }{2}}\end{aligned}}} Euler angles ( z - y ′- x ″ intrinsic) → quaternion [ edit ] A quaternion equivalent to yaw ( ψ ), pitch ( θ ) and roll ( ϕ ) angles. or intrinsic Tait–Bryan angles following the z - y ′- x ″ convention, can be computed by q i = sin ⁡ ⁡ ϕ ϕ 2 cos ⁡ ⁡ θ θ 2 cos ⁡ ⁡ ψ ψ 2 − − cos ⁡ ⁡ ϕ ϕ 2 sin ⁡ ⁡ θ θ 2 sin ⁡ ⁡ ψ ψ 2 q j = cos ⁡ ⁡ ϕ ϕ 2 sin ⁡ ⁡ θ θ 2 cos ⁡ ⁡ ψ ψ 2 + sin ⁡ ⁡ ϕ ϕ 2 cos ⁡ ⁡ θ θ 2 sin ⁡ ⁡ ψ ψ 2 q k = cos ⁡ ⁡ ϕ ϕ 2 cos ⁡ ⁡ θ θ 2 sin ⁡ ⁡ ψ ψ 2 − − sin ⁡ ⁡ ϕ ϕ 2 sin ⁡ ⁡ θ θ 2 cos ⁡ ⁡ ψ ψ 2 q r = cos ⁡ ⁡ ϕ ϕ 2 cos ⁡ ⁡ θ θ 2 cos ⁡ ⁡ ψ ψ 2 + sin ⁡ ⁡ ϕ ϕ 2 sin ⁡ ⁡ θ θ 2 sin ⁡ ⁡ ψ ψ 2 {\displaystyle {\begin{aligned}q_{i}&=\sin {\frac {\phi }{2}}\cos {\frac {\theta }{2}}\cos {\frac {\psi }{2}}-\cos {\frac {\phi }{2}}\sin {\frac {\theta }{2}}\sin {\frac {\psi }{2}}\\q_{j}&=\cos {\frac {\phi }{2}}\sin {\frac {\theta }{2}}\cos {\frac {\psi }{2}}+\sin {\frac {\phi }{2}}\cos {\frac {\theta }{2}}\sin {\frac {\psi }{2}}\\q_{k}&=\cos {\frac {\phi }{2}}\cos {\frac {\theta }{2}}\sin {\frac {\psi }{2}}-\sin {\frac {\phi }{2}}\sin {\frac {\theta }{2}}\cos {\frac {\psi }{2}}\\q_{r}&=\cos {\frac {\phi }{2}}\cos {\frac {\theta }{2}}\cos {\frac {\psi }{2}}+\sin {\frac {\phi }{2}}\sin {\frac {\theta }{2}}\sin {\frac {\psi }{2}}\end{aligned}}} Quaternion → Euler angles ( z - x - z extrinsic) [ edit ] Given the rotation quaternion q = [ q i q j q k q r ] = q i i + q j j + q k k + q r , {\displaystyle \mathbf {q} ={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\\q_{r}\end{bmatrix}}=q_{i}\mathbf {i} +q_{j}\mathbf {j} +q_{k}\mathbf {k} +q_{r}\,,} the x -convention 3-1-3 extrinsic Euler Angles ( φ , θ , ψ ) can be computed by ϕ ϕ = atan2 ⁡ ⁡ ( ( q i q k + q j q r ) , − − ( q j q k − − q i q r ) ) θ θ = arccos ⁡ ⁡ ( − − q i 2 − − q j 2 + q k 2 + q r 2 ) ψ ψ = atan2 ⁡ ⁡ ( ( q i q k − − q j q r ) , ( q j q k + q i q r ) ) {\displaystyle {\begin{aligned}\phi &=\operatorname {atan2} \left(\left(q_{i}q_{k}+q_{j}q_{r}\right),-\left(q_{j}q_{k}-q_{i}q_{r}\right)\right)\\\theta &=\arccos \left(-q_{i}^{2}-q_{j}^{2}+q_{k}^{2}+q_{r}^{2}\right)\\\psi &=\operatorname {atan2} \left(\left(q_{i}q_{k}-q_{j}q_{r}\right),\left(q_{j}q_{k}+q_{i}q_{r}\right)\right)\end{aligned}}} Quaternion → Euler angles ( z - y ′- x ″ intrinsic) [ edit ] Given the rotation quaternion q = [ q i q j q k q r ] = q i i + q j j + q k k + q r , {\displaystyle \mathbf {q} ={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\\q_{r}\end{bmatrix}}=q_{i}\mathbf {i} +q_{j}\mathbf {j} +q_{k}\mathbf {k} +q_{r}\,,} yaw , pitch and roll angles, or intrinsic Tait–Bryan angles following the z - y ′- x ″ convention, can be computed by roll = atan2 ⁡ ⁡ ( 2 ( q r q i + q j q k ) , 1 − − 2 ( q i 2 + q j 2 ) ) pitch = arcsin ⁡ ⁡ ( 2 ( q r q j − − q k q i ) ) yaw = atan2 ⁡ ⁡ ( 2 ( q r q k + q i q j ) , 1 − − 2 ( q j 2 + q k 2 ) ) {\displaystyle {\begin{aligned}{\text{roll}}&=\operatorname {atan2} \left(2\left(q_{r}q_{i}+q_{j}q_{k}\right),1-2\left(q_{i}^{2}+q_{j}^{2}\right)\right)\\{\text{pitch}}&=\arcsin \left(2\left(q_{r}q_{j}-q_{k}q_{i}\right)\right)\\{\text{yaw}}&=\operatorname {atan2} \left(2\left(q_{r}q_{k}+q_{i}q_{j}\right),1-2\left(q_{j}^{2}+q_{k}^{2}\right)\right)\end{aligned}}} Euler axis–angle ↔ quaternion [ edit ] Given the Euler axis ê and angle θ , the quaternion q = [ q i q j q k q r ] = q i i + q j j + q k k + q r , {\displaystyle \mathbf {q} ={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\\q_{r}\end{bmatrix}}=q_{i}\mathbf {i} +q_{j}\mathbf {j} +q_{k}\mathbf {k} +q_{r}\,,} can be computed by q i = e ^ ^ 1 sin ⁡ ⁡ θ θ 2 q j = e ^ ^ 2 sin ⁡ ⁡ θ θ 2 q k = e ^ ^ 3 sin ⁡ ⁡ θ θ 2 q r = cos ⁡ ⁡ θ θ 2 {\displaystyle {\begin{aligned}q_{i}&={\hat {e}}_{1}\sin {\frac {\theta }{2}}\\q_{j}&={\hat {e}}_{2}\sin {\frac {\theta }{2}}\\q_{k}&={\hat {e}}_{3}\sin {\frac {\theta }{2}}\\q_{r}&=\cos {\frac {\theta }{2}}\end{aligned}}} Given the rotation quaternion q , define q ˇ ˇ = [ q i q j q k ] .

{\displaystyle {\check {\mathbf {q} }}={\begin{bmatrix}q_{i}\\q_{j}\\q_{k}\end{bmatrix}}\,.} Then the Euler axis ê and angle θ can be computed by e ^ ^ = q ˇ ˇ ‖ q ˇ ˇ ‖ θ θ = 2 arccos ⁡ ⁡ q r {\displaystyle {\begin{aligned}{\hat {\mathbf {e} }}&={\frac {\check {\mathbf {q} }}{\left\|{\check {\mathbf {q} }}\right\|}}\\\theta &=2\arccos q_{r}\end{aligned}}} Rotation matrix ↔ Rodrigues vector [ edit ] Rodrigues vector → Rotation matrix [ edit ] Since the definition of the Rodrigues vector can be related to rotation quaternions: { g i = q i q r = e x tan ⁡ ⁡ ( θ θ 2 ) g j = q j q r = e y tan ⁡ ⁡ ( θ θ 2 ) g k = q k q r = e z tan ⁡ ⁡ ( θ θ 2 ) {\displaystyle {\begin{cases}g_{i}={\dfrac {q_{i}}{q_{r}}}=e_{x}\tan \left({\dfrac {\theta }{2}}\right)\\g_{j}={\dfrac {q_{j}}{q_{r}}}=e_{y}\tan \left({\dfrac {\theta }{2}}\right)\\g_{k}={\dfrac {q_{k}}{q_{r}}}=e_{z}\tan \left({\dfrac {\theta }{2}}\right)\end{cases}}} By making use of the following property 1 = q r 2 + q i 2 + q j 2 + q k 2 = q r 2 ( 1 + q i 2 q r 2 + q j 2 q r 2 + q k 2 q r 2 ) = q r 2 ( 1 + g i 2 + g j 2 + g k 2 ) {\displaystyle 1=q_{r}^{2}+q_{i}^{2}+q_{j}^{2}+q_{k}^{2}=q_{r}^{2}\left(1+{\frac {q_{i}^{2}}{q_{r}^{2}}}+{\frac {q_{j}^{2}}{q_{r}^{2}}}+{\frac {q_{k}^{2}}{q_{r}^{2}}}\right)=q_{r}^{2}\left(1+g_{i}^{2}+g_{j}^{2}+g_{k}^{2}\right)} The formula can be obtained by factoring q 2 r from the final expression obtained for quaternions: A = q r 2 [ 1 q r 2 − − 2 q j 2 q r 2 − − 2 q k 2 q r 2 2 ( q i q r q j q r − − q k q r ) 2 ( q i q r q k q r + q j q r ) 2 ( q i q r q j q r + q k q r ) 1 q r 2 − − 2 q i 2 q r 2 − − 2 q k 2 q r 2 2 ( q j q r q k q r − − q i q r ) 2 ( q i q r q k q r − − q j q r ) 2 ( q j q r q k q r + q i q r ) 1 q r 2 − − 2 q i 2 q r 2 − − 2 q j 2 q r 2 ] {\displaystyle \mathbf {A} =q_{r}^{2}{\begin{bmatrix}{\frac {1}{q_{r}^{2}}}-2{\frac {q_{j}^{2}}{q_{r}^{2}}}-2{\frac {q_{k}^{2}}{q_{r}^{2}}}&2\left({\frac {q_{i}}{q_{r}}}{\frac {q_{j}}{q_{r}}}-{\frac {q_{k}}{q_{r}}}\right)&2\left({\frac {q_{i}}{q_{r}}}{\frac {q_{k}}{q_{r}}}+{\frac {q_{j}}{q_{r}}}\right)\\2\left({\frac {q_{i}}{q_{r}}}{\frac {q_{j}}{q_{r}}}+{\frac {q_{k}}{q_{r}}}\right)&{\frac {1}{q_{r}^{2}}}-2{\frac {q_{i}^{2}}{q_{r}^{2}}}-2{\frac {q_{k}^{2}}{q_{r}^{2}}}&2\left({\frac {q_{j}}{q_{r}}}{\frac {q_{k}}{q_{r}}}-{\frac {q_{i}}{q_{r}}}\right)\\2\left({\frac {q_{i}}{q_{r}}}{\frac {q_{k}}{q_{r}}}-{\frac {q_{j}}{q_{r}}}\right)&2\left({\frac {q_{j}}{q_{r}}}{\frac {q_{k}}{q_{r}}}+{\frac {q_{i}}{q_{r}}}\right)&{\frac {1}{q_{r}^{2}}}-2{\frac {q_{i}^{2}}{q_{r}^{2}}}-2{\frac {q_{j}^{2}}{q_{r}^{2}}}\end{bmatrix}}} Leading to the final formula: A = 1 1 + g i 2 + g j 2 + g k 2 [ 1 + g i 2 − − g j 2 − − g k 2 2 ( g i g j − − g k ) 2 ( g i g k + g j ) 2 ( g i g j + g k ) 1 − − g i 2 + g j 2 − − g k 2 2 ( g j g k − − g i ) 2 ( g i g k − − g j ) 2 ( g j g k + g i ) 1 − − g i 2 − − g j 2 + g k 2 ] {\displaystyle \mathbf {A} ={\frac {1}{1+g_{i}^{2}+g_{j}^{2}+g_{k}^{2}}}{\begin{bmatrix}1+g_{i}^{2}-g_{j}^{2}-g_{k}^{2}&2\left(g_{i}g_{j}-g_{k}\right)&2\left(g_{i}g_{k}+g_{j}\right)\\2\left(g_{i}g_{j}+g_{k}\right)&1-g_{i}^{2}+g_{j}^{2}-g_{k}^{2}&2\left(g_{j}g_{k}-g_{i}\right)\\2\left(g_{i}g_{k}-g_{j}\right)&2\left(g_{j}g_{k}+g_{i}\right)&1-g_{i}^{2}-g_{j}^{2}+g_{k}^{2}\end{bmatrix}}} Conversion formulae for derivatives [ edit ] Rotation matrix ↔ angular velocities [ edit ] The angular velocity vector ω ω = [ ω ω x ω ω y ω ω z ] {\displaystyle {\boldsymbol {\omega }}={\begin{bmatrix}\omega _{x}\\\omega _{y}\\\omega _{z}\end{bmatrix}}} can be extracted from the time derivative of the rotation matrix ⁠ d A / d t ⁠ by the following relation: [ ω ω ] × × = [ 0 − − ω ω z ω ω y ω ω z 0 − − ω ω x − − ω ω y ω ω x 0 ] = d A d t A T {\displaystyle [{\boldsymbol {\omega }}]_{\times }={\begin{bmatrix}0&-\omega _{z}&\omega _{y}\\\omega _{z}&0&-\omega _{x}\\-\omega _{y}&\omega _{x}&0\end{bmatrix}}={\frac {\mathrm {d} \mathbf {A} }{\mathrm {d} t}}\mathbf {A} ^{\mathsf {T}}} The derivation is adapted from Ioffe [ 8 ] as follows: For any vector r 0 , consider r ( t ) = A ( t ) r 0 and differentiate it: d r d t = d A d t r 0 = d A d t A T ( t ) r ( t ) {\displaystyle {\frac {\mathrm {d} \mathbf {r} }{\mathrm {d} t}}={\frac {\mathrm {d} \mathbf {A} }{\mathrm {d} t}}\mathbf {r} _{0}={\frac {\mathrm {d} \mathbf {A} }{\mathrm {d} t}}\mathbf {A} ^{\mathsf {T}}(t)\mathrm {r} (t)} The derivative of a vector is the linear velocity of its tip. Since A is a rotation matrix, by definition the length of r ( t ) is always equal to the length of r 0 , and hence it does not change with time. Thus, when r ( t ) rotates, its tip moves along a circle, and the linear velocity of its tip is tangential to the circle; i.e., always perpendicular to r ( t ) . In this specific case, the relationship between the linear velocity vector and the angular velocity vector is d r d t = ω ω ( t ) × × r ( t ) = [ ω ω ] × × r ( t ) {\displaystyle {\frac {\mathrm {d} \mathbf {r} }{\mathrm {d} t}}={\boldsymbol {\omega }}(t)\times \mathbf {r} (t)=[{\boldsymbol {\omega }}]_{\times }\mathbf {r} (t)} (see circular motion and cross product ).

By the transitivity of the abovementioned equations, d A d t A T ( t ) r ( t ) = [ ω ω ] × × r ( t ) {\displaystyle {\frac {\mathrm {d} \mathbf {A} }{\mathrm {d} t}}\mathbf {A} ^{\mathsf {T}}(t)\mathbf {r} (t)=[{\boldsymbol {\omega }}]_{\times }\mathbf {r} (t)} which implies d A d t A T ( t ) = [ ω ω ] × × {\displaystyle {\frac {\mathrm {d} \mathbf {A} }{\mathrm {d} t}}\mathbf {A} ^{\mathsf {T}}(t)=[{\boldsymbol {\omega }}]_{\times }} Quaternion ↔ angular velocities [ edit ] The angular velocity vector ω ω = [ ω ω x ω ω y ω ω z ] {\displaystyle {\boldsymbol {\omega }}={\begin{bmatrix}\omega _{x}\\\omega _{y}\\\omega _{z}\end{bmatrix}}} can be obtained from the derivative of the quaternion ⁠ d q / d t ⁠ as follows: [ 9 ] [ 0 ω ω x ω ω y ω ω z ] = 2 d q d t q ~ ~ {\displaystyle {\begin{bmatrix}0\\\omega _{x}\\\omega _{y}\\\omega _{z}\end{bmatrix}}=2{\frac {\mathrm {d} \mathbf {q} }{\mathrm {d} t}}{\tilde {\mathbf {q} }}} where q̃ is the conjugate (inverse) of q .

Conversely, the derivative of the quaternion is d q d t = 1 2 [ 0 ω ω x ω ω y ω ω z ] q .

{\displaystyle {\frac {\mathrm {d} \mathbf {q} }{\mathrm {d} t}}={\frac {1}{2}}{\begin{bmatrix}0\\\omega _{x}\\\omega _{y}\\\omega _{z}\end{bmatrix}}\mathbf {q} \,.} Rotors in a geometric algebra [ edit ] The formalism of geometric algebra (GA) provides an extension and interpretation of the quaternion method. Central to GA is the geometric product of vectors, an extension of the traditional inner and cross products , given by a b = a ⋅ ⋅ b + a ∧ ∧ b {\displaystyle \mathbf {ab} =\mathbf {a} \cdot \mathbf {b} +\mathbf {a} \wedge \mathbf {b} } where the symbol ∧ denotes the exterior product or wedge product . This product of vectors a , and b produces two terms: a scalar part from the inner product and a bivector part from the wedge product. This bivector describes the plane perpendicular to what the cross product of the vectors would return.

Bivectors in GA have some unusual properties compared to vectors. Under the geometric product, bivectors have a negative square: the bivector x̂ŷ describes the xy -plane. Its square is ( x̂ŷ ) 2 = x̂ŷx̂ŷ . Because the unit basis vectors are orthogonal to each other, the geometric product reduces to the antisymmetric outer product, so x̂ and ŷ can be swapped freely at the cost of a factor of −1. The square reduces to − x̂x̂ŷŷ = −1 since the basis vectors themselves square to +1.

This result holds generally for all bivectors, and as a result the bivector plays a role similar to the imaginary unit . Geometric algebra uses bivectors in its analogue to the quaternion, the rotor , given by R = exp ⁡ ⁡ ( − − B ^ ^ θ θ 2 ) = cos ⁡ ⁡ θ θ 2 − − B ^ ^ sin ⁡ ⁡ θ θ 2 , {\displaystyle \mathbf {R} =\exp \left({\frac {-{\hat {\mathbf {B} }}\theta }{2}}\right)=\cos {\frac {\theta }{2}}-{\hat {\mathbf {B} }}\sin {\frac {\theta }{2}}\,,} where B̂ is a unit bivector that describes the plane of rotation . Because B̂ squares to −1, the power series expansion of R generates the trigonometric functions . The rotation formula that maps a vector a to a rotated vector b is then b = R a R † † {\displaystyle \mathbf {b} =\mathbf {RaR} ^{\dagger }} where R † † = exp ⁡ ⁡ ( 1 2 B ^ ^ θ θ ) = cos ⁡ ⁡ θ θ 2 + B ^ ^ sin ⁡ ⁡ θ θ 2 {\displaystyle \mathbf {R} ^{\dagger }=\exp \left({\frac {1}{2}}{\hat {\mathbf {B} }}\theta \right)=\cos {\frac {\theta }{2}}+{\hat {\mathbf {B} }}\sin {\frac {\theta }{2}}} is the reverse of R {\displaystyle \scriptstyle R} (reversing the order of the vectors in B {\displaystyle B} is equivalent to changing its sign).

Example.

A rotation about the axis v ^ ^ = 1 3 ( x ^ ^ + y ^ ^ + z ^ ^ ) {\displaystyle {\hat {\mathbf {v} }}={\frac {1}{\sqrt {3}}}\left({\hat {\mathbf {x} }}+{\hat {\mathbf {y} }}+{\hat {\mathbf {z} }}\right)} can be accomplished by converting v̂ to its dual bivector, B ^ ^ = x ^ ^ y ^ ^ z ^ ^ v ^ ^ = i v ^ ^ , {\displaystyle {\hat {\mathbf {B} }}={\hat {\mathbf {x} }}{\hat {\mathbf {y} }}{\hat {\mathbf {z} }}{\hat {\mathbf {v} }}=\mathbf {i} {\hat {\mathbf {v} }}\,,} where i = x̂ŷẑ is the unit volume element, the only trivector (pseudoscalar) in three-dimensional space. The result is B ^ ^ = 1 3 ( y ^ ^ z ^ ^ + z ^ ^ x ^ ^ + x ^ ^ y ^ ^ ) .

{\displaystyle {\hat {\mathbf {B} }}={\frac {1}{\sqrt {3}}}\left({\hat {\mathbf {y} }}{\hat {\mathbf {z} }}+{\hat {\mathbf {z} }}{\hat {\mathbf {x} }}+{\hat {\mathbf {x} }}{\hat {\mathbf {y} }}\right)\,.} In three-dimensional space, however, it is often simpler to leave the expression for B̂ = iv̂ , using the fact that i commutes with all objects in 3D and also squares to −1. A rotation of the x̂ vector in this plane by an angle θ is then x ^ ^ ′ = R x ^ ^ R † † = e − − i v ^ ^ θ θ 2 x ^ ^ e i v ^ ^ θ θ 2 = x ^ ^ cos 2 ⁡ ⁡ θ θ 2 + i ( x ^ ^ v ^ ^ − − v ^ ^ x ^ ^ ) cos ⁡ ⁡ θ θ 2 sin ⁡ ⁡ θ θ 2 + v ^ ^ x ^ ^ v ^ ^ sin 2 ⁡ ⁡ θ θ 2 {\displaystyle {\hat {\mathbf {x} }}'=\mathbf {R} {\hat {\mathbf {x} }}\mathbf {R} ^{\dagger }=e^{-i{\hat {\mathbf {v} }}{\frac {\theta }{2}}}{\hat {\mathbf {x} }}e^{i{\hat {\mathbf {v} }}{\frac {\theta }{2}}}={\hat {\mathbf {x} }}\cos ^{2}{\frac {\theta }{2}}+\mathbf {i} \left({\hat {\mathbf {x} }}{\hat {\mathbf {v} }}-{\hat {\mathbf {v} }}{\hat {\mathbf {x} }}\right)\cos {\frac {\theta }{2}}\sin {\frac {\theta }{2}}+{\hat {\mathbf {v} }}{\hat {\mathbf {x} }}{\hat {\mathbf {v} }}\sin ^{2}{\frac {\theta }{2}}} Recognizing that i ( x ^ ^ v ^ ^ − − v ^ ^ x ^ ^ ) = 2 i ( x ^ ^ ∧ ∧ v ^ ^ ) {\displaystyle \mathbf {i} ({\hat {\mathbf {x} }}{\hat {\mathbf {v} }}-{\hat {\mathbf {v} }}{\hat {\mathbf {x} }})=2\mathbf {i} ({\hat {\mathbf {x} }}\wedge {\hat {\mathbf {v} }})} and that − v̂x̂v̂ is the reflection of x̂ about the plane perpendicular to v̂ gives a geometric interpretation to the rotation operation:  the rotation preserves the components that are parallel to v̂ and changes only those that are perpendicular. The terms are then computed: v ^ ^ x ^ ^ v ^ ^ = 1 3 ( − − x ^ ^ + 2 y ^ ^ + 2 z ^ ^ ) 2 i x ^ ^ ∧ ∧ v ^ ^ = 2 i 1 3 ( x ^ ^ y ^ ^ + x ^ ^ z ^ ^ ) = 2 3 ( y ^ ^ − − z ^ ^ ) {\displaystyle {\begin{aligned}{\hat {\mathbf {v} }}{\hat {\mathbf {x} }}{\hat {\mathbf {v} }}&={\frac {1}{3}}\left(-{\hat {\mathbf {x} }}+2{\hat {\mathbf {y} }}+2{\hat {\mathbf {z} }}\right)\\2\mathbf {i} {\hat {\mathbf {x} }}\wedge {\hat {\mathbf {v} }}&=2\mathbf {i} {\frac {1}{\sqrt {3}}}\left({\hat {\mathbf {x} }}{\hat {\mathbf {y} }}+{\hat {\mathbf {x} }}{\hat {\mathbf {z} }}\right)={\frac {2}{\sqrt {3}}}\left({\hat {\mathbf {y} }}-{\hat {\mathbf {z} }}\right)\end{aligned}}} The result of the rotation is then x ^ ^ ′ = x ^ ^ ( cos 2 ⁡ ⁡ θ θ 2 − − 1 3 sin 2 ⁡ ⁡ θ θ 2 ) + 2 3 y ^ ^ sin ⁡ ⁡ θ θ 2 ( sin ⁡ ⁡ θ θ 2 + 3 cos ⁡ ⁡ θ θ 2 ) + 2 3 z ^ ^ sin ⁡ ⁡ θ θ 2 ( sin ⁡ ⁡ θ θ 2 − − 3 cos ⁡ ⁡ θ θ 2 ) {\displaystyle {\hat {\mathbf {x} }}'={\hat {\mathbf {x} }}\left(\cos ^{2}{\frac {\theta }{2}}-{\frac {1}{3}}\sin ^{2}{\frac {\theta }{2}}\right)+{\frac {2}{3}}{\hat {\mathbf {y} }}\sin {\frac {\theta }{2}}\left(\sin {\frac {\theta }{2}}+{\sqrt {3}}\cos {\frac {\theta }{2}}\right)+{\frac {2}{3}}{\hat {\mathbf {z} }}\sin {\frac {\theta }{2}}\left(\sin {\frac {\theta }{2}}-{\sqrt {3}}\cos {\frac {\theta }{2}}\right)} A simple check on this result is the angle θ = ⁠ 2 / 3 ⁠ π . Such a rotation should map x̂ to ŷ . Indeed, the rotation reduces to x ^ ^ ′ = x ^ ^ ( 1 4 − − 1 3 3 4 ) + 2 3 y ^ ^ 3 2 ( 3 2 + 3 1 2 ) + 2 3 z ^ ^ 3 2 ( 3 2 − − 3 1 2 ) = 0 x ^ ^ + y ^ ^ + 0 z ^ ^ = y ^ ^ {\displaystyle {\begin{aligned}{\hat {\mathbf {x} }}'&={\hat {\mathbf {x} }}\left({\frac {1}{4}}-{\frac {1}{3}}{\frac {3}{4}}\right)+{\frac {2}{3}}{\hat {\mathbf {y} }}{\frac {\sqrt {3}}{2}}\left({\frac {\sqrt {3}}{2}}+{\sqrt {3}}{\frac {1}{2}}\right)+{\frac {2}{3}}{\hat {\mathbf {z} }}{\frac {\sqrt {3}}{2}}\left({\frac {\sqrt {3}}{2}}-{\sqrt {3}}{\frac {1}{2}}\right)\\&=0{\hat {\mathbf {x} }}+{\hat {\mathbf {y} }}+0{\hat {\mathbf {z} }}={\hat {\mathbf {y} }}\end{aligned}}} exactly as expected. This rotation formula is valid not only for vectors but for any multivector . In addition, when Euler angles are used, the complexity of the operation is much reduced. Compounded rotations come from multiplying the rotors, so the total rotor from Euler angles is R = R γ γ ′ R β β ′ R α α = exp ⁡ ⁡ ( − − i z ^ ^ ′ γ γ 2 ) exp ⁡ ⁡ ( − − i x ^ ^ ′ β β 2 ) exp ⁡ ⁡ ( − − i z ^ ^ α α 2 ) {\displaystyle \mathbf {R} =\mathbf {R} _{\gamma '}\mathbf {R} _{\beta '}\mathbf {R} _{\alpha }=\exp \left({\frac {-\mathbf {i} {\hat {\mathbf {z} }}'\gamma }{2}}\right)\exp \left({\frac {-\mathbf {i} {\hat {\mathbf {x} }}'\beta }{2}}\right)\exp \left({\frac {-\mathbf {i} {\hat {\mathbf {z} }}\alpha }{2}}\right)} but x ^ ^ ′ = R α α x ^ ^ R α α † † and z ^ ^ ′ = R β β ′ z ^ ^ R β β ′ † † .

{\displaystyle {\begin{aligned}{\hat {\mathbf {x} }}'&=\mathbf {R} _{\alpha }{\hat {\mathbf {x} }}\mathbf {R} _{\alpha }^{\dagger }\quad {\text{and}}\\{\hat {\mathbf {z} }}'&=\mathbf {R} _{\beta '}{\hat {\mathbf {z} }}\mathbf {R} _{\beta '}^{\dagger }\,.\end{aligned}}} These rotors come back out of the exponentials like so: R β β ′ = cos ⁡ ⁡ β β 2 − − i R α α x ^ ^ R α α † † sin ⁡ ⁡ β β 2 = R α α R β β R α α † † {\displaystyle \mathbf {R} _{\beta '}=\cos {\frac {\beta }{2}}-\mathbf {i} \mathbf {R} _{\alpha }{\hat {\mathbf {x} }}\mathbf {R} _{\alpha }^{\dagger }\sin {\frac {\beta }{2}}=\mathbf {R} _{\alpha }\mathbf {R} _{\beta }\mathbf {R} _{\alpha }^{\dagger }} where R β refers to rotation in the original coordinates. Similarly for the γ rotation, R γ γ ′ = R β β ′ R γ γ R β β ′ † † = R α α R β β R α α † † R γ γ R α α R β β † † R α α † † .

{\displaystyle \mathbf {R} _{\gamma '}=\mathbf {R} _{\beta '}\mathbf {R} _{\gamma }\mathbf {R} _{\beta '}^{\dagger }=\mathbf {R} _{\alpha }\mathbf {R} _{\beta }\mathbf {R} _{\alpha }^{\dagger }\mathbf {R} _{\gamma }\mathbf {R} _{\alpha }\mathbf {R} _{\beta }^{\dagger }\mathbf {R} _{\alpha }^{\dagger }\,.} Noting that R γ and R α commute (rotations in the same plane must commute), and the total rotor becomes R = R α α R β β R γ γ {\displaystyle \mathbf {R} =\mathbf {R} _{\alpha }\mathbf {R} _{\beta }\mathbf {R} _{\gamma }} Thus, the compounded rotations of Euler angles become a series of equivalent rotations in the original fixed frame.

While rotors in geometric algebra work almost identically to quaternions in three dimensions, the power of this formalism is its generality:  this method is appropriate and valid in spaces with any number of dimensions. In 3D, rotations have three degrees of freedom, a degree for each linearly independent plane (bivector) the rotation can take place in. It has been known that pairs of quaternions can be used to generate rotations in 4D, yielding six degrees of freedom, and the geometric algebra approach verifies this result:  in 4D, there are six linearly independent bivectors that can be used as the generators of rotations.

See also [ edit ] Euler filter Orientation (geometry) Rotation around a fixed axis References [ edit ] ^ "Fiducial Marker Tracking for Augmented Reality" .

^ Weisstein, Eric W.

"Rotation Matrix" .

MathWorld .

^ a b Rodrigues, Olinde (1840). "Des lois géometriques qui regissent les déplacements d'un systéme solide dans l'espace, et de la variation des coordonnées provenant de ces déplacement considérées indépendant des causes qui peuvent les produire".

J. Math. Pures Appl .

5 : 380– 440.

online ^ cf. J Willard Gibbs (1884).

Elements of Vector Analysis , New Haven,  p. 67 ^ Direct and inverse kinematics lecture notes, page 5 ^ Mebius, Johan (2007). "Derivation of the Euler–Rodrigues formula for three-dimensional rotations from the general formula for four-dimensional rotations".

arXiv : math/0701759 .

^ Shuster, Malcolm D. (1993).

"A Survey of Attitude Representations" (PDF) .

Journal of the Astronautical Sciences .

41 (4): 439– 517.

Bibcode : 1993JAnSc..41..439S .

^ [1] Physics - Mark Ioffe - W ( t ) in terms of matrices ^ Quaternions and Rotation lecture notes, p. 14-15 Further reading [ edit ] Shuster, M.D. (1993).

"A Survey of Attitude Representations" (PDF) .

Journal of the Astronautical Sciences .

41 (4): 439– 517.

Bibcode : 1993JAnSc..41..439S .

Taubin, G. (2011).

"3D Rotations" .

IEEE Computer Graphics and Applications .

31 (6): 84– 89.

doi : 10.1109/MCG.2011.92 .

PMID 24808261 .

Coutsias, E.; Romero, L. (2004).

"The Quaternions with an application to Rigid Body Dynamics" .

Sandia Technical Report . Sandia National Laboraties. SAND2004-0153.

Markley, F. Landis (2003). "Attitude Error Representations for Kalman Filtering".

Journal of Guidance, Control and Dynamics .

26 (2): 311– 7.

Bibcode : 2003JGCD...26..311M .

doi : 10.2514/2.5048 .

hdl : 2060/20020060647 .

Goldstein, H. (1980).

Classical Mechanics (2nd ed.). Addison–Wesley.

ISBN 0-201-02918-9 .

Wertz, James R. (1980).

Spacecraft Attitude Determination and Control .

D. Reidel .

ISBN 90-277-1204-2 .

Schmidt, J.; Niemann, H. (2001). "Using Quaternions for Parametrizing 3-D Rotations in Unconstrained Nonlinear Optimization".

Proceedings of the Vision Modeling and Visualization Conference 2001 . IOS Press. pp.

399– 406.

ISBN 3898380289 .

Landau, L.; Lifshitz, E.M. (1976).

Mechanics (3rd ed.).

Pergamon Press .

ISBN 0-08-021022-8 .

Klumpp, A.R. (December 1976). "Singularity-Free Extraction of a Quaternion from a Direction-Cosine Matrix".

Journal of Spacecraft and Rockets .

13 (12): 754– 5.

Bibcode : 1976JSpRo..13..754K .

doi : 10.2514/3.27947 .

Doran, C.; Lasenby, A. (2003).

Geometric Algebra for Physicists . Cambridge University Press.

ISBN 978-0-521-71595-9 .

Terzakis, G.; Lourakis, M.; Ait-Boudaoud, D. (2018).

"Modified Rodrigues Parameters: An Efficient Representation of Orientation in 3D Vision and Graphics" .

Journal of Mathematical Imaging and Vision .

60 (3): 422– 442.

Bibcode : 2018JMIV...60..422T .

doi : 10.1007/s10851-017-0765-x .

Rowenhorst, D.; Rollett, A.D.; Rohrer, G.S.; Groeber, M.; Jackson, M.; Konijnenberg, P.J.; De Graef, M. (2015).

"Consistent representations of and conversions between 3D rotations" .

Modelling and Simulation in Materials Science and Engineering .

23 (8): 083501.

Bibcode : 2015MSMSE..23h3501R .

doi : 10.1088/0965-0393/23/8/083501 .

S2CID 16130878 .

External links [ edit ] Wikimedia Commons has media related to Rotation in three dimensions .

EuclideanSpace has a wealth of information on rotation representation Q36. How do I generate a rotation matrix from Euler angles?

and Q37. How do I convert a rotation matrix to Euler angles?

— The Matrix and Quaternions FAQ Imaginary numbers are not Real – the Geometric Algebra of Spacetime – Section "Rotations and Geometric Algebra" derives and applies the rotor description of rotations Starlino's DCM Tutorial – Direction cosine matrix theory tutorial and applications. Space orientation estimation algorithm using  accelerometer, gyroscope and magnetometer IMU devices. Using complimentary filter (popular alternative to Kalman filter) with DCM matrix.

NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐r9fxq
Cached time: 20250812005938
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.601 seconds
Real time usage: 0.851 seconds
Preprocessor visited node count: 8853/1000000
Revision size: 57086/2097152 bytes
Post‐expand include size: 71960/2097152 bytes
Template argument size: 12814/2097152 bytes
Highest expansion depth: 13/100
Expensive parser function count: 15/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 57944/5000000 bytes
Lua time usage: 0.289/10.000 seconds
Lua memory usage: 5966069/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  529.821      1 -total
 24.72%  130.996    138 Template:Math
 20.89%  110.689      1 Template:Reflist
 18.76%   99.378      1 Template:Short_description
 14.84%   78.634      1 Template:MathWorld
 12.55%   66.488      2 Template:Pagetype
 10.30%   54.556      9 Template:Cite_journal
  7.04%   37.323    141 Template:Main_other
  6.52%   34.524      1 Template:Commons_category
  6.21%   32.886      1 Template:Sister_project Saved in parser cache with key enwiki:pcache:7290730:|#|:idhash:canonical and timestamp 20250812005938 and revision id 1304470133. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Rotation_formalisms_in_three_dimensions&oldid=1304470133 " Categories : Rotation in three dimensions Rotation Euclidean symmetries Orientation (geometry) Rigid bodies mechanics Hidden categories: Articles with short description Short description matches Wikidata Commons category link is on Wikidata This page was last edited on 6 August 2025, at 06:51 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Rotation formalisms in three dimensions 3 languages Add topic

