Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History Toggle History subsection 1.1 Egypt 1.2 China 1.3 Classical antiquity 1.4 India 1.5 Africa 1.6 Other cultures 1.7 Western predecessors to Leibniz 1.8 Leibniz 1.9 Later developments 2 Representation 3 Counting in binary Toggle Counting in binary subsection 3.1 Decimal counting 3.2 Binary counting 4 Fractions 5 Binary arithmetic Toggle Binary arithmetic subsection 5.1 Addition 5.1.1 Long carry method 5.1.2 Addition table 5.2 Subtraction 5.3 Multiplication 5.3.1 Multiplication table 5.4 Division 5.5 Square root 6 Bitwise operations 7 Conversion to and from other numeral systems Toggle Conversion to and from other numeral systems subsection 7.1 Decimal to binary 7.2 Binary to decimal 7.3 Hexadecimal 7.4 Octal 8 Representing real numbers 9 See also 10 References 11 External links Toggle the table of contents Binary number 99 languages Afrikaans العربية Asturianu Avañe'ẽ Azərbaycanca تۆرکجه বাংলা 閩南語 / Bân-lâm-gí Башҡортса Беларуская Български Boarisch Bosanski Brezhoneg Català Чӑвашла Čeština ChiShona Cymraeg Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Furlan Gaeilge Galego 한국어 Հայերեն हिन्दी Hrvatski Ido Bahasa Indonesia Interlingua Íslenska Italiano עברית Jawa ಕನ್ನಡ ქართული Қазақша Kreyòl ayisyen Кыргызча Latina Latviešu Lëtzebuergesch Lietuvių Lingua Franca Nova Lombard Magyar Македонски മലയാളം मराठी Bahasa Melayu Mirandés Монгол Nederlands नेपाली 日本語 Norsk bokmål Norsk nynorsk Олык марий Oromoo Oʻzbekcha / ўзбекча ਪੰਜਾਬੀ Polski Português Română Русский سرائیکی Sesotho sa Leboa Shqip සිංහල Simple English سنڌي Slovenčina Slovenščina Soomaaliga Српски / srpski Srpskohrvatski / српскохрватски Sunda Suomi Svenska Татарча / tatarça ไทย Türkçe Українська اردو Tiếng Việt 文言 West-Vlams 吴语 ייִדיש 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Number expressed in the base-2 numeral system Part of a series on Numeral systems Place-value notation Hindu–Arabic numerals Western Arabic Eastern Arabic Bengali Devanagari Gujarati Gurmukhi Odia Sinhala Tamil Malayalam Telugu Kannada Dzongkha Tibetan Balinese Burmese Javanese Khmer Lao Mongolian Sundanese Thai East Asian systems Contemporary Chinese Hokkien Suzhou Japanese Korean Vietnamese Historic Counting rods Tangut Other systems History Ancient Babylonian Post-classical Cistercian Mayan Muisca Pentadic Quipu Rumi Contemporary Cherokee Kaktovik (Iñupiaq) By radix/base Common radices/bases 2 3 4 5 6 8 10 12 16 20 60 Non-standard radices/bases Bijective ( 1 ) Signed-digit ( balanced ternary ) Mixed ( factorial ) Negative Complex ( 2 i ) Non-integer ( φ ) Asymmetric Sign-value notation Non-alphabetic Aegean Attic Aztec Brahmi Chuvash Egyptian Etruscan Kharosthi Prehistoric counting Proto-cuneiform Roman Tally marks Alphabetic Abjad Armenian Alphasyllabic Akṣarapallī Āryabhaṭa Kaṭapayādi Coptic Cyrillic Geʽez Georgian Glagolitic Greek Hebrew List of numeral systems v t e A binary number is a number expressed in the base -2 numeral system or binary numeral system , a method for representing numbers that uses only two symbols for the natural numbers : typically "0" ( zero ) and "1" ( one ). A binary number may also refer to a rational number that has a finite representation in the binary numeral system, that is, the quotient of an integer by a power of two.

The base-2 numeral system is a positional notation with a radix of 2 . Each digit is referred to as a bit , or binary digit. Because of its straightforward implementation in digital electronic circuitry using logic gates , the binary system is used by almost all modern computers and computer-based devices , as a preferred system of use, over various other human techniques of communication, because of the simplicity of the language and the noise immunity in physical implementation.

[ 1 ] Decimal number Binary number 0 0 1 1 2 10 3 11 4 100 5 101 6 110 7 111 8 1000 9 1001 10 1010 11 1011 12 1100 13 1101 14 1110 15 1111 History [ edit ] The modern  binary number system was studied in Europe in the 16th and 17th centuries by Thomas Harriot , and Gottfried Leibniz . However, systems related to binary numbers have appeared earlier in multiple cultures including ancient Egypt, China, Europe and India.

Egypt [ edit ] See also: Ancient Egyptian mathematics Arithmetic values thought to have been represented by parts of the Eye of Horus The scribes of ancient Egypt used two different systems for their fractions, Egyptian fractions (not related to the binary number system) and Horus-Eye fractions (so called because some historians of mathematics believed that the symbols used for this system could be arranged to form the eye of Horus , although this has been disputed).

[ 2 ] Horus-Eye fractions are a binary numbering system for fractional quantities of grain, liquids, or other measures, in which a fraction of a hekat is expressed as a sum of the binary fractions 1/2, 1/4, 1/8, 1/16, 1/32, and 1/64. Early forms of this system can be found in documents from the Fifth Dynasty of Egypt , approximately 2400 BC, and its fully developed hieroglyphic form dates to the Nineteenth Dynasty of Egypt , approximately 1200 BC.

[ 3 ] The method used for ancient Egyptian multiplication is also closely related to binary numbers. In this method, multiplying one number by a second is performed by a sequence of steps in which a value (initially the first of the two numbers) is either doubled or has the first number added back into it; the order in which these steps are to be performed is given by the binary representation of the second number. This method can be seen in use, for instance, in the Rhind Mathematical Papyrus , which dates to around 1650 BC.

[ 4 ] China [ edit ] Daoist Bagua The I Ching dates from the 9th century BC in China.

[ 5 ] The binary notation in the I Ching is used to interpret its quaternary divination technique.

[ 6 ] It is based on taoistic duality of yin and yang .

[ 7 ] Eight trigrams (Bagua) and a set of 64 hexagrams ("sixty-four" gua) , analogous to the three-bit and six-bit binary numerals, were in use at least as early as the Zhou dynasty of ancient China.

[ 5 ] The Song dynasty scholar Shao Yong (1011–1077) rearranged the hexagrams in a format that resembles modern binary numbers, although he did not intend his arrangement to be used mathematically.

[ 6 ] Viewing the least significant bit on top of single hexagrams in Shao Yong's square [ 8 ] and reading along rows either from bottom right to top left with solid lines as 0 and broken lines as 1 or from top left to bottom right with solid lines as 1 and broken lines as 0 hexagrams can be interpreted as sequence from 0 to 63.

[ 9 ] Classical antiquity [ edit ] Etruscans divided the outer edge of divination livers into sixteen parts, each inscribed with the name of a divinity and its region of the sky. Each liver region produced a binary reading which was combined into a final binary for divination.

[ 10 ] Divination at Ancient Greek Dodona oracle worked by drawing from separate jars, questions tablets and "yes" and "no" pellets. The result was then combined to make a final prophecy.

[ 11 ] India [ edit ] The Indian scholar Pingala (c. 2nd century BC) developed a binary system for describing prosody .

[ 12 ] [ 13 ] He described meters in the form of short and long syllables (the latter equal in length to two short syllables).

[ 14 ] They were known as laghu (light) and guru (heavy) syllables.

Pingala's Hindu classic titled Chandaḥśāstra (8.23) describes the formation of a matrix in order to give a unique value to each meter. "Chandaḥśāstra" literally translates to science of meters in Sanskrit. The binary representations in Pingala's system increases towards the right, and not to the left like in the binary numbers of the modern positional notation .

[ 15 ] In Pingala's system, the numbers start from number one, and not zero. Four short syllables "0000" is the first pattern and corresponds to the value one. The numerical value is obtained by adding one to the sum of place values .

[ 16 ] Africa [ edit ] The Ifá is an African divination system .

Similar to the I Ching , but has up to 256 binary signs, [ 17 ] unlike the I Ching which has 64. The Ifá originated in 15th century West Africa among Yoruba people . In 2008, UNESCO added Ifá to its list of the " Masterpieces of the Oral and Intangible Heritage of Humanity ".

[ 18 ] [ 19 ] Other cultures [ edit ] The residents of the island of Mangareva in French Polynesia were using a hybrid binary- decimal system before 1450.

[ 20 ] Slit drums with binary tones are used to encode messages across Africa and Asia.

[ 7 ] Sets of binary combinations similar to the I Ching have also been used in traditional African divination systems, such as Ifá among others, as well as in medieval Western geomancy . The majority of Indigenous Australian languages use a base-2 system.

[ 21 ] Western predecessors to Leibniz [ edit ] In the late 13th century Ramon Llull had the ambition to account for all wisdom in every branch of human knowledge of the time. For that purpose he developed a general method or "Ars generalis" based on binary combinations of a number of simple basic principles or categories, for which he has been considered a predecessor of computing science and artificial intelligence.

[ 22 ] In 1605, Francis Bacon discussed a system whereby letters of the alphabet could be reduced to sequences of binary digits, which could then be encoded as scarcely visible variations in the font in any random text.

[ 23 ] Importantly for the general theory of binary encoding, he added that this method could be used with any objects at all: "provided those objects be capable of a twofold difference only; as by Bells, by Trumpets, by Lights and Torches, by the report of Muskets, and any instruments of like nature".

[ 23 ] (See Bacon's cipher .) In 1617, John Napier described a system he called location arithmetic for doing binary calculations using a non-positional representation by letters.

Thomas Harriot investigated several positional numbering systems, including binary, but did not publish his results; they were found later among his papers.

[ 24 ] Possibly the first publication of the system in Europe was by Juan Caramuel y Lobkowitz , in 1700.

[ 25 ] Leibniz [ edit ] Gottfried Leibniz Leibniz wrote in excess of a hundred manuscripts on binary, most of them remaining unpublished.

[ 26 ] Before his first dedicated work in 1679, numerous manuscripts feature early attempts to explore binary concepts, including tables of numbers and basic calculations, often scribbled in the margins of works unrelated to mathematics.

[ 26 ] His first known work on binary, “On the Binary Progression" , in 1679, Leibniz introduced conversion between decimal and binary, along with algorithms for performing basic arithmetic operations such as addition, subtraction, multiplication, and division using binary numbers. He also developed a form of binary algebra to calculate the square of a six-digit number and to extract square roots.

[ 26 ] His most well known work appears in his article Explication de l'Arithmétique Binaire (published in 1703).
The full title of Leibniz's article is translated into English as the "Explanation of Binary Arithmetic, which uses only the characters 1 and 0, with some remarks on its usefulness, and on the light it throws on the ancient Chinese figures of Fu Xi " .

[ 27 ] Leibniz's system uses 0 and 1, like the modern binary numeral system. An example of Leibniz's binary numeral system is as follows: [ 27 ] 0 0 0 1   numerical value 2 0 0 0 1 0   numerical value 2 1 0 1 0 0   numerical value 2 2 1 0 0 0   numerical value 2 3 While corresponding with the Jesuit priest Joachim Bouvet in 1700, who had made himself an expert on the I Ching while a missionary in China, Leibniz explained his binary notation, and Bouvet demonstrated in his 1701 letters that the I Ching was an independent, parallel invention of binary notation.
Leibniz & Bouvet concluded that this mapping was evidence of major Chinese accomplishments in the sort of philosophical mathematics he admired.

[ 28 ] Of this parallel invention, Leibniz wrote in his "Explanation Of Binary Arithmetic" that "this restitution of their meaning, after such a great interval of time, will seem all the more curious." [ 29 ] The relation was a central idea to his universal concept of a language or characteristica universalis , a popular idea that would be followed closely by his successors such as Gottlob Frege and George Boole in forming modern symbolic logic .

[ 30 ] Leibniz was first introduced to the I Ching through his contact with the French Jesuit Joachim Bouvet , who visited China in 1685 as a missionary. Leibniz saw the I Ching hexagrams as an affirmation of the universality of his own religious beliefs as a Christian.

[ 31 ] Binary numerals were central to Leibniz's theology. He believed that binary numbers were symbolic of the Christian idea of creatio ex nihilo or creation out of nothing.

[ 32 ] [A concept that] is not easy to impart to the pagans, is the creation ex nihilo through God's almighty power. Now one can say that nothing in the world can better present and demonstrate this power than the origin of numbers, as it is presented here through the simple and unadorned presentation of One and Zero or Nothing.

— Leibniz's letter to the Duke of Brunswick attached with the I Ching hexagrams [ 31 ] Later developments [ edit ] George Boole In 1854, British mathematician George Boole published a landmark paper detailing an algebraic system of logic that would become known as Boolean algebra . His logical calculus was to become instrumental in the design of digital electronic circuitry.

[ 33 ] In 1937, Claude Shannon produced his master's thesis at MIT that implemented Boolean algebra and binary arithmetic using electronic relays and switches for the first time in history. Entitled A Symbolic Analysis of Relay and Switching Circuits , Shannon's thesis essentially founded practical digital circuit design.

[ 34 ] In November 1937, George Stibitz , then working at Bell Labs , completed a relay-based computer he dubbed the "Model K" (for " K itchen", where he had assembled it), which calculated using binary addition.

[ 35 ] Bell Labs authorized a full research program in late 1938 with Stibitz at the helm. Their Complex Number Computer, completed 8 January 1940, was able to calculate complex numbers . In a demonstration to the American Mathematical Society conference at Dartmouth College on 11 September 1940, Stibitz was able to send the Complex Number Calculator remote commands over telephone lines by a teletype . It was the first computing machine ever used remotely over a phone line. Some participants of the conference who witnessed the demonstration were John von Neumann , John Mauchly and Norbert Wiener , who wrote about it in his memoirs.

[ 36 ] [ 37 ] [ 38 ] The Z1 computer , which was designed and built by Konrad Zuse between 1935 and 1938, used Boolean logic and binary floating-point numbers .

[ 39 ] Representation [ edit ] Any number can be represented by a sequence of bits (binary digits), which in turn may be represented by any mechanism capable of being in two mutually exclusive states. Any of the following rows of symbols can be interpreted as the binary numeric value of 667: 1 0 1 0 0 1 1 0 1 1 | ― | ― ― | | ― | | ☒ ☐ ☒ ☐ ☐ ☒ ☒ ☐ ☒ ☒ y n y n n y y n y y T F T F F T T F T T A binary clock might use LEDs to express binary values. In this clock, each column of LEDs shows a binary-coded decimal numeral of the traditional sexagesimal time.

The numeric value represented in each case depends on the value assigned to each symbol. In the earlier days of computing, switches, punched holes, and punched paper tapes were used to represent binary values.

[ 40 ] In a modern computer, the numeric values may be represented by two different voltages ; on a magnetic disk , magnetic polarities may be used. A "positive", " yes ", or "on" state is not necessarily equivalent to the numerical value of one; it depends on the architecture in use.

In keeping with the customary representation of numerals using Arabic numerals , binary numbers are commonly written using the symbols 0 and 1 . When written, binary numerals are often subscripted, prefixed, or suffixed to indicate their base, or radix . The following notations are equivalent: 100101 binary (explicit statement of format) 100101b (a suffix indicating binary format; also known as Intel convention [ 41 ] [ 42 ] ) 100101B (a suffix indicating binary format) bin 100101 (a prefix indicating binary format) 100101 2 (a subscript indicating base-2 (binary) notation) %100101 (a prefix indicating binary format; also known as Motorola convention [ 41 ] [ 42 ] ) 0b100101 (a prefix indicating binary format, common in programming languages) 6b100101 (a prefix indicating number of bits in binary format, common in programming languages) #b100101 (a prefix indicating binary format, common in Lisp programming languages) When spoken, binary numerals are usually read digit-by-digit, to distinguish them from decimal numerals. For example, the binary numeral 100 is pronounced one zero zero , rather than one hundred , to make its binary nature explicit and for purposes of correctness. Since the binary numeral 100 represents the value four, it would be confusing to refer to the numeral as one hundred (a word that represents a completely different value, or amount). Alternatively, the binary numeral 100 can be read out as "four" (the correct value ), but this does not make its binary nature explicit.

Counting in binary [ edit ] Counting in binary is similar to counting in any other number system. Beginning with a single digit, counting proceeds through each symbol, in increasing order. Before examining binary counting, it is useful to briefly discuss the more familiar decimal counting system as a frame of reference.

Decimal counting [ edit ] Decimal counting uses the ten symbols 0 through 9 . Counting begins with the incremental substitution of the least significant digit (rightmost digit) which is often called the first digit . When the available symbols for this position are exhausted, the least significant digit is reset to 0 , and the next digit of higher significance (one position to the left) is incremented ( overflow ), and incremental substitution of the low-order digit resumes. This method of reset and overflow is repeated for each digit of significance. Counting progresses as follows: 000, 001, 002, ... 007, 008, 009, (rightmost digit is reset to zero, and the digit to its left is incremented) 0 1 0, 011, 012, ...

...

090, 091, 092, ... 097, 098, 099, (rightmost two digits are reset to zeroes, and next digit is incremented) 1 00, 101, 102, ...

Binary counting [ edit ] This counter shows how to count in binary from numbers zero through thirty-one.

A party trick to guess a number from which cards it is printed on uses the bits of the binary representation of the number. In the SVG file, click a card to toggle it Binary counting follows the exact same procedure, and again the incremental substitution begins with the least significant binary digit, or bit (the rightmost one, also called the first bit ), except that only the two symbols 0 and 1 are available. Thus, after a bit reaches 1 in binary, an increment resets it to 0 but also causes an increment of the next bit to the left: 0000, 000 1 , (rightmost bit starts over, and the next bit is incremented) 00 1 0, 0011, (rightmost two bits start over, and the next bit is incremented) 0 1 00, 0101, 0110, 0111, (rightmost three bits start over, and the next bit is incremented) 1 000, 1001, 1010, 1011, 1100, 1101, 1110, 1111 ...

In the binary system, each bit represents an increasing power of 2, with the rightmost bit representing 2 0 , the next representing 2 1 , then 2 2 , and so on. The value of a binary number is the sum of the powers of 2 represented by each "1" bit. For example, the binary number 100101 is converted to decimal form as follows: 100101 2 = [ ( 1 ) × 2 5 ] + [ ( 0 ) × 2 4 ] + [ ( 0 ) × 2 3 ] + [ ( 1 ) × 2 2 ] + [ ( 0 ) × 2 1 ] + [ ( 1 ) × 2 0 ] 100101 2 = [ 1 × 32 ] + [ 0 × 16 ] + [ 0 × 8 ] + [ 1 × 4 ] + [ 0 × 2 ] + [ 1 × 1 ] 100101 2 = 37 10 Fractions [ edit ] Fractions in binary arithmetic terminate only if the denominator is a power of 2 . As a result, 1/10 does not have a finite binary representation ( 10 has prime factors 2 and 5 ). This causes 10 × 1/10 not to precisely equal 1 in binary floating-point arithmetic . As an example, to interpret the binary expression for 1/3 = .010101..., this means: 1/3 = 0 × 2 −1 + 1 × 2 −2 + 0 × 2 −3 + 1 × 2 −4 + ... = 0.3125 + ... An exact value cannot be found with a sum of a finite number of inverse powers of two, the zeros and ones in the binary representation of 1/3 alternate forever.

Fraction Decimal Binary Fractional approximation 1/1 1 or 0.999...

1 or 0.

1 1/2 + 1/4 + 1/8...

1/2 0.5 or 0.4999...

0.1 or 0.0 1 1/4 + 1/8 + 1/16 . . .

1/3 0.333...

0.

01 1/4 + 1/16 + 1/64 . . .

1/4 0.25 or 0.24999...

0.01 or 0.00 1 1/8 + 1/16 + 1/32 . . .

1/5 0.2 or 0.1999...

0.

0011 1/8 + 1/16 + 1/128 . . .

1/6 0.1666...

0.0 01 1/8 + 1/32 + 1/128 . . .

1/7 0.142857142857...

0.

001 1/8 + 1/64 + 1/512 . . .

1/8 0.125 or 0.124999...

0.001 or 0.000 1 1/16 + 1/32 + 1/64 . . .

1/9 0.111...

0.

000111 1/16 + 1/32 + 1/64 . . .

1/10 0.1 or 0.0999...

0.0 0011 1/16 + 1/32 + 1/256 . . .

1/11 0.090909...

0.

0001011101 1/16 + 1/64 + 1/128 . . .

1/12 0.08333...

0.00 01 1/16 + 1/64 + 1/256 . . .

1/13 0.076923076923...

0.

000100111011 1/16 + 1/128 + 1/256 . . .

1/14 0.0714285714285...

0.0 001 1/16 + 1/128 + 1/1024 . . .

1/15 0.0666...

0.

0001 1/16 + 1/256 . . .

1/16 0.0625 or 0.0624999...

0.0001 or 0.0000 1 1/32 + 1/64 + 1/128 . . .

Binary arithmetic [ edit ] Arithmetic in binary is much like arithmetic in other positional notation numeral systems . Addition, subtraction, multiplication, and division can be performed on binary numerals.

Addition [ edit ] Main article: Adder (electronics) The circuit diagram for a binary half adder , which adds two bits together, producing sum and carry bits The simplest arithmetic operation in binary is addition. Adding two single-digit binary numbers is relatively simple, using a form of carrying: 0 + 0 → 0 0 + 1 → 1 1 + 0 → 1 1 + 1 → 0, carry 1 (since 1 + 1 = 2 = 0 + (1 × 2 1 )  ) Adding two "1" digits produces a digit "0", while 1 will have to be added to the next column. This is similar to what happens in decimal when certain single-digit numbers are added together; if the result equals or exceeds the value of the radix (10), the digit to the left is incremented: 5 + 5 → 0, carry 1 (since 5 + 5 = 10 = 0 + (1 × 10 1 )  ) 7 + 9 → 6, carry 1 (since 7 + 9 = 16 = 6 + (1 × 10 1 )  ) This is known as carrying . When the result of an addition exceeds the value of a digit, the procedure is to "carry" the excess amount divided by the radix (that is, 10/10) to the left, adding it to the next positional value. This is correct since the next position has a weight that is higher by a factor equal to the radix. Carrying works the same way in binary: 1 1 1 1 1    (carried digits) 0 1 1 0 1
+   1 0 1 1 1
-------------
= 1 0 0 1 0 0 = 36 In this example, two numerals are being added together: 01101 2 (13 10 ) and 10111 2 (23 10 ). The top row shows the carry bits used. Starting in the rightmost column, 1 + 1 = 10 2 . The 1 is carried to the left, and the 0 is written at the bottom of the rightmost column. The second column from the right is added: 1 + 0 + 1 = 10 2 again; the 1 is carried, and 0 is written at the bottom. The third column: 1 + 1 + 1 = 11 2 . This time, a 1 is carried, and a 1 is written in the bottom row. Proceeding like this gives the final answer 100100 2 (36 10 ).

When computers must add two numbers, the rule that:
x xor y = (x + y) mod 2
for any two bits x and y allows for very fast calculation, as well.

Long carry method [ edit ] A simplification for many binary addition problems is the "long carry method" or "Brookhouse Method of Binary Addition". This method is particularly useful when one of the numbers contains a long stretch of ones. It is based on the simple premise that under the binary system, when given a stretch of digits composed entirely of n ones (where n is any integer length), adding 1 will result in the number 1 followed by a string of n zeros. That concept follows, logically, just as in the decimal system, where adding 1 to a string of n 9s will result in the number 1 followed by a string of n 0s: Binary                        Decimal
    1 1 1 1 1     likewise        9 9 9 9 9
 +          1                  +          1
  ———————————                   ———————————
  1 0 0 0 0 0                   1 0 0 0 0 0 Such long strings are quite common in the binary system.  From that one finds that large binary numbers can be added using two simple steps, without excessive carry operations. In the following example, two numerals are being added together: 1 1 1 0 1 1 1 1 1 0 2 (958 10 ) and 1 0 1 0 1 1 0 0 1 1 2 (691 10 ), using the traditional carry method on the left, and the long carry method on the right: Traditional Carry Method                       Long Carry Method
                                vs.

1 1 1   1 1 1 1 1      (carried digits)   1 ←     1 ← carry the 1 until it is one digit past the "string" below
    1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0  cross out the "string",
+   1 0 1 0 1 1 0 0 1 1                   +   1 0 1 0 1 1 0 0 1 1  and cross out the digit that was added to it
———————————————————————                    ——————————————————————
= 1 1 0 0 1 1 1 0 0 0 1                     1 1 0 0 1 1 1 0 0 0 1 The top row shows the carry bits used. Instead of the standard carry from one column to the next, the lowest-ordered "1" with a "1" in the corresponding place value beneath it may be added and a "1" may be carried to one digit past the end of the series.  The "used" numbers must be crossed off, since they are already added. Other long strings may likewise be cancelled using the same technique. Then, simply add together any remaining digits normally. Proceeding in this manner gives the final answer of 1 1 0 0 1 1 1 0 0 0 1 2 (1649 10 ).  In our simple example using small numbers, the traditional carry method required eight carry operations, yet the long carry method required only two, representing a substantial reduction of effort.

Addition table [ edit ] 0 1 0 0 1 1 1 10 The binary addition table is similar to, but not the same as, the truth table of the logical disjunction operation ∨ ∨ {\displaystyle \lor } . The difference is that 1 ∨ ∨ 1 = 1 {\displaystyle 1\lor 1=1} , while 1 + 1 = 10 {\displaystyle 1+1=10} .

Subtraction [ edit ] Further information: signed number representations and two's complement Subtraction works in much the same way: 0 − 0 → 0 0 − 1 → 1, borrow 1 1 − 0 → 1 1 − 1 → 0 Subtracting a "1" digit from a "0" digit produces the digit "1", while 1 will have to be subtracted from the next column. This is known as borrowing . The principle is the same as for carrying. When the result of a subtraction is less than 0, the least possible value of a digit, the procedure is to "borrow" the deficit divided by the radix (that is, 10/10) from the left, subtracting it from the next positional value.

*   * * *   (starred columns are borrowed from)
  1 1 0 1 1 1 0
−     1 0 1 1 1
----------------
= 1 0 1 0 1 1 1 *             (starred columns are borrowed from)
  1 0 1 1 1 1 1
–   1 0 1 0 1 1
----------------
= 0 1 1 0 1 0 0 Subtracting a positive number is equivalent to adding a negative number of equal absolute value . Computers use signed number representations to handle negative numbers—most commonly the two's complement notation. Such representations eliminate the need for a separate "subtract" operation. Using two's complement notation, subtraction can be summarized by the following formula: A − B = A + not B + 1 Multiplication [ edit ] Multiplication in binary is similar to its decimal counterpart. Two numbers A and B can be multiplied by partial products: for each digit in B , the product of that digit in A is calculated and written on a new line, shifted leftward so that its rightmost digit lines up with the digit in B that was used. The sum of all these partial products gives the final result.

Since there are only two digits in binary, there are only two possible outcomes of each partial multiplication: If the digit in B is 0, the partial product is also 0 If the digit in B is 1, the partial product is equal to A For example, the binary numbers 1011 and 1010 are multiplied as follows: 1 0 1 1   ( A )
         × 1 0 1 0   ( B )
         ---------
           0 0 0 0   ← to the rightmost 'zero' in B +     1 0 1 1     ← to the next 'one' in B +   0 0 0 0
   + 1 0 1 1
   ---------------
   = 1 1 0 1 1 1 0 Binary numbers can also be multiplied with bits after a binary point : 1 0 1 . 1 0 1 A (5.625 in decimal)
             × 1 1 0 . 0 1 B (6.25 in decimal)
             -------------------
                   1 . 0 1 1 0 1   ← to a 'one' in B +           0 0 . 0 0 0 0     ← to a 'zero' in B +         0 0 0 . 0 0 0
     +       1 0 1 1 . 0 1
     +     1 0 1 1 0 . 1
     ---------------------------
     =   1 0 0 0 1 1 . 0 0 1 0 1 (35.15625 in decimal) See also Booth's multiplication algorithm .

Multiplication table [ edit ] 0 1 0 0 0 1 0 1 The binary multiplication table is the same as the truth table of the logical conjunction operation ∧ ∧ {\displaystyle \land } .

Division [ edit ] See also: Division algorithm § Integer division (unsigned) with remainder Long division in binary is again similar to its decimal counterpart.

In the example below, the divisor is 101 2 , or 5 in decimal, while the dividend is 11011 2 , or 27 in decimal. The procedure is the same as that of decimal long division ; here, the divisor 101 2 goes into the first three digits 110 2 of the dividend one time, so a "1" is written on the top line. This result is multiplied by the divisor, and subtracted from the first three digits of the dividend; the next digit (a "1") is included to obtain a new three-digit sequence: 1
        ___________
1 0 1   ) 1 1 0 1 1
        − 1 0 1
          -----
          0 0 1 The procedure is then repeated with the new sequence, continuing until the digits in the dividend have been exhausted: 1 0 1
       ___________
1 0 1  ) 1 1 0 1 1
       − 1 0 1
         -----
             1 1 1
         −   1 0 1
             -----
             0 1 0 Thus, the quotient of 11011 2 divided by 101 2 is 101 2 , as shown on the top line, while the remainder, shown on the bottom line, is 10 2 . In decimal, this corresponds to the fact that 27 divided by 5 is 5, with a remainder of 2.

Aside from long division, one can also devise the procedure so as to allow for over-subtracting from the partial remainder at each iteration, thereby leading to alternative methods which are less systematic, but more flexible as a result.

Square root [ edit ] The process of taking a binary square root digit by digit is essentially the same as for a decimal square root but much simpler, due to the binary nature.  First group the digits in pairs, using a leading 0 if necessary so there are an even number of digits.  Now at each step, consider the answer so far, extended with the digits 01.  If this can be subtracted from the current remainder, do so.  Then extend the remainder with the next pair of digits.  If you subtracted, the next digit of the answer is 1, otherwise it's 0.

1                          1  1                       1  1  0                   1  1  0  1
 -------------             -------------              -------------              -------------             -------------
√ 10 10 10 01             √ 10 10 10 01              √ 10 10 10 01              √ 10 10 10 01             √ 10 10 10 01
                           - 1                        - 1                        - 1                       - 1         
Answer so far is 0,        ----                       ----                       ----                      ----        
extended by 01 is 001,       1 10                       1 10                       1 10                      1 10
this CAN be subtracted                                - 1 01                     - 1 01                    - 1 01
from first pair 10,       Answer so far is 1,         -------                    -------                   -------
so first digit of         extended by 01 is 101,           1 10                       1 10 01                   1 10 01
answer is 1.              this CAN be subtracted                                                              - 1 10 01
                          from remainder 110, so     Answer so far is 11,       Answer so far is 110,         ----------
                          next answer digit is 1.    extended by 01 is 1101,    extended by 01 is 11001,              0
                                                     this is TOO BIG to         this CAN be subtracted
                                                     subtract from remainder    from remainder 11001, so           Done!
                                                     110, so next digit of      next digit of answer is 1.
                                                     answer is 0.

Bitwise operations [ edit ] Main article: Bitwise operation Though not directly related to the numerical interpretation of binary symbols, sequences of bits may be manipulated using Boolean logical operators . When a string of binary symbols is manipulated in this way, it is called a bitwise operation ; the logical operators AND , OR , and XOR may be performed on corresponding bits in two binary numerals provided as input. The logical NOT operation may be performed on individual bits in a single binary numeral provided as input. Sometimes, such operations may be used as arithmetic short-cuts, and may have other computational benefits as well.  For example, an arithmetic shift left of a binary number is the equivalent of multiplication by a (positive, integral) power of 2.

Conversion to and from other numeral systems [ edit ] Decimal to binary [ edit ] Conversion of (357) 10 to binary notation results in (101100101) To convert from a base-10 integer to its base-2 (binary) equivalent, the number is divided by two . The remainder is the least-significant bit . The quotient is again divided by two; its remainder becomes the next least significant bit. This process repeats until a quotient of one is reached. The sequence of remainders (including the final quotient of one) forms the binary value, as each remainder must be either zero or one when dividing by two. For example, (357) 10 is expressed as (101100101) 2.

[ 43 ] Binary to decimal [ edit ] Conversion from base-2 to base-10 simply inverts the preceding algorithm. The bits of the binary number are used one by one, starting with the most significant (leftmost) bit. Beginning with the value 0, the prior value is doubled, and the next bit is then added to produce the next value. This can be organized in a multi-column table. For example, to convert 10010101101 2 to decimal: Prior value × 2 + Next bit = Next value 0 × 2 + 1 = 1 1 × 2 + 0 = 2 2 × 2 + 0 = 4 4 × 2 + 1 = 9 9 × 2 + 0 = 18 18 × 2 + 1 = 37 37 × 2 + 0 = 74 74 × 2 + 1 = 149 149 × 2 + 1 = 299 299 × 2 + 0 = 598 598 × 2 + 1 = 1197 The result is 1197 10 . The first Prior Value of 0 is simply an initial decimal value. This method is an application of the Horner scheme .

Binary 1 0 0 1 0 1 0 1 1 0 1 Decimal 1×2 10 + 0×2 9 + 0×2 8 + 1×2 7 + 0×2 6 + 1×2 5 + 0×2 4 + 1×2 3 + 1×2 2 + 0×2 1 + 1×2 0 = 1197 The fractional parts of a number are converted with similar methods. They are again based on the equivalence of shifting with doubling or halving.

In a fractional binary number such as 0.11010110101 2 , the first digit is 1 2 {\textstyle {\frac {1}{2}}} , the second ( 1 2 ) 2 = 1 4 {\textstyle ({\frac {1}{2}})^{2}={\frac {1}{4}}} , etc. So if there is a 1 in the first place after the decimal, then the number is at least 1 2 {\textstyle {\frac {1}{2}}} , and vice versa. Double that number is at least 1. This suggests the algorithm: Repeatedly double the number to be converted, record if the result is at least 1, and then throw away the integer part.

For example, ( 1 3 ) 10 {\textstyle ({\frac {1}{3}})_{10}} , in binary, is: Converting Result 1 3 {\textstyle {\frac {1}{3}}} 0.

1 3 × × 2 = 2 3 < 1 {\textstyle {\frac {1}{3}}\times 2={\frac {2}{3}}<1} 0.0 2 3 × × 2 = 1 1 3 ≥ ≥ 1 {\textstyle {\frac {2}{3}}\times 2=1{\frac {1}{3}}\geq 1} 0.01 1 3 × × 2 = 2 3 < 1 {\textstyle {\frac {1}{3}}\times 2={\frac {2}{3}}<1} 0.010 2 3 × × 2 = 1 1 3 ≥ ≥ 1 {\textstyle {\frac {2}{3}}\times 2=1{\frac {1}{3}}\geq 1} 0.0101 Thus the repeating decimal fraction 0.

3 ... is equivalent to the repeating binary fraction 0.

01 ... .

Or for example, 0.1 10 , in binary, is: Converting Result 0.1 0.

0.1 × 2 = 0.2 < 1 0.0 0.2 × 2 = 0.4 < 1 0.00 0.4 × 2 = 0.8 < 1 0.000 0.8 × 2 = 1.6 ≥ 1 0.0001 0.6 × 2 = 1.2 ≥ 1 0.00011 0.2 × 2 = 0.4 < 1 0.000110 0.4 × 2 = 0.8 < 1 0.0001100 0.8 × 2 = 1.6 ≥ 1 0.00011001 0.6 × 2 = 1.2 ≥ 1 0.000110011 0.2 × 2 = 0.4 < 1 0.0001100110 This is also a repeating binary fraction 0.0 0011 ... .  It may come as a surprise that terminating decimal fractions can have repeating expansions in binary. It is for this reason that many are surprised to discover that 1/10 + ... + 1/10 (addition of 10 numbers) differs from 1 in binary floating-point arithmetic . In fact, the only binary fractions with terminating expansions are of the form of an integer divided by a power of 2, which 1/10 is not.

The final conversion is from binary to decimal fractions. The only difficulty arises with repeating fractions, but otherwise the method is to shift the fraction to an integer, convert it as above, and then divide by the appropriate power of two in the decimal base. For example: x = 1100 .1 01110 ¯ ¯ … … x × × 2 6 = 1100101110 .

01110 ¯ ¯ … … x × × 2 = 11001 .

01110 ¯ ¯ … … x × × ( 2 6 − − 2 ) = 1100010101 x = 1100010101 / 111110 x = ( 789 / 62 ) 10 {\displaystyle {\begin{aligned}x&=&1100&.1{\overline {01110}}\ldots \\x\times 2^{6}&=&1100101110&.{\overline {01110}}\ldots \\x\times 2&=&11001&.{\overline {01110}}\ldots \\x\times (2^{6}-2)&=&1100010101\\x&=&1100010101/111110\\x&=&(789/62)_{10}\end{aligned}}} Another way of converting from binary to decimal, often quicker for a person familiar with hexadecimal , is to do so indirectly—first converting ( x {\displaystyle x} in binary) into ( x {\displaystyle x} in hexadecimal) and then converting ( x {\displaystyle x} in hexadecimal) into ( x {\displaystyle x} in decimal).

For very large numbers, these simple methods are inefficient because they perform a large number of multiplications or divisions where one operand is very large. A simple divide-and-conquer algorithm is more effective asymptotically: given a binary number, it is divided by 10 k , where k is chosen so that the quotient roughly equals the remainder; then each of these pieces is converted to decimal and the two are concatenated . Given a decimal number, it can be split into two pieces of about the same size, each of which is converted to binary, whereupon the first converted piece is multiplied by 10 k and added to the second converted piece, where k is the number of decimal digits in the second, least-significant piece before conversion.

Hexadecimal [ edit ] Main article: Hexadecimal 0 hex = 0 dec = 0 oct 0 0 0 0 1 hex = 1 dec = 1 oct 0 0 0 1 2 hex = 2 dec = 2 oct 0 0 1 0 3 hex = 3 dec = 3 oct 0 0 1 1 4 hex = 4 dec = 4 oct 0 1 0 0 5 hex = 5 dec = 5 oct 0 1 0 1 6 hex = 6 dec = 6 oct 0 1 1 0 7 hex = 7 dec = 7 oct 0 1 1 1 8 hex = 8 dec = 10 oct 1 0 0 0 9 hex = 9 dec = 11 oct 1 0 0 1 A hex = 10 dec = 12 oct 1 0 1 0 B hex = 11 dec = 13 oct 1 0 1 1 C hex = 12 dec = 14 oct 1 1 0 0 D hex = 13 dec = 15 oct 1 1 0 1 E hex = 14 dec = 16 oct 1 1 1 0 F hex = 15 dec = 17 oct 1 1 1 1 Binary may be converted to and from hexadecimal more easily. This is because the radix of the hexadecimal system (16) is a power of the radix of the binary system (2). More specifically, 16 = 2 4 , so it takes four digits of binary to represent one digit of hexadecimal, as shown in the adjacent table.

To convert a hexadecimal number into its binary equivalent, simply substitute the corresponding binary digits: 3A 16 = 0011 1010 2 E7 16 = 1110 0111 2 To convert a binary number into its hexadecimal equivalent, divide it into groups of four bits. If the number of bits isn't a multiple of four, simply insert extra 0 bits at the left (called padding ). For example: 1010010 2 = 0101 0010 grouped with padding = 52 16 11011101 2 = 1101 1101 grouped = DD 16 To convert a hexadecimal number into its decimal equivalent, multiply the decimal equivalent of each hexadecimal digit by the corresponding power of 16 and add the resulting values: C0E7 16 = (12 × 16 3 ) + (0 × 16 2 ) + (14 × 16 1 ) + (7 × 16 0 ) = (12 × 4096) + (0 × 256) + (14 × 16) + (7 × 1) = 49,383 10 Octal [ edit ] Main article: Octal Binary is also easily converted to the octal numeral system, since octal uses a radix of 8, which is a power of two (namely, 2 3 , so it takes exactly three binary digits to represent an octal digit). The correspondence between octal and binary numerals is the same as for the first eight digits of hexadecimal in the table above. Binary 000 is equivalent to the octal digit 0, binary 111 is equivalent to octal 7, and so forth.

Octal Binary 0 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 Converting from octal to binary proceeds in the same fashion as it does for hexadecimal : 65 8 = 110 101 2 17 8 = 001 111 2 And from binary to octal: 101100 2 = 101 100 2 grouped = 54 8 10011 2 = 010 011 2 grouped with padding = 23 8 And from octal to decimal: 65 8 = (6 × 8 1 ) + (5 × 8 0 ) = (6 × 8) + (5 × 1) = 53 10 127 8 = (1 × 8 2 ) + (2 × 8 1 ) + (7 × 8 0 ) = (1 × 64) + (2 × 8) + (7 × 1) = 87 10 Representing real numbers [ edit ] Non-integers can be represented by using negative powers, which are set off from the other digits by means of a radix point (called a decimal point in the decimal system). For example, the binary number 11.01 2 means: 1 × 2 1 (1 × 2 = 2 ) plus 1 × 2 0 (1 × 1 = 1 ) plus 0 × 2 −1 (0 × 1 ⁄ 2 = 0 ) plus 1 × 2 −2 (1 × 1 ⁄ 4 = 0.25 ) For a total of 3.25 decimal.

All dyadic rational numbers p 2 a {\displaystyle {\frac {p}{2^{a}}}} have a terminating binary numeral—the binary representation has a finite number of terms after the radix point. Other rational numbers have binary representation, but instead of terminating, they recur , with a finite sequence of digits repeating indefinitely. For instance 1 10 3 10 = 1 2 11 2 = 0.01010101 01 ¯ ¯ … … 2 {\displaystyle {\frac {1_{10}}{3_{10}}}={\frac {1_{2}}{11_{2}}}=0.01010101{\overline {01}}\ldots \,_{2}} 12 10 17 10 = 1100 2 10001 2 = 0.1011010010110100 10110100 ¯ ¯ … … 2 {\displaystyle {\frac {12_{10}}{17_{10}}}={\frac {1100_{2}}{10001_{2}}}=0.1011010010110100{\overline {10110100}}\ldots \,_{2}} The phenomenon that the binary representation of any rational is either terminating or recurring also occurs in other radix-based numeral systems. See, for instance, the explanation in decimal . Another similarity is the existence of alternative representations for any terminating representation, relying on the fact that 0.111111...

is the sum of the geometric series 2 −1 + 2 −2 + 2 −3 + ... which is 1.

Binary numerals that neither terminate nor recur represent irrational numbers . For instance, 0.10100100010000100000100... does have a pattern, but it is not a fixed-length recurring pattern, so the number is irrational 1.0110101000001001111001100110011111110... is the binary representation of 2 {\displaystyle {\sqrt {2}}} , the square root of 2 , another irrational. It has no discernible pattern.

See also [ edit ] Mathematics portal ASCII Balanced ternary Bitwise operation Binary code Binary-coded decimal Finger binary Gray code IEEE 754 Linear-feedback shift register Offset binary Quibinary Reduction of summands Redundant binary representation Repeating decimal Two's complement Unicode References [ edit ] ^ "3.3. Binary and Its Advantages — CS160 Reader" .

computerscience.chemeketa.edu . Retrieved 22 May 2024 .

^ Robson, Eleanor ; Stedall, Jacqueline , eds. (2009), "Myth No. 2: the Horus eye fractions", The Oxford Handbook of the History of Mathematics , Oxford University Press, p. 790, ISBN 9780199213122 ^ Chrisomalis, Stephen (2010), Numerical Notation: A Comparative History , Cambridge University Press, pp.

42– 43, ISBN 9780521878180 .

^ Rudman, Peter Strom (2007), How Mathematics Happened: The First 50,000 Years , Prometheus Books, pp.

135– 136, ISBN 9781615921768 .

^ a b Edward Hacker; Steve Moore; Lorraine Patsco (2002).

I Ching: An Annotated Bibliography . Routledge. p. 13.

ISBN 978-0-415-93969-0 .

^ a b Redmond, Geoffrey; Hon, Tze-Ki (2014).

Teaching the I Ching . Oxford University Press. p. 227.

ISBN 978-0-19-976681-9 .

^ a b Jonathan Shectman (2003).

Groundbreaking Scientific Experiments, Inventions, and Discoveries of the 18th Century . Greenwood Publishing. p. 29.

ISBN 978-0-313-32015-6 .

^ Marshall, Steve.

"Yijing hexagram sequences: The Shao Yong square (Fuxi sequence)" . Retrieved 15 September 2022 .

You could say [the Fuxi binary sequence] is a more sensible way of rendering hexagram as binary numbers ... The reasoning, if any, that informs [the King Wen] sequence is unknown.

^ Zhonglian, Shi; Wenzhao, Li; Poser, Hans (2000).

Leibniz' Binary System and Shao Yong's "Xiantian Tu" in :Das Neueste über China: G.W. Leibnizens Novissima Sinica von 1697 : Internationales Symposium, Berlin 4. bis 7. Oktober 1997 . Stuttgart: Franz Steiner Verlag. pp.

165– 170.

ISBN 3515074481 .

^ Collins, Derek (2008).

"Mapping the Entrails: The Practice of Greek Hepatoscopy" .

The American Journal of Philology .

129 (3): 319– 345.

ISSN 0002-9475 .

JSTOR 27566714 .

^ Johnston, Sarah Iles (2008).

Ancient Greek divination . Blackwell ancient religions (1. publ ed.). Malden, Mass.: Wiley-Blackwell.

ISBN 978-1-4051-1573-5 .

^ Sanchez, Julio; Canton, Maria P. (2007).

Microcontroller programming: the microchip PIC . Boca Raton, Florida: CRC Press. p. 37.

ISBN 978-0-8493-7189-9 .

^ W. S. Anglin and J. Lambek, The Heritage of Thales , Springer, 1995, ISBN 0-387-94544-X ^ Math for Poets and Drummers Archived 16 June 2012 at the Wayback Machine (pdf, 145KB) ^ Stakhov, Alexey ; Olsen, Scott Anthony (2009).

The mathematics of harmony: from Euclid to contemporary mathematics and computer science . World Scientific.

ISBN 978-981-277-582-5 .

^ B. van Nooten, "Binary Numbers in Indian Antiquity", Journal of Indian Studies, Volume 21, 1993, pp. 31–50 ^ Landry, Timothy R. (2019).

Vodún: secrecy and the search for divine power . Contemporary ethnography (1st ed.). Philadelphia: University of Pennsylvania Press. p. 25.

ISBN 978-0-8122-5074-9 .

^ Landry 2019 , p. 154.

^ "Ifa Divination System" . Retrieved 5 July 2017 .

^ Bender, Andrea; Beller, Sieghard (16 December 2013).

"Mangarevan invention of binary steps for easier calculation" .

Proceedings of the National Academy of Sciences .

111 (4): 1322– 1327.

doi : 10.1073/pnas.1309160110 .

PMC 3910603 .

PMID 24344278 .

^ Bowern, Claire; Zentz, Jason (2012).

"Diversity in the Numeral Systems of Australian Languages" .

Anthropological Linguistics .

54 (2): 133– 160.

ISSN 0003-5483 .

JSTOR 23621076 .

^ (see Bonner 2007 [1] Archived 3 April 2014 at the Wayback Machine , Fidora et al. 2011 [2] Archived 8 April 2019 at the Wayback Machine ) ^ a b Bacon, Francis (1605).

"The Advancement of Learning" . London. pp. Chapter 1.

^ Shirley, John W. (1951). "Binary numeration before Leibniz".

American Journal of Physics .

19 (8): 452– 454.

Bibcode : 1951AmJPh..19..452S .

doi : 10.1119/1.1933042 .

^ Ineichen, R. (2008).

"Leibniz, Caramuel, Harriot und das Dualsystem" (PDF) .

Mitteilungen der deutschen Mathematiker-Vereinigung (in German).

16 (1): 12– 15.

doi : 10.1515/dmvm-2008-0009 .

S2CID 179000299 .

^ a b c Strickland, Lloyd (2020), Sriraman, Bharath (ed.), "Leibniz on Number Systems" , Handbook of the History and Philosophy of Mathematical Practice , Cham: Springer International Publishing, pp.

1– 31, doi : 10.1007/978-3-030-19071-2_90-1 , ISBN 978-3-030-19071-2 , retrieved 20 August 2024 ^ a b Leibniz G., Explication de l'Arithmétique Binaire, Die Mathematische Schriften, ed. C. Gerhardt, Berlin 1879, vol.7, p.223; Engl. transl.

[3] ^ "Bouvet and Leibniz: A Scholarly Correspondence" , Swiderski 1980 ^ Leibniz : "The Chinese lost the meaning of the Cova or Lineations of Fuxi, perhaps more than a thousand years ago, and they have written commentaries on the subject in which they have sought I know not what far out meanings, so that their true explanation now has to come from Europeans. Here is how: It was scarcely more than two years ago that I sent to Reverend Father Bouvet, 3 the celebrated French Jesuit who lives in Peking, my method of counting by 0 and 1, and nothing more was required to make him recognize that this was the key to the figures of Fuxi. Writing to me on 14 November 1701, he sent me this philosophical prince's grand figure, which goes up to 64, and leaves no further room to doubt the truth of our interpretation, such that it can be said that this Father has deciphered the enigma of Fuxi, with the help of what I had communicated to him. And as these figures are perhaps the most ancient monument of [GM VII, p227] science which exists in the world, this restitution of their meaning, after such a great interval of time, will seem all the more curious." ^ Aiton, Eric J. (1985).

Leibniz: A Biography . Taylor & Francis. pp.

245– 8.

ISBN 0-85274-470-6 .

^ a b J.E.H. Smith (2008).

Leibniz: What Kind of Rationalist?: What Kind of Rationalist?

. Springer. p. 415.

ISBN 978-1-4020-8668-7 .

^ Yuen-Ting Lai (1998).

Leibniz, Mysticism and Religion . Springer. pp.

149– 150.

ISBN 978-0-7923-5223-5 .

^ Boole, George (2009) [1854].

An Investigation of the Laws of Thought on Which are Founded the Mathematical Theories of Logic and Probabilities (Macmillan, Dover Publications, reprinted with corrections [1958] ed.). New York: Cambridge University Press.

ISBN 978-1-108-00153-3 .

^ Shannon, Claude Elwood (1940).

A symbolic analysis of relay and switching circuits (Thesis). Cambridge: Massachusetts Institute of Technology.

hdl : 1721.1/11173 .

^ "National Inventors Hall of Fame – George R. Stibitz" . 20 August 2008. Archived from the original on 9 July 2010 . Retrieved 5 July 2010 .

^ "George Stibitz : Bio" . Math & Computer Science Department, Denison University. 30 April 2004 . Retrieved 5 July 2010 .

^ "Pioneers – The people and ideas that made a difference – George Stibitz (1904–1995)" . Kerry Redshaw. 20 February 2006 . Retrieved 5 July 2010 .

^ "George Robert Stibitz – Obituary" . Computer History Association of California. 6 February 1995 . Retrieved 5 July 2010 .

^ Rojas, Raúl (April–June 1997).

"Konrad Zuse's Legacy: The Architecture of the Z1 and Z3" (PDF) .

IEEE Annals of the History of Computing .

19 (2): 5– 16.

doi : 10.1109/85.586067 .

Archived (PDF) from the original on 3 July 2022 . Retrieved 3 July 2022 .

(12 pages) ^ "Introducing binary – Revision 1 – GCSE Computer Science" .

BBC . Retrieved 26 June 2019 .

^ a b Küveler, Gerd; Schwoch, Dietrich (2013) [1996].

Arbeitsbuch Informatik – eine praxisorientierte Einführung in die Datenverarbeitung mit Projektaufgabe (in German). Vieweg-Verlag, reprint: Springer-Verlag.

doi : 10.1007/978-3-322-92907-5 .

ISBN 978-3-528-04952-2 . 9783322929075.

^ a b Küveler, Gerd; Schwoch, Dietrich (4 October 2007).

Informatik für Ingenieure und Naturwissenschaftler: PC- und Mikrocomputertechnik, Rechnernetze (in German). Vol. 2 (5 ed.). Vieweg, reprint: Springer-Verlag.

ISBN 978-3834891914 . 9783834891914.

^ "Base System" . Archived from the original on 23 October 2017 . Retrieved 31 August 2016 .

External links [ edit ] Wikibooks has a book on the topic of: Fractals/Mathematics/binary Wikimedia Commons has media related to Binary numeral system .

Binary System at cut-the-knot Conversion of Fractions at cut-the-knot Sir Francis Bacon's BiLiteral Cypher system Archived 23 September 2016 at the Wayback Machine , predates binary number system.

Authority control databases : National Germany Japan NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐77cw5
Cached time: 20250811235707
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.918 seconds
Real time usage: 1.394 seconds
Preprocessor visited node count: 4567/1000000
Revision size: 61711/2097152 bytes
Post‐expand include size: 119541/2097152 bytes
Template argument size: 3558/2097152 bytes
Highest expansion depth: 13/100
Expensive parser function count: 11/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 174097/5000000 bytes
Lua time usage: 0.530/10.000 seconds
Lua memory usage: 8813263/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  869.920      1 -total
 43.57%  379.065      1 Template:Reflist
 14.99%  130.362     10 Template:Cite_web
 12.46%  108.402     14 Template:Cite_book
 11.32%   98.483      1 Template:Table_Numeral_Systems
 10.85%   94.344      1 Template:Sidebar_with_collapsible_groups
  9.40%   81.781      1 Template:Short_description
  7.30%   63.540      1 Template:Sidebar_with_collapsible_lists
  6.93%   60.312      2 Template:Sister_project
  6.74%   58.617      2 Template:Side_box Saved in parser cache with key enwiki:pcache:238686:|#|:idhash:canonical and timestamp 20250811235707 and revision id 1303716284. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Binary_number&oldid=1303716284 " Categories : Binary arithmetic Computer arithmetic Elementary arithmetic Gottfried Wilhelm Leibniz Power-of-two numeral systems Hidden categories: Webarchive template wayback links CS1 German-language sources (de) CS1: unfit URL Articles with short description Short description is different from Wikidata Use dmy dates from February 2021 Pages using sidebar with the child parameter Commons category link is on Wikidata This page was last edited on 1 August 2025, at 17:09 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Binary number 99 languages Add topic

