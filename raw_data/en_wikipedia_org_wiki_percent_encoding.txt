Title: Percent-encoding

URL Source: https://en.wikipedia.org/wiki/Percent-encoding

Published Time: 2005-05-02T09:03:22Z

Markdown Content:
From Wikipedia, the free encyclopedia

**URL encoding**, officially known as **percent-encoding**, is a method to [encode](https://en.wikipedia.org/wiki/Binary-to-text_encoding "Binary-to-text encoding") arbitrary data in a [uniform resource identifier](https://en.wikipedia.org/wiki/Uniform_resource_identifier "Uniform resource identifier") (URI) using only the [US-ASCII](https://en.wikipedia.org/wiki/ASCII "ASCII") characters legal within a URI. Percent-encoding is used to ensure special characters do not interfere with the URI's structure and interpretation. Special characters are replaced with a percent sign (%) followed by two hexadecimal digits representing the character's byte value. For example, a space is commonly encoded as %20:

*   original: http://example.com/my file.txt
*   encoded: http://example.com/my%20file.txt

Although it is known as _URL encoding_, it is also used more generally within the main [Uniform Resource Identifier](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier "Uniform Resource Identifier") (URI) set, which includes both [Uniform Resource Locator](https://en.wikipedia.org/wiki/Uniform_Resource_Locator "Uniform Resource Locator") (URL) and [Uniform Resource Name](https://en.wikipedia.org/wiki/Uniform_Resource_Name "Uniform Resource Name") (URN). Consequently, it is also used in the preparation of data of the `application/x-www-form-urlencoded`[media type](https://en.wikipedia.org/wiki/Media_type "Media type"), as is often used in the submission of HTML [form](https://en.wikipedia.org/wiki/Form_(web) "Form (web)") data in [HTTP](https://en.wikipedia.org/wiki/HTTP "HTTP") requests. Percent-encoding is not case-sensitive.

### Percent-encoding in a URI

[[edit](https://en.wikipedia.org/w/index.php?title=Percent-encoding&action=edit&section=2 "Edit section: Percent-encoding in a URI")]

#### Types of URI characters

[[edit](https://en.wikipedia.org/w/index.php?title=Percent-encoding&action=edit&section=3 "Edit section: Types of URI characters")]

The characters allowed in a URI are either _reserved_ or _unreserved_ (or a [percent character](https://en.wikipedia.org/wiki/Percent_sign "Percent sign") as part of a percent-encoding). _Reserved_ characters are those characters that sometimes have special meaning. For example, [forward slash](https://en.wikipedia.org/wiki/Forward_slash "Forward slash") characters are used to separate different parts of a URL (or, more generally, a URI). _Unreserved_ characters have no such meanings. Using percent-encoding, reserved characters are represented using special character sequences. The sets of reserved and unreserved characters and the circumstances under which certain reserved characters have special meaning have changed slightly with each revision of specifications that govern URIs and URI schemes.

RFC 3986 section 2.2 _Reserved Characters_ (January 2005) `!``#``$``&``'``(``)``*``+``,``/``:``;``=``?``@``[``]`

RFC 3986 section 2.3 _Unreserved Characters_ (January 2005) `A``B``C``D``E``F``G``H``I``J``K``L``M``N``O``P``Q``R``S``T``U``V``W``X``Y``Z`
`a``b``c``d``e``f``g``h``i``j``k``l``m``n``o``p``q``r``s``t``u``v``w``x``y``z`
`0``1``2``3``4``5``6``7``8``9``-``_``~``.`

Other characters in a URI must be percent-encoded.

### Reserved characters

[[edit](https://en.wikipedia.org/w/index.php?title=Percent-encoding&action=edit&section=4 "Edit section: Reserved characters")]

When a character from the reserved set (a "reserved character") has a special meaning (a "reserved purpose") in a certain context, and a URI scheme says that it is necessary to use that character for some _other_ purpose, then the character must be _percent-encoded_. Percent-encoding a reserved character involves converting the character to its corresponding byte value in [ASCII](https://en.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange "American Standard Code for Information Interchange") and then representing that value as a pair of [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal "Hexadecimal") digits (if there is a single hex digit, a [leading zero](https://en.wikipedia.org/wiki/Leading_zero "Leading zero") is added). The digits, preceded by a [percent sign](https://en.wikipedia.org/wiki/Percent_sign "Percent sign") (`%`) as an [escape character](https://en.wikipedia.org/wiki/Escape_character "Escape character"), are then used in the URI in place of the reserved character. (A non-ASCII character is typically converted to its byte sequence in [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8"), and then each byte value is represented as above.)

The reserved character `/`, for example, if used in the "path" component of a [URI](https://en.wikipedia.org/wiki/URI "URI"), has the special meaning of being a [delimiter](https://en.wikipedia.org/wiki/Slash_(punctuation)#Networking "Slash (punctuation)")_between_ path segments. If, according to a given URI scheme, `/` needs to be _in_ a path segment, then the three characters `%2F` or `%2f` must be used in the segment instead of a raw `/`.

Reserved characters after percent-encoding `!``#``$``&``'``(``)``*``+``,``/``:``;``=``?``@``[``]`
`%21``%23``%24``%26``%27``%28``%29``%2A``%2B``%2C``%2F``%3A``%3B``%3D``%3F``%40``%5B``%5D`

Reserved characters that have no reserved purpose in a particular context may also be percent-encoded but are not semantically different from those that are not.

In the "[query](https://en.wikipedia.org/wiki/Query_string "Query string")" component of a URI (the part after a `?` character), for example, `/` is still considered a reserved character but it normally has no reserved purpose, unless a particular URI scheme says otherwise. The character does not need to be percent-encoded when it has no reserved purpose.

URIs that differ only by whether a reserved character is percent-encoded or appears literally are normally considered not equivalent (denoting the same resource) unless it can be determined that the reserved characters in question have no reserved purpose. This determination is dependent upon the rules established for reserved characters by individual URI schemes.

### Unreserved characters

[[edit](https://en.wikipedia.org/w/index.php?title=Percent-encoding&action=edit&section=5 "Edit section: Unreserved characters")]

Characters from the unreserved set never need to be percent-encoded.

URIs that differ only by whether an unreserved character is percent-encoded or appears literally are equivalent by definition, but URI processors, in practice, may not always recognize this equivalence. For example, URI consumers _should not_ treat `%41` differently from `A` or `%7E` differently from `~`, but some do. For maximal interoperability, URI producers are discouraged from percent-encoding unreserved characters.

Because the percent character ( `%` ) serves to indicate percent-encoded octets, it must itself be percent-encoded as `%25` to be used as data within a URI.

Most URI schemes involve the representation of arbitrary data, such as an [IP address](https://en.wikipedia.org/wiki/IP_address "IP address") or [file system](https://en.wikipedia.org/wiki/File_system "File system") path, as components of a URI. URI scheme specifications should, but often do not, provide an explicit mapping between URI characters and all possible data values being represented by those characters.

Since the publication of RFC 1738 in 1994 it has been specified that schemes that provide for the representation of [binary data](https://en.wikipedia.org/wiki/Binary_data "Binary data") in a URI must divide the data into 8-bit bytes and percent-encode each byte in the same manner as above.[[1]](https://en.wikipedia.org/wiki/Percent-encoding#cite_note-1) Byte value 0x0F, for example, should be represented by `%0F`, but byte value 0x41 can be represented by `A`, or `%41`. The use of unencoded characters for alphanumeric and other unreserved characters is typically preferred, as it results in shorter URLs.

The procedure for percent-encoding binary data has often been extrapolated, sometimes inappropriately or without being fully specified, to apply to character-based data. In the [World Wide Web](https://en.wikipedia.org/wiki/World_Wide_Web "World Wide Web")'s formative years, when dealing with data characters in the ASCII repertoire and using their corresponding bytes in ASCII as the basis for determining percent-encoded sequences, this practice was relatively harmless; it was just assumed that characters and bytes mapped one-to-one and were interchangeable. The need to represent characters outside the ASCII range, however, grew quickly, and URI schemes and protocols often failed to provide standard rules for preparing character data for inclusion in a URI. Web applications consequently began using different multi-byte, [stateful](https://en.wikipedia.org/wiki/State_(computer_science) "State (computer science)"), and other non-ASCII-compatible encodings as the basis for percent-encoding, leading to ambiguities and difficulty interpreting URIs reliably.

For example, many URI schemes and protocols based on RFCs 1738 and 2396 presume that the data characters will be converted to bytes according to some unspecified [character encoding](https://en.wikipedia.org/wiki/Character_encoding "Character encoding") before being represented in a URI by unreserved characters or percent-encoded bytes. If the scheme does not allow the URI to provide a hint as to what encoding was used, or if the encoding conflicts with the use of ASCII to percent-encode reserved and unreserved characters, then the URI cannot be reliably interpreted. Some schemes fail to account for encoding at all and instead just suggest that data characters map directly to URI characters, which leaves it up to implementations to decide whether and how to percent-encode data characters that are in neither the reserved nor unreserved sets.

Common characters after percent-encoding (ASCII or UTF-8 based) `␣``"``%``-``.``<``>``\``^``_`````{``|``}``~``£``€`
`%20``%22``%25``%2D``%2E``%3C``%3E``%5C``%5E``%5F``%60``%7B``%7C``%7D``%7E``%C2%A3``%E2%82%AC`

Arbitrary character data is sometimes percent-encoded and used in non-URI situations, such as for password-obfuscation programs or other system-specific translation protocols.

The generic URI syntax recommends that new URI schemes that provide for the representation of character data in a URI should, in effect, represent characters from the unreserved set without translation and should convert all other characters to bytes according to [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8"), and then percent-encode those values. This suggestion was introduced in January 2005 with the publication of RFC 3986. URI schemes introduced before this date are not affected.

Not addressed by the current specification is what to do with encoded character data. For example, in computers, character data manifests in encoded form, at some level, and thus could be treated as either binary or character data when being mapped to URI characters. Presumably, it is up to the URI scheme specifications to account for this possibility and require one or the other, but in practice, few, if any, actually do.

#### Non-standard implementations

[[edit](https://en.wikipedia.org/w/index.php?title=Percent-encoding&action=edit&section=11 "Edit section: Non-standard implementations")]

There exists a non-standard encoding for Unicode characters: `%uxxxx`, where _xxxx_ is a [UTF-16](https://en.wikipedia.org/wiki/UTF-16 "UTF-16") code unit represented as four hexadecimal digits. For example, the 13th edition of [ECMA-262](https://en.wikipedia.org/wiki/ECMA-262 "ECMA-262") includes an `escape` function that uses this syntax.[[2]](https://en.wikipedia.org/wiki/Percent-encoding#cite_note-2) However, this behavior is not specified by any RFC, and has been rejected by the W3C.[[3]](https://en.wikipedia.org/wiki/Percent-encoding#cite_note-3)

### The application/x-www-form-urlencoded type

[[edit](https://en.wikipedia.org/w/index.php?title=Percent-encoding&action=edit&section=12 "Edit section: The application/x-www-form-urlencoded type")]

When data that has been entered into HTML [forms](https://en.wikipedia.org/wiki/Form_(web) "Form (web)") is submitted, the form field names and values are encoded and sent to the server in an HTTP request message using method [GET](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods "Hypertext Transfer Protocol") or [POST](https://en.wikipedia.org/wiki/POST_(HTTP) "POST (HTTP)"), or, historically, via [email](https://en.wikipedia.org/wiki/Email "Email").[[4]](https://en.wikipedia.org/wiki/Percent-encoding#cite_note-4) The encoding used by default is based on an early version of the general URI percent-encoding rules,[[5]](https://en.wikipedia.org/wiki/Percent-encoding#cite_note-5) with a number of modifications such as [newline](https://en.wikipedia.org/wiki/Newline "Newline") normalization and replacing spaces with `+` instead of `%20`. The [media type](https://en.wikipedia.org/wiki/Media_type "Media type") of data encoded this way is `application/x-www-form-urlencoded`, and it is currently defined in the HTML and [XForms](https://en.wikipedia.org/wiki/XForms "XForms") specifications. In addition, the [CGI](https://en.wikipedia.org/wiki/Common_Gateway_Interface "Common Gateway Interface") specification contains rules for how web servers decode data of this type and make it available to applications.

When HTML form data is sent in an HTTP GET request, it is included in the [query component](https://en.wikipedia.org/wiki/Query_string "Query string") of the request URI using the same syntax described above. When sent in an HTTP [POST](https://en.wikipedia.org/wiki/POST_(HTTP) "POST (HTTP)") request or via email, the data is placed in the body of the message, and `application/x-www-form-urlencoded` is included in the message's Content-Type header.

[![Image 1](https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Wikifunctions-logo.svg/40px-Wikifunctions-logo.svg.png)](https://en.wikipedia.org/wiki/File:Wikifunctions-logo.svg)

[![Image 2](https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Wikifunctions-logo.svg/40px-Wikifunctions-logo.svg.png)](https://en.wikipedia.org/wiki/File:Wikifunctions-logo.svg)

*   [Internationalized Resource Identifier](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier "Internationalized Resource Identifier")
*   [Punycode](https://en.wikipedia.org/wiki/Punycode "Punycode")
*   [Binary-to-text encoding](https://en.wikipedia.org/wiki/Binary-to-text_encoding "Binary-to-text encoding") for a comparison of various encoding algorithms
*   [Shellcode](https://en.wikipedia.org/wiki/Shellcode "Shellcode")
*   [Base64](https://en.wikipedia.org/wiki/Base64 "Base64")

1.   **[^](https://en.wikipedia.org/wiki/Percent-encoding#cite_ref-1 "Jump up")**RFC 1738 §2.2; RFC 2396 §2.4; RFC 3986 §1.2.1, 2.1, 2.5.
2.   **[^](https://en.wikipedia.org/wiki/Percent-encoding#cite_ref-2 "Jump up")**["ECMAScript 2017 Language Specification (ECMA-262, 8th edition, June 2017)"](https://www.ecma-international.org/ecma-262/8.0/index.html). Ecma International. [Archived](https://web.archive.org/web/20180702045054/http://www.ecma-international.org/ecma-262/8.0/index.html) from the original on 2018-07-02. Retrieved 2018-06-20.
3.   **[^](https://en.wikipedia.org/wiki/Percent-encoding#cite_ref-3 "Jump up")**[rejected](http://www.w3.org/International/iri-edit/draft-duerst-iri.html)
4.   **[^](https://en.wikipedia.org/wiki/Percent-encoding#cite_ref-4 "Jump up")**User-agent support for email based [HTML](https://en.wikipedia.org/wiki/HyperText_Markup_Language "HyperText Markup Language") form submission, using a 'mailto' [URL](https://en.wikipedia.org/wiki/Uniform_Resource_Locator "Uniform Resource Locator") as the form action, was proposed in RFC 1867 section 5.6, during the HTML 3.2 era. Various web browsers implemented it by invoking a separate email program or using their own rudimentary [SMTP](https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol "Simple Mail Transfer Protocol") capabilities. Although sometimes unreliable, it was briefly popular as a simple way to transmit form data without involving a web server or [CGI](https://en.wikipedia.org/wiki/Common_Gateway_Interface "Common Gateway Interface") scripts.
5.   **[^](https://en.wikipedia.org/wiki/Percent-encoding#cite_ref-5 "Jump up")**Berners-Lee, T. (June 1994). ["RFC 1630"](https://tools.ietf.org/html/rfc1630). _IETF Tools_. IETF. [Archived](https://web.archive.org/web/20160621035940/https://tools.ietf.org/html/rfc1630) from the original on 21 June 2016. Retrieved 29 June 2016.

The following specifications all discuss and define reserved characters, unreserved characters, and percent-encoding, in some form or other:

*   RFC[3986](https://www.rfc-editor.org/rfc/rfc3986) / [STD](https://en.wikipedia.org/wiki/Internet_standard "Internet standard") 66 (plus [errata](http://www.rfc-editor.org/errata_search.php?rfc=3986)), the current generic URI syntax specification.
*   RFC[2396](https://www.rfc-editor.org/rfc/rfc2396) (obsolete, plus [errata](http://www.rfc-editor.org/errata_search.php?rfc=2396&rec_status=15&presentation=records)) and RFC 2732 (plus [errata](http://www.rfc-editor.org/errata_search.php?rfc=2732&rec_status=15&presentation=records)) together comprised the previous version of the generic URI syntax specification.
*   RFC[1738](https://www.rfc-editor.org/rfc/rfc1738) (mostly obsolete) and RFC 1808 (obsolete), which define [URLs](https://en.wikipedia.org/wiki/Uniform_Resource_Locator "Uniform Resource Locator").
*   RFC[1630](https://www.rfc-editor.org/rfc/rfc1630) (obsolete), the first generic URI syntax specification.
*   [W3C Guidelines on Naming and Addressing: URIs, URLs, ...](http://www.w3.org/Addressing/)
*   [W3C explanation of UTF-8 in URIs](http://www.w3.org/International/O-URL-code.html)
*   [W3C HTML form content types](http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1)
