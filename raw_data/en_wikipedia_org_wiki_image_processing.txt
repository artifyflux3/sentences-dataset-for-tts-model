Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History Toggle History subsection 1.1 Image sensors 1.2 Image compression 1.3 Digital signal processor (DSP) 2 Tasks 3 Digital image transformations Toggle Digital image transformations subsection 3.1 Filtering 3.1.1 Image padding in Fourier domain filtering 3.1.2 Filtering code examples 3.2 Affine transformations 3.3 Image denoising with mathematical morphology 3.3.1 Results 3.3.2 Opening and Closing 4 Applications Toggle Applications subsection 4.1 Digital camera images 4.2 Film 4.3 Face detection 4.4 Improvement of image quality method 5 Challenges 6 See also 7 References 8 Further reading 9 External links Toggle the table of contents Digital image processing 28 languages العربية Català Čeština Eesti Español Euskara فارسی 한국어 Հայերեն Bahasa Indonesia IsiZulu Italiano Magyar Bahasa Melayu Nederlands 日本語 Polski Português Русский Slovenčina کوردی தமிழ் ไทย Türkçe Українська اردو Tiếng Việt 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from Image processing ) Algorithmic processing of digitally-represented images This article is about mathematical processing of digital images. For artistic processing of images, see Image editing . For compression algorithms, see Image compression .

"Image processing" redirects here; not to be confused with Analog image processing .

Digital image processing is the use of a digital computer to process digital images through an algorithm .

[ 1 ] [ 2 ] As a subcategory or field of digital signal processing , digital image processing has many advantages over analog image processing . It allows a much wider range of algorithms to be applied to the input data and can avoid problems such as the build-up of noise and distortion during processing. Since images are defined over two dimensions (perhaps more), digital image processing may be modeled in the form of multidimensional systems . The generation and development of digital image processing are mainly affected by three factors: first, the development of computers; [ 3 ] second, the development of mathematics (especially the creation and improvement of discrete mathematics theory ); [ 4 ] and third, the demand for a wide range of applications in environment, agriculture, military, industry and medical science has increased.

[ 5 ] History [ edit ] Further information: Digital image § History , and Digital imaging § History Many of the techniques of digital image processing, or digital picture processing as it often was called, were developed in the 1960s, at Bell Laboratories , the Jet Propulsion Laboratory , Massachusetts Institute of Technology , University of Maryland , and a few other research facilities, with application to satellite imagery , wire-photo standards conversion, medical imaging , videophone , character recognition , and photograph enhancement.

[ 6 ] The purpose of early image processing was to improve the quality of the image. It was aimed for human beings to improve the visual effect of people. In image processing, the input is a low-quality image, and the output is an image with improved quality. Common image processing include image enhancement, restoration, encoding, and compression. The first successful application was the American Jet Propulsion Laboratory (JPL). They used image processing techniques such as geometric correction, gradation transformation, noise removal, etc. on the thousands of lunar photos sent back by the Space Detector Ranger 7 in 1964, taking into account the position of the Sun and the environment of the Moon. The impact of the successful mapping of the Moon's surface map by the computer has been a success. Later, more complex image processing was performed on the nearly 100,000 photos sent back by the spacecraft, so that the topographic map, color map and panoramic mosaic of the Moon were obtained, which achieved extraordinary results and laid a solid foundation for human landing on the Moon.

[ 7 ] The cost of processing was fairly high, however, with the computing equipment of that era. That changed in the 1970s, when digital image processing proliferated as cheaper computers and dedicated hardware became available. This led to images being processed in real-time, for some dedicated problems such as television standards conversion . As general-purpose computers became faster, they started to take over the role of dedicated hardware for all but the most specialized and computer-intensive operations. With the fast computers and signal processors available in the 2000s, digital image processing has become the most common form of image processing, and is generally used because it is not only the most versatile method, but also the cheapest.

Image sensors [ edit ] Main article: Image sensor The basis for modern image sensors is metal–oxide–semiconductor (MOS) technology, [ 8 ] invented at Bell Labs between 1955 and 1960, [ 9 ] [ 10 ] [ 11 ] [ 12 ] [ 13 ] [ 14 ] This led to the development of digital semiconductor image sensors, including the charge-coupled device (CCD) and later the CMOS sensor .

[ 8 ] The charge-coupled device was invented by Willard S. Boyle and George E. Smith at Bell Labs in 1969.

[ 15 ] While researching MOS technology, they realized that an electric charge was the analogy of the magnetic bubble and that it could be stored on a tiny MOS capacitor . As it was fairly straightforward to fabricate a series of MOS capacitors in a row, they connected a suitable voltage to them so that the charge could be stepped along from one to the next.

[ 8 ] The CCD is a semiconductor circuit that was later used in the first digital video cameras for television broadcasting .

[ 16 ] The NMOS active-pixel sensor (APS) was invented by Olympus in Japan during the mid-1980s. This was enabled by advances in MOS semiconductor device fabrication , with MOSFET scaling reaching smaller micron and then sub-micron levels.

[ 17 ] [ 18 ] The NMOS APS was fabricated by Tsutomu Nakamura's team at Olympus in 1985.

[ 19 ] The CMOS active-pixel sensor (CMOS sensor) was later developed by Eric Fossum 's team at the NASA Jet Propulsion Laboratory in 1993.

[ 20 ] By 2007, sales of CMOS sensors had surpassed CCD sensors.

[ 21 ] MOS image sensors are widely used in optical mouse technology. The first optical mouse, invented by Richard F. Lyon at Xerox in 1980, used a 5 μm NMOS integrated circuit sensor chip.

[ 22 ] [ 23 ] Since the first commercial optical mouse, the IntelliMouse introduced in 1999, most optical mouse devices use CMOS sensors.

[ 24 ] [ 25 ] Image compression [ edit ] Main article: Image compression An important development in digital image compression technology was the discrete cosine transform (DCT), a lossy compression technique first proposed by Nasir Ahmed in 1972.

[ 26 ] DCT compression became the basis for JPEG , which was introduced by the Joint Photographic Experts Group in 1992.

[ 27 ] JPEG compresses images down to much smaller file sizes, and has become the most widely used image file format on the Internet .

[ 28 ] Its highly efficient DCT compression algorithm was largely responsible for the wide proliferation of digital images and digital photos , [ 29 ] with several billion JPEG images produced every day as of 2015 [update] .

[ 30 ] Medical imaging techniques produce very large amounts of data, especially from CT, MRI and PET modalities. As a result, storage and communications of electronic image data are prohibitive without the use of compression.

[ 31 ] [ 32 ] JPEG 2000 image compression is used by the DICOM standard for storage and transmission of medical images. The cost and feasibility of accessing large image data sets over low or various bandwidths are further addressed by use of another DICOM standard, called JPIP , to enable efficient streaming of the JPEG 2000 compressed image data.

[ 33 ] Digital signal processor (DSP) [ edit ] Main article: Digital signal processor Electronic signal processing was revolutionized by the wide adoption of MOS technology in the 1970s.

[ 34 ] MOS integrated circuit technology was the basis for the first single-chip microprocessors and microcontrollers in the early 1970s, [ 35 ] and then the first single-chip digital signal processor (DSP) chips in the late 1970s.

[ 36 ] [ 37 ] DSP chips have since been widely used in digital image processing.

[ 36 ] The discrete cosine transform (DCT) image compression algorithm has been widely implemented in DSP chips, with many companies developing DSP chips based on DCT technology. DCTs are widely used for encoding , decoding, video coding , audio coding , multiplexing , control signals, signaling , analog-to-digital conversion , formatting luminance and color differences, and color formats such as YUV444 and YUV411 . DCTs are also used for encoding operations such as motion estimation , motion compensation , inter-frame prediction, quantization , perceptual weighting, entropy encoding , variable encoding, and motion vectors , and decoding operations such as the inverse operation between different color formats ( YIQ , YUV and RGB ) for display purposes. DCTs are also commonly used for high-definition television (HDTV) encoder/decoder chips.

[ 38 ] Tasks [ edit ] Digital image processing allows the use of much more complex algorithms, and hence, can offer both more sophisticated performance at simple tasks, and the implementation of methods which would be impossible by analogue means.

In particular, digital image processing is a concrete application of, and a practical technology based on: Classification Feature extraction Multi-scale signal analysis Pattern recognition Projection Some techniques which are used in digital image processing include: Anisotropic diffusion Hidden Markov models Image editing Image restoration Independent component analysis Linear filtering Neural networks Partial differential equations Pixelation Point feature matching Principal components analysis Self-organizing maps Wavelets Digital image transformations [ edit ] Filtering [ edit ] Digital filters are used to blur and sharpen digital images. Filtering can be performed by: convolution with specifically designed kernels (filter array) in the spatial domain [ 39 ] masking specific frequency regions in the frequency (Fourier) domain The following examples show both methods: [ 40 ] Filter type Kernel or mask Example Original Image [ 0 0 0 0 1 0 0 0 0 ] {\displaystyle {\begin{bmatrix}0&0&0\\0&1&0\\0&0&0\end{bmatrix}}} Spatial Lowpass 1 9 × × [ 1 1 1 1 1 1 1 1 1 ] {\displaystyle {\frac {1}{9}}\times {\begin{bmatrix}1&1&1\\1&1&1\\1&1&1\end{bmatrix}}} Spatial Highpass [ 0 − − 1 0 − − 1 4 − − 1 0 − − 1 0 ] {\displaystyle {\begin{bmatrix}0&-1&0\\-1&4&-1\\0&-1&0\end{bmatrix}}} Fourier Representation Pseudo-code: image = checkerboard F = Fourier Transform of image Show Image: log(1+Absolute Value(F)) Fourier Lowpass Fourier Highpass Image padding in Fourier domain filtering [ edit ] Images are typically padded before being transformed to the Fourier space, the highpass filtered images below illustrate the consequences of different padding techniques: Zero padded Repeated edge padded Notice that the highpass filter shows extra edges when zero padded compared to the repeated edge padding.

Filtering code examples [ edit ] MATLAB example for spatial domain highpass filtering.

img = checkerboard ( 20 ); % generate checkerboard % **************************  SPATIAL DOMAIN  *************************** klaplace =[ 0 - 1 0 ; - 1 5 - 1 ; 0 - 1 0 ]; % Laplacian filter kernel X = conv2 ( img , klaplace ); % convolve test img with % 3x3 Laplacian kernel figure () imshow ( X ,[]) % show Laplacian filtered title ( 'Laplacian Edge Detection' ) Affine transformations [ edit ] Affine transformations enable basic image transformations including scale, rotate, translate, mirror and shear as is shown in the following examples: [ 40 ] Transformation Name Affine Matrix Example Identity [ 1 0 0 0 1 0 0 0 1 ] {\displaystyle {\begin{bmatrix}1&0&0\\0&1&0\\0&0&1\end{bmatrix}}} Reflection [ − − 1 0 0 0 1 0 0 0 1 ] {\displaystyle {\begin{bmatrix}-1&0&0\\0&1&0\\0&0&1\end{bmatrix}}} Scale [ c x = 2 0 0 0 c y = 1 0 0 0 1 ] {\displaystyle {\begin{bmatrix}c_{x}=2&0&0\\0&c_{y}=1&0\\0&0&1\end{bmatrix}}} Rotate [ cos ⁡ ⁡ ( θ θ ) sin ⁡ ⁡ ( θ θ ) 0 − − sin ⁡ ⁡ ( θ θ ) cos ⁡ ⁡ ( θ θ ) 0 0 0 1 ] {\displaystyle {\begin{bmatrix}\cos(\theta )&\sin(\theta )&0\\-\sin(\theta )&\cos(\theta )&0\\0&0&1\end{bmatrix}}} where θ = ⁠ π / 6 ⁠ =30° Shear [ 1 c x = 0.5 0 c y = 0 1 0 0 0 1 ] {\displaystyle {\begin{bmatrix}1&c_{x}=0.5&0\\c_{y}=0&1&0\\0&0&1\end{bmatrix}}} To apply the affine matrix to an image, the image is converted to matrix in which each entry corresponds to the pixel intensity at that location. Then each pixel's location can be represented as a vector indicating the coordinates of that pixel in the image, [ x , y ] , where x and y are the row and column of a pixel in the image matrix. This allows the coordinate to be multiplied by an affine-transformation matrix, which gives the position that the pixel value will be copied to in the output image.

However, to allow transformations that require translation transformations, 3-dimensional homogeneous coordinates are needed. The third dimension is usually set to a non-zero constant, usually 1 , so that the new coordinate is [ x , y , 1] . This allows the coordinate vector to be multiplied by a 3×3 matrix, enabling translation shifts. Thus, the third dimension, i.e. the constant 1 , allows translation.

Because matrix multiplication is associative , multiple affine transformations can be combined into a single affine transformation by multiplying the matrix of each individual transformation in the order that the transformations are done. This results in a single matrix that, when applied to a point vector, gives the same result as all the individual transformations performed on the vector [ x , y , 1] in sequence. Thus a sequence of affine transformation matrices can be reduced to a single affine transformation matrix.

For example, 2-dimensional coordinates only permit rotation about the origin (0, 0) . But 3-dimensional homogeneous coordinates can be used to first translate any point to (0, 0) , then perform the rotation, and lastly translate the origin (0, 0) back to the original point (the opposite of the first translation). These three affine transformations can be combined into a single matrix—thus allowing rotation around any point in the image.

[ 41 ] Image denoising with mathematical morphology [ edit ] Mathematical morphology (MM) is a nonlinear image processing framework that analyzes shapes within images by probing local pixel neighborhoods using a small, predefined function called a structuring element . In the context of grayscale images , MM is especially useful for denoising through dilation and erosion —primitive operators that can be combined to build more complex filters.

Suppose we have: A discrete grayscale image: f = [ 45 50 65 40 60 55 25 15 5 ] , f : Ω Ω → → R , Ω Ω = { 0 , 1 , 2 } 2 , {\displaystyle f={\begin{bmatrix}45&50&65\\40&60&55\\25&15&5\end{bmatrix}},\quad f:\Omega \rightarrow \mathbb {R} ,\quad \Omega =\{0,1,2\}^{2},} A structuring element: B = [ 1 2 1 2 1 1 1 0 3 ] , B : S → → R , S = { − − 1 , 0 , 1 } 2 .

{\displaystyle B={\begin{bmatrix}1&2&1\\2&1&1\\1&0&3\end{bmatrix}},\quad B:{\mathcal {S}}\rightarrow \mathbb {R} ,\quad {\mathcal {S}}=\{-1,0,1\}^{2}.} Here, S {\displaystyle {\mathcal {S}}} defines the neighborhood of relative coordinates ( m , n ) {\displaystyle (m,n)} over which local operations are computed. The values of B ( m , n ) {\displaystyle B(m,n)} bias the image during dilation and erosion.

Dilation Grayscale dilation is defined as: ( f ⊕ ⊕ B ) ( i , j ) = max ( m , n ) ∈ ∈ S { f ( i + m , j + n ) + B ( m , n ) } .

{\displaystyle (f\oplus B)(i,j)=\max _{(m,n)\in {\mathcal {S}}}{\Bigl \{}f(i+m,j+n)+B(m,n){\Bigr \}}.} For example, the dilation at position (1, 1) is calculated as: ( f ⊕ ⊕ B ) ( 1 , 1 ) = max ( f ( 0 , 0 ) + B ( − − 1 , − − 1 ) , 45 + 1 ; f ( 1 , 0 ) + B ( 0 , − − 1 ) , 50 + 2 ; f ( 2 , 0 ) + B ( 1 , − − 1 ) , 65 + 1 ; f ( 0 , 1 ) + B ( − − 1 , 0 ) , 40 + 2 ; f ( 1 , 1 ) + B ( 0 , 0 ) , 60 + 1 ; f ( 2 , 1 ) + B ( 1 , 0 ) , 55 + 1 ; f ( 0 , 2 ) + B ( − − 1 , 1 ) , 25 + 1 ; f ( 1 , 2 ) + B ( 0 , 1 ) , 15 + 0 ; f ( 2 , 2 ) + B ( 1 , 1 ) 5 + 3 ) = 66.

{\displaystyle {\begin{aligned}(f\oplus B)(1,1)=\max \!{\Bigl (}&f(0,0)+B(-1,-1),&\;45+1;&\\&f(1,0)+B(0,-1),&\;50+2;&\\&f(2,0)+B(1,-1),&\;65+1;&\\&f(0,1)+B(-1,0),&\;40+2;&\\&f(1,1)+B(0,0),&\;60+1;&\\&f(2,1)+B(1,0),&\;55+1;&\\&f(0,2)+B(-1,1),&\;25+1;&\\&f(1,2)+B(0,1),&\;15+0;&\\&f(2,2)+B(1,1)&\;5+3{\Bigr )}=66.\end{aligned}}} Erosion Grayscale erosion is defined as: ( f ⊖ ⊖ B ) ( i , j ) = min ( m , n ) ∈ ∈ S { f ( i + m , j + n ) − − B ( m , n ) } .

{\displaystyle (f\ominus B)(i,j)=\min _{(m,n)\in {\mathcal {S}}}{\Bigl \{}f(i+m,j+n)-B(m,n){\Bigr \}}.} For example, the erosion at position (1, 1) is calculated as: ( f ⊖ ⊖ B ) ( 1 , 1 ) = min ( f ( 0 , 0 ) − − B ( − − 1 , − − 1 ) , 45 − − 1 ; f ( 1 , 0 ) − − B ( 0 , − − 1 ) , 50 − − 2 ; f ( 2 , 0 ) − − B ( 1 , − − 1 ) , 65 − − 1 ; f ( 0 , 1 ) − − B ( − − 1 , 0 ) , 40 − − 2 ; f ( 1 , 1 ) − − B ( 0 , 0 ) , 60 − − 1 ; f ( 2 , 1 ) − − B ( 1 , 0 ) , 55 − − 1 ; f ( 0 , 2 ) − − B ( − − 1 , 1 ) , 25 − − 1 ; f ( 1 , 2 ) − − B ( 0 , 1 ) , 15 − − 0 ; f ( 2 , 2 ) − − B ( 1 , 1 ) 5 − − 3 ) = 2.

{\displaystyle {\begin{aligned}(f\ominus B)(1,1)=\min \!{\Bigl (}&f(0,0)-B(-1,-1),&\;45-1;&\\&f(1,0)-B(0,-1),&\;50-2;&\\&f(2,0)-B(1,-1),&\;65-1;&\\&f(0,1)-B(-1,0),&\;40-2;&\\&f(1,1)-B(0,0),&\;60-1;&\\&f(2,1)-B(1,0),&\;55-1;&\\&f(0,2)-B(-1,1),&\;25-1;&\\&f(1,2)-B(0,1),&\;15-0;&\\&f(2,2)-B(1,1)&\;5-3{\Bigr )}=2.\end{aligned}}} Results [ edit ] After applying dilation to f {\displaystyle f} : [ 45 50 65 40 66 55 25 15 5 ] {\displaystyle {\begin{bmatrix}45&50&65\\40&66&55\\25&15&5\end{bmatrix}}} After applying erosion to f {\displaystyle f} : [ 45 50 65 40 2 55 25 15 5 ] {\displaystyle {\begin{bmatrix}45&50&65\\40&2&55\\25&15&5\end{bmatrix}}} Opening and Closing [ edit ] MM operations, such as opening and closing , are composite processes that utilize both dilation and erosion to modify the structure of an image. These operations are particularly useful for tasks such as noise removal, shape smoothing, and object separation.

Opening : This operation is performed by applying erosion to an image first, followed by dilation. The purpose of opening is to remove small objects or noise from the foreground while preserving the overall structure of larger objects. It is especially effective in situations where noise appears as isolated bright pixels or small, disconnected features.

For example, applying opening to an image f {\displaystyle f} with a structuring element B {\displaystyle B} would first reduce small details (through erosion) and then restore the main shapes (through dilation). This ensures that unwanted noise is removed without significantly altering the size or shape of larger objects.

Closing : This operation is performed by applying dilation first, followed by erosion. Closing is typically used to fill small holes or gaps within objects and to connect broken parts of the foreground. It works by initially expanding the boundaries of objects (through dilation) and then refining the boundaries (through erosion).

For instance, applying closing to the same image f {\displaystyle f} would fill in small gaps within objects, such as connecting breaks in thin lines or closing small holes, while ensuring that the surrounding areas are not significantly affected.

Both opening and closing can be visualized as ways of refining the structure of an image: opening simplifies and removes small, unnecessary details, while closing consolidates and connects objects to form more cohesive structures.

Structuring element Mask Code Example Original Image None Use Matlab to read Original image original = imread ( 'scene.jpg' ); image = rgb2gray ( original ); [ r , c , channel ] = size ( image ); se = logical ([ 1 1 1 ; 1 1 1 ; 1 1 1]) ; [ p , q ] = size ( se ); halfH = floor ( p / 2 ); halfW = floor ( q / 2 ); time = 3 ; % denoising 3 times with all method Original lotus Dilation [ 1 1 1 1 1 1 1 1 1 ] {\displaystyle {\begin{bmatrix}1&1&1\\1&1&1\\1&1&1\end{bmatrix}}} Use Matlab to dilation imwrite ( image , "scene_dil.jpg" ) extractmax = zeros ( size ( image ), class ( image )); for i = 1 : time dil_image = imread ( 'scene_dil.jpg' ); for col = ( halfW + 1 ): ( c - halfW ) for row = ( halfH + 1 ) : ( r - halfH ) dpointD = row - halfH ; dpointU = row + halfH ; dpointL = col - halfW ; dpointR = col + halfW ; dneighbor = dil_image ( dpointD : dpointU , dpointL : dpointR ); filter = dneighbor ( se ); extractmax ( row , col ) = max ( filter ); end end imwrite ( extractmax , "scene_dil.jpg" ); end Denoising picture with dilation method Erosion [ 1 1 1 1 1 1 1 1 1 ] {\displaystyle {\begin{bmatrix}1&1&1\\1&1&1\\1&1&1\end{bmatrix}}} Use Matlab to erosion imwrite ( image , 'scene_ero.jpg' ); extractmin = zeros ( size ( image ), class ( image )); for i = 1 : time ero_image = imread ( 'scene_ero.jpg' ); for col = ( halfW + 1 ): ( c - halfW ) for row = ( halfH + 1 ): ( r - halfH ) pointDown = row - halfH ; pointUp = row + halfH ; pointLeft = col - halfW ; pointRight = col + halfW ; neighbor = ero_image ( pointDown : pointUp , pointLeft : pointRight ); filter = neighbor ( se ); extractmin ( row , col ) = min ( filter ); end end imwrite ( extractmin , "scene_ero.jpg" ); end Opening [ 1 1 1 1 1 1 1 1 1 ] {\displaystyle {\begin{bmatrix}1&1&1\\1&1&1\\1&1&1\end{bmatrix}}} Use Matlab to Opening imwrite ( extractmin , "scene_opening.jpg" ) extractopen = zeros ( size ( image ), class ( image )); for i = 1 : time dil_image = imread ( 'scene_opening.jpg' ); for col = ( halfW + 1 ): ( c - halfW ) for row = ( halfH + 1 ) : ( r - halfH ) dpointD = row - halfH ; dpointU = row + halfH ; dpointL = col - halfW ; dpointR = col + halfW ; dneighbor = dil_image ( dpointD : dpointU , dpointL : dpointR ); filter = dneighbor ( se ); extractopen ( row , col ) = max ( filter ); end end imwrite ( extractopen , "scene_opening.jpg" ); end Closing [ 1 1 1 1 1 1 1 1 1 ] {\displaystyle {\begin{bmatrix}1&1&1\\1&1&1\\1&1&1\end{bmatrix}}} Use Matlab to Closing imwrite ( extractmax , "scene_closing.jpg" ) extractclose = zeros ( size ( image ), class ( image )); for i = 1 : time ero_image = imread ( 'scene_closing.jpg' ); for col = ( halfW + 1 ): ( c - halfW ) for row = ( halfH + 1 ) : ( r - halfH ) dpointD = row - halfH ; dpointU = row + halfH ; dpointL = col - halfW ; dpointR = col + halfW ; dneighbor = ero_image ( dpointD : dpointU , dpointL : dpointR ); filter = dneighbor ( se ); extractclose ( row , col ) = min ( filter ); end end imwrite ( extractclose , "scene_closing.jpg" ); end Denoising picture with closing method Applications [ edit ] Further information: Digital imaging and Applications of computer vision Digital camera images [ edit ] Digital cameras generally include specialized digital image processing hardware – either dedicated chips or added circuitry on other chips – to convert the raw data from their image sensor into a color-corrected image in a standard image file format . Additional post processing techniques increase edge sharpness or color saturation to create more naturally looking images.

Film [ edit ] Westworld (1973) was the first feature film to use the digital image processing to pixellate photography to simulate an android's point of view.

[ 42 ] Image processing is also vastly used to produce the chroma key effect that replaces the background of actors with natural or artistic scenery.

Face detection [ edit ] Face detection process Face detection can be implemented with mathematical morphology , the discrete cosine transform (DCT), and horizontal projection .

General method with feature-based method The feature-based method of face detection is using skin tone, edge detection, face shape, and feature of a face (like eyes, mouth, etc.) to achieve face detection. The skin tone, face shape, and all the unique elements that only the human face have can be described as features.

Process explanation Given a batch of face images, first, extract the skin tone range by sampling face images. The skin tone range is just a skin filter.

Structural similarity index measure (SSIM) can be applied to compare images in terms of extracting the skin tone.

Normally, HSV or RGB color spaces are suitable for the skin filter. E.g. HSV mode, the skin tone range is [0,48,50] ~ [20,255,255] After filtering images with skin tone, to get the face edge, morphology and DCT are used to remove noise and fill up missing skin areas.

Opening method or closing method can be used to achieve filling up missing skin.

DCT is to avoid the object with skin-like tone. Since human faces always have higher texture.

Sobel operator or other operators can be applied to detect face edge.

To position human features like eyes, using the projection and find the peak of the histogram of projection help to get the detail feature like mouth, hair, and lip.

Projection is just projecting the image to see the high frequency which is usually the feature position.

Improvement of image quality method [ edit ] Image quality can be influenced by camera vibration, over-exposure, gray level distribution too centralized, and noise, etc. For example, noise problem can be solved by smoothing method while gray level distribution problem can be improved by histogram equalization .

Smoothing method In drawing, if there is some dissatisfied color, taking some color around dissatisfied color and averaging them. This is an easy way to think of Smoothing method.

Smoothing method can be implemented with mask and convolution . Take the small image and mask for instance as below.

image is [ 2 5 6 5 3 1 4 6 1 28 30 2 7 3 2 2 ] {\displaystyle {\begin{bmatrix}2&5&6&5\\3&1&4&6\\1&28&30&2\\7&3&2&2\end{bmatrix}}} mask is [ 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 ] {\displaystyle {\begin{bmatrix}1/9&1/9&1/9\\1/9&1/9&1/9\\1/9&1/9&1/9\end{bmatrix}}} After convolution and smoothing, image is [ 2 5 6 5 3 9 10 6 1 9 9 2 7 3 2 2 ] {\displaystyle {\begin{bmatrix}2&5&6&5\\3&9&10&6\\1&9&9&2\\7&3&2&2\end{bmatrix}}} Observing image[1, 1], image[1, 2], image[2, 1], and image[2, 2].

The original image pixel is 1, 4, 28, 30. After smoothing mask, the pixel becomes 9, 10, 9, 9 respectively.

new image[1, 1] = 1 9 {\displaystyle {\tfrac {1}{9}}} * (image[0,0]+image[0,1]+image[0,2]+image[1,0]+image[1,1]+image[1,2]+image[2,0]+image[2,1]+image[2,2]) new image[1, 1] = floor( 1 9 {\displaystyle {\tfrac {1}{9}}} * (2+5+6+3+1+4+1+28+30)) = 9 new image[1, 2] = floor({ 1 9 {\displaystyle {\tfrac {1}{9}}} * (5+6+5+1+4+6+28+30+2)) = 10 new image[2, 1] = floor( 1 9 {\displaystyle {\tfrac {1}{9}}} * (3+1+4+1+28+30+7+3+2)) = 9 new image[2, 2] = floor( 1 9 {\displaystyle {\tfrac {1}{9}}} * (1+4+6+28+30+2+3+2+2)) = 9 Gray Level Histogram method Generally, given a gray level histogram from an image as below. Changing the histogram to uniform distribution from an image is usually what we called histogram equalization .

Figure 1 Figure 2 In discrete time, the area of gray level histogram is ∑ ∑ i = 0 k H ( p i ) {\displaystyle \sum _{i=0}^{k}H(p_{i})} (see figure 1) while the area of uniform distribution is ∑ ∑ i = 0 k G ( q i ) {\displaystyle \sum _{i=0}^{k}G(q_{i})} (see figure 2). It is clear that the area will not change, so ∑ ∑ i = 0 k H ( p i ) = ∑ ∑ i = 0 k G ( q i ) {\displaystyle \sum _{i=0}^{k}H(p_{i})=\sum _{i=0}^{k}G(q_{i})} .

From the uniform distribution, the probability of q i {\displaystyle q_{i}} is N 2 q k − − q 0 {\displaystyle {\tfrac {N^{2}}{q_{k}-q_{0}}}} while the 0 < i < k {\displaystyle 0<i<k} In continuous time, the equation is ∫ ∫ q 0 q N 2 q k − − q 0 d s = ∫ ∫ p 0 p H ( s ) d s {\displaystyle \displaystyle \int _{q_{0}}^{q}{\tfrac {N^{2}}{q_{k}-q_{0}}}ds=\displaystyle \int _{p_{0}}^{p}H(s)ds} .

Moreover, based on the definition of a function, the Gray level histogram method is like finding a function f {\displaystyle f} that satisfies f(p)=q.

Improvement method Issue Before improvement Process After improvement Smoothing method noise with Matlab, salt & pepper with 0.01 parameter is added to the original image in order to create a noisy image.

read image and convert image into grayscale convolution the grayscale image with the mask [ 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 1 / 9 ] {\displaystyle {\begin{bmatrix}1/9&1/9&1/9\\1/9&1/9&1/9\\1/9&1/9&1/9\end{bmatrix}}} denoisy image will be the result of step 2.

Histogram Equalization Gray level distribution too centralized Refer to the Histogram equalization Challenges [ edit ] Noise and distortions : Imperfections in images due to poor lighting, limited sensors, and file compression can result in unclear images that impact accurate image conversion.

Variability in image quality : Variations in image quality and resolution, including blurry images and incomplete details, can hinder uniform processing across a database.

Object detection and Recognition : Identifying and recognising objects within images, especially in complex scenarios with multiple objects and occlusions, poses a significant challenge.

Data annotation and labelling : Labelling diverse and multiple images for machine recognition is crucial for further processing accuracy, as incorrect identification can lead to unrealistic results.

Computational resource intensity : Accessing adequate computational resources for image processing can be challenging and costly, hindering progress without sufficient resources.

See also [ edit ] Digital imaging Computer graphics Computer vision CVIPtools Digitizing Fourier transform Free boundary condition GPGPU Homomorphic filtering Image analysis IEEE Intelligent Transportation Systems Society Least-squares spectral analysis Medical imaging Multidimensional systems Relaxation labelling Remote sensing software Standard test image Superresolution Total variation denoising Machine Vision Bounded variation Radiomics Remote sensing References [ edit ] ^ Chakravorty, Pragnan (2018). "What is a Signal? [Lecture Notes]".

IEEE Signal Processing Magazine .

35 (5): 175– 177.

Bibcode : 2018ISPM...35e.175C .

doi : 10.1109/MSP.2018.2832195 .

S2CID 52164353 .

^ Gonzalez, Rafael (2018).

Digital image processing . New York, NY: Pearson.

ISBN 978-0-13-335672-4 .

OCLC 966609831 .

^ Nagornov, Nikolay N.; Lyakhov, Pavel A.; Bergerman, Maxim V.; Kalita, Diana I. (2024).

"Modern Trends in Improving the Technical Characteristics of Devices and Systems for Digital Image Processing" .

IEEE Access .

12 : 44659– 44681.

Bibcode : 2024IEEEA..1244659N .

doi : 10.1109/ACCESS.2024.3381493 .

ISSN 2169-3536 .

^ Yamni, Mohamed; Daoui, Achraf; Abd El-Latif, Ahmed A. (February 2024).

"Efficient color image steganography based on new adapted chaotic dynamical system with discrete orthogonal moment transforms" .

Mathematics and Computers in Simulation .

225 : 1170– 1198.

doi : 10.1016/j.matcom.2024.01.023 .

^ Hung, Che-Lun (28 May 2020).

"Computational Algorithms on Medical Image Processing" .

Current Medical Imaging .

16 (5): 467– 468.

doi : 10.2174/157340561605200410144743 .

PMID 32484080 .

^ Azriel Rosenfeld, Picture Processing by Computer , New York: Academic Press, 1969 ^ Gonzalez, Rafael C. (2008).

Digital image processing . Woods, Richard E. (Richard Eugene), 1954– (3rd ed.). Upper Saddle River, N.J.: Prentice Hall. pp.

23– 28.

ISBN 978-0-13-168728-8 .

OCLC 137312858 .

^ a b c Williams, J. B. (2017).

The Electronics Revolution: Inventing the Future . Springer. pp.

245– 8.

ISBN 978-3-319-49088-5 .

^ US2802760A , Lincoln, Derick & Frosch, Carl J., "Oxidation of semiconductive surfaces for controlled diffusion", issued 13 August 1957 ^ Frosch, C. J.; Derick, L (1957).

"Surface Protection and Selective Masking during Diffusion in Silicon" .

Journal of the Electrochemical Society .

104 (9): 547.

doi : 10.1149/1.2428650 .

^ KAHNG, D. (1961).

"Silicon-Silicon Dioxide Surface Device" .

Technical Memorandum of Bell Laboratories : 583– 596.

doi : 10.1142/9789814503464_0076 .

ISBN 978-981-02-0209-5 .

{{ cite journal }} : ISBN / Date incompatibility ( help ) ^ Lojek, Bo (2007).

History of Semiconductor Engineering . Berlin, Heidelberg: Springer-Verlag Berlin Heidelberg. p. 321.

ISBN 978-3-540-34258-8 .

^ Ligenza, J.R.; Spitzer, W.G. (1960).

"The mechanisms for silicon oxidation in steam and oxygen" .

Journal of Physics and Chemistry of Solids .

14 : 131– 136.

Bibcode : 1960JPCS...14..131L .

doi : 10.1016/0022-3697(60)90219-5 .

^ Lojek, Bo (2007).

History of Semiconductor Engineering .

Springer Science & Business Media . p. 120.

ISBN 9783540342588 .

^ James R. Janesick (2001).

Scientific charge-coupled devices . SPIE Press. pp.

3– 4.

ISBN 978-0-8194-3698-6 .

^ Boyle, William S; Smith, George E. (1970). "Charge Coupled Semiconductor Devices".

Bell Syst. Tech. J .

49 (4): 587– 593.

Bibcode : 1970BSTJ...49..587B .

doi : 10.1002/j.1538-7305.1970.tb01790.x .

^ Fossum, Eric R.

(12 July 1993). "Active pixel sensors: Are CCDS dinosaurs?". In Blouke, Morley M. (ed.).

Charge-Coupled Devices and Solid State Optical Sensors III . Proceedings of the SPIE. Vol. 1900. pp.

2– 14.

Bibcode : 1993SPIE.1900....2F .

CiteSeerX 10.1.1.408.6558 .

doi : 10.1117/12.148585 .

S2CID 10556755 .

^ Fossum, Eric R.

(2007).

"Active Pixel Sensors" (PDF) .

Eric Fossum .

S2CID 18831792 .

Archived (PDF) from the original on 29 August 2019.

^ Matsumoto, Kazuya; et al. (1985). "A new MOS phototransistor operating in a non-destructive readout mode".

Japanese Journal of Applied Physics .

24 (5A): L323.

Bibcode : 1985JaJAP..24L.323M .

doi : 10.1143/JJAP.24.L323 .

S2CID 108450116 .

^ Fossum, Eric R.

; Hondongwa, D. B. (2014).

"A Review of the Pinned Photodiode for CCD and CMOS Image Sensors" .

IEEE Journal of the Electron Devices Society .

2 (3): 33– 43.

doi : 10.1109/JEDS.2014.2306412 .

^ "CMOS Image Sensor Sales Stay on Record-Breaking Pace" .

IC Insights . 8 May 2018.

Archived from the original on 21 June 2019 . Retrieved 6 October 2019 .

^ Lyon, Richard F.

(2014).

"The Optical Mouse: Early Biomimetic Embedded Vision" .

Advances in Embedded Computer Vision . Springer. pp. 3–22 (3).

ISBN 9783319093871 .

^ Lyon, Richard F.

(August 1981).

"The Optical Mouse, and an Architectural Methodology for Smart Digital Sensors" (PDF) . In H. T. Kung; Robert F. Sproull; Guy L. Steele (eds.).

VLSI Systems and Computations . Computer Science Press. pp.

1– 19.

doi : 10.1007/978-3-642-68402-9_1 .

ISBN 978-3-642-68404-3 .

S2CID 60722329 .

Archived (PDF) from the original on 26 February 2014.

^ Brain, Marshall; Carmack, Carmen (24 April 2000).

"How Computer Mice Work" .

HowStuffWorks . Retrieved 9 October 2019 .

^ Benchoff, Brian (17 April 2016).

"Building the First Digital Camera" .

Hackaday . Retrieved 30 April 2016 .

the Cyclops was the first digital camera ^ Ahmed, Nasir (January 1991).

"How I Came Up With the Discrete Cosine Transform" .

Digital Signal Processing .

1 (1): 4– 5.

Bibcode : 1991DSP.....1....4A .

doi : 10.1016/1051-2004(91)90086-Z .

Archived from the original on 10 June 2016 . Retrieved 10 October 2019 .

^ "T.81 – Digital compression and coding of continuous-tone still images – requirements and guidelines" (PDF) .

CCITT . September 1992.

Archived (PDF) from the original on 17 July 2019 . Retrieved 12 July 2019 .

^ Svetlik, Joe (31 May 2018).

"The JPEG image format explained" .

BT Group . Archived from the original on 5 August 2019 . Retrieved 5 August 2019 .

^ Caplan, Paul (24 September 2013).

"What Is a JPEG? The Invisible Object You See Every Day" .

The Atlantic .

Archived from the original on 9 October 2019 . Retrieved 13 September 2019 .

^ Baraniuk, Chris (15 October 2015).

"JPeg lockdown: Restriction options sought by committee" .

BBC News .

Archived from the original on 9 October 2019 . Retrieved 13 September 2019 .

^ Nagornov, Nikolay N.; Lyakhov, Pavel A.; Valueva, Maria V.; Bergerman, Maxim V. (2022).

"RNS-Based FPGA Accelerators for High-Quality 3D Medical Image Wavelet Processing Using Scaled Filter Coefficients" .

IEEE Access .

10 : 19215– 19231.

Bibcode : 2022IEEEA..1019215N .

doi : 10.1109/ACCESS.2022.3151361 .

ISSN 2169-3536 .

S2CID 246895876 .

Medical imaging systems produce increasingly accurate images with improved quality using higher spatial resolutions and color bit-depth. Such improvements increase the amount of information that needs to be stored, processed, and transmitted.

^ Dhouib, D.; Naït-Ali, A.; Olivier, C.; Naceur, M.S. (June 2021).

"ROI-Based Compression Strategy of 3D MRI Brain Datasets for Wireless Communications" .

IRBM .

42 (3): 146– 153.

doi : 10.1016/j.irbm.2020.05.001 .

S2CID 219437400 .

Because of the large amount of medical imaging data, the transmission process becomes complicated in telemedicine applications. Thus, in order to adapt the data bit streams to the constraints related to the limitation of the bandwidths a reduction of the size of the data by compression of the images is essential.

^ Xin, Gangtao; Fan, Pingyi (11 June 2021).

"A lossless compression method for multi-component medical images based on big data mining" .

Scientific Reports .

11 (1): 12372.

doi : 10.1038/s41598-021-91920-x .

ISSN 2045-2322 .

PMC 8196061 .

PMID 34117350 .

^ Grant, Duncan Andrew; Gowar, John (1989).

Power MOSFETS: theory and applications .

Wiley . p. 1.

ISBN 978-0-471-82867-9 .

The metal–oxide–semiconductor field-effect transistor (MOSFET) is the most commonly used active device in the very large-scale integration of digital integrated circuits (VLSI). During the 1970s these components revolutionized electronic signal processing, control systems and computers.

^ Shirriff, Ken (30 August 2016).

"The Surprising Story of the First Microprocessors" .

IEEE Spectrum .

53 (9).

Institute of Electrical and Electronics Engineers : 48– 54.

doi : 10.1109/MSPEC.2016.7551353 .

S2CID 32003640 .

Archived from the original on 13 October 2019 . Retrieved 13 October 2019 .

^ a b "1979: Single Chip Digital Signal Processor Introduced" .

The Silicon Engine .

Computer History Museum .

Archived from the original on 3 October 2019 . Retrieved 14 October 2019 .

^ Taranovich, Steve (27 August 2012).

"30 years of DSP: From a child's toy to 4G and beyond" .

EDN .

Archived from the original on 14 October 2019 . Retrieved 14 October 2019 .

^ Stanković, Radomir S.; Astola, Jaakko T. (2012).

"Reminiscences of the Early Work in DCT: Interview with K.R. Rao" (PDF) .

Reprints from the Early Days of Information Sciences .

60 .

Archived (PDF) from the original on 13 October 2019 . Retrieved 13 October 2019 .

^ Zhang, M. Z.; Livingston, A. R.; Asari, V. K. (2008). "A High Performance Architecture for Implementation of 2-D Convolution with Quadrant Symmetric Kernels".

International Journal of Computers and Applications .

30 (4): 298– 308.

doi : 10.1080/1206212x.2008.11441909 .

S2CID 57289814 .

^ a b Gonzalez, Rafael (2008).

Digital Image Processing, 3rd . Pearson Hall.

ISBN 978-0-13-168728-8 .

^ House, Keyser (6 December 2016).

Affine Transformations (PDF) . Foundations of Physically Based Modeling & Animation. A K Peters/CRC Press.

ISBN 978-1-4822-3460-2 .

Archived (PDF) from the original on 30 August 2017 . Retrieved 26 March 2019 .

{{ cite book }} : |website= ignored ( help ) ^ A Brief, Early History of Computer Graphics in Film Archived 17 July 2012 at the Wayback Machine , Larry Yaeger , 16 August 2002 (last update), retrieved 24 March 2010 Further reading [ edit ] Solomon, C.J.; Breckon, T.P. (2010).

Fundamentals of Digital Image Processing: A Practical Approach with Examples in Matlab . Wiley-Blackwell.

doi : 10.1002/9780470689776 .

ISBN 978-0-470-84473-1 .

Wilhelm Burger; Mark J. Burge (2007).

Digital Image Processing: An Algorithmic Approach Using Java .

Springer .

ISBN 978-1-84628-379-6 .

R. Fisher; K Dawson-Howe; A. Fitzgibbon; C. Robertson; E. Trucco (2005).

Dictionary of Computer Vision and Image Processing . John Wiley.

ISBN 978-0-470-01526-1 .

Rafael C. Gonzalez; Richard E. Woods; Steven L. Eddins (2004).

Digital Image Processing using MATLAB . Pearson Education.

ISBN 978-81-7758-898-9 .

Tim Morris (2004).

Computer Vision and Image Processing . Palgrave Macmillan.

ISBN 978-0-333-99451-1 .

Vipin Tyagi (2018).

Understanding Digital Image Processing . Taylor and Francis CRC Press.

ISBN 978-11-3856-6842 .

Milan Sonka; Vaclav Hlavac; Roger Boyle (1999).

Image Processing, Analysis, and Machine Vision . PWS Publishing.

ISBN 978-0-534-95393-5 .

Gonzalez, Rafael C.; Woods, Richard E. (2008).

Digital image processing . Upper Saddle River, N.J.: Prentice Hall.

ISBN 978-0-13-168728-8 .

OCLC 137312858 .

Kovalevsky, Vladimir (2019).

Modern algorithms for image processing: computer imagery by example using C# . [New York, New York].

ISBN 978-1-4842-4237-7 .

OCLC 1080084533 .

{{ cite book }} :  CS1 maint: location missing publisher ( link ) External links [ edit ] Lectures on Image Processing , by Alan Peters. Vanderbilt University. Updated 7 January 2016.

Processing digital images with computer algorithms Pengertian Citra Digital: Pemahaman Dasar dan Penerapannya dalam Teknologi v t e Computer vision Categories Datasets Digital geometry Commercial systems Feature detection Geometry Image sensor technology Learning Morphology Motion analysis Noise reduction techniques Recognition and categorization Research infrastructure Researchers Segmentation Software Technologies Computer stereo vision Motion capture Object recognition 3D object recognition Applications 3D reconstruction 3D reconstruction from multiple images 2D to 3D conversion Gaussian splatting Neural radiance field Shape from focus Simultaneous localization and mapping Structure from motion View synthesis Visual hull 4D reconstruction Free viewpoint television Volumetric capture 3D pose estimation Activity recognition Audio-visual speech recognition Automatic image annotation Automatic number-plate recognition Automated species identification Augmented reality Bioimage informatics Blob detection Computer-aided diagnosis Content-based image retrieval Reverse image search Eye tracking Face recognition Foreground detection Gesture recognition Image denoising Image restoration Landmark detection Medical image computing Object detection Moving object detection Small object detection Optical character recognition Pose tracking Remote sensing Robotic mapping Autonomous vehicles Video content analysis Video motion analysis Video surveillance Video tracking Main category v t e Digital signal processing Theory Detection theory Discrete signal Estimation theory Nyquist–Shannon sampling theorem Sub-fields Audio signal processing Digital image processing Speech processing Statistical signal processing Techniques Z-transform Advanced z-transform Matched Z-transform method Bilinear transform Constant-Q transform Discrete cosine transform (DCT) Discrete Fourier transform (DFT) Discrete-time Fourier transform (DTFT) Impulse invariance Integral transform Laplace transform Post's inversion formula Starred transform Zak transform Sampling Aliasing Anti-aliasing filter Downsampling Nyquist rate / frequency Oversampling Quantization Sampling rate Undersampling Upsampling v t e Information processing Information processes information processes by function perception attention influence operating communication reasoning learning storing decision-making information processing abstractions event processing sign processesing signal processing data processing stream processing agent processing state processing Information processors natural nature as information processing humans as information processing systems society as information processing system mixed mixed reality brain–computer interface physical computing human–computer interaction artificial processors and processes bio-inspired computing ubiquitous computing artificial brain and mind uploading virtual reality virtual world Information processing theories and concepts in biology computational and systems biology genetic informatics and cellular computing computational neuroscience and neurocomputing in cognitive psychology information processing theory mind and intelligence cognitive informatics and neuroinformatics behavior informatics in computer science neural computation computation theory algorithms and information structures computational circuits artificial intelligence in philosophy computational theory of mind philosophy of information philosophy of artificial intelligence interdisciplinary information theory decision theory systems theory other infosphere inforg Decoding the Universe information overload Authority control databases : National Czech Republic 2 Latvia NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐t9bvr
Cached time: 20250811235509
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.861 seconds
Real time usage: 1.117 seconds
Preprocessor visited node count: 5174/1000000
Revision size: 51125/2097152 bytes
Post‐expand include size: 175541/2097152 bytes
Template argument size: 5724/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 18/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 232962/5000000 bytes
Lua time usage: 0.499/10.000 seconds
Lua memory usage: 6334431/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  770.039      1 -total
 49.55%  381.559      1 Template:Reflist
 23.90%  184.028     17 Template:Cite_journal
 16.51%  127.167     21 Template:Cite_book
 12.05%   92.783      7 Template:Navbox
 10.30%   79.302      1 Template:Digital_image_processing
 10.08%   77.583      1 Template:Short_description
  6.84%   52.688      2 Template:Pagetype
  6.24%   48.065      8 Template:Cite_web
  4.21%   32.416      1 Template:Authority_control Saved in parser cache with key enwiki:pcache:97922:|#|:idhash:canonical and timestamp 20250811235509 and revision id 1305346736. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Digital_image_processing&oldid=1305346736 " Categories : Computer-related introductions in the 1960s Computer vision Image processing Digital imaging Hidden categories: CS1 errors: ISBN date CS1 errors: periodical ignored Webarchive template wayback links Articles with short description Short description is different from Wikidata Use dmy dates from January 2022 Articles containing potentially dated statements from 2015 All articles containing potentially dated statements CS1 maint: location missing publisher This page was last edited on 11 August 2025, at 14:40 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Digital image processing 28 languages Add topic

