Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Definition 2 Example 3 Properties Toggle Properties subsection 3.1 Linearity 3.2 Time and frequency reversal 3.3 Conjugation in time 3.4 Real and imaginary part 3.5 Orthogonality 3.6 The Plancherel theorem and Parseval's theorem 3.7 Periodicity 3.8 Shift theorem 3.9 Circular convolution theorem and cross-correlation theorem 3.10 Uniqueness of the Discrete Fourier Transform 3.11 Convolution theorem duality 3.12 Trigonometric interpolation polynomial 3.13 The unitary DFT 3.14 Expressing the inverse DFT in terms of the DFT 3.15 Eigenvalues and eigenvectors 3.16 Uncertainty principles 3.16.1 Probabilistic uncertainty principle 3.16.2 Deterministic uncertainty principle 3.17 DFT of real and purely imaginary signals 4 Generalized DFT (shifted and non-linear phase) 5 Multidimensional DFT Toggle Multidimensional DFT subsection 5.1 The real-input multidimensional DFT 6 Applications Toggle Applications subsection 6.1 Spectral analysis 6.2 Example 6.2.1 Given Data 6.2.1.1 2.DFT Calculation 6.2.1.2 3.Magnitude Spectrum 6.3 Optics, diffraction, and tomography 6.4 Filter bank 6.5 Data compression 6.6 Partial differential equations 6.7 Polynomial multiplication 6.7.1 Multiplication of large integers 6.7.2 Convolution 7 Some discrete Fourier transform pairs 8 Generalizations Toggle Generalizations subsection 8.1 Representation theory 8.2 Other fields 8.3 Other finite groups 9 Alternatives 10 See also 11 Notes 12 References 13 Further reading 14 External links Toggle the table of contents Discrete Fourier transform 29 languages العربية Català Čeština Deutsch Eesti Ελληνικά Español فارسی Français 한국어 हिन्दी Bahasa Indonesia Italiano Lietuvių Nederlands 日本語 Polski Português Русский Shqip Српски / srpski Srpskohrvatski / српскохрватски Sunda Suomi Svenska Türkçe Українська Tiếng Việt 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Function in discrete mathematics Not to be confused with the discrete-time Fourier transform .

Fourier transforms Fourier transform Fourier series Discrete-time Fourier transform Discrete Fourier transform Discrete Fourier transform over a ring Fourier transform on finite groups Fourier analysis Related transforms Fig 1: Relationship between the (continuous) Fourier transform and the discrete Fourier transform.

Left: A continuous function (top) and its Fourier transform (bottom).

Center-left: Periodic summation of the original function (top).  Fourier transform (bottom) is zero except at discrete points.  The inverse transform is a sum of sinusoids called Fourier series .

Center-right: Original function is discretized (multiplied by a Dirac comb ) (top).  Its Fourier transform (bottom) is a periodic summation ( DTFT ) of the original transform.

Right: The DFT (bottom) computes discrete samples of the continuous DTFT.  The inverse DFT (top) is a periodic summation of the original samples.  The FFT algorithm computes one cycle of the DFT and its inverse is one cycle of the DFT inverse.

Fig 2: Depiction of a Fourier transform (upper left) and its periodic summation (DTFT) in the lower left corner.  The spectral sequences at (a) upper right and (b) lower right are respectively computed from (a) one cycle of the periodic summation of s(t) and (b) one cycle of the periodic summation of the s(nT) sequence.  The respective formulas are (a) the Fourier series integral and (b) the DFT summation .  Its similarities to the original transform, S(f), and its relative computational ease are often the motivation for computing a DFT sequence.

In mathematics , the discrete Fourier transform ( DFT ) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency. The interval at which the DTFT is sampled is the reciprocal of the duration of the input sequence.

[ A ] [ 1 ] An inverse DFT (IDFT) is a Fourier series , using the DTFT samples as coefficients of complex sinusoids at the corresponding DTFT frequencies. It has the same sample-values as the original input sequence.  The DFT is therefore said to be a frequency domain representation of the original input sequence.  If the original sequence spans all the non-zero values of a function, its DTFT is continuous (and periodic), and the DFT provides discrete samples of one cycle. If the original sequence is one cycle of a periodic function, the DFT provides all the non-zero values of one DTFT cycle.

The DFT is used in the Fourier analysis of many practical applications.

[ 2 ] In digital signal processing , the function is any quantity or signal that varies over time, such as the pressure of a sound wave , a radio signal, or daily temperature readings, sampled over a finite time interval (often defined by a window function [ 3 ] ). In image processing , the samples can be the values of pixels along a row or column of a raster image . The DFT is also used to efficiently solve partial differential equations , and to perform other operations such as convolutions or multiplying large integers.

Since it deals with a finite amount of data, it can be implemented in computers by numerical algorithms or even dedicated hardware . These implementations usually employ efficient fast Fourier transform (FFT) algorithms; [ 4 ] so much so that the terms "FFT" and "DFT" are often used interchangeably. Prior to its current usage, the "FFT" initialism may have also been used for the ambiguous term " finite Fourier transform ".

Definition [ edit ] The discrete Fourier transform transforms a sequence of N complex numbers { x n } := x 0 , x 1 , … … , x N − − 1 {\displaystyle \left\{\mathbf {x} _{n}\right\}:=x_{0},x_{1},\ldots ,x_{N-1}} into another sequence of complex numbers, { X k } := X 0 , X 1 , … … , X N − − 1 , {\displaystyle \left\{\mathbf {X} _{k}\right\}:=X_{0},X_{1},\ldots ,X_{N-1},} which is defined by: Discrete Fourier transform X k = ∑ ∑ n = 0 N − − 1 x n ⋅ ⋅ e − − i 2 π π k N n {\displaystyle X_{k}=\sum _{n=0}^{N-1}x_{n}\cdot e^{-i2\pi {\tfrac {k}{N}}n}} Eq.1 The transform is sometimes denoted by the symbol F {\displaystyle {\mathcal {F}}} , as in X = F { x } {\displaystyle \mathbf {X} ={\mathcal {F}}\left\{\mathbf {x} \right\}} or F ( x ) {\displaystyle {\mathcal {F}}\left(\mathbf {x} \right)} or F x {\displaystyle {\mathcal {F}}\mathbf {x} } .

[ B ] Eq.1 can be interpreted or derived in various ways, for example: It completely describes the discrete-time Fourier transform (DTFT) of an N {\displaystyle N} -periodic sequence, which comprises only discrete frequency components.

[ C ] ( Using the DTFT with periodic data ) It can also provide uniformly spaced samples of the continuous DTFT of a finite length sequence.  ( § Sampling the DTFT ) It is the cross correlation of the input sequence, x n {\displaystyle x_{n}} , and a complex sinusoid at frequency k N .

{\textstyle {\frac {k}{N}}.} Thus it acts like a matched filter for that frequency.

It is the discrete analog of the formula for the coefficients of a Fourier series : C k = 1 P ∫ ∫ P x ( t ) e − − i 2 π π k P t d t .

{\displaystyle C_{k}={\frac {1}{P}}\int _{P}x(t)e^{-i2\pi {\tfrac {k}{P}}t}\,dt.} Eq.1 can also be evaluated outside the domain k ∈ ∈ [ 0 , N − − 1 ] {\displaystyle k\in [0,N-1]} , and that extended sequence is N {\displaystyle N} - periodic . Accordingly, other sequences of N {\displaystyle N} indices are sometimes used,  such as [ − − N 2 , N 2 − − 1 ] {\textstyle \left[-{\frac {N}{2}},{\frac {N}{2}}-1\right]} (if N {\displaystyle N} is even) and [ − − N − − 1 2 , N − − 1 2 ] {\textstyle \left[-{\frac {N-1}{2}},{\frac {N-1}{2}}\right]} (if N {\displaystyle N} is odd), which amounts to swapping the left and right halves of the result of the transform.

[ 5 ] The inverse transform is given by: Inverse transform x n = 1 N ∑ ∑ k = 0 N − − 1 X k ⋅ ⋅ e i 2 π π k N n {\displaystyle x_{n}={\frac {1}{N}}\sum _{k=0}^{N-1}X_{k}\cdot e^{i2\pi {\tfrac {k}{N}}n}} Eq.2 Eq.2 . is also N {\displaystyle N} -periodic (in index n).  In Eq.2 , each X k {\displaystyle X_{k}} is a complex number whose polar coordinates are the amplitude and phase of a complex sinusoidal component ( e i 2 π π k N n ) {\displaystyle \left(e^{i2\pi {\tfrac {k}{N}}n}\right)} of function x n .

{\displaystyle x_{n}.} (see Discrete Fourier series )  The sinusoid's frequency is k {\displaystyle k} cycles per N {\displaystyle N} samples.

The normalization factor multiplying the DFT and IDFT (here 1 and 1 N {\displaystyle {\tfrac {1}{N}}} ) and the signs of the exponents are the most common conventions . The only actual requirements of these conventions are that the DFT and IDFT have opposite-sign exponents and that the product of their normalization factors be 1 N .

{\displaystyle {\tfrac {1}{N}}.} An uncommon  normalization of 1 N {\displaystyle {\sqrt {\tfrac {1}{N}}}} for both the DFT and IDFT makes the transform-pair unitary.

Example [ edit ] This example demonstrates how to apply the DFT to a sequence of length N = 4 {\displaystyle N=4} and the input vector x = ( x 0 x 1 x 2 x 3 ) = ( 1 2 − − i − − i − − 1 + 2 i ) .

{\displaystyle \mathbf {x} ={\begin{pmatrix}x_{0}\\x_{1}\\x_{2}\\x_{3}\end{pmatrix}}={\begin{pmatrix}1\\2-i\\-i\\-1+2i\end{pmatrix}}.} Calculating the DFT of x {\displaystyle \mathbf {x} } using Eq.1 X 0 = e − − i 2 π π 0 ⋅ ⋅ 0 / 4 ⋅ ⋅ 1 + e − − i 2 π π 0 ⋅ ⋅ 1 / 4 ⋅ ⋅ ( 2 − − i ) + e − − i 2 π π 0 ⋅ ⋅ 2 / 4 ⋅ ⋅ ( − − i ) + e − − i 2 π π 0 ⋅ ⋅ 3 / 4 ⋅ ⋅ ( − − 1 + 2 i ) = 2 X 1 = e − − i 2 π π 1 ⋅ ⋅ 0 / 4 ⋅ ⋅ 1 + e − − i 2 π π 1 ⋅ ⋅ 1 / 4 ⋅ ⋅ ( 2 − − i ) + e − − i 2 π π 1 ⋅ ⋅ 2 / 4 ⋅ ⋅ ( − − i ) + e − − i 2 π π 1 ⋅ ⋅ 3 / 4 ⋅ ⋅ ( − − 1 + 2 i ) = − − 2 − − 2 i X 2 = e − − i 2 π π 2 ⋅ ⋅ 0 / 4 ⋅ ⋅ 1 + e − − i 2 π π 2 ⋅ ⋅ 1 / 4 ⋅ ⋅ ( 2 − − i ) + e − − i 2 π π 2 ⋅ ⋅ 2 / 4 ⋅ ⋅ ( − − i ) + e − − i 2 π π 2 ⋅ ⋅ 3 / 4 ⋅ ⋅ ( − − 1 + 2 i ) = − − 2 i X 3 = e − − i 2 π π 3 ⋅ ⋅ 0 / 4 ⋅ ⋅ 1 + e − − i 2 π π 3 ⋅ ⋅ 1 / 4 ⋅ ⋅ ( 2 − − i ) + e − − i 2 π π 3 ⋅ ⋅ 2 / 4 ⋅ ⋅ ( − − i ) + e − − i 2 π π 3 ⋅ ⋅ 3 / 4 ⋅ ⋅ ( − − 1 + 2 i ) = 4 + 4 i {\displaystyle {\begin{aligned}X_{0}&=e^{-i2\pi 0\cdot 0/4}\cdot 1+e^{-i2\pi 0\cdot 1/4}\cdot (2-i)+e^{-i2\pi 0\cdot 2/4}\cdot (-i)+e^{-i2\pi 0\cdot 3/4}\cdot (-1+2i)=2\\X_{1}&=e^{-i2\pi 1\cdot 0/4}\cdot 1+e^{-i2\pi 1\cdot 1/4}\cdot (2-i)+e^{-i2\pi 1\cdot 2/4}\cdot (-i)+e^{-i2\pi 1\cdot 3/4}\cdot (-1+2i)=-2-2i\\X_{2}&=e^{-i2\pi 2\cdot 0/4}\cdot 1+e^{-i2\pi 2\cdot 1/4}\cdot (2-i)+e^{-i2\pi 2\cdot 2/4}\cdot (-i)+e^{-i2\pi 2\cdot 3/4}\cdot (-1+2i)=-2i\\X_{3}&=e^{-i2\pi 3\cdot 0/4}\cdot 1+e^{-i2\pi 3\cdot 1/4}\cdot (2-i)+e^{-i2\pi 3\cdot 2/4}\cdot (-i)+e^{-i2\pi 3\cdot 3/4}\cdot (-1+2i)=4+4i\end{aligned}}} results in X = ( X 0 X 1 X 2 X 3 ) = ( 2 − − 2 − − 2 i − − 2 i 4 + 4 i ) .

{\displaystyle \mathbf {X} ={\begin{pmatrix}X_{0}\\X_{1}\\X_{2}\\X_{3}\end{pmatrix}}={\begin{pmatrix}2\\-2-2i\\-2i\\4+4i\end{pmatrix}}.} Properties [ edit ] Linearity [ edit ] The DFT is a linear transform, i.e. if F ( { x n } ) k = X k {\displaystyle {\mathcal {F}}(\{x_{n}\})_{k}=X_{k}} and F ( { y n } ) k = Y k {\displaystyle {\mathcal {F}}(\{y_{n}\})_{k}=Y_{k}} , then for any complex numbers a , b {\displaystyle a,b} : F ( { a x n + b y n } ) k = a X k + b Y k {\displaystyle {\mathcal {F}}(\{ax_{n}+by_{n}\})_{k}=aX_{k}+bY_{k}} Time and frequency reversal [ edit ] Reversing the time (i.e. replacing n {\displaystyle n} by N − − n {\displaystyle N-n} ) [ D ] in x n {\displaystyle x_{n}} corresponds to reversing the frequency (i.e.

k {\displaystyle k} by N − − k {\displaystyle N-k} ).

[ 6 ] : p.421 Mathematically, if { x n } {\displaystyle \{x_{n}\}} represents the vector x then if F ( { x n } ) k = X k {\displaystyle {\mathcal {F}}(\{x_{n}\})_{k}=X_{k}} then F ( { x N − − n } ) k = X N − − k {\displaystyle {\mathcal {F}}(\{x_{N-n}\})_{k}=X_{N-k}} Conjugation in time [ edit ] If F ( { x n } ) k = X k {\displaystyle {\mathcal {F}}(\{x_{n}\})_{k}=X_{k}} then F ( { x n ∗ ∗ } ) k = X N − − k ∗ ∗ {\displaystyle {\mathcal {F}}(\{x_{n}^{*}\})_{k}=X_{N-k}^{*}} .

[ 6 ] : p.423 Real and imaginary part [ edit ] This table shows some mathematical operations on x n {\displaystyle x_{n}} in the time domain and the corresponding effects on its DFT X k {\displaystyle X_{k}} in the frequency domain.

Property Time domain x n {\displaystyle x_{n}} Frequency domain X k {\displaystyle X_{k}} Real part in time Re ⁡ ⁡ ( x n ) {\displaystyle \operatorname {Re} {\left(x_{n}\right)}} 1 2 ( X k + X N − − k ∗ ∗ ) {\displaystyle {\frac {1}{2}}\left(X_{k}+X_{N-k}^{*}\right)} Imaginary part in time Im ⁡ ⁡ ( x n ) {\displaystyle \operatorname {Im} {\left(x_{n}\right)}} 1 2 i ( X k − − X N − − k ∗ ∗ ) {\displaystyle {\frac {1}{2i}}\left(X_{k}-X_{N-k}^{*}\right)} Real part in frequency 1 2 ( x n + x N − − n ∗ ∗ ) {\displaystyle {\frac {1}{2}}\left(x_{n}+x_{N-n}^{*}\right)} Re ⁡ ⁡ ( X k ) {\displaystyle \operatorname {Re} {\left(X_{k}\right)}} Imaginary part in frequency 1 2 i ( x n − − x N − − n ∗ ∗ ) {\displaystyle {\frac {1}{2i}}\left(x_{n}-x_{N-n}^{*}\right)} Im ⁡ ⁡ ( X k ) {\displaystyle \operatorname {Im} {\left(X_{k}\right)}} Orthogonality [ edit ] The vectors u k = [ e i 2 π π N k n | n = 0 , 1 , … … , N − − 1 ] T {\displaystyle u_{k}=\left[\left.e^{{\frac {i2\pi }{N}}kn}\;\right|\;n=0,1,\ldots ,N-1\right]^{\mathsf {T}}} , for k = 0 , 1 , … … , N − − 1 {\displaystyle k=0,1,\ldots ,N-1} , form an orthogonal basis over the set of N -dimensional complex vectors: u k T u k ′ ∗ ∗ = ∑ ∑ n = 0 N − − 1 ( e i 2 π π N k n ) ( e i 2 π π N ( − − k ′ ) n ) = ∑ ∑ n = 0 N − − 1 e i 2 π π N ( k − − k ′ ) n = N δ δ k k ′ {\displaystyle u_{k}^{\mathsf {T}}u_{k'}^{*}=\sum _{n=0}^{N-1}\left(e^{{\frac {i2\pi }{N}}kn}\right)\left(e^{{\frac {i2\pi }{N}}(-k')n}\right)=\sum _{n=0}^{N-1}e^{{\frac {i2\pi }{N}}(k-k')n}=N~\delta _{kk'}} where δ δ k k ′ {\displaystyle \delta _{kk'}} is the Kronecker delta . (In the last step, the summation is trivial if k = k ′ {\displaystyle k=k'} , where it is 1 + 1 + ⋯ = N , and otherwise is a geometric series that can be explicitly summed to obtain zero.)  This orthogonality condition can be used to derive the formula for the IDFT from the definition of the DFT, and is equivalent to the unitarity property below.

The Plancherel theorem and Parseval's theorem [ edit ] If X k {\displaystyle X_{k}} and Y k {\displaystyle Y_{k}} are the DFTs of x n {\displaystyle x_{n}} and y n {\displaystyle y_{n}} respectively then Parseval's theorem states: ∑ ∑ n = 0 N − − 1 x n y n ∗ ∗ = 1 N ∑ ∑ k = 0 N − − 1 X k Y k ∗ ∗ {\displaystyle \sum _{n=0}^{N-1}x_{n}y_{n}^{*}={\frac {1}{N}}\sum _{k=0}^{N-1}X_{k}Y_{k}^{*}} where the star denotes complex conjugation .  The Plancherel theorem is a special case of Parseval's theorem and states: ∑ ∑ n = 0 N − − 1 | x n | 2 = 1 N ∑ ∑ k = 0 N − − 1 | X k | 2 .

{\displaystyle \sum _{n=0}^{N-1}|x_{n}|^{2}={\frac {1}{N}}\sum _{k=0}^{N-1}|X_{k}|^{2}.} These theorems are also equivalent to the unitary condition below.

Periodicity [ edit ] The periodicity can be shown directly from the definition: X k + N ≜ ≜ ∑ ∑ n = 0 N − − 1 x n e − − i 2 π π N ( k + N ) n = ∑ ∑ n = 0 N − − 1 x n e − − i 2 π π N k n e − − i 2 π π n ⏟ ⏟ 1 = ∑ ∑ n = 0 N − − 1 x n e − − i 2 π π N k n = X k .

{\displaystyle X_{k+N}\ \triangleq \ \sum _{n=0}^{N-1}x_{n}e^{-{\frac {i2\pi }{N}}(k+N)n}=\sum _{n=0}^{N-1}x_{n}e^{-{\frac {i2\pi }{N}}kn}\underbrace {e^{-i2\pi n}} _{1}=\sum _{n=0}^{N-1}x_{n}e^{-{\frac {i2\pi }{N}}kn}=X_{k}.} Similarly, it can be shown that the IDFT formula leads to a periodic extension of x n {\displaystyle x_{n}} .

Shift theorem [ edit ] Multiplying x n {\displaystyle x_{n}} by a linear phase e i 2 π π N n m {\displaystyle e^{{\frac {i2\pi }{N}}nm}} for some integer m corresponds to a circular shift of the output X k {\displaystyle X_{k}} : X k {\displaystyle X_{k}} is replaced by X k − − m {\displaystyle X_{k-m}} , where the subscript is interpreted modulo N (i.e., periodically).  Similarly, a circular shift of the input x n {\displaystyle x_{n}} corresponds to multiplying the output X k {\displaystyle X_{k}} by a linear phase . Mathematically, if { x n } {\displaystyle \{x_{n}\}} represents the vector x then if F ( { x n } ) k = X k {\displaystyle {\mathcal {F}}(\{x_{n}\})_{k}=X_{k}} then F ( { x n ⋅ ⋅ e i 2 π π N n m } ) k = X k − − m {\displaystyle {\mathcal {F}}\left(\left\{x_{n}\cdot e^{{\frac {i2\pi }{N}}nm}\right\}\right)_{k}=X_{k-m}} and F ( { x n − − m } ) k = X k ⋅ ⋅ e − − i 2 π π N k m {\displaystyle {\mathcal {F}}\left(\left\{x_{n-m}\right\}\right)_{k}=X_{k}\cdot e^{-{\frac {i2\pi }{N}}km}} Circular convolution theorem and cross-correlation theorem [ edit ] Main article: Convolution theorem § Functions of a discrete variable (sequences) The convolution theorem for the discrete-time Fourier transform (DTFT) indicates that a convolution of two sequences can be obtained as the inverse transform of the product of the individual transforms. An important simplification occurs when one of sequences is N-periodic, denoted here by y N , {\displaystyle y_{_{N}},} because DTFT { y N } {\displaystyle \scriptstyle {\text{DTFT}}\displaystyle \{y_{_{N}}\}} is non-zero at only discrete frequencies (see DTFT § Periodic data ), and therefore so is its product with the continuous function DTFT { x } .

{\displaystyle \scriptstyle {\text{DTFT}}\displaystyle \{x\}.} That leads to a considerable simplification of the inverse transform.

x ∗ ∗ y N = D T F T − − 1 [ D T F T { x } ⋅ ⋅ D T F T { y N } ] = D F T − − 1 [ D F T { x N } ⋅ ⋅ D F T { y N } ] , {\displaystyle x*y_{_{N}}\ =\ \scriptstyle {\rm {DTFT}}^{-1}\displaystyle \left[\scriptstyle {\rm {DTFT}}\displaystyle \{x\}\cdot \scriptstyle {\rm {DTFT}}\displaystyle \{y_{_{N}}\}\right]\ =\ \scriptstyle {\rm {DFT}}^{-1}\displaystyle \left[\scriptstyle {\rm {DFT}}\displaystyle \{x_{_{N}}\}\cdot \scriptstyle {\rm {DFT}}\displaystyle \{y_{_{N}}\}\right],} where x N {\displaystyle x_{_{N}}} is a periodic summation of the x {\displaystyle x} sequence : ( x N ) n ≜ ≜ ∑ ∑ m = − − ∞ ∞ ∞ ∞ x ( n − − m N ) .

{\displaystyle (x_{_{N}})_{n}\ \triangleq \sum _{m=-\infty }^{\infty }x_{(n-mN)}.} Customarily, the DFT and inverse DFT summations are taken over the domain [ 0 , N − − 1 ] {\displaystyle [0,N-1]} . Defining those DFTs as X {\displaystyle X} and Y {\displaystyle Y} , the result is : ( x ∗ ∗ y N ) n ≜ ≜ ∑ ∑ ℓ ℓ = − − ∞ ∞ ∞ ∞ x ℓ ℓ ⋅ ⋅ ( y N ) n − − ℓ ℓ = F − − 1 ⏟ ⏟ D F T − − 1 { X ⋅ ⋅ Y } n .

{\displaystyle (x*y_{_{N}})_{n}\triangleq \sum _{\ell =-\infty }^{\infty }x_{\ell }\cdot (y_{_{N}})_{n-\ell }=\underbrace {{\mathcal {F}}^{-1}} _{\rm {DFT^{-1}}}\left\{X\cdot Y\right\}_{n}.} In practice, the x {\displaystyle x} sequence is usually length N or less, and y N {\displaystyle y_{_{N}}} is a periodic extension of an N-length y {\displaystyle y} -sequence, which can also be expressed as a circular function : ( y N ) n = ∑ ∑ p = − − ∞ ∞ ∞ ∞ y ( n − − p N ) = y ( n mod ⁡ ⁡ N ) , n ∈ ∈ Z .

{\displaystyle (y_{_{N}})_{n}=\sum _{p=-\infty }^{\infty }y_{(n-pN)}=y_{(n\operatorname {mod} N)},\quad n\in \mathbb {Z} .} Then the convolution can be written as : F − − 1 { X ⋅ ⋅ Y } n = ∑ ∑ ℓ ℓ = 0 N − − 1 x ℓ ℓ ⋅ ⋅ y ( n − − ℓ ℓ ) mod ⁡ ⁡ N {\displaystyle {\mathcal {F}}^{-1}\left\{X\cdot Y\right\}_{n}=\sum _{\ell =0}^{N-1}x_{\ell }\cdot y_{_{(n-\ell )\operatorname {mod} N}}} which gives rise to the interpretation as a circular convolution of x {\displaystyle x} and y .

{\displaystyle y.} [ 7 ] [ 8 ] It is often used to efficiently compute their linear convolution. (see Circular convolution , Fast convolution algorithms , and Overlap-save ) Similarly, the cross-correlation of x {\displaystyle x} and y N {\displaystyle y_{_{N}}} is given by : ( x ⋆ ⋆ y N ) n ≜ ≜ ∑ ∑ ℓ ℓ = − − ∞ ∞ ∞ ∞ x ℓ ℓ ∗ ∗ ⋅ ⋅ ( y N ) n + ℓ ℓ = F − − 1 { X ∗ ∗ ⋅ ⋅ Y } n .

{\displaystyle (x\star y_{_{N}})_{n}\triangleq \sum _{\ell =-\infty }^{\infty }x_{\ell }^{*}\cdot (y_{_{N}})_{n+\ell }={\mathcal {F}}^{-1}\left\{X^{*}\cdot Y\right\}_{n}.} Uniqueness of the Discrete Fourier Transform [ edit ] As seen above, the discrete Fourier transform has the fundamental property of carrying convolution into componentwise product. A natural question is whether it is the only one with this ability. It has been shown [ 9 ] [ 10 ] that any linear transform that turns convolution into pointwise product is the DFT up to a permutation of coefficients. Since the number of permutations of n elements equals n!, there exist exactly n! linear and invertible maps with the same fundamental property as the DFT with respect to convolution.

Convolution theorem duality [ edit ] It can also be shown that : F { x ⋅ ⋅ y } k ≜ ≜ ∑ ∑ n = 0 N − − 1 x n ⋅ ⋅ y n ⋅ ⋅ e − − i 2 π π N k n {\displaystyle {\mathcal {F}}\left\{\mathbf {x\cdot y} \right\}_{k}\ \triangleq \sum _{n=0}^{N-1}x_{n}\cdot y_{n}\cdot e^{-i{\frac {2\pi }{N}}kn}} = 1 N ( X ∗ ∗ Y N ) k , {\displaystyle ={\frac {1}{N}}(\mathbf {X*Y_{N}} )_{k},} which is the circular convolution of X {\displaystyle \mathbf {X} } and Y {\displaystyle \mathbf {Y} } .

Trigonometric interpolation polynomial [ edit ] The trigonometric interpolation polynomial p ( t ) = { 1 N [ X 0 + X 1 e i 2 π π t + ⋯ ⋯ + X N 2 − − 1 e i 2 π π ( N 2 − − 1 ) t + X N 2 cos ⁡ ⁡ ( N π π t ) + X N 2 + 1 e − − i 2 π π ( N 2 − − 1 ) t + ⋯ ⋯ + X N − − 1 e − − i 2 π π t ] N even 1 N [ X 0 + X 1 e i 2 π π t + ⋯ ⋯ + X N − − 1 2 e i 2 π π N − − 1 2 t + X N + 1 2 e − − i 2 π π N − − 1 2 t + ⋯ ⋯ + X N − − 1 e − − i 2 π π t ] N odd {\displaystyle p(t)={\begin{cases}\displaystyle {\frac {1}{N}}\left[{\begin{alignedat}{3}X_{0}+X_{1}e^{i2\pi t}+\cdots &+X_{{\frac {N}{2}}-1}e^{i2\pi {\big (}\!{\frac {N}{2}}-1\!{\big )}t}&\\&+X_{\frac {N}{2}}\cos(N\pi t)&\\&+X_{{\frac {N}{2}}+1}e^{-i2\pi {\big (}\!{\frac {N}{2}}-1\!{\big )}t}&+\cdots +X_{N-1}e^{-i2\pi t}\end{alignedat}}\right]&N{\text{ even}}\\\displaystyle {\frac {1}{N}}\left[{\begin{alignedat}{3}X_{0}+X_{1}e^{i2\pi t}+\cdots &+X_{\frac {N-1}{2}}e^{i2\pi {\frac {N-1}{2}}t}&\\&+X_{\frac {N+1}{2}}e^{-i2\pi {\frac {N-1}{2}}t}&+\cdots +X_{N-1}e^{-i2\pi t}\end{alignedat}}\right]&N{\text{ odd}}\end{cases}}} where the coefficients X k are given by the DFT of x n above, satisfies the interpolation property p ( n / N ) = x n {\displaystyle p(n/N)=x_{n}} for n = 0 , … … , N − − 1 {\displaystyle n=0,\ldots ,N-1} .

For even N , notice that the Nyquist component X N / 2 N cos ⁡ ⁡ ( N π π t ) {\textstyle {\frac {X_{N/2}}{N}}\cos(N\pi t)} is handled specially.

This interpolation is not unique : aliasing implies that one could add N to any of the complex-sinusoid frequencies (e.g. changing e − − i t {\displaystyle e^{-it}} to e i ( N − − 1 ) t {\displaystyle e^{i(N-1)t}} ) without changing the interpolation property, but giving different values in between the x n {\displaystyle x_{n}} points.  The choice above, however, is typical because it has two useful properties.  First, it consists of sinusoids whose frequencies have the smallest possible magnitudes: the interpolation is bandlimited . Second, if the x n {\displaystyle x_{n}} are real numbers, then p ( t ) {\displaystyle p(t)} is real as well.

In contrast, the most obvious trigonometric interpolation polynomial is the one in which the frequencies range from 0 to N − − 1 {\displaystyle N-1} (instead of roughly − − N / 2 {\displaystyle -N/2} to + N / 2 {\displaystyle +N/2} as above), similar to the inverse DFT formula. This interpolation does not minimize the slope, and is not generally real-valued for real x n {\displaystyle x_{n}} ; its use is a common mistake.

The unitary DFT [ edit ] Another way of looking at the DFT is to note that in the above discussion, the DFT can be expressed as the DFT matrix , a Vandermonde matrix , introduced by Sylvester in 1867, F = [ ω ω N 0 ⋅ ⋅ 0 ω ω N 0 ⋅ ⋅ 1 ⋯ ⋯ ω ω N 0 ⋅ ⋅ ( N − − 1 ) ω ω N 1 ⋅ ⋅ 0 ω ω N 1 ⋅ ⋅ 1 ⋯ ⋯ ω ω N 1 ⋅ ⋅ ( N − − 1 ) ⋮ ⋮ ⋮ ⋮ ⋱ ⋱ ⋮ ⋮ ω ω N ( N − − 1 ) ⋅ ⋅ 0 ω ω N ( N − − 1 ) ⋅ ⋅ 1 ⋯ ⋯ ω ω N ( N − − 1 ) ⋅ ⋅ ( N − − 1 ) ] {\displaystyle \mathbf {F} ={\begin{bmatrix}\omega _{N}^{0\cdot 0}&\omega _{N}^{0\cdot 1}&\cdots &\omega _{N}^{0\cdot (N-1)}\\\omega _{N}^{1\cdot 0}&\omega _{N}^{1\cdot 1}&\cdots &\omega _{N}^{1\cdot (N-1)}\\\vdots &\vdots &\ddots &\vdots \\\omega _{N}^{(N-1)\cdot 0}&\omega _{N}^{(N-1)\cdot 1}&\cdots &\omega _{N}^{(N-1)\cdot (N-1)}\\\end{bmatrix}}} where ω ω N = e − − i 2 π π / N {\displaystyle \omega _{N}=e^{-i2\pi /N}} is a primitive N th root of unity .

For example, in the case when N = 2 {\displaystyle N=2} , ω ω N = e − − i π π = − − 1 {\displaystyle \omega _{N}=e^{-i\pi }=-1} , and F = [ 1 1 1 − − 1 ] , {\displaystyle \mathbf {F} ={\begin{bmatrix}1&1\\1&-1\\\end{bmatrix}},} (which is a Hadamard matrix ) or when N = 4 {\displaystyle N=4} as in the Discrete Fourier transform § Example above, ω ω N = e − − i π π / 2 = − − i {\displaystyle \omega _{N}=e^{-i\pi /2}=-i} , and F = [ 1 1 1 1 1 − − i − − 1 i 1 − − 1 1 − − 1 1 i − − 1 − − i ] .

{\displaystyle \mathbf {F} ={\begin{bmatrix}1&1&1&1\\1&-i&-1&i\\1&-1&1&-1\\1&i&-1&-i\\\end{bmatrix}}.} The inverse transform is then given by the inverse of the above matrix, F − − 1 = 1 N F ∗ ∗ {\displaystyle \mathbf {F} ^{-1}={\frac {1}{N}}\mathbf {F} ^{*}} With unitary normalization constants 1 / N {\textstyle 1/{\sqrt {N}}} , the DFT becomes a unitary transformation , defined by a unitary matrix: U = 1 N F U − − 1 = U ∗ ∗ | det ( U ) | = 1 {\displaystyle {\begin{aligned}\mathbf {U} &={\frac {1}{\sqrt {N}}}\mathbf {F} \\\mathbf {U} ^{-1}&=\mathbf {U} ^{*}\\\left|\det(\mathbf {U} )\right|&=1\end{aligned}}} where det ( ) {\displaystyle \det()} is the determinant function. The determinant is the product of the eigenvalues, which are always ± ± 1 {\displaystyle \pm 1} or ± ± i {\displaystyle \pm i} as described below.  In a real vector space, a unitary transformation can be thought of as simply a rigid rotation of the coordinate system, and all of the properties of a rigid rotation can be found in the unitary DFT.

The orthogonality of the DFT is now expressed as an orthonormality condition (which arises in many areas of mathematics as described in root of unity ): ∑ ∑ m = 0 N − − 1 U k m U m n ∗ ∗ = δ δ k n {\displaystyle \sum _{m=0}^{N-1}U_{km}U_{mn}^{*}=\delta _{kn}} If X is defined as the unitary DFT of the vector x , then X k = ∑ ∑ n = 0 N − − 1 U k n x n {\displaystyle X_{k}=\sum _{n=0}^{N-1}U_{kn}x_{n}} and the Parseval's theorem is expressed as ∑ ∑ n = 0 N − − 1 x n y n ∗ ∗ = ∑ ∑ k = 0 N − − 1 X k Y k ∗ ∗ {\displaystyle \sum _{n=0}^{N-1}x_{n}y_{n}^{*}=\sum _{k=0}^{N-1}X_{k}Y_{k}^{*}} If we view the DFT as just a coordinate transformation which simply specifies the components of a vector in a new coordinate system, then the above is just the statement that the dot product of two vectors is preserved under a unitary DFT transformation. For the special case x = y {\displaystyle \mathbf {x} =\mathbf {y} } , this implies that the length of a vector is preserved as well — this is just Plancherel theorem , ∑ ∑ n = 0 N − − 1 | x n | 2 = ∑ ∑ k = 0 N − − 1 | X k | 2 {\displaystyle \sum _{n=0}^{N-1}|x_{n}|^{2}=\sum _{k=0}^{N-1}|X_{k}|^{2}} A consequence of the circular convolution theorem is that the DFT matrix F diagonalizes any circulant matrix .

Expressing the inverse DFT in terms of the DFT [ edit ] A useful property of the DFT is that the inverse DFT can be easily expressed in terms of the (forward) DFT, via several well-known "tricks".  (For example, in computations, it is often convenient to only implement a fast Fourier transform corresponding to one transform direction and then to get the other transform direction from the first.) First, we can compute the inverse DFT by reversing all but one of the inputs (Duhamel et al.

, 1988): F − − 1 ( { x n } ) = 1 N F ( { x N − − n } ) {\displaystyle {\mathcal {F}}^{-1}(\{x_{n}\})={\frac {1}{N}}{\mathcal {F}}(\{x_{N-n}\})} (As usual, the subscripts are interpreted modulo N ; thus, for n = 0 {\displaystyle n=0} , we have x N − − 0 = x 0 {\displaystyle x_{N-0}=x_{0}} .) Second, one can also conjugate the inputs and outputs: F − − 1 ( x ) = 1 N F ( x ∗ ∗ ) ∗ ∗ {\displaystyle {\mathcal {F}}^{-1}(\mathbf {x} )={\frac {1}{N}}{\mathcal {F}}\left(\mathbf {x} ^{*}\right)^{*}} Third, a variant of this conjugation trick, which is sometimes preferable because it requires no modification of the data values, involves swapping real and imaginary parts (which can be done on a computer simply by modifying pointers ). Define swap ⁡ ⁡ ( x n ) {\textstyle \operatorname {swap} (x_{n})} as x n {\displaystyle x_{n}} with its real and imaginary parts swapped—that is, if x n = a + b i {\displaystyle x_{n}=a+bi} then swap ⁡ ⁡ ( x n ) {\textstyle \operatorname {swap} (x_{n})} is b + a i {\displaystyle b+ai} .  Equivalently, swap ⁡ ⁡ ( x n ) {\textstyle \operatorname {swap} (x_{n})} equals i x n ∗ ∗ {\displaystyle ix_{n}^{*}} .  Then F − − 1 ( x ) = 1 N swap ⁡ ⁡ ( F ( swap ⁡ ⁡ ( x ) ) ) {\displaystyle {\mathcal {F}}^{-1}(\mathbf {x} )={\frac {1}{N}}\operatorname {swap} ({\mathcal {F}}(\operatorname {swap} (\mathbf {x} )))} That is, the inverse transform is the same as the forward transform with the real and imaginary parts swapped for both input and output, up to a normalization (Duhamel et al.

, 1988).

The conjugation trick can also be used to define a new transform, closely related to the DFT, that is involutory —that is, which is its own inverse.  In particular, T ( x ) = F ( x ∗ ∗ ) / N {\displaystyle T(\mathbf {x} )={\mathcal {F}}\left(\mathbf {x} ^{*}\right)/{\sqrt {N}}} is clearly its own inverse: T ( T ( x ) ) = x {\displaystyle T(T(\mathbf {x} ))=\mathbf {x} } .  A closely related involutory transformation (by a factor of 1 + i 2 {\textstyle {\frac {1+i}{\sqrt {2}}}} ) is H ( x ) = F ( ( 1 + i ) x ∗ ∗ ) / 2 N {\displaystyle H(\mathbf {x} )={\mathcal {F}}\left((1+i)\mathbf {x} ^{*}\right)/{\sqrt {2N}}} , since the ( 1 + i ) {\displaystyle (1+i)} factors in H ( H ( x ) ) {\displaystyle H(H(\mathbf {x} ))} cancel the 2.  For real inputs x {\displaystyle \mathbf {x} } , the real part of H ( x ) {\displaystyle H(\mathbf {x} )} is none other than the discrete Hartley transform , which is also involutory.

Eigenvalues and eigenvectors [ edit ] The eigenvalues of the DFT matrix are simple and well-known, whereas the eigenvectors are complicated, not unique, and are the subject of ongoing research. Explicit formulas are given with a significant amount of number theory.

[ 11 ] Consider the unitary form U {\displaystyle \mathbf {U} } defined above for the DFT of length N , where U m , n = 1 N ω ω N ( m − − 1 ) ( n − − 1 ) = 1 N e − − i 2 π π N ( m − − 1 ) ( n − − 1 ) .

{\displaystyle \mathbf {U} _{m,n}={\frac {1}{\sqrt {N}}}\omega _{N}^{(m-1)(n-1)}={\frac {1}{\sqrt {N}}}e^{-{\frac {i2\pi }{N}}(m-1)(n-1)}.} This matrix satisfies the matrix polynomial equation: U 4 = I .

{\displaystyle \mathbf {U} ^{4}=\mathbf {I} .} This can be seen from the inverse properties above: operating U {\displaystyle \mathbf {U} } twice gives the original data in reverse order, so operating U {\displaystyle \mathbf {U} } four times gives back the original data and is thus the identity matrix .  This means that the eigenvalues λ λ {\displaystyle \lambda } satisfy the equation: λ λ 4 = 1.

{\displaystyle \lambda ^{4}=1.} Therefore, the eigenvalues of U {\displaystyle \mathbf {U} } are the fourth roots of unity : λ λ {\displaystyle \lambda } is +1, −1, + i ,  or − i .

Since there are only four distinct eigenvalues for this N × × N {\displaystyle N\times N} matrix, they have some multiplicity .  The multiplicity gives the number of linearly independent eigenvectors corresponding to each eigenvalue.  (There are N independent eigenvectors; a unitary matrix is never defective .) The problem of their multiplicity was solved by McClellan and Parks (1972), although it was later shown to have been equivalent to a problem solved by Gauss (Dickinson and Steiglitz, 1982).  The multiplicity depends on the value of N modulo 4, and is given by the following table: Multiplicities of the eigenvalues λ of the unitary DFT matrix U as a function of the transform size N (in terms of an integer m ).

size N λ = +1 λ = −1 λ = − i λ = + i 4 m m + 1 m m m − 1 4 m + 1 m + 1 m m m 4 m + 2 m + 1 m + 1 m m 4 m + 3 m + 1 m + 1 m + 1 m Otherwise stated, the characteristic polynomial of U {\displaystyle \mathbf {U} } is: det ( λ λ I − − U ) = ( λ λ − − 1 ) ⌊ N + 4 4 ⌋ ( λ λ + 1 ) ⌊ N + 2 4 ⌋ ( λ λ + i ) ⌊ N + 1 4 ⌋ ( λ λ − − i ) ⌊ N − − 1 4 ⌋ .

{\displaystyle \det(\lambda I-\mathbf {U} )=(\lambda -1)^{\left\lfloor {\tfrac {N+4}{4}}\right\rfloor }(\lambda +1)^{\left\lfloor {\tfrac {N+2}{4}}\right\rfloor }(\lambda +i)^{\left\lfloor {\tfrac {N+1}{4}}\right\rfloor }(\lambda -i)^{\left\lfloor {\tfrac {N-1}{4}}\right\rfloor }.} No simple analytical formula for general eigenvectors is known.   Moreover, the eigenvectors are not unique because any linear combination of eigenvectors for the same eigenvalue is also an eigenvector for that eigenvalue.  Various researchers have proposed different choices of eigenvectors, selected to satisfy useful properties like orthogonality and to have "simple" forms (e.g., McClellan and Parks, 1972; Dickinson and Steiglitz, 1982; Grünbaum, 1982; Atakishiyev and Wolf, 1997; Candan et al.

, 2000; Hanna et al.

, 2004; Gurevich and Hadani, 2008).

One method to construct DFT eigenvectors to an eigenvalue λ λ {\displaystyle \lambda } is based on the linear combination of operators: [ 12 ] [ 13 ] [ 14 ] P λ λ = 1 4 ( I + λ λ − − 1 U + λ λ − − 2 U 2 + λ λ − − 3 U 3 ) {\displaystyle {\mathcal {P}}_{\lambda }={\frac {1}{4}}\left(\mathbf {I} +\lambda ^{-1}\mathbf {U} +\lambda ^{-2}\mathbf {U} ^{2}+\lambda ^{-3}\mathbf {U} ^{3}\right)} For an arbitrary vector v {\displaystyle \mathbf {v} } , vector u ( λ λ ) = P λ λ v {\displaystyle \mathbf {u} (\lambda )={\mathcal {P}}_{\lambda }\mathbf {v} } satisfies: U u ( λ λ ) = λ λ u ( λ λ ) {\displaystyle {\textbf {U}}\mathbf {u} (\lambda )=\lambda \mathbf {u} (\lambda )} hence, vector u ( λ λ ) {\displaystyle \mathbf {u} (\lambda )} is, indeed, the eigenvector of DFT matrix U {\displaystyle \mathbf {U} } . Operators P λ λ {\displaystyle {\mathcal {P}}_{\lambda }} project vectors onto subspaces which are orthogonal for each value of λ λ {\displaystyle \lambda } .

[ 13 ] That is, for two eigenvectors, u ( λ λ ) = P λ λ v {\displaystyle \mathbf {u} (\lambda )={\mathcal {P}}_{\lambda }\mathbf {v} } and u ′ ( λ λ ′ ) = P λ λ ′ v ′ {\displaystyle \mathbf {u} '(\lambda ')={\mathcal {P}}_{\lambda '}\mathbf {v} '} we have: u † † ( λ λ ) u ′ ( λ λ ′ ) = δ δ λ λ λ λ ′ u † † ( λ λ ) v ′ {\displaystyle \mathbf {u} ^{\dagger }(\lambda )\mathbf {u} '(\lambda ')=\delta _{\lambda \lambda '}\mathbf {u} ^{\dagger }(\lambda )\mathbf {v} '} However, in general, projection operator method does not produce orthogonal eigenvectors within one subspace.

[ 14 ] The operator P λ λ {\displaystyle {\mathcal {P}}_{\lambda }} can be seen as a matrix, whose columns are eigenvectors of U {\displaystyle \mathbf {U} } , but they are not orthogonal. When a set of vectors { v n } n = 1 , … … , N λ λ {\displaystyle \{\mathbf {v} _{n}\}_{n=1,\dots ,N_{\lambda }}} , spanning N λ λ {\displaystyle N_{\lambda }} -dimensional space (where N λ λ {\displaystyle N_{\lambda }} is the multiplicity of eigenvalue λ λ {\displaystyle \lambda } ) is chosen to generate the set of eigenvectors { u n ( λ λ ) = P λ λ v n } n = 1 , … … , N λ λ {\displaystyle \{\mathbf {u} _{n}(\lambda )={\mathcal {P}}_{\lambda }\mathbf {v} _{n}\}_{n=1,\dots ,N_{\lambda }}} to eigenvalue λ λ {\displaystyle \lambda } , the mutual orthogonality of u n ( λ λ ) {\displaystyle \mathbf {u} _{n}(\lambda )} is not guaranteed. However, the orthogonal set can be obtained by further applying orthogonalization algorithm to the set { u n ( λ λ ) } n = 1 , … … , N λ λ {\displaystyle \{\mathbf {u} _{n}(\lambda )\}_{n=1,\dots ,N_{\lambda }}} , e.g.

Gram-Schmidt process .

[ 15 ] A straightforward approach to obtain DFT eigenvectors is to discretize an eigenfunction of the continuous Fourier transform ,
of which the most famous is the Gaussian function .
Since periodic summation of the function means discretizing its frequency spectrum
and discretization means periodic summation of the spectrum,
the discretized and periodically summed Gaussian function yields an eigenvector of the discrete transform: F ( m ) = ∑ ∑ k ∈ ∈ Z exp ⁡ ⁡ ( − − π π ⋅ ⋅ ( m + N ⋅ ⋅ k ) 2 N ) .

{\displaystyle F(m)=\sum _{k\in \mathbb {Z} }\exp \left(-{\frac {\pi \cdot (m+N\cdot k)^{2}}{N}}\right).} The closed form expression for the series can be expressed by Jacobi theta functions as F ( m ) = 1 N ϑ ϑ 3 ( π π m N , exp ⁡ ⁡ ( − − π π N ) ) .

{\displaystyle F(m)={\frac {1}{\sqrt {N}}}\vartheta _{3}\left({\frac {\pi m}{N}},\exp \left(-{\frac {\pi }{N}}\right)\right).} Several other simple closed-form analytical eigenvectors for special DFT period N were found (Kong, 2008 and Casper-Yakimov, 2024): For DFT period N = 2 L + 1 = 4 K + 1, where K is an integer, the following is an eigenvector of DFT: F ( m ) = ∏ ∏ s = K + 1 L [ cos ⁡ ⁡ ( 2 π π N m ) − − cos ⁡ ⁡ ( 2 π π N s ) ] {\displaystyle F(m)=\prod _{s=K+1}^{L}\left[\cos \left({\frac {2\pi }{N}}m\right)-\cos \left({\frac {2\pi }{N}}s\right)\right]} For DFT period N = 2 L = 4 K , where K is an integer, the following are eigenvectors of DFT: F ( m ) = sin ⁡ ⁡ ( 2 π π N m ) ∏ ∏ s = K + 1 L − − 1 [ cos ⁡ ⁡ ( 2 π π N m ) − − cos ⁡ ⁡ ( 2 π π N s ) ] {\displaystyle F(m)=\sin \left({\frac {2\pi }{N}}m\right)\prod _{s=K+1}^{L-1}\left[\cos \left({\frac {2\pi }{N}}m\right)-\cos \left({\frac {2\pi }{N}}s\right)\right]} F ( m ) = cos ⁡ ⁡ ( π π N m ) ∏ ∏ s = K + 1 3 K − − 1 sin ⁡ ⁡ ( π π ( s − − m ) N ) {\displaystyle F(m)=\cos \left({\frac {\pi }{N}}m\right)\prod _{s=K+1}^{3K-1}\sin \left({\frac {\pi (s-m)}{N}}\right)} For DFT period N = 4 K - 1, where K is an integer, the following are eigenvectors of DFT: F ( m ) = sin ⁡ ⁡ ( 2 π π N m ) ∏ ∏ s = K + 1 3 K − − 2 sin ⁡ ⁡ ( π π ( s − − m ) N ) {\displaystyle F(m)=\sin \left({\frac {2\pi }{N}}m\right)\prod _{s=K+1}^{3K-2}\sin \left({\frac {\pi (s-m)}{N}}\right)} F ( m ) = ( cos ⁡ ⁡ ( 2 π π N m ) − − cos ⁡ ⁡ ( 2 π π N K ) ± ± sin ⁡ ⁡ ( 2 π π N K ) ) ∏ ∏ s = K + 1 3 K − − 2 sin ⁡ ⁡ ( π π ( s − − m ) N ) {\displaystyle F(m)=\left(\cos \left({\frac {2\pi }{N}}m\right)-\cos \left({\frac {2\pi }{N}}K\right)\pm \sin \left({\frac {2\pi }{N}}K\right)\right)\prod _{s=K+1}^{3K-2}\sin \left({\frac {\pi (s-m)}{N}}\right)} The choice of eigenvectors of the DFT matrix has become important in recent years in order to define a discrete analogue of the fractional Fourier transform —the DFT matrix can be taken to fractional powers by exponentiating the eigenvalues (e.g., Rubio and Santhanam, 2005).  For the continuous Fourier transform , the natural orthogonal eigenfunctions are the Hermite functions , so various discrete analogues of these have been employed as the eigenvectors of the DFT, such as the Kravchuk polynomials (Atakishiyev and Wolf, 1997).  The "best" choice of eigenvectors to define a fractional discrete Fourier transform remains an open question, however.

Uncertainty principles [ edit ] Probabilistic uncertainty principle [ edit ] If the random variable X k is constrained by ∑ ∑ n = 0 N − − 1 | X n | 2 = 1 , {\displaystyle \sum _{n=0}^{N-1}|X_{n}|^{2}=1,} then P n = | X n | 2 {\displaystyle P_{n}=|X_{n}|^{2}} may be considered to represent a discrete probability mass function of n , with an associated probability mass function constructed from the transformed variable, Q m = N | x m | 2 .

{\displaystyle Q_{m}=N|x_{m}|^{2}.} For the case of continuous functions P ( x ) {\displaystyle P(x)} and Q ( k ) {\displaystyle Q(k)} , the Heisenberg uncertainty principle states that D 0 ( X ) D 0 ( x ) ≥ ≥ 1 16 π π 2 {\displaystyle D_{0}(X)D_{0}(x)\geq {\frac {1}{16\pi ^{2}}}} where D 0 ( X ) {\displaystyle D_{0}(X)} and D 0 ( x ) {\displaystyle D_{0}(x)} are the variances of | X | 2 {\displaystyle |X|^{2}} and | x | 2 {\displaystyle |x|^{2}} respectively, with the equality attained in the case of a suitably normalized Gaussian distribution . Although the variances may be analogously defined for the DFT, an analogous uncertainty principle is not useful, because the uncertainty will not be shift-invariant. Still, a meaningful uncertainty principle has been introduced by Massar and Spindel.

[ 16 ] However, the Hirschman entropic uncertainty will have a useful analog for the case of the DFT.

[ 17 ] The Hirschman uncertainty principle is expressed in terms of the Shannon entropy of the two probability functions.

In the discrete case, the Shannon entropies are defined as H ( X ) = − − ∑ ∑ n = 0 N − − 1 P n ln ⁡ ⁡ P n {\displaystyle H(X)=-\sum _{n=0}^{N-1}P_{n}\ln P_{n}} and H ( x ) = − − ∑ ∑ m = 0 N − − 1 Q m ln ⁡ ⁡ Q m , {\displaystyle H(x)=-\sum _{m=0}^{N-1}Q_{m}\ln Q_{m},} and the entropic uncertainty principle becomes [ 17 ] H ( X ) + H ( x ) ≥ ≥ ln ⁡ ⁡ ( N ) .

{\displaystyle H(X)+H(x)\geq \ln(N).} The equality is obtained for P n {\displaystyle P_{n}} equal to translations and modulations of a suitably normalized Kronecker comb of period A {\displaystyle A} where A {\displaystyle A} is any exact integer divisor of N {\displaystyle N} . The probability mass function Q m {\displaystyle Q_{m}} will then be proportional to a suitably translated Kronecker comb of period B = N / A {\displaystyle B=N/A} .

[ 17 ] Deterministic uncertainty principle [ edit ] There is also a well-known deterministic uncertainty principle that uses signal sparsity (or the number of non-zero coefficients).

[ 18 ] Let ‖ x ‖ 0 {\displaystyle \left\|x\right\|_{0}} and ‖ X ‖ 0 {\displaystyle \left\|X\right\|_{0}} be the number of non-zero elements of the time and frequency sequences x 0 , x 1 , … … , x N − − 1 {\displaystyle x_{0},x_{1},\ldots ,x_{N-1}} and X 0 , X 1 , … … , X N − − 1 {\displaystyle X_{0},X_{1},\ldots ,X_{N-1}} , respectively. Then, N ≤ ≤ ‖ x ‖ 0 ⋅ ⋅ ‖ X ‖ 0 .

{\displaystyle N\leq \left\|x\right\|_{0}\cdot \left\|X\right\|_{0}.} As an immediate consequence of the inequality of arithmetic and geometric means , one also has 2 N ≤ ≤ ‖ x ‖ 0 + ‖ X ‖ 0 {\displaystyle 2{\sqrt {N}}\leq \left\|x\right\|_{0}+\left\|X\right\|_{0}} . Both uncertainty principles were shown to be tight for specifically chosen "picket-fence" sequences (discrete impulse trains), and find practical use for signal recovery applications.

[ 18 ] DFT of real and purely imaginary signals [ edit ] If x 0 , … … , x N − − 1 {\displaystyle x_{0},\ldots ,x_{N-1}} are real numbers , as they often are in practical applications, then the DFT X 0 , … … , X N − − 1 {\displaystyle X_{0},\ldots ,X_{N-1}} is even symmetric : x n ∈ ∈ R ∀ ∀ n ∈ ∈ { 0 , … … , N − − 1 } ⟹ ⟹ X k = X − − k mod N ∗ ∗ ∀ ∀ k ∈ ∈ { 0 , … … , N − − 1 } {\displaystyle x_{n}\in \mathbb {R} \quad \forall n\in \{0,\ldots ,N-1\}\implies X_{k}=X_{-k\mod N}^{*}\quad \forall k\in \{0,\ldots ,N-1\}} , where X ∗ ∗ {\displaystyle X^{*}\,} denotes complex conjugation .

It follows that for even N {\displaystyle N} X 0 {\displaystyle X_{0}} and X N / 2 {\displaystyle X_{N/2}} are real-valued, and the remainder of the DFT is completely specified by just N / 2 − − 1 {\displaystyle N/2-1} complex numbers.

If x 0 , … … , x N − − 1 {\displaystyle x_{0},\ldots ,x_{N-1}} are purely imaginary numbers, then the DFT X 0 , … … , X N − − 1 {\displaystyle X_{0},\ldots ,X_{N-1}} is odd symmetric : x n ∈ ∈ i R ∀ ∀ n ∈ ∈ { 0 , … … , N − − 1 } ⟹ ⟹ X k = − − X − − k mod N ∗ ∗ ∀ ∀ k ∈ ∈ { 0 , … … , N − − 1 } {\displaystyle x_{n}\in i\mathbb {R} \quad \forall n\in \{0,\ldots ,N-1\}\implies X_{k}=-X_{-k\mod N}^{*}\quad \forall k\in \{0,\ldots ,N-1\}} , where X ∗ ∗ {\displaystyle X^{*}\,} denotes complex conjugation .

Generalized DFT (shifted and non-linear phase) [ edit ] It is possible to shift the transform sampling in time and/or frequency domain by some real shifts a and b , respectively. This is sometimes known as a generalized DFT (or GDFT ), also called the shifted DFT or offset DFT , and has analogous properties to the ordinary DFT: X k = ∑ ∑ n = 0 N − − 1 x n e − − i 2 π π N ( k + b ) ( n + a ) k = 0 , … … , N − − 1.

{\displaystyle X_{k}=\sum _{n=0}^{N-1}x_{n}e^{-{\frac {i2\pi }{N}}(k+b)(n+a)}\quad \quad k=0,\dots ,N-1.} Most often, shifts of 1 / 2 {\displaystyle 1/2} (half a sample) are used.
While the ordinary DFT corresponds to a periodic signal in both time and frequency domains, a = 1 / 2 {\displaystyle a=1/2} produces a signal that is anti-periodic in frequency domain ( X k + N = − − X k {\displaystyle X_{k+N}=-X_{k}} ) and vice versa for b = 1 / 2 {\displaystyle b=1/2} .
Thus, the specific case of a = b = 1 / 2 {\displaystyle a=b=1/2} is known as an odd-time odd-frequency discrete Fourier transform (or O 2 DFT).
Such shifted transforms are most often used for symmetric data, to represent different boundary symmetries, and for real-symmetric data they correspond to different forms of the discrete cosine and sine transforms.

Another interesting choice is a = b = − − ( N − − 1 ) / 2 {\displaystyle a=b=-(N-1)/2} , which is called the centered DFT (or CDFT ).  The centered DFT has the useful property that, when N is a multiple of four, all four of its eigenvalues (see above) have equal multiplicities (Rubio and Santhanam, 2005) [ 19 ] The term GDFT is also used for the non-linear phase extensions of DFT. Hence, GDFT method provides a generalization for constant amplitude orthogonal block transforms including linear and non-linear phase types. GDFT is a framework
to improve time and frequency domain properties of the traditional DFT, e.g. auto/cross-correlations, by the addition of the properly designed phase shaping function (non-linear, in general) to the original linear phase functions (Akansu and Agirman-Tosun, 2010).

[ 20 ] The discrete Fourier transform can be viewed as a special case of the z-transform , evaluated on the unit circle in the complex plane; more general z-transforms correspond to complex shifts a and b above.

Discrete transforms embedded in time & space.

Multidimensional DFT [ edit ] The ordinary DFT transforms a one-dimensional sequence or array x n {\displaystyle x_{n}} that is a function of exactly one discrete variable n .  The multidimensional DFT of a multidimensional array x n 1 , n 2 , … … , n d {\displaystyle x_{n_{1},n_{2},\dots ,n_{d}}} that is a function of d discrete variables n ℓ ℓ = 0 , 1 , … … , N ℓ ℓ − − 1 {\displaystyle n_{\ell }=0,1,\dots ,N_{\ell }-1} for ℓ ℓ {\displaystyle \ell } in 1 , 2 , … … , d {\displaystyle 1,2,\dots ,d} is defined by: X k 1 , k 2 , … … , k d = ∑ ∑ n 1 = 0 N 1 − − 1 ( ω ω N 1 k 1 n 1 ∑ ∑ n 2 = 0 N 2 − − 1 ( ω ω N 2 k 2 n 2 ⋯ ⋯ ∑ ∑ n d = 0 N d − − 1 ω ω N d k d n d ⋅ ⋅ x n 1 , n 2 , … … , n d ) ) , {\displaystyle X_{k_{1},k_{2},\dots ,k_{d}}=\sum _{n_{1}=0}^{N_{1}-1}\left(\omega _{N_{1}}^{~k_{1}n_{1}}\sum _{n_{2}=0}^{N_{2}-1}\left(\omega _{N_{2}}^{~k_{2}n_{2}}\cdots \sum _{n_{d}=0}^{N_{d}-1}\omega _{N_{d}}^{~k_{d}n_{d}}\cdot x_{n_{1},n_{2},\dots ,n_{d}}\right)\right),} where ω ω N ℓ ℓ = exp ⁡ ⁡ ( − − i 2 π π / N ℓ ℓ ) {\displaystyle \omega _{N_{\ell }}=\exp(-i2\pi /N_{\ell })} as above and the d output indices run from k ℓ ℓ = 0 , 1 , … … , N ℓ ℓ − − 1 {\displaystyle k_{\ell }=0,1,\dots ,N_{\ell }-1} .  This is more compactly expressed in vector notation, where we define n = ( n 1 , n 2 , … … , n d ) {\displaystyle \mathbf {n} =(n_{1},n_{2},\dots ,n_{d})} and k = ( k 1 , k 2 , … … , k d ) {\displaystyle \mathbf {k} =(k_{1},k_{2},\dots ,k_{d})} as d -dimensional vectors of indices from 0 to N − − 1 {\displaystyle \mathbf {N} -1} , which we define as N − − 1 = ( N 1 − − 1 , N 2 − − 1 , … … , N d − − 1 ) {\displaystyle \mathbf {N} -1=(N_{1}-1,N_{2}-1,\dots ,N_{d}-1)} : X k = ∑ ∑ n = 0 N − − 1 e − − i 2 π π k ⋅ ⋅ ( n / N ) x n , {\displaystyle X_{\mathbf {k} }=\sum _{\mathbf {n} =\mathbf {0} }^{\mathbf {N} -1}e^{-i2\pi \mathbf {k} \cdot (\mathbf {n} /\mathbf {N} )}x_{\mathbf {n} }\,,} where the division n / N {\displaystyle \mathbf {n} /\mathbf {N} } is defined as n / N = ( n 1 / N 1 , … … , n d / N d ) {\displaystyle \mathbf {n} /\mathbf {N} =(n_{1}/N_{1},\dots ,n_{d}/N_{d})} to be performed element-wise, and the sum denotes the set of nested summations above.

The inverse of the multi-dimensional DFT is, analogous to the one-dimensional case, given by: x n = 1 ∏ ∏ ℓ ℓ = 1 d N ℓ ℓ ∑ ∑ k = 0 N − − 1 e i 2 π π n ⋅ ⋅ ( k / N ) X k .

{\displaystyle x_{\mathbf {n} }={\frac {1}{\prod _{\ell =1}^{d}N_{\ell }}}\sum _{\mathbf {k} =\mathbf {0} }^{\mathbf {N} -1}e^{i2\pi \mathbf {n} \cdot (\mathbf {k} /\mathbf {N} )}X_{\mathbf {k} }\,.} As the one-dimensional DFT expresses the input x n {\displaystyle x_{n}} as a superposition of sinusoids, the multidimensional DFT expresses the input as a superposition of plane waves , or multidimensional sinusoids. The direction of oscillation in space is k / N {\displaystyle \mathbf {k} /\mathbf {N} } . The amplitudes  are X k {\displaystyle X_{\mathbf {k} }} .  This decomposition is of great importance for everything from digital image processing (two-dimensional) to solving partial differential equations . The solution is broken up into plane waves.

The multidimensional DFT can be computed by the composition of a sequence of one-dimensional DFTs along each dimension.  In the two-dimensional case x n 1 , n 2 {\displaystyle x_{n_{1},n_{2}}} the N 1 {\displaystyle N_{1}} independent DFTs of the rows (i.e., along n 2 {\displaystyle n_{2}} ) are computed first to form a new array y n 1 , k 2 {\displaystyle y_{n_{1},k_{2}}} . Then the N 2 {\displaystyle N_{2}} independent DFTs of y along the columns (along n 1 {\displaystyle n_{1}} ) are computed to form the final result X k 1 , k 2 {\displaystyle X_{k_{1},k_{2}}} .  Alternatively the columns can be computed first and then the rows. The order is immaterial because the nested summations above commute .

An algorithm to compute a one-dimensional DFT is thus sufficient to efficiently compute a multidimensional DFT.  This approach is known as the row-column algorithm. There are also intrinsically multidimensional FFT algorithms .

The real-input multidimensional DFT [ edit ] For input data x n 1 , n 2 , … … , n d {\displaystyle x_{n_{1},n_{2},\dots ,n_{d}}} consisting of real numbers , the DFT outputs have a conjugate symmetry similar to the one-dimensional case above: X k 1 , k 2 , … … , k d = X N 1 − − k 1 , N 2 − − k 2 , … … , N d − − k d ∗ ∗ , {\displaystyle X_{k_{1},k_{2},\dots ,k_{d}}=X_{N_{1}-k_{1},N_{2}-k_{2},\dots ,N_{d}-k_{d}}^{*},} where the star again denotes complex conjugation and the ℓ ℓ {\displaystyle \ell } -th subscript is again interpreted modulo N ℓ ℓ {\displaystyle N_{\ell }} (for ℓ ℓ = 1 , 2 , … … , d {\displaystyle \ell =1,2,\ldots ,d} ).

Applications [ edit ] The DFT has seen wide usage across a large number of fields; we only sketch a few examples below (see also the references at the end). All applications of the DFT depend crucially on the availability of a fast algorithm to compute discrete Fourier transforms and their inverses, a fast Fourier transform .

Spectral analysis [ edit ] When the DFT is used for signal spectral analysis , the { x n } {\displaystyle \{x_{n}\}} sequence usually represents a finite set of uniformly spaced time-samples of some signal x ( t ) {\displaystyle x(t)\,} , where t {\displaystyle t} represents time.  The conversion from continuous time to samples (discrete-time) changes the underlying Fourier transform of x ( t ) {\displaystyle x(t)} into a discrete-time Fourier transform (DTFT), which generally entails a type of distortion called aliasing .  Choice of an appropriate sample-rate (see Nyquist rate ) is the key to minimizing that distortion.  Similarly, the conversion from a very long (or infinite) sequence to a manageable size entails a type of distortion called leakage , which is manifested as a loss of detail (a.k.a. resolution) in the DTFT.  Choice of an appropriate sub-sequence length is the primary key to minimizing that effect.  When the available data (and time to process it) is more than the amount needed to attain the desired frequency resolution, a standard technique is to perform multiple DFTs, for example to create a spectrogram .  If the desired result is a power spectrum and noise or randomness is present in the data, averaging the magnitude components of the multiple DFTs is a useful procedure to reduce the variance of the spectrum (also called a periodogram in this context); two examples of such techniques are the Welch method and the Bartlett method ; the general subject of estimating the power spectrum of a noisy signal is called spectral estimation .

A final source of distortion (or perhaps illusion ) is the DFT itself, because it is just a discrete sampling of the DTFT, which is a function of a continuous frequency domain.  That can be mitigated by increasing the resolution of the DFT.  That procedure is illustrated at § Sampling the DTFT .

The procedure is sometimes referred to as zero-padding , which is a particular implementation used in conjunction with the fast Fourier transform (FFT) algorithm.  The inefficiency of performing multiplications and additions with zero-valued "samples" is more than offset by the inherent efficiency of the FFT.

As already stated, leakage imposes a limit on the inherent resolution of the DTFT, so there is a practical limit to the benefit that can be obtained from a fine-grained DFT.

Steps to Perform Spectral Analysis of Audio Signal 1.Recording and Pre-Processing the Audio Signal Begin by recording the audio signal, which could be a spoken password, music , or any other sound . Once recorded, the audio signal is denoted as x[n], where n represents the discrete time index. To enhance the accuracy of spectral analysis, any unwanted noise should be reduced using appropriate filtering techniques.

2.Plotting the Original Time-Domain Signal After noise reduction, the audio signal is plotted in the time domain to visualize its characteristics over time. This helps in understanding the amplitude variations of the signal as a function of time , which provides an initial insight into the signal's behavior.

3.Transforming the Signal from Time Domain to Frequency Domain The next step is to transform the audio signal from the time domain to the frequency domain using the Discrete Fourier Transform (DFT). The DFT is defined as: X [ k ] = ∑ ∑ n = 0 N − − 1 x [ n ] ⋅ ⋅ e − − j 2 π π N k n {\displaystyle X[k]=\sum _{n=0}^{N-1}x[n]\cdot e^{-j{\frac {2\pi }{N}}kn}} where N is the total number of samples, k represents the frequency index, and X[k] is the complex-valued frequency spectrum of the signal. The DFT allows for decomposing the signal into its constituent frequency components, providing a representation that indicates which frequencies are present and their respective magnitudes.

4.Plotting the Magnitude Spectrum The magnitude of the frequency-domain representation X[k] is plotted to analyze the spectral content. The magnitude spectrum shows how the energy of the signal is distributed across different frequencies, which is useful for identifying prominent frequency components. It is calculated as: | X [ k ] | = Re ( X [ k ] ) 2 + Im ( X [ k ] ) 2 {\displaystyle |X[k]|={\sqrt {{\text{Re}}(X[k])^{2}+{\text{Im}}(X[k])^{2}}}} Example [ edit ] Analyze a discrete-time audio signal in the frequency domain using the DFT to identify its frequency components Given Data [ edit ] Let's consider a simple discrete-time audio signal represented as: x [ n ] = { 1 , 0.5 , − − 0.5 , − − 1 } {\displaystyle x[n]=\{1,0.5,-0.5,-1\}} where n represents discrete time samples of the signal.

1.Time-Domain Signal Representation The given time-domain signal is: x [ 0 ] = 1 , x [ 1 ] = 0.5 , x [ 2 ] = − − 0.5 , x [ 3 ] = − − 1 {\textstyle x[0]=1,\quad x[1]=0.5,\quad x[2]=-0.5,\quad x[3]=-1} 2.DFT Calculation [ edit ] The DFT is calculated using the formula: X [ k ] = ∑ ∑ n = 0 N − − 1 x [ n ] ⋅ ⋅ e − − j 2 π π N k n {\displaystyle X[k]=\sum _{n=0}^{N-1}x[n]\cdot e^{-j{\frac {2\pi }{N}}kn}} where N is the number of samples (in this case, N=4).

Let's compute X[k] for k=0,1,2,3 For k=0: X [ 0 ] = 1 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 0 ⋅ ⋅ 0 + 0.5 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 0 ⋅ ⋅ 1 + ( − − 0.5 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 0 ⋅ ⋅ 2 + ( − − 1 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 0 ⋅ ⋅ 3 {\displaystyle X[0]=1\cdot e^{-j{\frac {2\pi }{4}}\cdot 0\cdot 0}+0.5\cdot e^{-j{\frac {2\pi }{4}}\cdot 0\cdot 1}+(-0.5)\cdot e^{-j{\frac {2\pi }{4}}\cdot 0\cdot 2}+(-1)\cdot e^{-j{\frac {2\pi }{4}}\cdot 0\cdot 3}} X [ 0 ] = 1 + 0.5 − − 0.5 − − 1 = 0 {\displaystyle X[0]=1+0.5-0.5-1=0} For k=1: X [ 1 ] = 1 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 1 ⋅ ⋅ 0 + 0.5 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 1 ⋅ ⋅ 1 + ( − − 0.5 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 1 ⋅ ⋅ 2 + ( − − 1 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 1 ⋅ ⋅ 3 {\displaystyle X[1]=1\cdot e^{-j{\frac {2\pi }{4}}\cdot 1\cdot 0}+0.5\cdot e^{-j{\frac {2\pi }{4}}\cdot 1\cdot 1}+(-0.5)\cdot e^{-j{\frac {2\pi }{4}}\cdot 1\cdot 2}+(-1)\cdot e^{-j{\frac {2\pi }{4}}\cdot 1\cdot 3}} X [ 1 ] = 1 + 0.5 ( − − j ) + ( − − 0.5 ) ( − − 1 ) + ( − − 1 ) ( j ) {\displaystyle X[1]=1+0.5(-j)+(-0.5)(-1)+(-1)(j)} X [ 1 ] = 1 − − 0.5 j + 0.5 − − j = 1.5 − − 1.5 j {\displaystyle X[1]=1-0.5j+0.5-j=1.5-1.5j} For k=2: X [ 2 ] = 1 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 2 ⋅ ⋅ 0 + 0.5 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 2 ⋅ ⋅ 1 + ( − − 0.5 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 2 ⋅ ⋅ 2 + ( − − 1 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 2 ⋅ ⋅ 3 {\displaystyle X[2]=1\cdot e^{-j{\frac {2\pi }{4}}\cdot 2\cdot 0}+0.5\cdot e^{-j{\frac {2\pi }{4}}\cdot 2\cdot 1}+(-0.5)\cdot e^{-j{\frac {2\pi }{4}}\cdot 2\cdot 2}+(-1)\cdot e^{-j{\frac {2\pi }{4}}\cdot 2\cdot 3}} X [ 2 ] = 1 + 0.5 ( − − 1 ) + ( − − 0.5 ) ( 1 ) + ( − − 1 ) ( − − 1 ) {\displaystyle X[2]=1+0.5(-1)+(-0.5)(1)+(-1)(-1)} X [ 2 ] = 1 − − 0.5 − − 0.5 + 1 = 1 {\displaystyle X[2]=1-0.5-0.5+1=1} For k=3: X [ 3 ] = 1 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 3 ⋅ ⋅ 0 + 0.5 ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 3 ⋅ ⋅ 1 + ( − − 0.5 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 3 ⋅ ⋅ 2 + ( − − 1 ) ⋅ ⋅ e − − j 2 π π 4 ⋅ ⋅ 3 ⋅ ⋅ 3 {\displaystyle X[3]=1\cdot e^{-j{\frac {2\pi }{4}}\cdot 3\cdot 0}+0.5\cdot e^{-j{\frac {2\pi }{4}}\cdot 3\cdot 1}+(-0.5)\cdot e^{-j{\frac {2\pi }{4}}\cdot 3\cdot 2}+(-1)\cdot e^{-j{\frac {2\pi }{4}}\cdot 3\cdot 3}} X [ 3 ] = 1 + 0.5 j + ( − − 0.5 ) ( − − 1 ) + ( − − 1 ) ( − − j ) {\displaystyle X[3]=1+0.5j+(-0.5)(-1)+(-1)(-j)} X [ 3 ] = 1 + 0.5 j + 0.5 + j = 1.5 + 1.5 j {\displaystyle X[3]=1+0.5j+0.5+j=1.5+1.5j} 3.Magnitude Spectrum [ edit ] The magnitude of X[k] represents the strength of each frequency component: | X [ 0 ] | = 0 , | X [ 1 ] | = ( 1.5 ) 2 + ( − − 1.5 ) 2 = 4.5 ≈ ≈ 2.12 {\displaystyle |X[0]|=0,\quad |X[1]|={\sqrt {(1.5)^{2}+(-1.5)^{2}}}={\sqrt {4.5}}\approx 2.12} | X [ 2 ] | = 1 , | X [ 3 ] | = ( 1.5 ) 2 + ( 1.5 ) 2 = 4.5 ≈ ≈ 2.12 {\displaystyle |X[2]|=1,\quad |X[3]|={\sqrt {(1.5)^{2}+(1.5)^{2}}}={\sqrt {4.5}}\approx 2.12} The resulting frequency components indicate the distribution of signal energy at different frequencies. The peaks in the magnitude spectrum correspond to dominant frequencies in the original signal.

Optics, diffraction, and tomography [ edit ] The discrete Fourier transform is widely used with spatial frequencies in modeling the way that light, electrons, and other probes travel through optical systems and scatter from objects in two and three dimensions. The dual (direct/reciprocal) vector space of three dimensional objects further makes available a three dimensional reciprocal lattice, whose construction from translucent object shadows (via the Fourier slice theorem ) allows tomographic reconstruction of three dimensional objects with a wide range of applications e.g. in modern medicine.

Filter bank [ edit ] See § FFT filter banks and § Sampling the DTFT .

Data compression [ edit ] The field of digital signal processing relies heavily on operations in the frequency domain (i.e. on the Fourier transform). For example, several lossy image and sound compression methods employ the discrete Fourier transform: the signal is cut into short segments, each is transformed, and then the Fourier coefficients of high frequencies, which are assumed to be unnoticeable, are discarded. The decompressor computes the inverse transform based on this reduced number of Fourier coefficients. (Compression applications often use a specialized form of the DFT, the discrete cosine transform or sometimes the modified discrete cosine transform .)
Some relatively recent compression algorithms, however, use wavelet transforms , which give a more uniform compromise between time and frequency domain than obtained by chopping data into segments and transforming each segment.  In the case of JPEG2000 , this avoids the spurious image features that appear when images are highly compressed with the original JPEG .

Partial differential equations [ edit ] Discrete Fourier transforms are often used to solve partial differential equations , where again the DFT is used as an approximation for the Fourier series (which is recovered in the limit of infinite N ). The advantage of this approach is that it expands the signal in complex exponentials e i n x {\displaystyle e^{inx}} , which are eigenfunctions of differentiation: d ( e i n x ) / d x = i n e i n x {\displaystyle {{\text{d}}{\big (}e^{inx}{\big )}}/{\text{d}}x=ine^{inx}} . Thus, in the Fourier representation, differentiation is simple—we just multiply by i n {\displaystyle in} .  (However, the choice of n {\displaystyle n} is not unique due to aliasing; for the method to be convergent, a choice similar to that in the trigonometric interpolation section above should be used.) A linear differential equation with constant coefficients is transformed into an easily solvable algebraic equation. One then uses the inverse DFT to transform the result back into the ordinary spatial representation. Such an approach is called a spectral method .

Polynomial multiplication [ edit ] Suppose we wish to compute the polynomial product c ( x ) = a ( x ) · b ( x ).  The ordinary product expression for the coefficients of c involves a linear (acyclic) convolution, where indices do not "wrap around."  This can be rewritten as a cyclic convolution by taking the coefficient vectors for a ( x ) and b ( x ) with constant term first, then appending zeros so that the resultant coefficient vectors a and b have dimension d > deg( a ( x )) + deg( b ( x )) .  Then, c = a ∗ ∗ b {\displaystyle \mathbf {c} =\mathbf {a} *\mathbf {b} } Where c is the vector of coefficients for c ( x ), and the convolution operator ∗ ∗ {\displaystyle *\,} is defined so c n = ∑ ∑ m = 0 d − − 1 a m b n − − m m o d d n = 0 , 1 … … , d − − 1 {\displaystyle c_{n}=\sum _{m=0}^{d-1}a_{m}b_{n-m\ \mathrm {mod} \ d}\qquad \qquad \qquad n=0,1\dots ,d-1} But convolution becomes multiplication under the DFT: F ( c ) = F ( a ) F ( b ) {\displaystyle {\mathcal {F}}(\mathbf {c} )={\mathcal {F}}(\mathbf {a} ){\mathcal {F}}(\mathbf {b} )} Here the vector product is taken elementwise.  Thus the coefficients of the product polynomial c ( x ) are just the terms 0, ..., deg( a ( x )) + deg( b ( x )) of the coefficient vector c = F − − 1 ( F ( a ) F ( b ) ) .

{\displaystyle \mathbf {c} ={\mathcal {F}}^{-1}({\mathcal {F}}(\mathbf {a} ){\mathcal {F}}(\mathbf {b} )).} With a fast Fourier transform , the resulting algorithm takes O ( N log N ) arithmetic operations.  Due to its simplicity and speed, the Cooley–Tukey FFT algorithm , which is limited to composite sizes, is often chosen for the transform operation.  In this case, d should be chosen as the smallest integer greater than the sum of the input polynomial degrees that is factorizable into small prime factors (e.g. 2, 3, and 5, depending upon the FFT implementation).

Multiplication of large integers [ edit ] The fastest known algorithms for the multiplication of very large integers use the polynomial multiplication method outlined above.  Integers can be treated as the value of a polynomial evaluated specifically at the number base, with the coefficients of the polynomial corresponding to the digits in that base (ex.

123 = 1 ⋅ ⋅ 10 2 + 2 ⋅ ⋅ 10 1 + 3 ⋅ ⋅ 10 0 {\displaystyle 123=1\cdot 10^{2}+2\cdot 10^{1}+3\cdot 10^{0}} ).  After polynomial multiplication, a relatively low-complexity carry-propagation step completes the multiplication.

Convolution [ edit ] When data is convolved with a function with wide support, such as for downsampling by a large sampling ratio, because of the Convolution theorem and the FFT algorithm, it may be faster to transform it, multiply pointwise by the transform of the filter and then reverse transform it.  Alternatively, a good filter is obtained by simply truncating the transformed data and re-transforming the shortened data set.

Some discrete Fourier transform pairs [ edit ] Some DFT pairs x n = 1 N ∑ ∑ k = 0 N − − 1 X k e i 2 π π k n / N {\displaystyle x_{n}={\frac {1}{N}}\sum _{k=0}^{N-1}X_{k}e^{i2\pi kn/N}} X k = ∑ ∑ n = 0 N − − 1 x n e − − i 2 π π k n / N {\displaystyle X_{k}=\sum _{n=0}^{N-1}x_{n}e^{-i2\pi kn/N}} Note x n e i 2 π π n ℓ ℓ / N {\displaystyle x_{n}e^{i2\pi n\ell /N}\,} X k − − ℓ ℓ {\displaystyle X_{k-\ell }\,} Frequency shift theorem x n − − ℓ ℓ {\displaystyle x_{n-\ell }\,} X k e − − i 2 π π k ℓ ℓ / N {\displaystyle X_{k}e^{-i2\pi k\ell /N}\,} Time shift theorem x n ∈ ∈ R {\displaystyle x_{n}\in \mathbb {R} } X k = X N − − k ∗ ∗ {\displaystyle X_{k}=X_{N-k}^{*}\,} Real DFT a n {\displaystyle a^{n}\,} { N if a = e i 2 π π k / N 1 − − a N 1 − − a e − − i 2 π π k / N otherwise {\displaystyle \left\{{\begin{matrix}N&{\mbox{if }}a=e^{i2\pi k/N}\\{\frac {1-a^{N}}{1-a\,e^{-i2\pi k/N}}}&{\mbox{otherwise}}\end{matrix}}\right.} from the geometric progression formula ( N − − 1 n ) {\displaystyle {N-1 \choose n}\,} ( 1 + e − − i 2 π π k / N ) N − − 1 {\displaystyle \left(1+e^{-i2\pi k/N}\right)^{N-1}\,} from the binomial theorem { 1 W if 2 n < W or 2 ( N − − n ) < W 0 otherwise {\displaystyle \left\{{\begin{matrix}{\frac {1}{W}}&{\mbox{if }}2n<W{\mbox{ or }}2(N-n)<W\\0&{\mbox{otherwise}}\end{matrix}}\right.} { 1 if k = 0 sin ⁡ ⁡ ( π π W k N ) W sin ⁡ ⁡ ( π π k N ) otherwise {\displaystyle \left\{{\begin{matrix}1&{\mbox{if }}k=0\\{\frac {\sin \left({\frac {\pi Wk}{N}}\right)}{W\sin \left({\frac {\pi k}{N}}\right)}}&{\mbox{otherwise}}\end{matrix}}\right.} x n {\displaystyle x_{n}} is a rectangular window function of W points centered on n =0, where W is an odd integer , and X k {\displaystyle X_{k}} is a sinc -like function (specifically, X k {\displaystyle X_{k}} is a Dirichlet kernel ) ∑ ∑ j ∈ ∈ Z exp ⁡ ⁡ ( − − π π c N ⋅ ⋅ ( n + N ⋅ ⋅ j ) 2 ) {\displaystyle \sum _{j\in \mathbb {Z} }\exp \left(-{\frac {\pi }{cN}}\cdot (n+N\cdot j)^{2}\right)} c N ⋅ ⋅ ∑ ∑ j ∈ ∈ Z exp ⁡ ⁡ ( − − π π c N ⋅ ⋅ ( k + N ⋅ ⋅ j ) 2 ) {\displaystyle {\sqrt {cN}}\cdot \sum _{j\in \mathbb {Z} }\exp \left(-{\frac {\pi c}{N}}\cdot (k+N\cdot j)^{2}\right)} Discretization and periodic summation of the scaled Gaussian functions for c > 0 {\displaystyle c>0} . Since either c {\displaystyle c} or 1 c {\displaystyle {\frac {1}{c}}} is larger than one and thus warrants fast convergence of one of the two series, for large c {\displaystyle c} you may choose to compute the frequency spectrum and convert to the time domain using the discrete Fourier transform.

Generalizations [ edit ] Representation theory [ edit ] Further information: Representation theory of finite groups § Discrete Fourier transform The DFT can be interpreted as a complex-valued representation of the finite cyclic group . In other words, a sequence of n {\displaystyle n} complex numbers can be thought of as an element of n {\displaystyle n} -dimensional complex space C n {\displaystyle \mathbb {C} ^{n}} or equivalently a function f {\displaystyle f} from the finite cyclic group of order n {\displaystyle n} to the complex numbers, Z n ↦ ↦ C {\displaystyle \mathbb {Z} _{n}\mapsto \mathbb {C} } . So f {\displaystyle f} is a class function on the finite cyclic group, and thus can be expressed as a linear combination of the irreducible characters of this group, which are the roots of unity.

From this point of view, one may generalize the DFT to representation theory generally, or more narrowly to the representation theory of finite groups .

More narrowly still, one may generalize the DFT by either changing the target (taking values in a field other than the complex numbers), or the domain (a group other than a finite cyclic group), as detailed in the sequel.

Other fields [ edit ] Main articles: Discrete Fourier transform (general) and Number-theoretic transform Many of the properties of the DFT only depend on the fact that e − − i 2 π π N {\displaystyle e^{-{\frac {i2\pi }{N}}}} is a primitive root of unity , sometimes denoted ω ω N {\displaystyle \omega _{N}} or W N {\displaystyle W_{N}} (so that ω ω N N = 1 {\displaystyle \omega _{N}^{N}=1} ).  Such properties include the completeness, orthogonality, Plancherel/Parseval, periodicity, shift, convolution, and unitarity properties above, as well as many FFT algorithms. For this reason, the discrete Fourier transform can be defined by using roots of unity in fields other than the complex numbers, and such generalizations are commonly called number-theoretic transforms (NTTs) in the case of finite fields . For more information, see number-theoretic transform and discrete Fourier transform (general) .

Other finite groups [ edit ] Main article: Fourier transform on finite groups The standard DFT acts on a sequence x 0 , x 1 , ..., x N −1 of complex numbers, which can be viewed as a function {0, 1, ..., N − 1} → C . The multidimensional DFT acts on multidimensional sequences, which can be viewed as functions { 0 , 1 , … … , N 1 − − 1 } × × ⋯ ⋯ × × { 0 , 1 , … … , N d − − 1 } → → C .

{\displaystyle \{0,1,\ldots ,N_{1}-1\}\times \cdots \times \{0,1,\ldots ,N_{d}-1\}\to \mathbb {C} .} This suggests the generalization to Fourier transforms on arbitrary finite groups , which act on functions G → C where G is a finite group . In this framework, the standard DFT is seen as the Fourier transform on a cyclic group , while the multidimensional DFT is a Fourier transform on a direct sum of cyclic groups.

Further, Fourier transform can be on cosets of a group.

Alternatives [ edit ] Main article: Discrete wavelet transform Further information: Discrete wavelet transform § Comparison with Fourier transform There are various alternatives to the DFT for various applications, prominent among which are wavelets . The analog of the DFT is the discrete wavelet transform (DWT). From the point of view of time–frequency analysis , a key limitation of the Fourier transform is that it does not include location information, only frequency information, and thus has difficulty in representing transients. As wavelets have location as well as frequency, they are better able to represent location, at the expense of greater difficulty representing frequency. For details, see comparison of the discrete wavelet transform with the discrete Fourier transform .

See also [ edit ] Companion matrix DFT matrix Fast Fourier transform FFTPACK Fastest Fourier Transform in the West Generalizations of Pauli matrices Least-squares spectral analysis List of Fourier-related transforms Multidimensional transform Zak transform Quantum Fourier transform Notes [ edit ] ^ Equivalently, it is the ratio of the sampling frequency and the number of samples.

^ As a linear transformation on a finite-dimensional vector space , the DFT expression can also be written in terms of a DFT matrix ; when scaled appropriately it becomes a unitary matrix and the X k can thus be viewed as coefficients of x in an orthonormal basis .

^ The non-zero components of a DTFT of a periodic sequence is a discrete set of frequencies identical to the DFT.

^ Time reversal for the DFT means replacing n {\displaystyle n} by N − − n {\displaystyle N-n} and not n {\displaystyle n} by − − n {\displaystyle -n} to avoid negative indices.

References [ edit ] ^ Taboga, Marco (2021). "Discrete Fourier Transform - Frequencies", Lectures on matrix algebra.

https://www.statlect.com/matrix-algebra/discrete-Fourier-transform-frequencies .

^ Strang, Gilbert (May–June 1994). "Wavelets".

American Scientist .

82 (3): 250– 255.

Bibcode : 1994AmSci..82..250S .

JSTOR 29775194 .

This is the most important numerical algorithm of our lifetime...

^ Sahidullah, Md.; Saha, Goutam (Feb 2013). "A Novel Windowing Technique for Efficient Computation of MFCC for Speaker Recognition".

IEEE Signal Processing Letters .

20 (2): 149– 152.

arXiv : 1206.2437 .

Bibcode : 2013ISPL...20..149S .

doi : 10.1109/LSP.2012.2235067 .

S2CID 10900793 .

^ J. Cooley , P. Lewis, and P. Welch (1969). "The finite Fourier transform".

IEEE Transactions on Audio and Electroacoustics .

17 (2): 77– 85.

doi : 10.1109/TAU.1969.1162036 .

{{ cite journal }} :  CS1 maint: multiple names: authors list ( link ) ^ "Shift zero-frequency component to center of spectrum – MATLAB fftshift" .

mathworks.com . Natick, MA 01760: The MathWorks, Inc . Retrieved 10 March 2014 .

{{ cite web }} :  CS1 maint: location ( link ) ^ a b Proakis, John G.; Manolakis, Dimitri G. (1996), Digital Signal Processing: Principles, Algorithms and Applications (3 ed.), Upper Saddle River, NJ: Prentice-Hall International, Bibcode : 1996dspp.book.....P , ISBN 9780133942897 , sAcfAQAAIAAJ ^ Oppenheim, Alan V.

; Schafer, Ronald W.

; Buck, John R. (1999).

Discrete-time signal processing (2nd ed.). Upper Saddle River, N.J.: Prentice Hall. p.

571 .

ISBN 0-13-754920-2 .

^ McGillem, Clare D.; Cooper, George R. (1984).

Continuous and Discrete Signal and System Analysis (2 ed.). Holt, Rinehart and Winston. pp.

171– 172.

ISBN 0-03-061703-0 .

^ Amiot, Emmanuel (2016).

Music through Fourier Space . Computational Music Science. Zürich: Springer. p. 8.

doi : 10.1007/978-3-319-45581-5 .

ISBN 978-3-319-45581-5 .

S2CID 6224021 .

^ Isabelle Baraquin; Nicolas Ratier (2023).

"Uniqueness of the discrete Fourier transform" .

Signal Processing .

209 : 109041.

Bibcode : 2023SigPr.20909041B .

doi : 10.1016/j.sigpro.2023.109041 .

ISSN 0165-1684 .

^ Morton, Patrick (1980).

"On the eigenvectors of Schur's matrix" .

Journal of Number Theory .

12 (1): 122– 127.

doi : 10.1016/0022-314X(80)90083-9 .

hdl : 2027.42/23371 .

^ Bose, N. K. "Eigenvectors and eigenvalues of 1-D and nD DFT matrices." AEU — International Journal of Electronics and Communications 55.2 (2001): 131-133.

^ a b Candan, Ç. (2011). On the eigenstructure of DFT matrices [DSP education]. IEEE Signal Processing Magazine, 28(2), 105-108.

^ a b Pei, S. C., Ding, J. J., Hsue, W. L., & Chang, K. W. (2008). Generalized commuting matrices and their eigenvectors for DFTs, offset DFTs, and other periodic operations. IEEE Transactions on Signal Processing, 56(8), 3891-3904.

^ Erseghe, T., & Cariolaro, G. (2003). An orthonormal class of exact and simple DFT eigenvectors with a high degree of symmetry. IEEE transactions on signal processing, 51(10), 2527-2539.

^ Massar, S.; Spindel, P. (2008). "Uncertainty Relation for the Discrete Fourier Transform".

Physical Review Letters .

100 (19): 190401.

arXiv : 0710.0723 .

Bibcode : 2008PhRvL.100s0401M .

doi : 10.1103/PhysRevLett.100.190401 .

PMID 18518426 .

S2CID 10076374 .

^ a b c DeBrunner, Victor; Havlicek, Joseph P.; Przebinda, Tomasz; Özaydin, Murad (2005).

"Entropy-Based Uncertainty Measures for L 2 ( R n ) , ℓ ℓ 2 ( Z ) {\displaystyle L^{2}(\mathbb {R} ^{n}),\ell ^{2}(\mathbb {Z} )} , and ℓ ℓ 2 ( Z / N Z ) {\displaystyle \ell ^{2}(\mathbb {Z} /N\mathbb {Z} )} With a Hirschman Optimal Transform for ℓ ℓ 2 ( Z / N Z ) {\displaystyle \ell ^{2}(\mathbb {Z} /N\mathbb {Z} )} " (PDF) .

IEEE Transactions on Signal Processing .

53 (8): 2690.

Bibcode : 2005ITSP...53.2690D .

doi : 10.1109/TSP.2005.850329 .

S2CID 206796625 . Retrieved 2011-06-23 .

^ a b Donoho, D.L.; Stark, P.B (1989). "Uncertainty principles and signal recovery".

SIAM Journal on Applied Mathematics .

49 (3): 906– 931.

doi : 10.1137/0149053 .

S2CID 115142886 .

^ Santhanam, Balu; Santhanam, Thalanayar S.

" Discrete Gauss-Hermite functions and eigenvectors of the centered discrete Fourier transform " , Proceedings of the 32nd IEEE International Conference on Acoustics, Speech, and Signal Processing (ICASSP 2007, SPTM-P12.4), vol. III, pp. 1385-1388.

^ Akansu, Ali N.; Agirman-Tosun, Handan " Generalized Discrete Fourier Transform With Nonlinear Phase " , IEEE Transactions on Signal Processing , vol. 58, no. 9, pp. 4547–4556, Sept. 2010.

Further reading [ edit ] Brigham, E. Oran (1988).

The fast Fourier transform and its applications . Englewood Cliffs, N.J.: Prentice Hall.

ISBN 978-0-13-307505-2 .

Smith, Steven W. (1999).

"Chapter 8: The Discrete Fourier Transform" .

The Scientist and Engineer's Guide to Digital Signal Processing (Second ed.). San Diego, Calif.: California Technical Publishing.

ISBN 978-0-9660176-3-2 .

Cormen, Thomas H.

; Charles E. Leiserson ; Ronald L. Rivest ; Clifford Stein (2001). "Chapter 30: Polynomials and the FFT".

Introduction to Algorithms (Second ed.). MIT Press and McGraw-Hill. pp.

822 –848.

ISBN 978-0-262-03293-3 .

esp. section 30.2: The DFT and FFT, pp. 830–838.

P. Duhamel; B. Piron; J. M. Etcheto (1988). "On computing the inverse DFT".

IEEE Transactions on Acoustics, Speech, and Signal Processing .

36 (2): 285– 286.

doi : 10.1109/29.1519 .

J. H. McClellan; T. W. Parks (1972). "Eigenvalues and eigenvectors of the discrete Fourier transformation".

IEEE Transactions on Audio and Electroacoustics .

20 (1): 66– 74.

doi : 10.1109/TAU.1972.1162342 .

Bradley W. Dickinson; Kenneth Steiglitz (1982).

"Eigenvectors and functions of the discrete Fourier transform" (PDF) .

IEEE Transactions on Acoustics, Speech, and Signal Processing .

30 (1): 25– 31.

CiteSeerX 10.1.1.434.5279 .

doi : 10.1109/TASSP.1982.1163843 .

(Note that this paper has an apparent typo in its table of the eigenvalue multiplicities: the + i /− i columns are interchanged.  The correct table can be found in McClellan and Parks, 1972, and is easily confirmed numerically.) F. A. Grünbaum (1982).

"The eigenvectors of the discrete Fourier transform" .

Journal of Mathematical Analysis and Applications .

88 (2): 355– 363.

doi : 10.1016/0022-247X(82)90199-8 .

Natig M. Atakishiyev; Kurt Bernardo Wolf (1997). "Fractional Fourier-Kravchuk transform".

Journal of the Optical Society of America A .

14 (7): 1467– 1477.

Bibcode : 1997JOSAA..14.1467A .

doi : 10.1364/JOSAA.14.001467 .

C. Candan; M. A. Kutay; H. M.Ozaktas (2000).

"The discrete fractional Fourier transform" (PDF) .

IEEE Transactions on Signal Processing .

48 (5): 1329– 1337.

Bibcode : 2000ITSP...48.1329C .

doi : 10.1109/78.839980 .

hdl : 11693/11130 .

Archived (PDF) from the original on 2017-09-21.

Magdy Tawfik Hanna, Nabila Philip Attalla Seif, and Waleed Abd El Maguid Ahmed (2004). "Hermite-Gaussian-like eigenvectors of the discrete Fourier transform matrix based on the singular-value decomposition of its orthogonal projection matrices".

IEEE Transactions on Circuits and Systems I: Regular Papers .

51 (11): 2245– 2254.

doi : 10.1109/TCSI.2004.836850 .

S2CID 14468134 .

{{ cite journal }} :  CS1 maint: multiple names: authors list ( link ) Shamgar Gurevich; Ronny Hadani (2009). "On the diagonalization of the discrete Fourier transform".

Applied and Computational Harmonic Analysis .

27 (1): 87– 99.

arXiv : 0808.3281 .

doi : 10.1016/j.acha.2008.11.003 .

S2CID 14833478 . preprint at.

Shamgar Gurevich; Ronny Hadani; Nir Sochen (2008). "The finite harmonic oscillator and its applications to sequences, communication and radar".

IEEE Transactions on Information Theory .

54 (9): 4239– 4253.

arXiv : 0808.1495 .

Bibcode : 2008arXiv0808.1495G .

doi : 10.1109/TIT.2008.926440 .

S2CID 6037080 . preprint at.

Juan G. Vargas-Rubio; Balu Santhanam (2005). "On the multiangle centered discrete fractional Fourier transform".

IEEE Signal Processing Letters .

12 (4): 273– 276.

Bibcode : 2005ISPL...12..273V .

doi : 10.1109/LSP.2005.843762 .

S2CID 1499353 .

F.N. Kong (2008). "Analytic Expressions of Two Discrete Hermite-Gaussian Signals".

IEEE Transactions on Circuits and Systems II: Express Briefs .

55 (1): 56– 60.

doi : 10.1109/TCSII.2007.909865 .

S2CID 5154718 .

Casper, William; Yakimov, Milen (2024). "The restricted discrete Fourier transform".

arXiv : 2407.20379 [ math.CA ].

"Digital Signal Processing [ 1 ] " by Thomas Holton.

External links [ edit ] Interactive explanation of the DFT Matlab tutorial on the Discrete Fourier Transformation Archived 2016-03-04 at the Wayback Machine Interactive flash tutorial on the DFT Mathematics of the Discrete Fourier Transform by Julius O. Smith III FFTW: Fast implementation of the DFT - coded in C and under General Public License (GPL) General Purpose FFT Package:  Yet another fast DFT implementation in C & FORTRAN, permissive license Explained: The Discrete Fourier Transform Discrete Fourier Transform Indexing and shifting of Discrete Fourier Transform Discrete Fourier Transform Properties Generalized Discrete Fourier Transform (GDFT) with Nonlinear Phase v t e Digital signal processing Theory Detection theory Discrete signal Estimation theory Nyquist–Shannon sampling theorem Sub-fields Audio signal processing Digital image processing Speech processing Statistical signal processing Techniques Z-transform Advanced z-transform Matched Z-transform method Bilinear transform Constant-Q transform Discrete cosine transform (DCT) Discrete Fourier transform (DFT) Discrete-time Fourier transform (DTFT) Impulse invariance Integral transform Laplace transform Post's inversion formula Starred transform Zak transform Sampling Aliasing Anti-aliasing filter Downsampling Nyquist rate / frequency Oversampling Quantization Sampling rate Undersampling Upsampling ^ "Digital Signal Processing" .

r.search.yahoo.com .

NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐77cw5
Cached time: 20250811235017
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.031 seconds
Real time usage: 1.394 seconds
Preprocessor visited node count: 5171/1000000
Revision size: 78094/2097152 bytes
Post‐expand include size: 92351/2097152 bytes
Template argument size: 5046/2097152 bytes
Highest expansion depth: 16/100
Expensive parser function count: 7/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 127012/5000000 bytes
Lua time usage: 0.434/10.000 seconds
Lua memory usage: 6982785/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  763.624      1 -total
 27.65%  211.105     19 Template:Cite_journal
 27.11%  206.987      2 Template:Reflist
 15.16%  115.771      1 Template:Short_description
 11.80%   90.096      2 Template:Pagetype
  9.36%   71.441      1 Template:DSP
  8.93%   68.180      1 Template:Navbox
  5.49%   41.948      3 Template:Equation_box_1
  5.34%   40.806      6 Template:Cite_book
  5.20%   39.723      2 Template:NumBlk Saved in parser cache with key enwiki:pcache:8811:|#|:idhash:canonical and timestamp 20250811235017 and revision id 1304964048. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Discrete_Fourier_transform&oldid=1304964048 " Categories : Fourier analysis Digital signal processing Numerical analysis Discrete transforms Unitary operators Hidden categories: CS1 maint: multiple names: authors list CS1 maint: location Articles with short description Short description is different from Wikidata Webarchive template wayback links This page was last edited on 9 August 2025, at 06:22 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Discrete Fourier transform 29 languages Add topic

