Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Definition 2 Equivalences, elimination, and introduction 3 Negation of the operator 4 Relation to modern algebra 5 Exclusive or in natural language 6 Alternative symbols 7 Properties 8 Computer science Toggle Computer science subsection 8.1 Bitwise operation 9 Encodings 10 See also 11 Notes 12 External links Toggle the table of contents Exclusive or 33 languages العربية Català Čeština Deutsch Eesti Ελληνικά Español Esperanto فارسی Français Galego 한국어 Ido Italiano עברית Македонски Nederlands 日本語 Norsk bokmål Piemontèis Polski Português Română Русский Shqip Simple English Slovenčina Српски / srpski Suomi Svenska Українська 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia True when either but not both inputs are true "XOR" redirects here. For the logic gate, see XOR gate . For other uses, see XOR (disambiguation) .

This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Exclusive or" – news · newspapers · books · scholar · JSTOR ( May 2013 ) ( Learn how and when to remove this message ) Exclusive disjunction XOR Truth table ( 0110 ) {\displaystyle (0110)} Logic gate Normal forms Disjunctive x ¯ ¯ ⋅ ⋅ y + x ⋅ ⋅ y ¯ ¯ {\displaystyle {\overline {x}}\cdot y+x\cdot {\overline {y}}} Conjunctive ( x ¯ ¯ + y ¯ ¯ ) ⋅ ⋅ ( x + y ) {\displaystyle ({\overline {x}}+{\overline {y}})\cdot (x+y)} Zhegalkin polynomial x ⊕ ⊕ y {\displaystyle x\oplus y} Post's lattices 0-preserving yes 1-preserving no Monotone no Affine yes Self-dual no v t e Logical connectives NOT ¬ ¬ A , − − A , A ¯ ¯ , ∼ ∼ A {\displaystyle \neg A,-A,{\overline {A}},\sim A} AND A ∧ ∧ B , A ⋅ ⋅ B , A B , A & & B , A & & & & B {\displaystyle A\land B,A\cdot B,AB,A\ \&\ B,A\ \&\&\ B} NAND A ∧ ∧ ¯ ¯ B , A ↑ ↑ B , A ∣ ∣ B , A ⋅ ⋅ B ¯ ¯ {\displaystyle A{\overline {\land }}B,A\uparrow B,A\mid B,{\overline {A\cdot B}}} OR A ∨ ∨ B , A + B , A ∣ ∣ B , A ∥ ∥ B {\displaystyle A\lor B,A+B,A\mid B,A\parallel B} NOR A ∨ ∨ ¯ ¯ B , A ↓ ↓ B , A + B ¯ ¯ {\displaystyle A{\overline {\lor }}B,A\downarrow B,{\overline {A+B}}} XNOR A ⊙ ⊙ B , A ∨ ∨ ¯ ¯ B ¯ ¯ {\displaystyle A\odot B,{\overline {A{\overline {\lor }}B}}} └ equivalent A ≡ ≡ B , A ⇔ ⇔ B , A ⇋ ⇋ B {\displaystyle A\equiv B,A\Leftrightarrow B,A\leftrightharpoons B} XOR A ∨ ∨ _ _ B , A ⊕ ⊕ B {\displaystyle A{\underline {\lor }}B,A\oplus B} └ nonequivalent A ≢ B , A ⇎ B , A ↮ ↮ B {\displaystyle A\not \equiv B,A\not \Leftrightarrow B,A\nleftrightarrow B} implies A ⇒ ⇒ B , A ⊃ ⊃ B , A → → B {\displaystyle A\Rightarrow B,A\supset B,A\rightarrow B} nonimplication ( NIMPLY ) A ⇏ B , A ⊅ B , A ↛ ↛ B {\displaystyle A\not \Rightarrow B,A\not \supset B,A\nrightarrow B} converse A ⇐ ⇐ B , A ⊂ ⊂ B , A ← ← B {\displaystyle A\Leftarrow B,A\subset B,A\leftarrow B} converse nonimplication A ⇍ B , A ⊄ B , A ↚ ↚ B {\displaystyle A\not \Leftarrow B,A\not \subset B,A\nleftarrow B} Related concepts Propositional calculus Predicate logic Boolean algebra Truth table Truth function Boolean function Functional completeness Scope (logic) Applications Digital logic Programming languages Mathematical logic Philosophy of logic Category v t e Venn diagram of A ⊕ ⊕ B ⊕ ⊕ C {\displaystyle A\oplus B\oplus C} Exclusive or , exclusive disjunction , exclusive alternation , logical non-equivalence , or logical inequality is a logical operator whose negation is the logical biconditional . With two inputs, XOR is true if and only if the inputs differ (one is true, one is false). With multiple inputs, XOR is true if and only if the number of true inputs is odd .

[ 1 ] It gains the name "exclusive or" because the meaning of "or" is ambiguous when both operands are true. XOR excludes that case. Some informal ways of describing XOR are "one or the other but not both", "either one or the other", and "A or B, but not A and B".

It is symbolized by the prefix operator J {\displaystyle J} [ 2 ] : 16 and by the infix operators XOR ( / ˌ ɛ k s ˈ ɔː r / , / ˌ ɛ k s ˈ ɔː / , / ˈ k s ɔː r / or / ˈ k s ɔː / ), EOR , EXOR , ∨ ∨ ˙ ˙ {\displaystyle {\dot {\vee }}} , ∨ ∨ ¯ ¯ {\displaystyle {\overline {\vee }}} , ∨ ∨ _ _ {\displaystyle {\underline {\vee }}} , ⩛ , ⊕ ⊕ {\displaystyle \oplus } , ↮ ↮ {\displaystyle \nleftrightarrow } , and ≢ {\displaystyle \not \equiv } .

Definition [ edit ] Each row of this binary Walsh matrix is the truth table of the variadic XOR of the arguments shown on the left.

E.g. row AB corresponds to the 2-circle, and row ABC to the 3-circle Venn diagram shown above. (As in the Venn diagrams, white is false, and red is true.) The truth table of A ↮ ↮ B {\displaystyle A\nleftrightarrow B} shows that it outputs true whenever the inputs differ: A {\displaystyle A} B {\displaystyle B} A ↮ ↮ B {\displaystyle A\nleftrightarrow B} F F F F T T T F T T T F Equivalences, elimination, and introduction [ edit ] Exclusive disjunction essentially means 'either one, but not both nor none'. In other words, the statement is true if and only if one is true and the other is false. For example, if two horses are racing, then one of the two will win the race, but not both of them. The exclusive disjunction p ↮ ↮ q {\displaystyle p\nleftrightarrow q} , also denoted by p ?

⁡ ⁡ q {\displaystyle p\operatorname {?} q} or J p q {\displaystyle Jpq} , can be expressed in terms of the logical conjunction ("logical and", ∧ ∧ {\displaystyle \land } ), the disjunction ("logical or", ∨ ∨ {\displaystyle \vee } ), and the negation ( ¬ ¬ {\displaystyle \neg } ) as follows: p ↮ ↮ q = ( p ∨ ∨ q ) ∧ ∧ ¬ ¬ ( p ∧ ∧ q ) {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\vee q)\land \neg (p\land q)\end{matrix}}} The exclusive disjunction p ↮ ↮ q {\displaystyle p\nleftrightarrow q} can also be expressed in the following way: p ↮ ↮ q = ( p ∧ ∧ ¬ ¬ q ) ∨ ∨ ( ¬ ¬ p ∧ ∧ q ) {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\land \lnot q)\lor (\lnot p\land q)\end{matrix}}} This representation of XOR may be found useful when constructing a circuit or network, because it has only one ¬ ¬ {\displaystyle \lnot } operation and small number of ∧ ∧ {\displaystyle \land } and ∨ ∨ {\displaystyle \lor } operations. A proof of this identity is given below: p ↮ ↮ q = ( p ∧ ∧ ¬ ¬ q ) ∨ ∨ ( ¬ ¬ p ∧ ∧ q ) = ( ( p ∧ ∧ ¬ ¬ q ) ∨ ∨ ¬ ¬ p ) ∧ ∧ ( ( p ∧ ∧ ¬ ¬ q ) ∨ ∨ q ) = ( ( p ∨ ∨ ¬ ¬ p ) ∧ ∧ ( ¬ ¬ q ∨ ∨ ¬ ¬ p ) ) ∧ ∧ ( ( p ∨ ∨ q ) ∧ ∧ ( ¬ ¬ q ∨ ∨ q ) ) = ( ¬ ¬ p ∨ ∨ ¬ ¬ q ) ∧ ∧ ( p ∨ ∨ q ) = ¬ ¬ ( p ∧ ∧ q ) ∧ ∧ ( p ∨ ∨ q ) {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\land \lnot q)&\lor &(\lnot p\land q)\\[3pt]&=&((p\land \lnot q)\lor \lnot p)&\land &((p\land \lnot q)\lor q)\\[3pt]&=&((p\lor \lnot p)\land (\lnot q\lor \lnot p))&\land &((p\lor q)\land (\lnot q\lor q))\\[3pt]&=&(\lnot p\lor \lnot q)&\land &(p\lor q)\\[3pt]&=&\lnot (p\land q)&\land &(p\lor q)\end{matrix}}} It is sometimes useful to write p ↮ ↮ q {\displaystyle p\nleftrightarrow q} in the following way: p ↮ ↮ q = ¬ ¬ ( ( p ∧ ∧ q ) ∨ ∨ ( ¬ ¬ p ∧ ∧ ¬ ¬ q ) ) {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&\lnot ((p\land q)\lor (\lnot p\land \lnot q))\end{matrix}}} or: p ↮ ↮ q = ( p ∨ ∨ q ) ∧ ∧ ( ¬ ¬ p ∨ ∨ ¬ ¬ q ) {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\lor q)\land (\lnot p\lor \lnot q)\end{matrix}}} This equivalence can be established by applying De Morgan's laws twice to the fourth line of the above proof.

The exclusive or is also equivalent to the negation of a logical biconditional , by the rules of material implication (a material conditional is equivalent to the disjunction of the negation of its antecedent and its consequence) and material equivalence .

In summary, we have, in mathematical and in engineering notation: p ↮ ↮ q = ( p ∧ ∧ ¬ ¬ q ) ∨ ∨ ( ¬ ¬ p ∧ ∧ q ) = p q ¯ ¯ + p ¯ ¯ q = ( p ∨ ∨ q ) ∧ ∧ ( ¬ ¬ p ∨ ∨ ¬ ¬ q ) = ( p + q ) ( p ¯ ¯ + q ¯ ¯ ) = ( p ∨ ∨ q ) ∧ ∧ ¬ ¬ ( p ∧ ∧ q ) = ( p + q ) ( p q ¯ ¯ ) {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\land \lnot q)&\lor &(\lnot p\land q)&=&p{\overline {q}}+{\overline {p}}q\\[3pt]&=&(p\lor q)&\land &(\lnot p\lor \lnot q)&=&(p+q)({\overline {p}}+{\overline {q}})\\[3pt]&=&(p\lor q)&\land &\lnot (p\land q)&=&(p+q)({\overline {pq}})\end{matrix}}} Negation of the operator [ edit ] By applying the spirit of De Morgan's laws , we get: ¬ ¬ ( p ↮ ↮ q ) ≡ ≡ ¬ ¬ p ↮ ↮ q ≡ ≡ p ↮ ↮ ¬ ¬ q .

{\displaystyle \neg (p\nleftrightarrow q)\equiv \neg p\nleftrightarrow q\equiv p\nleftrightarrow \neg q.} Relation to modern algebra [ edit ] Although the operators ∧ ∧ {\displaystyle \wedge } ( conjunction ) and ∨ ∨ {\displaystyle \lor } ( disjunction ) are very useful in logic systems, they fail a more generalizable structure in the following way: The systems ( { T , F } , ∧ ∧ ) {\displaystyle (\{T,F\},\wedge )} and ( { T , F } , ∨ ∨ ) {\displaystyle (\{T,F\},\lor )} are monoids , but neither is a group . This unfortunately prevents the combination of these two systems into larger structures, such as a mathematical ring .

However, the system using exclusive or ( { T , F } , ⊕ ⊕ ) {\displaystyle (\{T,F\},\oplus )} is an abelian group .  The combination of operators ∧ ∧ {\displaystyle \wedge } and ⊕ ⊕ {\displaystyle \oplus } over elements { T , F } {\displaystyle \{T,F\}} produce the well-known two-element field F 2 {\displaystyle \mathbb {F} _{2}} .  This field can represent any logic obtainable with the system ( ∧ ∧ , ∨ ∨ ) {\displaystyle (\land ,\lor )} and has the added benefit of the arsenal of algebraic analysis tools for fields.

More specifically, if one associates F {\displaystyle F} with 0 and T {\displaystyle T} with 1, one can interpret the logical "AND" operation as multiplication on F 2 {\displaystyle \mathbb {F} _{2}} and the "XOR" operation as addition on F 2 {\displaystyle \mathbb {F} _{2}} : r = p ∧ ∧ q ⇔ ⇔ r = p ⋅ ⋅ q ( mod 2 ) r = p ⊕ ⊕ q ⇔ ⇔ r = p + q ( mod 2 ) {\displaystyle {\begin{matrix}r=p\land q&\Leftrightarrow &r=p\cdot q{\pmod {2}}\\[3pt]r=p\oplus q&\Leftrightarrow &r=p+q{\pmod {2}}\\\end{matrix}}} The description of a Boolean function as a polynomial in F 2 {\displaystyle \mathbb {F} _{2}} , using this basis, is called the function's algebraic normal form .

[ 3 ] Exclusive or in natural language [ edit ] Disjunction is often understood exclusively in natural languages . In English, the disjunctive word "or" is often understood exclusively, particularly when used with the particle "either". The English example below would normally be understood in conversation as implying that Mary is not both a singer and a poet.

[ 4 ] [ 5 ] 1. Mary is a singer or a poet.

However, disjunction can also be understood inclusively, even in combination with "either". For instance, the first example below shows that "either" can be felicitously used in combination with an outright statement that both disjuncts are true. The second example shows that the exclusive inference vanishes away under downward entailing contexts. If disjunction were understood as exclusive in this example, it would leave open the possibility that some people ate both rice and beans.

[ 4 ] 2. Mary is either a singer or a poet or both.

3. Nobody ate either rice or beans.

Examples such as the above have motivated analyses of the exclusivity inference as pragmatic conversational implicatures calculated on the basis of an inclusive semantics . Implicatures are typically cancellable and do not arise in downward entailing contexts if their calculation depends on the Maxim of Quantity . However, some researchers have treated exclusivity as a bona fide semantic entailment and proposed nonclassical logics which would validate it.

[ 4 ] This behavior of English "or" is also found in other languages. However, many languages have disjunctive constructions which are robustly exclusive such as French soit... soit .

[ 4 ] Alternative symbols [ edit ] The symbol used for exclusive disjunction varies from one field of application to the next, and even depends on the properties being emphasized in a given context of discussion.  In addition to the abbreviation "XOR", any of the following symbols may also be seen: + {\displaystyle +} was used by George Boole in 1847.

[ 6 ] Although Boole used + {\displaystyle +} mainly on classes, he also considered the case that x , y {\displaystyle x,y} are propositions in x + y {\displaystyle x+y} , and at the time + {\displaystyle +} is a connective. Furthermore, Boole used it exclusively. Although such use does not show the relationship between inclusive disjunction (for which ∨ ∨ {\displaystyle \vee } is almost fixedly used nowadays) and exclusive disjunction, and may also bring about confusions with its other uses, some classical and modern textbooks still keep such use.

[ 7 ] [ 8 ] ∨ ∨ ¯ ¯ {\displaystyle {\overline {\vee }}} was used by Christine Ladd-Franklin in 1883.

[ 9 ] Strictly speaking, Ladd used A ∨ ∨ ¯ ¯ ⁡ ⁡ B {\displaystyle A\operatorname {\overline {\vee }} B} to express " A {\displaystyle A} is-not B {\displaystyle B} " or "No A {\displaystyle A} is B {\displaystyle B} ", i.e., used ∨ ∨ ¯ ¯ {\displaystyle {\overline {\vee }}} as exclusions, while implicitly ∨ ∨ ¯ ¯ {\displaystyle {\overline {\vee }}} has the meaning of exclusive disjunction since the article is titled as "On the Algebra of Logic".

≠ {\displaystyle \not =} , denoting the negation of equivalence , was used by Ernst Schröder in 1890, [ 10 ] : 307 Although the usage of = {\displaystyle =} as equivalence could be dated back to George Boole in 1847, [ 6 ] during the 40 years after Boole, his followers, such as Charles Sanders Peirce , Hugh MacColl , Giuseppe Peano and so on, did not use ≠ {\displaystyle \not =} as non-equivalence literally which is possibly because it could be defined from negation and equivalence easily.

∘ ∘ {\displaystyle \circ } was used by Giuseppe Peano in 1894: " a ∘ ∘ b = a − − b ∪ ∪ b − − a {\displaystyle a\circ b=a-b\,\cup \,b-a} . The sign ∘ ∘ {\displaystyle \circ } corresponds to Latin aut ; the sign ∪ ∪ {\displaystyle \cup } to vel ." [ 11 ] : 10 Note that the Latin word "aut" means "exclusive or" and "vel" means "inclusive or", and that Peano use ∪ ∪ {\displaystyle \cup } as inclusive disjunction.

∨ ∨ ∨ ∨ {\displaystyle \vee \vee } was used by Izrail Solomonovich Gradshtein (Израиль Соломонович Градштейн) in 1936.

[ 12 ] : 76 ⊕ ⊕ {\displaystyle \oplus } was used by Claude Shannon in 1938.

[ 13 ] Shannon borrowed the symbol as exclusive disjunction from Edward Vermilye Huntington in 1904.

[ 14 ] Huntington borrowed the symbol from Gottfried Wilhelm Leibniz in 1890 (the original date is not definitely known, but almost certainly it is written after 1685; and 1890 is the publishing time).

[ 15 ] While both Huntington in 1904 and Leibniz in 1890 used the symbol as an algebraic operation. Furthermore, Huntington in 1904 used the symbol as inclusive disjunction (logical sum) too, and in 1933 used + {\displaystyle +} as inclusive disjunction.

[ 16 ] ≢ {\displaystyle \not \equiv } , also denoting the negation of equivalence , was used by Alonzo Church in 1944.

[ 17 ] J {\displaystyle J} (as a prefix operator , J ϕ ϕ ψ ψ {\displaystyle J\phi \psi } ) was used by Józef Maria Bocheński in 1949.

[ 2 ] : 16 Somebody [ 18 ] may mistake that it is Jan Łukasiewicz who is the first to use J {\displaystyle J} for exclusive disjunction (it seems that the mistake spreads widely), while neither in 1929 [ 19 ] nor in other works did Łukasiewicz make such use. In fact, in 1949 Bocheński introduced a system of Polish notation that names all 16 binary connectives of classical logic which is a compatible extension of the notation of Łukasiewicz in 1929, and in which J {\displaystyle J} for exclusive disjunction appeared at the first time. Bocheński's usage of J {\displaystyle J} as exclusive disjunction has no relationship with the Polish "alternatywa rozłączna" of "exclusive or" and is an accident for which see the table on page 16 of the book in 1949.

^ , the caret , has been used in several programming languages to denote the bitwise exclusive or operator, beginning with C [ 20 ] and also including C++ , C# , D , Java , Perl , Ruby , PHP , Python and Rust .

The symmetric difference of two sets S {\displaystyle S} and T {\displaystyle T} , which may be interpreted as their elementwise exclusive or, has variously been denoted as S ⊖ ⊖ T {\displaystyle S\ominus T} , S ▽ ▽ ⁡ ⁡ T {\displaystyle S\mathop {\triangledown } T} , or S △ △ ⁡ ⁡ T {\displaystyle S\mathop {\vartriangle } T} .

[ 21 ] Properties [ edit ] Commutativity : yes A ⊕ ⊕ B {\displaystyle A\oplus B} ⇔ ⇔ {\displaystyle \Leftrightarrow } B ⊕ ⊕ A {\displaystyle B\oplus A} ⇔ ⇔ {\displaystyle \Leftrightarrow } Associativity : yes A {\displaystyle ~A} ⊕ ⊕ {\displaystyle ~~~\oplus ~~~} ( B ⊕ ⊕ C ) {\displaystyle (B\oplus C)} ⇔ ⇔ {\displaystyle \Leftrightarrow } ( A ⊕ ⊕ B ) {\displaystyle (A\oplus B)} ⊕ ⊕ {\displaystyle ~~~\oplus ~~~} C {\displaystyle ~C} ⊕ ⊕ {\displaystyle ~~~\oplus ~~~} ⇔ ⇔ {\displaystyle \Leftrightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } ⊕ ⊕ {\displaystyle ~~~\oplus ~~~} Distributivity : The exclusive or does not distribute over any binary function (not even itself), but logical conjunction distributes over exclusive or .

C ∧ ∧ ( A ⊕ ⊕ B ) = ( C ∧ ∧ A ) ⊕ ⊕ ( C ∧ ∧ B ) {\displaystyle C\land (A\oplus B)=(C\land A)\oplus (C\land B)} (Conjunction and exclusive or form the multiplication and addition operations of a field GF(2) , and as in any field they obey the distributive law.) Idempotency : no A {\displaystyle ~A~} ⊕ ⊕ {\displaystyle ~\oplus ~} A {\displaystyle ~A~} ⇔ ⇔ {\displaystyle \Leftrightarrow } 0 {\displaystyle ~0~} ⇎ ⇎ {\displaystyle \nLeftrightarrow } A {\displaystyle ~A~} ⊕ ⊕ {\displaystyle ~\oplus ~} ⇔ ⇔ {\displaystyle \Leftrightarrow } ⇎ ⇎ {\displaystyle \nLeftrightarrow } Monotonicity : no A → → B {\displaystyle A\rightarrow B} ⇏ ⇏ {\displaystyle \nRightarrow } ( A ⊕ ⊕ C ) {\displaystyle (A\oplus C)} → → {\displaystyle \rightarrow } ( B ⊕ ⊕ C ) {\displaystyle (B\oplus C)} ⇏ ⇏ {\displaystyle \nRightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } → → {\displaystyle \rightarrow } Truth-preserving: no When all inputs are true, the output is not true.

A ∧ ∧ B {\displaystyle A\land B} ⇏ ⇏ {\displaystyle \nRightarrow } A ⊕ ⊕ B {\displaystyle A\oplus B} ⇏ ⇏ {\displaystyle \nRightarrow } Falsehood-preserving: yes When all inputs are false, the output is false.

A ⊕ ⊕ B {\displaystyle A\oplus B} ⇒ ⇒ {\displaystyle \Rightarrow } A ∨ ∨ B {\displaystyle A\lor B} ⇒ ⇒ {\displaystyle \Rightarrow } Walsh spectrum : (2,0,0,−2) Non- linearity : 0 The function is linear.

Involution: Exclusive or with one specified input, as a function of the other input, is an involution or self-inverse function; applying it twice leaves the variable input unchanged.

A ⊕ ⊕ B {\displaystyle ~A\oplus B~} ⊕ ⊕ {\displaystyle ~\oplus ~} B {\displaystyle ~B~} ⇔ ⇔ {\displaystyle \Leftrightarrow } A {\displaystyle ~A~} ⊕ ⊕ {\displaystyle ~\oplus ~} ⇔ ⇔ {\displaystyle \Leftrightarrow } If using binary values for true (1) and false (0), then exclusive or works exactly like addition modulo 2.

Computer science [ edit ] Traditional symbolic representation of an XOR logic gate Bitwise operation [ edit ] Main article: Bitwise operation Nimber addition is the exclusive or of nonnegative integers in binary representation. This is also the vector addition in ( Z / 2 Z ) 4 {\displaystyle (\mathbb {Z} /2\mathbb {Z} )^{4}} .

Exclusive disjunction is often used for bitwise operations. Examples: 1 XOR 1 = 0 1 XOR 0 = 1 0 XOR 1 = 1 0 XOR 0 = 0 1110 2 XOR 1001 2 = 0111 2 (this is equivalent to addition without carry ) As noted above, since exclusive disjunction is identical to addition modulo 2, the bitwise exclusive disjunction of two n -bit strings is identical to the standard vector of addition in the vector space ( Z / 2 Z ) n {\displaystyle (\mathbb {Z} /2\mathbb {Z} )^{n}} .

In computer science, exclusive disjunction has several uses: It tells whether two bits are unequal.

It is a controllable bit-flipper (the control input chooses whether or not to invert the data input).

It tells whether there is an odd number of 1 bits ( A ⊕ ⊕ B ⊕ ⊕ C ⊕ ⊕ D ⊕ ⊕ E {\displaystyle A\oplus B\oplus C\oplus D\oplus E} is true if and only if an odd number of the variables are true), which is equal to the parity bit returned by a parity function .

In logical circuits, a simple adder can be made with an XOR gate to add the numbers, and a series of AND, OR and NOT gates to create the carry output.

On some computer architectures, it is more efficient to store a zero in a register by XOR-ing the register with itself (bits XOR-ed with themselves are always zero) than to load and store the value zero.

In cryptography , XOR is sometimes used as a simple, self-inverse mixing function, such as in one-time pad or Feistel network systems.

[ citation needed ] XOR is also heavily used in block ciphers such as AES (Rijndael) or Serpent and in block cipher implementation (CBC, CFB, OFB or CTR).

In simple threshold-activated artificial neural networks , modeling the XOR function requires a second layer because XOR is not a linearly separable function.

Similarly, XOR can be used in generating entropy pools for hardware random number generators .  The XOR operation preserves randomness, meaning that a random bit XORed with a non-random bit will result in a random bit.  Multiple sources of potentially random data can be combined using XOR, and the unpredictability of the output is guaranteed to be at least as good as the best individual source.

[ 22 ] XOR is used in RAID 3–6 for creating parity information.  For example, RAID can "back up" bytes 10011100 2 and 01101100 2 from two (or more) hard drives by XORing the just mentioned bytes, resulting in ( 11110000 2 ) and writing it to another drive.  Under this method, if any one of the three hard drives are lost, the lost byte can be re-created by XORing bytes from the remaining drives. For instance,  if the drive containing 01101100 2 is lost, 10011100 2 and 11110000 2 can be XORed to recover the lost byte.

[ 23 ] XOR is also used to detect an overflow in the result of a signed binary arithmetic operation. If the leftmost retained bit of the result is not the same as the infinite number of digits to the left, then that means overflow occurred. XORing those two bits will give a "1" if there is an overflow.

XOR can be used to swap two numeric variables in computers, using the XOR swap algorithm ; however this is regarded as more of a curiosity and not encouraged in practice.

XOR linked lists leverage XOR properties in order to save space to represent doubly linked list data structures.

In computer graphics , XOR-based drawing methods are often used to manage such items as bounding boxes and cursors on systems without alpha channels or overlay planes.

Encodings [ edit ] It is also called "not left-right arrow" ( \nleftrightarrow ) in LaTeX -based markdown ( ↮ ↮ {\displaystyle \nleftrightarrow } ). Apart from the ASCII codes, the operator is encoded at U+22BB ⊻ XOR ( &veebar; ) and U+2295 ⊕ CIRCLED PLUS ( &CirclePlus;, &oplus; ), both in block mathematical operators .

See also [ edit ] Material conditional • (Paradox) Affirming a disjunct Ampheck Controlled NOT gate Disjunctive syllogism Inclusive or Involution List of Boolean algebra topics Logical graph Logical value Propositional calculus Rule 90 XOR cipher XOR gate XOR linked list Notes [ edit ] ^ Germundsson, Roger; Weisstein, Eric.

"XOR" .

MathWorld .

Wolfram Research . Retrieved 17 June 2015 .

^ a b Bocheński, J. M. (1949).

Précis de logique mathématique (PDF) (in French). The Netherlands: F. G. Kroonder, Bussum, Pays-Bas.

Translated as Bocheński, J. M. (1959).

A Precis of Mathematical Logic . Translated by Bird, O. Dordrecht, Holland: D. Reidel Publishing Company.

doi : 10.1007/978-94-017-0592-9 .

ISBN 978-90-481-8329-6 .

{{ cite book }} : ISBN / Date incompatibility ( help ) ^ Joux, Antoine (2009).

"9.2: Algebraic normal forms of Boolean functions" .

Algorithmic Cryptanalysis . CRC Press. pp.

285– 286.

ISBN 9781420070033 .

^ a b c d Aloni, Maria (2016).

"Disjunction" . In Zalta, Edward N. (ed.).

The Stanford Encyclopedia of Philosophy (Winter 2016 ed.). Metaphysics Research Lab, Stanford University . Retrieved 2020-09-03 .

^ Jennings quotes numerous authors saying that the word "or" has an exclusive sense. See Chapter 3, "The First Myth of 'Or'": Jennings, R. E. (1994).

The Genealogy of Disjunction . New York: Oxford University Press.

^ a b Boole, G. (1847).

The Mathematical Analysis of Logic, Being an Essay Towards a Calculus of Deductive Reasoning . Cambridge/London: Macmillan, Barclay, & Macmillan/George Bell. p. 17.

^ Enderton, H. (2001) [1972].

A Mathematical Introduction to Logic (2 ed.). San Diego, New York, Boston, London, Toronto, Sydney and Tokyo: A Harcourt Science and Technology Company. p. 51.

^ Rautenberg, W. (2010) [2006].

A Concise Introduction to Mathematical Logic (3 ed.). New York, Dordrecht, Heidelberg and London: Springer. p. 3.

^ Ladd, Christine (1883).

"On the Algebra of Logic" . In Peirce, C. S. (ed.).

Studies in Logic by Members of the Johns Hopkins University . Boston: Little, Brown & Company. pp.

17– 71.

^ Schröder, E. (1890).

Vorlesungen über die Algebra der Logik (Exakte Logik), Erster Band (in German). Leipzig: Druck und Verlag B. G. Teubner.

Reprinted by Thoemmes Press in 2000.

^ Peano, G. (1894).

Notations de logique mathématique. Introduction au formulaire de mathématique . Turin: Fratelli Boccna.

Reprinted in Peano, G. (1958).

Opere Scelte, Volume II . Roma: Edizioni Cremonese. pp.

123– 176.

^ ГРАДШТЕЙН, И. С. (1959) [1936].

ПРЯМАЯ И ОБРАТНАЯ ТЕОРЕМЫ: ЭЛЕМЕНТЫ АЛГЕБРЫ ЛОГИКИ (in Russian) (3 ed.). МОСКВА: ГОСУДАРСТВЕННОЕ ИЗДАТЕЛЬСТВО ФИЗИКа-МАТЕМАТИЧЕСКОЙ ЛИТЕРАТУРЫ.

Translated as Gradshtein, I. S. (1963).

Direct and Converse Theorems: The Elements of Symbolic Logic . Translated by Boddington, T. Oxford, London, New York and Paris: Pergamon Press.

^ Shannon, C. E.

(1938).

"A Symbolic Analysis of Relay and Switching Circuits" (PDF) .

Transactions of the American Institute of Electrical Engineers .

57 (12): 713– 723.

doi : 10.1109/T-AIEE.1938.5057767 .

hdl : 1721.1/11173 .

S2CID 51638483 .

^ Huntington, E. V. (1904). "Sets of Independent Postulates for the Algebra of Logic".

Transactions of the American Mathematical Society .

5 (3): 288– 309.

doi : 10.1090/S0002-9947-1904-1500675-4 .

^ Leibniz, G. W. (1890) [16??/17??]. Gerhardt, C. I. (ed.).

Die philosophischen Schriften, Siebter Band (in German). Berlin: Weidmann. p. 237 . Retrieved 7 July 2023 .

^ Huntington, E. V. (1933). "New Sets of Independent Postulates for the Algebra of Logic, With Special Reference to Whitehead and Russell's Principia Mathematica".

Transactions of the American Mathematical Society .

35 (1): 274– 304.

^ Church, A. (1996) [1944].

Introduction to Mathematical Logic . New Jersey: Princeton University Press. p. 37.

^ Craig, Edward (1998).

Routledge Encyclopedia of Philosophy, Volume 8 .

Taylor & Francis . p. 496.

ISBN 978-0-41507310-3 .

^ Łukasiewicz, Jan (1929).

Elementy logiki matematycznej [ Elements of Mathematical Logic ] (in Polish) (1 ed.). Warsaw, Poland: Państwowe Wydawnictwo Naukowe .

^ Kernighan, Brian W.

; Ritchie, Dennis M.

(1978).

"2.9: Bitwise logical operators" .

The C Programming Language . Prentice-Hall. pp.

44– 46.

^ Weisstein, Eric W.

"Symmetric Difference" .

MathWorld .

^ Davies, Robert B (28 February 2002).

"Exclusive OR (XOR) and hardware random number generators" (PDF) . Retrieved 28 August 2013 .

^ Nobel, Rickard (26 July 2011).

"How RAID 5 actually works" . Retrieved 23 March 2017 .

External links [ edit ] Wikimedia Commons has media related to Exclusive disjunction .

Look up exclusive or or XOR in Wiktionary, the free dictionary.

All About XOR Proofs of XOR properties and applications of XOR, CS103: Mathematical Foundations of Computing, Stanford University v t e Common logical connectives Tautology / True ⊤ ⊤ {\displaystyle \top } Alternative denial ( NAND gate ) ∧ ∧ ¯ ¯ {\displaystyle {\overline {\wedge }}} Converse implication ⇐ ⇐ {\displaystyle \Leftarrow } Implication ( IMPLY gate ) ⇒ ⇒ {\displaystyle \Rightarrow } Disjunction ( OR gate ) ∨ ∨ {\displaystyle \lor } Negation ( NOT gate ) ¬ ¬ {\displaystyle \neg } Exclusive or ( XOR gate ) ⊕ ⊕ {\displaystyle \oplus } Biconditional ( XNOR gate ) ⊙ ⊙ {\displaystyle \odot } Statement ( Digital buffer ) Joint denial ( NOR gate ) ∨ ∨ ¯ ¯ {\displaystyle {\overline {\vee }}} Nonimplication ( NIMPLY gate ) ⇏ ⇏ {\displaystyle \nRightarrow } Converse nonimplication ⇍ ⇍ {\displaystyle \nLeftarrow } Conjunction ( AND gate ) ∧ ∧ {\displaystyle \land } Contradiction / False ⊥ ⊥ {\displaystyle \bot } Philosophy portal NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐vhb2t
Cached time: 20250817214233
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.978 seconds
Real time usage: 1.339 seconds
Preprocessor visited node count: 6764/1000000
Revision size: 32044/2097152 bytes
Post‐expand include size: 139640/2097152 bytes
Template argument size: 11078/2097152 bytes
Highest expansion depth: 24/100
Expensive parser function count: 9/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 131566/5000000 bytes
Lua time usage: 0.522/10.000 seconds
Lua memory usage: 11924696/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  903.713      1 -total
 10.72%   96.884     17 Template:Cite_book
 10.24%   92.561      3 Template:Cite_web
  8.43%   76.175      2 Template:Unichar
  8.15%   73.653      1 Template:Short_description
  7.93%   71.666      2 Template:Unichar/main
  7.67%   69.312      1 Template:Infobox_logical_connective
  7.46%   67.389      1 Template:Infobox
  6.50%   58.785      1 Template:Logical_connectives_sidebar
  6.32%   57.156      1 Template:Refimprove Saved in parser cache with key enwiki:pcache:105979:|#|:idhash:canonical and timestamp 20250817214233 and revision id 1298506682. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Exclusive_or&oldid=1298506682 " Categories : Dichotomies Logical connectives Semantics Hidden categories: CS1 French-language sources (fr) CS1 errors: ISBN date CS1 German-language sources (de) CS1 Russian-language sources (ru) CS1 Polish-language sources (pl) Articles with short description Short description matches Wikidata Articles needing additional references from May 2013 All articles needing additional references All articles with unsourced statements Articles with unsourced statements from June 2015 Commons category link from Wikidata Pages that use a deprecated format of the math tags This page was last edited on 2 July 2025, at 23:11 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Exclusive or 33 languages Add topic

