Title: Computer programming

URL Source: https://en.wikipedia.org/wiki/Computer_programming

Published Time: 2001-10-25T21:53:15Z

Markdown Content:
**Computer programming** or **coding** is the composition of sequences of instructions, called [programs](https://en.wikipedia.org/wiki/Computer_program "Computer program"), that [computers](https://en.wikipedia.org/wiki/Computer "Computer") can follow to perform tasks.[[1]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-1)[[2]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-2) It involves designing and implementing [algorithms](https://en.wikipedia.org/wiki/Algorithm "Algorithm"), step-by-step specifications of procedures, by writing [code](https://en.wikipedia.org/wiki/Source_code "Source code") in one or more [programming languages](https://en.wikipedia.org/wiki/Programming_language "Programming language"). [Programmers](https://en.wikipedia.org/wiki/Programmer "Programmer") typically use [high-level programming languages](https://en.wikipedia.org/wiki/High-level_programming_language "High-level programming language") that are more easily intelligible to humans than [machine code](https://en.wikipedia.org/wiki/Machine_code "Machine code"), which is directly executed by the [central processing unit](https://en.wikipedia.org/wiki/Central_processing_unit "Central processing unit"). Proficient programming usually requires expertise in several different subjects, including knowledge of the [application domain](https://en.wikipedia.org/wiki/Domain_(software_engineering) "Domain (software engineering)"), details of programming languages and generic code [libraries](https://en.wikipedia.org/wiki/Library_(computing) "Library (computing)"), specialized algorithms, and [formal logic](https://en.wikipedia.org/wiki/Logic#Formal_logic "Logic").

Auxiliary tasks accompanying and related to programming include [analyzing requirements](https://en.wikipedia.org/wiki/Requirements_analysis "Requirements analysis"), [testing](https://en.wikipedia.org/wiki/Software_testing "Software testing"), [debugging](https://en.wikipedia.org/wiki/Debugging "Debugging") (investigating and fixing problems), implementation of [build systems](https://en.wikipedia.org/wiki/Build_automation "Build automation"), and management of derived [artifacts](https://en.wikipedia.org/wiki/Artifact_(software_development) "Artifact (software development)"), such as programs' [machine code](https://en.wikipedia.org/wiki/Machine_code "Machine code"). While these are sometimes considered programming, often the term _[software development](https://en.wikipedia.org/wiki/Software\_development "Software development")_ is used for this larger overall process – with the terms _programming_, _implementation_, and _coding_ reserved for the writing and editing of code per se. Sometimes software development is known as _[software engineering](https://en.wikipedia.org/wiki/Software\_engineering "Software engineering")_, especially when it employs [formal methods](https://en.wikipedia.org/wiki/Formal_methods "Formal methods") or follows an [engineering design process](https://en.wikipedia.org/wiki/Engineering_design_process "Engineering design process").

[![Image 1](https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Ada_lovelace.jpg/250px-Ada_lovelace.jpg)](https://en.wikipedia.org/wiki/File:Ada_lovelace.jpg)

[Ada Lovelace](https://en.wikipedia.org/wiki/Ada_Lovelace "Ada Lovelace"), whose notes were added to the end of [Luigi Menabrea](https://en.wikipedia.org/wiki/Luigi_Menabrea "Luigi Menabrea")'s paper included the first [algorithm](https://en.wikipedia.org/wiki/Algorithm "Algorithm") designed for processing by [Charles Babbage](https://en.wikipedia.org/wiki/Charles_Babbage "Charles Babbage")'s [Analytical Engine](https://en.wikipedia.org/wiki/Analytical_Engine "Analytical Engine"). She is often recognized as history's first computer programmer.

[Programmable devices](https://en.wikipedia.org/wiki/Program_(machine) "Program (machine)") have existed for centuries. As early as the 9th century, a programmable [music sequencer](https://en.wikipedia.org/wiki/Music_sequencer "Music sequencer") was invented by the Persian [Banu Musa](https://en.wikipedia.org/wiki/Banu_Musa "Banu Musa") brothers, who described an automated mechanical [flute](https://en.wikipedia.org/wiki/Flute "Flute") player in the _[Book of Ingenious Devices](https://en.wikipedia.org/wiki/Book\_of\_Ingenious\_Devices "Book of Ingenious Devices")_.[[3]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-Koetsier-3)[[4]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-4) In 1206, the Arab engineer [Al-Jazari](https://en.wikipedia.org/wiki/Al-Jazari "Al-Jazari") invented a programmable [drum machine](https://en.wikipedia.org/wiki/Drum_machine "Drum machine") where a musical mechanical [automaton](https://en.wikipedia.org/wiki/Automaton "Automaton") could be made to play different rhythms and drum patterns, via pegs and [cams](https://en.wikipedia.org/wiki/Cam_(mechanism) "Cam (mechanism)").[[5]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-5)[[6]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-Sharkey-6) In 1801, the [Jacquard loom](https://en.wikipedia.org/wiki/Jacquard_loom "Jacquard loom") could produce entirely different weaves by changing the "program" – a series of [pasteboard](https://en.wikipedia.org/wiki/Card_stock "Card stock") cards with holes punched in them.

[Code-breaking](https://en.wikipedia.org/wiki/Code-breaking "Code-breaking") algorithms have also existed for centuries. In the 9th century, the [Arab mathematician](https://en.wikipedia.org/wiki/Mathematics_in_medieval_Islam "Mathematics in medieval Islam")[Al-Kindi](https://en.wikipedia.org/wiki/Al-Kindi "Al-Kindi") described a [cryptographic](https://en.wikipedia.org/wiki/Cryptographic "Cryptographic") algorithm for deciphering encrypted code, in _A Manuscript on Deciphering Cryptographic Messages_. He gave the first description of [cryptanalysis](https://en.wikipedia.org/wiki/Cryptanalysis "Cryptanalysis") by [frequency analysis](https://en.wikipedia.org/wiki/Frequency_analysis "Frequency analysis"), the earliest code-breaking algorithm.[[7]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-7)

The first [computer program](https://en.wikipedia.org/wiki/Computer_program "Computer program") is generally dated to 1843 when mathematician [Ada Lovelace](https://en.wikipedia.org/wiki/Ada_Lovelace "Ada Lovelace") published an [algorithm](https://en.wikipedia.org/wiki/Algorithm "Algorithm") to calculate a sequence of [Bernoulli numbers](https://en.wikipedia.org/wiki/Bernoulli_numbers "Bernoulli numbers"), intended to be carried out by [Charles Babbage](https://en.wikipedia.org/wiki/Charles_Babbage "Charles Babbage")'s [Analytical Engine](https://en.wikipedia.org/wiki/Analytical_Engine "Analytical Engine").[[8]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-IEEE-8) The algorithm, which was conveyed through notes on a translation of Luigi Federico Menabrea's paper on the analytical engine was mainly conceived by Lovelace as can be discerned through her correspondence with Babbage. However, Charles Babbage himself had written a program for the AE in 1837.[[9]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-IEEE2021-9)[[10]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-IEEE2024-10) Lovelace was also the first to see a broader application for the analytical engine beyond mathematical calculations.

[![Image 2](https://upload.wikimedia.org/wikipedia/commons/thumb/8/86/PunchCardDecks.agr.jpg/250px-PunchCardDecks.agr.jpg)](https://en.wikipedia.org/wiki/File:PunchCardDecks.agr.jpg)

Data and instructions were once stored on external [punched cards](https://en.wikipedia.org/wiki/Punched_card "Punched card"), which were kept in order and arranged in program decks.

In the 1880s, [Herman Hollerith](https://en.wikipedia.org/wiki/Herman_Hollerith "Herman Hollerith") invented the concept of storing _data_ in machine-readable form.[[11]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-11) Later a [control panel](https://en.wikipedia.org/wiki/Plugboard "Plugboard") (plug board) added to his 1906 Type I Tabulator allowed it to be programmed for different jobs, and by the late 1940s, [unit record equipment](https://en.wikipedia.org/wiki/Unit_record_equipment "Unit record equipment") such as the [IBM 602](https://en.wikipedia.org/wiki/IBM_602 "IBM 602") and [IBM 604](https://en.wikipedia.org/wiki/IBM_604 "IBM 604"), were programmed by control panels in a similar way, as were the first [electronic computers](https://en.wikipedia.org/wiki/Electronic_computer "Electronic computer"). However, with the concept of the [stored-program computer](https://en.wikipedia.org/wiki/Stored-program_computer "Stored-program computer") introduced in 1949, both programs and data were stored and manipulated in the same way in [computer memory](https://en.wikipedia.org/wiki/Computer_memory "Computer memory").[[12]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-12)

[Machine code](https://en.wikipedia.org/wiki/Machine_code "Machine code") was the language of early programs, written in the [instruction set](https://en.wikipedia.org/wiki/Instruction_set_architecture "Instruction set architecture") of the particular machine, often in [binary](https://en.wikipedia.org/wiki/Binary_numeral_system "Binary numeral system") notation. [Assembly languages](https://en.wikipedia.org/wiki/Assembly_language "Assembly language") were soon developed that let the programmer specify instructions in a text format (e.g., ADD X, TOTAL), with abbreviations for each operation code and meaningful names for specifying addresses. However, because an assembly language is little more than a different notation for a machine language, two machines with [different instruction sets](https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures "Comparison of instruction set architectures") also have different assembly languages.

[![Image 3](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/IBM402plugboard.Shrigley.wireside.jpg/250px-IBM402plugboard.Shrigley.wireside.jpg)](https://en.wikipedia.org/wiki/File:IBM402plugboard.Shrigley.wireside.jpg)

Wired [control panel](https://en.wikipedia.org/wiki/Plugboard "Plugboard") for an [IBM 402 Accounting Machine](https://en.wikipedia.org/wiki/IBM_402_Accounting_Machine "IBM 402 Accounting Machine"). Wires connect pulse streams from the card reader to counters and other internal logic and ultimately to the printer.

[High-level languages](https://en.wikipedia.org/wiki/High-level_language "High-level language") made the process of developing a program simpler and more understandable, and less bound to the underlying [hardware](https://en.wikipedia.org/wiki/Computer_hardware "Computer hardware"). The first compiler related tool, the [A-0 System](https://en.wikipedia.org/wiki/A-0_System "A-0 System"), was developed in 1952[[13]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-13) by [Grace Hopper](https://en.wikipedia.org/wiki/Grace_Hopper "Grace Hopper"), who also coined the term 'compiler'.[[14]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-wikles1968-14)[[15]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-computerhistory.org-15)[FORTRAN](https://en.wikipedia.org/wiki/FORTRAN "FORTRAN"), the first widely used high-level language to have a functional implementation, came out in 1957,[[16]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-bergstein-16) and many other languages were soon developed—in particular, [COBOL](https://en.wikipedia.org/wiki/COBOL "COBOL") aimed at commercial data processing, and [Lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language) "Lisp (programming language)") for computer research.

These compiled languages allow the programmer to write programs in terms that are syntactically richer, and more capable of [abstracting](https://en.wikipedia.org/wiki/Abstraction_(computer_science) "Abstraction (computer science)") the code, making it easy to target varying machine instruction sets via compilation declarations and [heuristics](https://en.wikipedia.org/wiki/Heuristic_(computer_science) "Heuristic (computer science)"). Compilers harnessed the power of computers to make programming easier[[16]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-bergstein-16) by allowing programmers to specify calculations by entering a formula using [infix notation](https://en.wikipedia.org/wiki/Infix_notation "Infix notation").

Programs were mostly entered using punched cards or [paper tape](https://en.wikipedia.org/wiki/Paper_tape "Paper tape"). By the late 1960s, [data storage devices](https://en.wikipedia.org/wiki/Data_storage_device "Data storage device") and [computer terminals](https://en.wikipedia.org/wiki/Computer_terminal "Computer terminal") became inexpensive enough that programs could be created by typing directly into the computers. [Text editors](https://en.wikipedia.org/wiki/Text_editor "Text editor") were also developed that allowed changes and corrections to be made much more easily than with [punched cards](https://en.wikipedia.org/wiki/Punched_card_sorter "Punched card sorter").

### Quality requirements

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=6 "Edit section: Quality requirements")]

Whatever the approach to development may be, the final program must satisfy some fundamental properties. The following properties are among the most important:[[17]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-17)[[18]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-18)

*   [Reliability](https://en.wikipedia.org/wiki/Reliability_engineering#Software_reliability "Reliability engineering"): how often the results of a program are correct. This depends on conceptual correctness of algorithms and minimization of programming mistakes, such as mistakes in resource management (e.g., [buffer overflows](https://en.wikipedia.org/wiki/Buffer_overflow "Buffer overflow") and [race conditions](https://en.wikipedia.org/wiki/Race_condition "Race condition")) and logic errors (such as division by zero or [off-by-one errors](https://en.wikipedia.org/wiki/Off-by-one_error "Off-by-one error")).
*   [Robustness](https://en.wikipedia.org/wiki/Robustness_(computer_science) "Robustness (computer science)"): how well a program anticipates problems due to errors (not bugs). This includes situations such as incorrect, inappropriate or corrupt data, unavailability of needed resources such as memory, operating system services, and network connections, user error, and unexpected power outages.
*   [Usability](https://en.wikipedia.org/wiki/Usability "Usability"): the [ergonomics](https://en.wikipedia.org/wiki/Ergonomics "Ergonomics") of a program: the ease with which a person can use the program for its intended purpose or in some cases even unanticipated purposes. Such issues can make or break its success even regardless of other issues. This involves a wide range of textual, graphical, and sometimes hardware elements that improve the clarity, intuitiveness, cohesiveness, and completeness of a program's user interface.
*   [Portability](https://en.wikipedia.org/wiki/Software_portability "Software portability"): the range of [computer hardware](https://en.wikipedia.org/wiki/Computer_hardware "Computer hardware") and [operating system](https://en.wikipedia.org/wiki/Operating_system "Operating system") platforms on which the source code of a program can be [compiled](https://en.wikipedia.org/wiki/Compiled "Compiled")/[interpreted](https://en.wikipedia.org/wiki/Interpreter_(computing) "Interpreter (computing)") and run. This depends on differences in the programming facilities provided by the different platforms, including hardware and operating system resources, expected behavior of the hardware and operating system, and availability of platform-specific compilers (and sometimes libraries) for the language of the source code.
*   [Maintainability](https://en.wikipedia.org/wiki/Maintainability "Maintainability"): the ease with which a program can be modified by its present or future developers in order to make improvements or to customize, fix [bugs](https://en.wikipedia.org/wiki/Software_bug "Software bug") and [security holes](https://en.wikipedia.org/wiki/Vulnerability_(computing) "Vulnerability (computing)"), or adapt it to new environments. Good practices[[19]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-19) during initial development make the difference in this regard. This quality may not be directly apparent to the end user but it can significantly affect the fate of a program over the long term.
*   [Efficiency](https://en.wikipedia.org/wiki/Algorithmic_efficiency "Algorithmic efficiency")/[performance](https://en.wikipedia.org/wiki/Performance_engineering "Performance engineering"): Measure of system resources a program consumes (processor time, memory space, slow devices such as disks, network bandwidth and to some extent even user interaction): the less, the better. This also includes careful management of resources, for example cleaning up [temporary files](https://en.wikipedia.org/wiki/Temporary_file "Temporary file") and eliminating [memory leaks](https://en.wikipedia.org/wiki/Memory_leak "Memory leak"). This is often discussed under the shadow of a chosen programming language. Although the language certainly affects performance, even slower languages, such as [Python](https://en.wikipedia.org/wiki/Python_(programming_language) "Python (programming language)"), can execute programs instantly from a human perspective. Speed, resource usage, and performance are important for programs that [bottleneck](https://en.wikipedia.org/wiki/Bottleneck_(software) "Bottleneck (software)") the system, but efficient use of programmer time is also important and is related to cost: more hardware may be cheaper.

Using [automated tests](https://en.wikipedia.org/wiki/Test_automation "Test automation") and [fitness functions](https://en.wikipedia.org/wiki/Fitness_function "Fitness function") can help to maintain some of the aforementioned attributes.[[20]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-20)

### Readability of source code

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=7 "Edit section: Readability of source code")]

In computer programming, [readability](https://en.wikipedia.org/wiki/Readability "Readability") refers to the ease with which a human reader can comprehend the purpose, [control flow](https://en.wikipedia.org/wiki/Control_flow "Control flow"), and operation of [source code](https://en.wikipedia.org/wiki/Source_code "Source code"). It affects the aspects of quality above, including portability, usability and most importantly maintainability.

Readability is important because programmers spend the majority of their time reading, trying to understand, reusing, and modifying existing source code, rather than writing new source code. Unreadable code often leads to bugs, inefficiencies, and [duplicated code](https://en.wikipedia.org/wiki/Code_duplication "Code duplication"). A study found that a few simple readability transformations made code shorter and drastically reduced the time to understand it.[[21]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-21)

Following a consistent [programming style](https://en.wikipedia.org/wiki/Programming_style "Programming style") often helps readability. However, readability is more than just programming style. Many factors, having little or nothing to do with the ability of the computer to efficiently compile and execute the code, contribute to readability.[[22]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-22) Some of these factors include:

*   Different [indent styles](https://en.wikipedia.org/wiki/Indent_style "Indent style") (whitespace)
*   [Comments](https://en.wikipedia.org/wiki/Comment_(computer_programming) "Comment (computer programming)")
*   [Decomposition](https://en.wikipedia.org/wiki/Decomposition_(computer_science) "Decomposition (computer science)")
*   [Naming conventions](https://en.wikipedia.org/wiki/Naming_conventions_(programming) "Naming conventions (programming)") for objects (such as variables, classes, functions, procedures, etc.)

The [presentation](https://en.wikipedia.org/wiki/Separation_of_presentation_and_content "Separation of presentation and content") aspects of this (such as indents, line breaks, color highlighting, and so on) are often handled by the [source code editor](https://en.wikipedia.org/wiki/Source_code_editor "Source code editor"), but the content aspects reflect the programmer's talent and skills.

Various [visual programming languages](https://en.wikipedia.org/wiki/Visual_programming_language "Visual programming language") have also been developed with the intent to resolve readability concerns by adopting non-traditional approaches to code structure and display. [Integrated development environments](https://en.wikipedia.org/wiki/Integrated_development_environment "Integrated development environment") (IDEs) aim to integrate all such help. Techniques like [Code refactoring](https://en.wikipedia.org/wiki/Code_refactoring "Code refactoring") can enhance readability.

### Algorithmic complexity

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=8 "Edit section: Algorithmic complexity")]

The academic field and the engineering practice of computer programming are concerned with discovering and implementing the most efficient algorithms for a given class of problems. For this purpose, algorithms are classified into _orders_ using [Big O notation](https://en.wikipedia.org/wiki/Big_O_notation "Big O notation"), which expresses resource use—such as execution time or memory consumption—in terms of the size of an input. Expert programmers are familiar with a variety of well-established algorithms and their respective complexities and use this knowledge to choose algorithms that are best suited to the circumstances.

The first step in most formal software development processes is [requirements analysis](https://en.wikipedia.org/wiki/Requirements_analysis "Requirements analysis"), followed by testing to determine value modeling, implementation, and failure elimination (debugging). There exist a lot of different approaches for each of those tasks. One approach popular for requirements analysis is [Use Case](https://en.wikipedia.org/wiki/Use_Case "Use Case") analysis. Many programmers use forms of [Agile software development](https://en.wikipedia.org/wiki/Agile_software_development "Agile software development") where the various stages of formal software development are more integrated together into short cycles that take a few weeks rather than years. There are many approaches to the Software development process.

Popular modeling techniques include Object-Oriented Analysis and Design ([OOAD](https://en.wikipedia.org/wiki/OOAD "OOAD")) and Model-Driven Architecture ([MDA](https://en.wikipedia.org/wiki/Model-Driven_Architecture "Model-Driven Architecture")). The Unified Modeling Language ([UML](https://en.wikipedia.org/wiki/Unified_Modeling_Language "Unified Modeling Language")) is a notation used for both the OOAD and MDA.

A similar technique used for database design is Entity-Relationship Modeling ([ER Modeling](https://en.wikipedia.org/wiki/Entity-Relationship_Model "Entity-Relationship Model")).

Implementation techniques include imperative languages ([object-oriented](https://en.wikipedia.org/wiki/Object-oriented_programming "Object-oriented programming") or [procedural](https://en.wikipedia.org/wiki/Procedural_programming "Procedural programming")), [functional languages](https://en.wikipedia.org/wiki/Functional_programming "Functional programming"), and [logic programming](https://en.wikipedia.org/wiki/Logic_programming "Logic programming") languages.

### Measuring language usage

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=10 "Edit section: Measuring language usage")]

It is very difficult to determine what are the most popular modern programming languages. Methods of measuring programming language popularity include: counting the number of job advertisements that mention the language,[[23]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-23) the number of books sold and courses teaching the language (this overestimates the importance of newer languages), and estimates of the number of existing lines of code written in the language (this underestimates the number of users of business languages such as COBOL).

Some languages are popular for writing particular kinds of applications, while other languages are used to write many different kinds of applications. For example, [COBOL](https://en.wikipedia.org/wiki/COBOL "COBOL") is still prevalent in corporate data centers[[24]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-24) often on large [mainframe computers](https://en.wikipedia.org/wiki/Mainframe_computer "Mainframe computer"), [Fortran](https://en.wikipedia.org/wiki/Fortran "Fortran") in engineering applications, [scripting languages](https://en.wikipedia.org/wiki/Scripting_language "Scripting language") in [Web](https://en.wikipedia.org/wiki/World_Wide_Web "World Wide Web") development, and [C](https://en.wikipedia.org/wiki/C_(programming_language) "C (programming language)") in [embedded software](https://en.wikipedia.org/wiki/Embedded_software "Embedded software"). Many applications use a mix of several languages in their construction and use. New languages are generally designed around the syntax of a prior language with new functionality added, (for example [C++](https://en.wikipedia.org/wiki/C%2B%2B "C++") adds object-orientation to C, and [Java](https://en.wikipedia.org/wiki/Java_(programming_language) "Java (programming language)") adds memory management and [bytecode](https://en.wikipedia.org/wiki/Bytecode "Bytecode") to C++, but as a result, loses efficiency and the ability for low-level manipulation).

[![Image 4](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/First_Computer_Bug%2C_1945.jpg/250px-First_Computer_Bug%2C_1945.jpg)](https://en.wikipedia.org/wiki/File:First_Computer_Bug,_1945.jpg)

The first known actual bug causing a problem in a computer was a moth, trapped inside a Harvard mainframe, recorded in a log book entry dated September 9, 1947.[[25]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-25) "Bug" was already a common term for a software defect when this insect was found.

Debugging is a very important task in the software development process since having defects in a program can have significant consequences for its users. Some languages are more prone to some kinds of faults because their specification does not require compilers to perform as much checking as other languages. Use of a [static code analysis](https://en.wikipedia.org/wiki/Static_code_analysis "Static code analysis") tool can help detect some possible problems. Normally the first step in debugging is to attempt to reproduce the problem. This can be a non-trivial task, for example as with parallel processes or some unusual software bugs. Also, specific user environment and usage history can make it difficult to reproduce the problem.

After the bug is reproduced, the input of the program may need to be simplified to make it easier to debug. For example, when a bug in a compiler can make it crash when [parsing](https://en.wikipedia.org/wiki/Parsing "Parsing") some large source file, a simplification of the test case that results in only few lines from the original source file can be sufficient to reproduce the same crash. Trial-and-error/divide-and-conquer is needed: the programmer will try to remove some parts of the original test case and check if the problem still exists. When debugging the problem in a GUI, the programmer can try to skip some user interaction from the original problem description and check if the remaining actions are sufficient for bugs to appear. Scripting and [breakpointing](https://en.wikipedia.org/wiki/Breakpoint "Breakpoint") are also part of this process.

Debugging is often done with [IDEs](https://en.wikipedia.org/wiki/Integrated_development_environment "Integrated development environment"). Standalone debuggers like [GDB](https://en.wikipedia.org/wiki/GDB "GDB") are also used, and these often provide less of a visual environment, usually using a [command line](https://en.wikipedia.org/wiki/Command_line "Command line"). Some text editors such as [Emacs](https://en.wikipedia.org/wiki/Emacs "Emacs") allow GDB to be invoked through them, to provide a visual environment.

Programming languages
---------------------

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=12 "Edit section: Programming languages")]

Different programming languages support different styles of programming (called _[programming paradigms](https://en.wikipedia.org/wiki/Programming\_paradigm "Programming paradigm")_). The choice of language used is subject to many considerations, such as company policy, suitability to task, availability of third-party packages, or individual preference. Ideally, the programming language best suited for the task at hand will be selected. Trade-offs from this ideal involve finding enough programmers who know the language to build a team, the availability of compilers for that language, and the efficiency with which programs written in a given language execute. Languages form an approximate spectrum from "low-level" to "high-level"; "low-level" languages are typically more machine-oriented and faster to execute, whereas "high-level" languages are more abstract and easier to use but execute less quickly. It is usually easier to code in "high-level" languages than in "low-level" ones. Programming languages are essential for software development. They are the building blocks for all software, from the simplest applications to the most sophisticated ones.

[Allen Downey](https://en.wikipedia.org/wiki/Allen_Downey "Allen Downey"), in his book _How To Think Like A Computer Scientist_, writes:

The details look different in different languages, but a few basic instructions appear in just about every language: 
*   Input: Gather data from the keyboard, a file, or some other device.
*   Output: Display data on the screen or send data to a file or other device.
*   Arithmetic: Perform basic arithmetical operations like addition and multiplication.
*   Conditional Execution: Check for certain conditions and execute the appropriate sequence of statements.
*   Repetition: Perform some action repeatedly, usually with some variation.

Many computer languages provide a mechanism to call functions provided by [shared libraries](https://en.wikipedia.org/wiki/Shared_library "Shared library"). Provided the functions in a library follow the appropriate run-time conventions (e.g., method of passing [arguments](https://en.wikipedia.org/wiki/Argument_(computer_science) "Argument (computer science)")), then these functions may be written in any other language.

Learning to program
-------------------

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=13 "Edit section: Learning to program")]

Learning to program has a long history related to professional standards and practices, academic initiatives and curriculum, and commercial books and materials for students, self-taught learners, hobbyists, and others who desire to create or customize software for personal use. Since the 1960s, learning to program has taken on the characteristics of a _popular movement_, with the rise of academic disciplines, inspirational leaders, collective identities, and strategies to grow the movement and make institutionalize change.[[26]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-26) Through these social ideals and educational agendas, learning to code has become important not just for scientists and engineers, but for millions of citizens who have come to believe that creating software is beneficial to society and its members.

In 1957, there were approximately 15,000 computer programmers employed in the U.S., a figure that accounts for 80% of the world's active developers. In 2014, there were approximately 18.5 million professional programmers in the world, of which 11 million can be considered professional and 7.5 million student or hobbyists.[[27]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-27) Before the rise of the commercial Internet in the mid-1990s, most programmers learned about software construction through books, magazines, user groups, and informal instruction methods, with academic coursework and corporate training playing important roles for professional workers.[[28]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-28)

The first book containing specific instructions about how to program a computer may have been [Maurice Wilkes](https://en.wikipedia.org/wiki/Maurice_Wilkes "Maurice Wilkes"), [David Wheeler](https://en.wikipedia.org/wiki/David_Wheeler_(computer_scientist) "David Wheeler (computer scientist)"), and [Stanley Gill's](https://en.wikipedia.org/wiki/Stanley_Gill "Stanley Gill")_Preparation of Programs for an Electronic Digital Computer_ (1951). The book offered a selection of common subroutines for handling basic operations on the EDSAC, one of the world's first stored-program computers.

When high-level languages arrived, they were introduced by numerous books and materials that explained language keywords, managing program flow, working with data, and other concepts. These languages included [FLOW-MATIC](https://en.wikipedia.org/wiki/FLOW-MATIC "FLOW-MATIC"), COBOL, FORTRAN, [ALGOL](https://en.wikipedia.org/wiki/ALGOL "ALGOL"), [Pascal](https://en.wikipedia.org/wiki/Pascal_(programming_language) "Pascal (programming language)"), [BASIC](https://en.wikipedia.org/wiki/BASIC "BASIC"), and C. An example of an early programming primer from these years is [Marshal H. Wrubel's](https://en.wikipedia.org/wiki/Marshal_Henry_Wrubel "Marshal Henry Wrubel")_A Primer of Programming for Digital Computers_ (1959), which included step-by-step instructions for filling out coding sheets, creating punched cards, and using the keywords in IBM's early FORTRAN system.[[29]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-29)[Daniel McCracken's](https://en.wikipedia.org/wiki/Daniel_McCracken "Daniel McCracken")_A Guide to FORTRAN Programming_ (1961) presented FORTRAN to a larger audience, including students and office workers.

In 1961, [Alan Perlis](https://en.wikipedia.org/wiki/Alan_Perlis "Alan Perlis") suggested that all university freshmen at Carnegie Technical Institute take a course in computer programming.[[30]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-30) His advice was published in the popular technical journal _Computers and Automation_, which became a regular source of information for professional programmers.

Programmers soon had a range of learning texts at their disposal. _Programmer's references_ listed keywords and functions related to a language, often in alphabetical order, as well as technical information about compilers and related systems. An early example was IBM's _Programmers' Reference Manual: the FORTRAN Automatic Coding System for the IBM 704 EDPM_ (1956).

Over time, the genre of _programmer's guides_ emerged, which presented the features of a language in tutorial or step by step format. Many early primers started with a program known as ["Hello, World"](https://en.wikipedia.org/wiki/Helloworld "Helloworld"), which presented the shortest program a developer could create in a given system. Programmer's guides then went on to discuss core topics like declaring variables, data types, formulas, flow control, user-defined functions, manipulating data, and other topics.

Early and influential programmer's guides included [John G. Kemeny](https://en.wikipedia.org/wiki/John_G._Kemeny "John G. Kemeny") and [Thomas E. Kurtz's](https://en.wikipedia.org/wiki/Thomas_E._Kurtz "Thomas E. Kurtz")_BASIC Programming_ (1967), Kathleen Jensen and [Niklaus Wirth's](https://en.wikipedia.org/wiki/Niklaus_Wirth "Niklaus Wirth")_The Pascal User Manual and Report_ (1971), and [Brian W. Kernighan](https://en.wikipedia.org/wiki/Brian_W._Kernighan "Brian W. Kernighan") and [Dennis Ritchie's](https://en.wikipedia.org/wiki/Dennis_Ritchie "Dennis Ritchie")_The C Programming Language_ (1978). Similar books for popular audiences (but with a much lighter tone) included [Bob Albrecht's](https://en.wikipedia.org/wiki/Bob_Albrecht "Bob Albrecht")_My Computer Loves Me When I Speak BASIC_ (1972), Al Kelley and Ira Pohl's _A Book on C_ (1984), and [Dan Gookin's](https://en.wikipedia.org/wiki/Dan_Gookin "Dan Gookin")_C for Dummies_ (1994).

Beyond language-specific primers, there were numerous books and academic journals that introduced professional programming practices. Many were designed for university courses in computer science, software engineering, or related disciplines. [Donald Knuth's](https://en.wikipedia.org/wiki/Donald_Knuth "Donald Knuth")_[The Art of Computer Programming](https://en.wikipedia.org/wiki/The\_Art\_of\_Computer\_Programming "The Art of Computer Programming")_ (1968 and later), presented hundreds of computational algorithms and their analysis. _The Elements of Programming Style_ (1974), by Brian W. Kernighan and [P. J. Plauger](https://en.wikipedia.org/wiki/P._J._Plauger "P. J. Plauger"), concerned itself with programming _style_, the idea that programs should be written not only to satisfy the compiler but human readers. [Jon Bentley's](https://en.wikipedia.org/wiki/Jon_Bentley_(computer_scientist) "Jon Bentley (computer scientist)")_Programming Pearls_ (1986) offered practical advice about the art and craft of programming in professional and academic contexts. Texts specifically designed for students included Doug Cooper and Michael Clancy's _Oh Pascal!_ (1982), [Alfred Aho's](https://en.wikipedia.org/wiki/Alfred_Aho "Alfred Aho")_Data Structures and Algorithms_ (1983), and Daniel Watt's _Learning with Logo_ (1983).

### Technical publishers

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=15 "Edit section: Technical publishers")]

As personal computers became mass-market products, thousands of trade books and magazines sought to teach professional, hobbyist, and casual users to write computer programs. A sample of these learning resources includes _BASIC Computer Games, Microcomputer Edition_ (1978), by [David Ahl](https://en.wikipedia.org/wiki/David_Ahl "David Ahl"); _Programming the Z80_ (1979), by [Rodnay Zaks](https://en.wikipedia.org/wiki/Rodnay_Zaks "Rodnay Zaks"); _Programmer's CP/M Handbook_ (1983), by [Andy Johnson-Laird](https://en.wikipedia.org/wiki/Andy_Johnson-Laird "Andy Johnson-Laird"); _C Primer Plus_ (1984), by [Mitchell Waite](https://en.wikipedia.org/wiki/Mitchell_Waite "Mitchell Waite") and The Waite Group; _The Peter Norton Programmer's Guide to the IBM PC_ (1985), by [Peter Norton](https://en.wikipedia.org/wiki/Peter_Norton "Peter Norton"); _Advanced MS-DOS_ (1986), by Ray Duncan; _[Learn BASIC Now](https://en.wikipedia.org/wiki/Learn\_BASIC\_Now "Learn BASIC Now")_ (1989), by [Michael Halvorson](https://en.wikipedia.org/wiki/Michael_Halvorson "Michael Halvorson") and David Rygymr; _Programming Windows_ (1992 and later), by [Charles Petzold](https://en.wikipedia.org/wiki/Charles_Petzold "Charles Petzold"); _Code Complete: A Practical Handbook for Software Construction_ (1993), by [Steve McConnell](https://en.wikipedia.org/wiki/Steve_McConnell "Steve McConnell"); and _Tricks of the Game-Programming Gurus_ (1994), by [André LaMothe](https://en.wikipedia.org/wiki/Andre_LaMothe "Andre LaMothe").

The PC software industry spurred the creation of numerous book publishers that offered programming primers and tutorials, as well as books for advanced software developers.[[31]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-31) These publishers included [Addison-Wesley](https://en.wikipedia.org/wiki/Addison-Wesley "Addison-Wesley"), [IDG](https://en.wikipedia.org/wiki/IDG "IDG"), [Macmillan Inc.](https://en.wikipedia.org/wiki/Macmillan_Inc. "Macmillan Inc."), [McGraw-Hill](https://en.wikipedia.org/wiki/McGraw-Hill "McGraw-Hill"), [Microsoft Press](https://en.wikipedia.org/wiki/Microsoft_Press "Microsoft Press"), [O'Reilly Media](https://en.wikipedia.org/wiki/O%27Reilly_Media "O'Reilly Media"), [Prentice Hall](https://en.wikipedia.org/wiki/Prentice_Hall "Prentice Hall"), Sybex, Ventana Press, Waite Group Press, [Wiley](https://en.wikipedia.org/wiki/Wiley_(publisher) "Wiley (publisher)"), [Wrox Press](https://en.wikipedia.org/wiki/Wrox_Press "Wrox Press"), and [Ziff-Davis](https://en.wikipedia.org/wiki/Ziff-Davis "Ziff-Davis").

[Computer magazines](https://en.wikipedia.org/wiki/Computer_magazine "Computer magazine") and journals also provided learning content for professional and hobbyist programmers. A partial list of these resources includes _[Amiga World](https://en.wikipedia.org/wiki/Amiga\_World "Amiga World")_, _[Byte (magazine)](https://en.wikipedia.org/wiki/Byte\_(magazine) "Byte (magazine)")_, _[Communications of the ACM](https://en.wikipedia.org/wiki/Communications\_of\_the\_ACM "Communications of the ACM")_, _[Computer (magazine)](https://en.wikipedia.org/wiki/Computer\_(magazine) "Computer (magazine)")_, _[Compute!](https://en.wikipedia.org/wiki/Compute! "Compute!")_, _Computer Language (magazine)_, _[Computers and Electronics](https://en.wikipedia.org/wiki/Computers\_and\_Electronics "Computers and Electronics")_, _[Dr. Dobb's Journal](https://en.wikipedia.org/wiki/Dr.\_Dobb%27s\_Journal "Dr. Dobb's Journal")_, _[IEEE Software](https://en.wikipedia.org/wiki/IEEE\_Software "IEEE Software")_, _[Macworld](https://en.wikipedia.org/wiki/Macworld "Macworld")_, _[PC Magazine](https://en.wikipedia.org/wiki/PC\_Magazine "PC Magazine")_, _[PC/Computing](https://en.wikipedia.org/wiki/PC/Computing "PC/Computing")_, and _[UnixWorld](https://en.wikipedia.org/wiki/UnixWorld "UnixWorld")_.

### Digital learning / online resources

[[edit](https://en.wikipedia.org/w/index.php?title=Computer_programming&action=edit&section=16 "Edit section: Digital learning / online resources")]

Between 2000 and 2010, computer book and magazine publishers declined significantly as providers of programming instruction, as programmers moved to Internet resources to expand their access to information. This shift brought forward new digital products and mechanisms to learn programming skills. During the transition, digital books from publishers transferred information that had traditionally been delivered in print to new and expanding audiences.[[32]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-32)

Important Internet resources for learning to code included blogs, wikis, videos, online databases, subscription sites, and custom websites focused on coding skills. New commercial resources included [YouTube](https://en.wikipedia.org/wiki/YouTube "YouTube") videos, Lynda.com tutorials (later [LinkedIn Learning](https://en.wikipedia.org/wiki/LinkedIn_Learning "LinkedIn Learning")), [Khan Academy](https://en.wikipedia.org/wiki/Khan_Academy "Khan Academy"), [Codecademy](https://en.wikipedia.org/wiki/Codecademy "Codecademy"), [GitHub](https://en.wikipedia.org/wiki/GitHub "GitHub"), [W3Schools](https://en.wikipedia.org/wiki/W3Schools "W3Schools"), [Codewars](https://en.wikipedia.org/wiki/Codewars "Codewars"), and numerous [coding bootcamps](https://en.wikipedia.org/wiki/Coding_bootcamp "Coding bootcamp").

Most software development systems and [game engines](https://en.wikipedia.org/wiki/Game_engine "Game engine") included rich online help resources, including [integrated development environments](https://en.wikipedia.org/wiki/Integrated_development_environment "Integrated development environment") (IDEs), [context-sensitive help](https://en.wikipedia.org/wiki/Context-sensitive_help "Context-sensitive help"), [APIs](https://en.wikipedia.org/wiki/API "API"), and other digital resources. Commercial [software development kits](https://en.wikipedia.org/wiki/Software_development_kit "Software development kit") (SDKs) also provided a collection of software development tools and documentation in one installable package.

Commercial and non-profit organizations published learning websites for developers, created blogs, and established newsfeeds and social media resources about programming. Corporations like [Apple](https://en.wikipedia.org/wiki/Apple_Inc. "Apple Inc."), [Microsoft](https://en.wikipedia.org/wiki/Microsoft "Microsoft"), [Oracle](https://en.wikipedia.org/wiki/Oracle_Corporation "Oracle Corporation"), [Google](https://en.wikipedia.org/wiki/Google "Google"), and [Amazon](https://en.wikipedia.org/wiki/Amazon_(company) "Amazon (company)") built corporate websites providing support for programmers, including resources like the [Microsoft Developer Network](https://en.wikipedia.org/wiki/Microsoft_Developer_Network "Microsoft Developer Network") (MSDN). Contemporary movements like Hour of Code ([Code.org](https://en.wikipedia.org/wiki/Code.org "Code.org")) show how learning to program has become associated with digital learning strategies, education agendas, and corporate philanthropy.

Computer programmers are those who write computer software. Their jobs usually involve:

*   Prototyping
*   Coding
*   Debugging
*   [Documentation](https://en.wikipedia.org/wiki/Documentation "Documentation")
*   [Integration](https://en.wikipedia.org/wiki/System_integration "System integration")
*   [Maintenance](https://en.wikipedia.org/wiki/Software_maintenance "Software maintenance")
*   Requirements analysis
*   [Software architecture](https://en.wikipedia.org/wiki/Software_architecture "Software architecture")
*   Software testing
*   [Specification](https://en.wikipedia.org/wiki/Specification "Specification")

Although programming has been presented in the media as a somewhat mathematical subject, some research shows that good programmers have strong skills in natural human languages, and that learning to code is similar to learning a [foreign language](https://en.wikipedia.org/wiki/Foreign_language "Foreign language").[[33]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-33)[[34]](https://en.wikipedia.org/wiki/Computer_programming#cite_note-34)

*   [Code smell](https://en.wikipedia.org/wiki/Code_smell "Code smell")
*   [Computer networking](https://en.wikipedia.org/wiki/Computer_network "Computer network")
*   [Competitive programming](https://en.wikipedia.org/wiki/Competitive_programming "Competitive programming")
*   [List of software programming journals](https://en.wikipedia.org/wiki/List_of_software_programming_journals "List of software programming journals")
*   [List of free and open-source software packages for programming](https://en.wikipedia.org/wiki/List_of_free_and_open-source_software_packages#Programming_language_support "List of free and open-source software packages")
*   [Programming best practices](https://en.wikipedia.org/wiki/Programming_best_practices "Programming best practices")
*   [Systems programming](https://en.wikipedia.org/wiki/Systems_programming "Systems programming")

1.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-1)**Bebbington, Shaun (2014). ["What is coding"](https://yearofcodes.tumblr.com/what-is-coding). _Tumblr_. [Archived](https://web.archive.org/web/20200429195646/https://yearofcodes.tumblr.com/what-is-coding) from the original on April 29, 2020. Retrieved March 3, 2014.
2.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-2)**Bebbington, Shaun (2014). ["What is programming"](https://yearofcodes.tumblr.com/what-is-programming). _Tumblr_. [Archived](https://web.archive.org/web/20200429195958/https://yearofcodes.tumblr.com/what-is-programming) from the original on April 29, 2020. Retrieved March 3, 2014.
3.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-Koetsier_3-0)**Koetsier, Teun (2001). "On the prehistory of programmable machines: musical automata, looms, calculators". _Mechanism and Machine Theory_. **36** (5). Elsevier: 589–603. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1016/S0094-114X(01)00005-2](https://doi.org/10.1016%2FS0094-114X%2801%2900005-2).
4.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-4)**Kapur, Ajay; Carnegie, Dale; Murphy, Jim; Long, Jason (2017). ["Loudspeakers Optional: A history of non-loudspeaker-based electroacoustic music"](https://doi.org/10.1017%2FS1355771817000103). _[Organised Sound](https://en.wikipedia.org/wiki/Organised\_Sound "Organised Sound")_. **22** (2). [Cambridge University Press](https://en.wikipedia.org/wiki/Cambridge_University_Press "Cambridge University Press"): 195–205. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1017/S1355771817000103](https://doi.org/10.1017%2FS1355771817000103). [ISSN](https://en.wikipedia.org/wiki/ISSN_(identifier) "ISSN (identifier)")[1355-7718](https://search.worldcat.org/issn/1355-7718).
5.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-5)**Fowler, Charles B. (October 1967). "The Museum of Music: A History of Mechanical Instruments". _Music Educators Journal_. **54** (2): 45–49. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.2307/3391092](https://doi.org/10.2307%2F3391092). [JSTOR](https://en.wikipedia.org/wiki/JSTOR_(identifier) "JSTOR (identifier)")[3391092](https://www.jstor.org/stable/3391092). [S2CID](https://en.wikipedia.org/wiki/S2CID_(identifier) "S2CID (identifier)")[190524140](https://api.semanticscholar.org/CorpusID:190524140).
6.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-Sharkey_6-0)**[Noel Sharkey](https://en.wikipedia.org/wiki/Noel_Sharkey "Noel Sharkey") (2007), [A 13th Century Programmable Robot](https://web.archive.org/web/20070629182810/http://www.shef.ac.uk/marcoms/eview/articles58/robot.html), [University of Sheffield](https://en.wikipedia.org/wiki/University_of_Sheffield "University of Sheffield")
7.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-7)**Dooley, John F. (2013). _A Brief History of Cryptology and Cryptographic Algorithms_. Springer Science & Business Media. pp.12–3. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[9783319016283](https://en.wikipedia.org/wiki/Special:BookSources/9783319016283 "Special:BookSources/9783319016283").
8.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-IEEE_8-0)**Fuegi, J.; Francis, J. (2003). "Lovelace & Babbage and the Creation of the 1843 'notes'". _IEEE Annals of the History of Computing_. **25** (4): 16. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1109/MAHC.2003.1253887](https://doi.org/10.1109%2FMAHC.2003.1253887).
9.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-IEEE2021_9-0)**Rojas, R. (2021). "The Computer Programs of Charles Babbage". _IEEE Annals of the History of Computing_. **43** (1): 6–18. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1109/MAHC.2020.3045717](https://doi.org/10.1109%2FMAHC.2020.3045717).
10.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-IEEE2024_10-0)**Rojas, R. (2024). ["The First Computer Program"](https://refubium.fu-berlin.de/bitstream/fub188/44090/1/3624731.pdf)(PDF). _Communications of the ACM_. **67** (6): 78–81. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/3624731](https://doi.org/10.1145%2F3624731).
11.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-11)**da Cruz, Frank (March 10, 2020). ["Columbia University Computing History – Herman Hollerith"](http://www.columbia.edu/acis/history/hollerith.html). _Columbia University_. Columbia.edu. [Archived](https://web.archive.org/web/20200429210742/http://www.columbia.edu/cu/computinghistory/hollerith.html) from the original on April 29, 2020. Retrieved April 25, 2010.
12.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-12)**["Memory & Storage | Timeline of Computer History | Computer History Museum"](https://www.computerhistory.org/timeline/memory-storage/). _www.computerhistory.org_. [Archived](https://web.archive.org/web/20210527071533/https://www.computerhistory.org/timeline/memory-storage/) from the original on May 27, 2021. Retrieved June 3, 2021.
13.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-13)**Ridgway, Richard (1952). "Compiling routines". _Proceedings of the 1952 ACM national meeting (Toronto) on - ACM '52_. pp.1–5. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/800259.808980](https://doi.org/10.1145%2F800259.808980). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[9781450379250](https://en.wikipedia.org/wiki/Special:BookSources/9781450379250 "Special:BookSources/9781450379250"). [S2CID](https://en.wikipedia.org/wiki/S2CID_(identifier) "S2CID (identifier)")[14878552](https://api.semanticscholar.org/CorpusID:14878552).
14.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-wikles1968_14-0)**[Maurice V. Wilkes](https://en.wikipedia.org/wiki/Maurice_V._Wilkes "Maurice V. Wilkes"). 1968. Computers Then and Now. Journal of the Association for Computing Machinery, 15(1):1–7, January. p. 3 (a comment in brackets added by editor), "(I do not think that the term compiler was then [1953] in general use, although it had in fact been introduced by Grace Hopper.)"
15.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-computerhistory.org_15-0)**[[1]](http://www.computerhistory.org/events/lectures/cobol_06121997/index.shtml) The World's First COBOL Compilers [Archived](https://web.archive.org/web/20111013021915/http://www.computerhistory.org/events/lectures/cobol_06121997/index.shtml) 13 October 2011 at the [Wayback Machine](https://en.wikipedia.org/wiki/Wayback_Machine "Wayback Machine")
16.   ^ [_**a**_](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-bergstein_16-0)[_**b**_](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-bergstein_16-1)Bergstein, Brian (March 20, 2007). ["Fortran creator John Backus dies"](https://www.nbcnews.com/id/wbna17704662). _NBC News_. [Archived](https://web.archive.org/web/20200429211030/http://www.nbcnews.com/id/17704662) from the original on April 29, 2020. Retrieved April 25, 2010.
17.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-17)**["NIST To Develop Cloud Roadmap"](https://www.informationweek.com/cloud/nist-to-develop-cloud-roadmap/d/d-id/1093958?). _[InformationWeek](https://en.wikipedia.org/wiki/InformationWeek "InformationWeek")_. November 5, 2010. Computing initiative seeks to remove barriers to cloud adoption in security, interoperability, portability and reliability.
18.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-18)**"What is it based on". _[Computerworld](https://en.wikipedia.org/wiki/Computerworld "Computerworld")_. April 9, 1984. p.13. Is it based on ... Reliability Portability. Compatibility
19.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-19)**["Programming 101: Tips to become a good programmer - Wisdom Geek"](https://wisdomgeek.com/programming/tips-become-good-programmer). _Wisdom Geek_. May 19, 2016. [Archived](https://web.archive.org/web/20160523063915/http://wisdomgeek.com/programming/tips-become-good-programmer) from the original on May 23, 2016. Retrieved May 23, 2016.
20.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-20)**_Fundamentals of Software Architecture: An Engineering Approach_. O'Reilly Media. 2020. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-1492043454](https://en.wikipedia.org/wiki/Special:BookSources/978-1492043454 "Special:BookSources/978-1492043454").
21.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-21)**Elshoff, James L.; Marcotty, Michael (1982). ["Improving computer program readability to aid modification"](https://doi.org/10.1145%2F358589.358596). _Communications of the ACM_. **25** (8): 512–521. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/358589.358596](https://doi.org/10.1145%2F358589.358596). [S2CID](https://en.wikipedia.org/wiki/S2CID_(identifier) "S2CID (identifier)")[30026641](https://api.semanticscholar.org/CorpusID:30026641).
22.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-22)**Multiple (wiki). ["Readability"](http://docforge.com/wiki/Readability). _Docforge_. [Archived](https://web.archive.org/web/20200429211203/http://www.docforge.com/wiki/Readability) from the original on April 29, 2020. Retrieved January 30, 2010.
23.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-23)**Enticknap, Nicholas (September 11, 2007). ["SSL/Computer Weekly IT salary survey: finance boom drives IT job growth"](http://www.computerweekly.com/Articles/2007/09/11/226631/sslcomputer-weekly-it-salary-survey-finance-boom-drives-it-job.htm). [Archived](https://web.archive.org/web/20111026035734/http://www.computerweekly.com/Articles/2007/09/11/226631/SSLComputer-Weekly-IT-salary-survey-finance-boom-drives-IT-job.htm) from the original on October 26, 2011. Retrieved June 24, 2009.
24.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-24)**Mitchell, Robert (May 21, 2012). ["The Cobol Brain Drain"](http://www.computerworld.com/article/2504568/data-center/the-cobol-brain-drain.html). Computer World. [Archived](https://web.archive.org/web/20190212185631/https://www.computerworld.com/article/2504568/data-center/the-cobol-brain-drain.html) from the original on February 12, 2019. Retrieved May 9, 2015.
25.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-25)**["Photograph courtesy Naval Surface Warfare Center, Dahlgren, Virginia, from National Geographic Sept. 1947"](https://www.nationalgeographic.org/thisday/sep9/worlds-first-computer-bug). July 15, 2020. [Archived](https://web.archive.org/web/20201113163443/https://www.nationalgeographic.org/thisday/sep9/worlds-first-computer-bug/) from the original on November 13, 2020. Retrieved November 10, 2020.
26.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-26)**Halvorson, Michael J. (2020). _Code Nation: Personal Computing and the Learn to Program Movement in America_. New York, NY: ACM Books. pp.3–6.
27.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-27)**_2014 Worldwide Software Developer and ICT-Skilled Worker Estimates_. Framingham, MA: International Data Corporation. 2014.
28.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-28)**Ensmenger, Nathan (2010). _The Computer Boys Take Over: Computers, Programmers, and the Politics and Technical Expertise_. Cambridge, MA: The MIT Press.
29.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-29)**Halvorson, Michael J. (2020). _Code Nation: Personal Computing and the Learn to Program Movement in America_. New York, NY: ACM Books. p.80.
30.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-30)**Perlis, Alan (1961). "The role of the digital computer in the university". _Computers and Automation 10, 4 and 4B_. pp.10–15.
31.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-31)**Halvorson, Michael J. (2020). _Code Nation: Personal Computing and the Learn to Program Movement in America_. New York, NY: ACM Books. p.352.
32.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-32)**Halvorson, Michael J. (2020). _Code Nation: Personal Computing and the Learn to Program Movement in America_. New York, NY: ACM Books. pp.365–368.
33.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-33)**Prat, Chantel S.; Madhyastha, Tara M.; Mottarella, Malayka J.; Kuo, Chu-Hsuan (March 2, 2020). ["Relating Natural Language Aptitude to Individual Differences in Learning Programming Languages"](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7051953). _Scientific Reports_. **10** (1): 3817. [Bibcode](https://en.wikipedia.org/wiki/Bibcode_(identifier) "Bibcode (identifier)"):[2020NatSR..10.3817P](https://ui.adsabs.harvard.edu/abs/2020NatSR..10.3817P). [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1038/s41598-020-60661-8](https://doi.org/10.1038%2Fs41598-020-60661-8). [ISSN](https://en.wikipedia.org/wiki/ISSN_(identifier) "ISSN (identifier)")[2045-2322](https://search.worldcat.org/issn/2045-2322). [PMC](https://en.wikipedia.org/wiki/PMC_(identifier) "PMC (identifier)")[7051953](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7051953). [PMID](https://en.wikipedia.org/wiki/PMID_(identifier) "PMID (identifier)")[32123206](https://pubmed.ncbi.nlm.nih.gov/32123206).
34.   **[^](https://en.wikipedia.org/wiki/Computer_programming#cite_ref-34)**["To the brain, reading computer code is not the same as reading language"](https://news.mit.edu/2020/brain-reading-computer-code-1215). _MIT News | Massachusetts Institute of Technology_. December 15, 2020. Retrieved July 29, 2023.

*   Ceruzzi, Paul E. (1998). [_History of Computing_](https://archive.org/details/historyofmodernc00ceru). Cambridge, Massachusetts: MIT Press. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[9780262032551](https://en.wikipedia.org/wiki/Special:BookSources/9780262032551 "Special:BookSources/9780262032551") – via EBSCOhost.
*   Evans, Claire L. (2018). [_Broad Band: The Untold Story of the Women Who Made the Internet_](https://books.google.com/books?id=C8ouDwAAQBAJ&q=9780735211759&pg=PP1). New York: Portfolio/Penguin. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[9780735211759](https://en.wikipedia.org/wiki/Special:BookSources/9780735211759 "Special:BookSources/9780735211759").
*   Gürer, Denise (1995). ["Pioneering Women in Computer Science"](https://courses.cs.washington.edu/courses/csep590/06au/readings/p175-gurer.pdf)(PDF). _Communications of the ACM_. **38** (1): 45–54. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.1145/204865.204875](https://doi.org/10.1145%2F204865.204875). [S2CID](https://en.wikipedia.org/wiki/S2CID_(identifier) "S2CID (identifier)")[6626310](https://api.semanticscholar.org/CorpusID:6626310). [Archived](https://ghostarchive.org/archive/20221009/https://courses.cs.washington.edu/courses/csep590/06au/readings/p175-gurer.pdf)(PDF) from the original on October 9, 2022.
*   Smith, Erika E. (2013). ["Recognizing a Collective Inheritance through the History of Women in Computing"](https://doi.org/10.7771%2F1481-4374.1972). _CLCWeb: Comparative Literature & Culture_. **15** (1): 1–9. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.7771/1481-4374.1972](https://doi.org/10.7771%2F1481-4374.1972).
*   Essinger, J., & EBSCO Publishing (Firm). (2014). _Ada's algorithm: How lord byron's daughter ada lovelace launched the digital age_. Melville House.

*   A.K. Hartmann, _[Practical Guide to Computer Simulations](https://web.archive.org/web/20090211113048/http://worldscibooks.com/physics/6988.html)_, Singapore: [World Scientific](https://en.wikipedia.org/wiki/World_Scientific "World Scientific") (2009)
*   A. Hunt, D. Thomas, and W. Cunningham, _The Pragmatic Programmer. From Journeyman to Master_, Amsterdam: Addison-Wesley Longman (1999)
*   Brian W. Kernighan, _The Practice of Programming_, Pearson (1999)
*   [Weinberg, Gerald M.](https://en.wikipedia.org/wiki/Gerald_Weinberg "Gerald Weinberg"), _The Psychology of Computer Programming_, New York: Van Nostrand Reinhold (1971)
*   [Edsger W. Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra "Edsger W. Dijkstra"), _A Discipline of Programming_, Prentice-Hall (1976)
*   O.-J. Dahl, [E.W.Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra "Edsger W. Dijkstra"), C.A.R. Hoare, _Structured Programming_, Academic Press (1972)
*   [David Gries](https://en.wikipedia.org/wiki/David_Gries "David Gries"), _The Science of Programming_, Springer-Verlag (1981)
