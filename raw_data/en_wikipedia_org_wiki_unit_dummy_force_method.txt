Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Discrete systems 2 General systems Toggle the table of contents Unit dummy force method 1 language 한국어 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia This article does not cite any sources .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed .

Find sources: "Unit dummy force method" – news · newspapers · books · scholar · JSTOR ( December 2009 ) ( Learn how and when to remove this message ) The Unit dummy force method provides a convenient means for computing displacements in structural systems. It is applicable for both linear and non-linear material behaviours as well as for systems subject to environmental effects, and hence more general than Castigliano's second theorem .

Discrete systems [ edit ] Consider a discrete system such as trusses, beams or frames having members interconnected at the nodes. Let the consistent set of members' deformations be given by q M × × 1 {\displaystyle \mathbf {q} _{M\times 1}} , which can be computed using the member flexibility relation . These member deformations give rise to the nodal displacements r N × × 1 {\displaystyle \mathbf {r} _{N\times 1}} , which we want to determine.

We start by applying N virtual nodal forces R N × × 1 ∗ ∗ {\displaystyle \mathbf {R} _{N\times 1}^{*}} , one for each wanted r , and find the virtual member forces Q M × × 1 ∗ ∗ {\displaystyle \mathbf {Q} _{M\times 1}^{*}} that are in equilibrium with R N × × 1 ∗ ∗ {\displaystyle \mathbf {R} _{N\times 1}^{*}} : Q M × × 1 ∗ ∗ = B M × × N R N × × 1 ∗ ∗ {\displaystyle \mathbf {Q} _{M\times 1}^{*}=\mathbf {B} _{M\times N}\mathbf {R} _{N\times 1}^{*}} 1 In the case of a statically indeterminate system, matrix B is not unique because the set of Q M × × 1 ∗ ∗ {\displaystyle \mathbf {Q} _{M\times 1}^{*}} that satisfies nodal equilibrium is infinite. It can be computed as the inverse of the nodal equilibrium matrix of any primary system derived from the original system.

Imagine that internal and external virtual forces undergo, respectively, the real deformations and displacements; the virtual work done can be expressed as: External virtual work: R ∗ ∗ T r {\displaystyle \mathbf {R} ^{*T}\mathbf {r} } Internal virtual work: Q ∗ ∗ T q {\displaystyle \mathbf {Q} ^{*T}\mathbf {q} } According to the virtual work principle, the two work expressions are equal: R ∗ ∗ T r = Q ∗ ∗ T q {\displaystyle \mathbf {R} ^{*T}\mathbf {r} =\mathbf {Q} ^{*T}\mathbf {q} } Substitution of (1) gives R ∗ ∗ T r = R ∗ ∗ T B T q .

{\displaystyle \mathbf {R} ^{*T}\mathbf {r} =\mathbf {R} ^{*T}\mathbf {B} ^{T}\mathbf {q} .} Since R ∗ ∗ {\displaystyle \mathbf {R} ^{*}} contains arbitrary virtual forces, the above equation gives r = B T q {\displaystyle \mathbf {r} =\mathbf {B} ^{T}\mathbf {q} } 2 It is remarkable that the computation in (2) does not involve any integration regardless of the complexity of the systems, and that the result is unique irrespective of the choice of primary system for B . It is thus far more convenient and general than the classical form of the dummy unit load method, which varies with the type of system as well as with the imposed external effects. On the other hand, it is important to note that Eq.(2) is for computing displacements or rotations of the nodes only. This is not a restriction because we can make any point into a node when desired.

Finally, the name unit load arises from the interpretation that the coefficients B i , j {\displaystyle B_{i,j}} in matrix B are the member forces in equilibrium with the unit nodal force R j ∗ ∗ = 1 {\displaystyle R_{j}^{*}=1} , by virtue of Eq.(1).

General systems [ edit ] For a general system, the unit dummy force method also comes directly from the virtual work principle. Fig.(a) shows a system with known actual deformations ϵ ϵ {\displaystyle {\boldsymbol {\epsilon }}} . These deformations, supposedly consistent, give rise to displacements throughout the system. For example, a point A has moved to A', and we want to compute the displacement r of A in the direction shown. For this particular purpose, we choose the virtual force system in Fig.(b) which shows: The unit force R * is at A and in the direction of r so that the external virtual work done by R * is, noting that the work done by the virtual reactions in (b) is zero because their displacements in (a) are zero: R ∗ ∗ × × r = 1 × × r {\displaystyle R^{*}\times r=1\times r} is the desired displacement The internal virtual work done by the virtual stresses is ∫ ∫ V ϵ ϵ T σ σ ∗ ∗ d V {\displaystyle \int _{V}{\boldsymbol {\epsilon }}^{T}{\boldsymbol {\sigma }}^{*}dV} where the virtual stresses σ σ ∗ ∗ {\displaystyle {\boldsymbol {\sigma }}^{*}} must satisfy equilibrium everywhere.

Equating the two work expressions gives the desired displacement: 1 × × r = ∫ ∫ V ϵ ϵ T σ σ ∗ ∗ d V {\displaystyle 1\times r=\int _{V}{\boldsymbol {\epsilon }}^{T}{\boldsymbol {\sigma }}^{*}dV} NewPP limit report
Parsed by mw‐web.codfw.main‐759fc646c5‐x2757
Cached time: 20250812162417
Cache expiry: 2592000
Reduced expiry: false
Complications: []
CPU time usage: 0.117 seconds
Real time usage: 0.404 seconds
Preprocessor visited node count: 287/1000000
Revision size: 4456/2097152 bytes
Post‐expand include size: 11131/2097152 bytes
Template argument size: 421/2097152 bytes
Highest expansion depth: 10/100
Expensive parser function count: 1/500
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 7221/5000000 bytes
Lua time usage: 0.037/10.000 seconds
Lua memory usage: 1301187/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  113.138      1 -total
 62.87%   71.133      1 Template:Unreferenced
 51.16%   57.884      1 Template:Ambox
 36.64%   41.458      2 Template:NumBlk
  9.96%   11.272      1 Template:Find_sources_mainspace
  2.77%    3.131      2 Template:Trim
  1.42%    1.610      2 Template:EquationRef Saved in parser cache with key enwiki:pcache:3606944:|#|:idhash:canonical and timestamp 20250812162417 and revision id 1087483842. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Unit_dummy_force_method&oldid=1087483842 " Category : Structural analysis Hidden categories: Articles lacking sources from December 2009 All articles lacking sources This page was last edited on 12 May 2022, at 18:58 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Unit dummy force method 1 language Add topic

