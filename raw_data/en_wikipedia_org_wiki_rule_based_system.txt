Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Production system rules Toggle Production system rules subsection 1.1 Construction 2 Logic programming rules 3 Differences and relationships between production rules and logic programming rules 4 See also 5 References Toggle the table of contents Rule-based system 8 languages Deutsch Español فارسی Français Nederlands Русский 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Type of computer system In computer science , a rule-based system is a computer system in which domain-specific knowledge is represented in the form of rules and general-purpose reasoning is used to solve problems in the domain.

Two different kinds of rule-based systems emerged within the field of artificial intelligence in the 1970s: Production systems , which use if-then rules to derive actions from conditions .

Logic programming systems, which use conclusion if conditions rules to derive conclusions from conditions .

The differences and relationships between these two kinds of rule-based system has been a major source of misunderstanding and confusion.

Both kinds of rule-based systems use either forward or backward  chaining , in contrast with imperative programs , which execute commands listed sequentially. However, logic programming systems have a logical interpretation, whereas production systems do not.

Production system rules [ edit ] A classic example of a production rule-based system is the domain-specific expert system that uses rules to make deductions or choices.

[ 1 ] For example, an expert system might help a doctor choose the correct diagnosis based on a cluster of symptoms, or select tactical moves to play a game.

Rule-based systems can be used to perform lexical analysis to compile or interpret computer programs, or in natural language processing .

[ 2 ] Rule-based programming attempts to derive execution instructions from a starting set of data and rules. This is a more indirect method than that employed by an imperative programming language , which lists execution steps sequentially.

Construction [ edit ] A typical rule-based system has four basic components: [ 3 ] A list of rules or rule base , which is a specific type of knowledge base .

An inference engine or semantic reasoner , which infers information or takes action based on the interaction of input and the rule base. The interpreter executes a production system program by performing the following match-resolve-act cycle: [ 4 ] Match: In this first phase, the condition sides of all productions are matched against the contents of working memory. As a result a set (the conflict set ) is obtained, which consists of instantiations of all satisfied productions. An instantiation of a production is an ordered list of working memory elements that satisfies the condition side of the production.

Conflict-resolution : In this second phase, one of the production instantiations in the conflict set is chosen for execution. If no productions are satisfied, the interpreter halts.

Act: In this third phase, the actions of the production selected in the conflict-resolution phase are executed. These actions may change the contents of working memory. At the end of this phase, execution returns to the first phase.

Temporary working memory , which is a  database of facts.

A user interface or other connection to the outside world through which input and output signals are received and sent.

Whereas the matching phase of the inference engine has a logical interpretation, the conflict resolution and action phases do not. Instead, "their semantics is usually described as a series of applications of various state-changing operators, which often gets quite involved (depending on the choices made in deciding which ECA rules fire, when, and so forth), and they can hardly be regarded as declarative".

[ 5 ] Logic programming rules [ edit ] The logic programming family of computer systems includes the programming language Prolog , the database language Datalog and the knowledge representation and problem-solving language Answer Set Programming (ASP). In all of these languages, rules are written in the form of clauses : A :- B 1 , ..., B n .

and are read as declarative sentences in logical form: A if B 1 and ... and B n .

In the simplest case of Horn clauses (or "definite" clauses), which are a subset of first-order logic , all of the A, B 1 , ..., B n are atomic formulae .

Although Horn clause logic programs are Turing complete , [ 6 ] [ 7 ] for many practical applications, it is useful to extend Horn clause programs by allowing negative conditions, implemented by negation as failure . Such extended logic programs have the knowledge representation capabilities of a non-monotonic logic .

Differences and relationships between production rules and logic programming rules [ edit ] The most obvious difference between the two kinds of systems is that production rules are typically written in the forward direction, if A then B ,  and logic programming rules are typically written in the backward direction, B if A . In the case of logic programming rules, this difference is superficial and purely syntactic. It does not affect the semantics of the rules. Nor does it affect whether the rules are used to reason backwards, Prolog style, to reduce the goal B to the subgoals A , or whether they are used, Datalog style, to derive B from A .

In the case of production rules, the forward direction of the syntax reflects the stimulus-response character of most production rules, with the stimulus A coming before the response B . Moreover, even in cases when the response is simply to draw a conclusion B from an assumption A , as in modus ponens , the match-resolve-act cycle is restricted to reasoning forwards from A to B . Reasoning backwards in a production system would require the use of an entirely different kind of inference engine.

In his Introduction to Cognitive Science, [ 8 ] Paul Thagard includes logic and rules as alternative approaches to modelling human thinking. He does not consider logic programs in general, but he considers Prolog to be, not a rule-based system, but "a programming language that uses logic representations and deductive techniques" (page 40).

He argues that rules, which have the form IF condition THEN action , are "very similar" to logical conditionals, but they are simpler and have greater psychological plausibility (page 51). Among other differences between logic and rules, he argues that logic uses deduction, but rules use search (page 45) and can be used to reason either forward or backward (page 47). Sentences in logic "have to be interpreted as universally true ", but rules can be defaults , which admit exceptions (page 44). He does not observe that all of these features of rules apply to logic programming systems.

See also [ edit ] Logic programming Expert systems Rewriting RuleML List of rule-based languages Learning classifier system Rule-based machine learning Rule-based modeling References [ edit ] ^ Crina Grosan; Ajith Abraham (29 July 2011).

Intelligent Systems: A Modern Approach . Springer Science & Business Media. pp. 149–.

ISBN 978-3-642-21004-4 .

^ Sin-Wai Chan (13 November 2014).

Routledge Encyclopedia of Translation Technology . Routledge. pp. 454–.

ISBN 978-1-317-60815-8 .

^ "What is a rule-based system?" .

j-paine.org .

^ Cabitza, F.; Sarini, M.; Dal Seno, B. (2005). "DJess - a context-sharing middleware to deploy distributed inference systems in pervasive computing domains".

ICPS '05. Proceedings. International Conference on Pervasive Services, 2005 . Vol. 2. pp.

66– 69.

doi : 10.1109/PERSER.2005.1506416 .

ISBN 0-7803-9032-6 .

S2CID 27323155 .

^ Maier, D., Tekle, K.T., Kifer, M. and Warren, D.S., 2018. Datalog: concepts, history, and outlook. In Declarative Logic Programming: Theory, Systems, and Applications (pp. 3-100).

^ Tärnlund, S.Å. (1977). "Horn clause computability".

BIT Numerical Mathematics .

17 (2): 215– 226.

doi : 10.1007/BF01932293 .

S2CID 32577496 .

^ Andréka, H.; Németi, I. (1978).

"The generalised completeness of Horn predicate-logic as a programming language" .

Acta Cybernetica .

4 (1): 3– 10.

^ Thagard, Paul (2005).

Mind: Introduction to Cognitive Science . The MIT Press. p. 11.

ISBN 9780262701099 .

v t e Types of programming languages Level Machine Assembly Compiled Interpreted Low-level High-level Very high-level Esoteric Generation First Second Third Fourth Fifth v t e Semantic Web Background Databases Hypertext Internet Ontologies Semantics Semantic networks World Wide Web Sub-topics Dataspaces Hyperdata Linked data Rule-based systems Applications Semantic analytics Semantic computing Semantic mapper Semantic matching Semantic publishing Semantic reasoner Semantic search Semantic service-oriented architecture Semantic wiki Solid Related topics Collective intelligence Description logic Folksonomy Geotagging Information architecture iXBRL Knowledge extraction Knowledge management Knowledge representation and reasoning Library 2.0 Digital library Digital humanities Metadata References Topic map Web 2.0 Web engineering Web Science Trust Standards Syntax and supporting technologies HTTP IRI URI RDF triples RDF/XML JSON-LD Turtle TriG Notation3 N-Triples TriX (no W3C standard) RRID SPARQL XML Semantic HTML Schemas, ontologies and rules Common Logic OWL RDFS Rule Interchange Format Semantic Web Rule Language SHACL Semantic annotation COinS GRDDL Microdata Microformats RDFa SAWSDL Facebook Platform Common vocabularies BIBFRAME BIBO DOAP Dublin Core MODS / MADS FOAF Schema.org SIOC SKOS Microformat vocabularies hAtom hCalendar hCard hProduct hRecipe hReview Retrieved from " https://en.wikipedia.org/w/index.php?title=Rule-based_system&oldid=1302865249 " Category : Rule engines Hidden categories: Articles with short description Short description is different from Wikidata This page was last edited on 27 July 2025, at 21:11 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Rule-based system 8 languages Add topic

