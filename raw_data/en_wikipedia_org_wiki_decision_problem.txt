Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Definition 2 Examples 3 Decidability 4 Complete problems 5 Function problems 6 Optimization problems 7 See also 8 Notes 9 References Toggle the table of contents Decision problem 28 languages বাংলা Català Čeština Deutsch Ελληνικά Español Esperanto فارسی Français 한국어 Հայերեն Hrvatski Italiano עברית ಕನ್ನಡ Nederlands 日本語 Polski Português Русский Simple English Српски / srpski Srpskohrvatski / српскохрватски Svenska ไทย Українська 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Yes/no problem in computer science This article is about decision problems in complexity theory. For the decision problem in formal logic, see Entscheidungsproblem . For analysis of the process of making choices, see Decision theory .

A decision problem has only two possible outputs ( YES or NO ) on any input.

In computability theory and computational complexity theory , a decision problem is a computational problem that can be posed as a yes–no question on a set of input values. An example of a decision problem is deciding whether a given natural number is prime . Another example is the problem, "given two numbers x and y , does x evenly divide y ?" A decision procedure for a decision problem is an algorithmic method that answers the yes-no question on all inputs, and a decision problem is called decidable if there is a decision procedure for it.  For example, the decision problem "given two numbers x and y , does x evenly divide y ?" is decidable since there is a decision procedure called long division that gives the steps for determining whether x evenly divides y and the correct answer, YES or NO , accordingly. Some of the most important problems in mathematics are undecidable , e.g. the halting problem .

The field of computational complexity theory categorizes decidable decision problems by how difficult they are to solve. "Difficult", in this sense, is described in terms of the computational resources needed by the most efficient algorithm for a certain problem. On the other hand, the field of recursion theory categorizes undecidable decision problems by Turing degree , which is a measure of the noncomputability inherent in any solution.

Definition [ edit ] A decision problem is the formal language of all inputs for which the output (the answer to the yes-no question on a given input) is YES .

[ notes 1 ] These inputs can be natural numbers, but can also be values of some other kind, like binary strings or strings over some other alphabet .

For example, if every input can be encoded by the alphabet { 0 , 1 } {\displaystyle \{0,1\}} , then a decision problem is a subset L ⊆ ⊆ { 0 , 1 } ∗ ∗ {\displaystyle L\subseteq \{0,1\}^{*}} .

[ notes 1 ] For another example, using an encoding such as Gödel numbering , any string can be encoded as a natural number, via which a decision problem can be defined as a subset of the natural numbers. Therefore, the decision procedure of a decision problem is to compute the characteristic function of a subset of the natural numbers.

Examples [ edit ] A classic example of a decidable decision problem is the set of prime numbers. It is possible to effectively decide whether a given natural number is prime by testing every possible nontrivial factor. Although much more efficient procedures of primality testing are known, the existence of any effective procedure is enough to establish decidability.

Decidability [ edit ] Main articles: Undecidable problem and Decidability (logic) A decision problem is decidable or effectively solvable if the set of inputs for which the answer is YES is a recursive set .

[ notes 2 ] A decision problem is partially decidable , semidecidable , solvable , or provable if the set of inputs for which the answer is YES is a recursively enumerable set .

Problems that are not decidable are undecidable , which means it is not possible to create an algorithm (efficient or not) that solves them. The halting problem is an important undecidable decision problem; for more examples, see list of undecidable problems .

Complete problems [ edit ] Main article: Complete problem Decision problems can be ordered according to many-one reducibility and related to feasible reductions such as polynomial-time reductions . A decision problem P is said to be complete for a set of decision problems S if P is a member of S and every problem in S can be reduced to P . Complete decision problems are used in computational complexity theory to characterize complexity classes of decision problems. For example, the Boolean satisfiability problem is complete for the class NP of decision problems under polynomial-time reducibility.

Function problems [ edit ] Main article: Function problem Decision problems are closely related to function problems , which can have answers that are more complex than a simple YES or NO .  A corresponding function problem is "given two numbers x and y , what is x divided by y ?".

A function problem consists of a partial function f ; the informal "problem" is to compute the values of f on the inputs for which it is defined.

Every function problem can be turned into a decision problem; the decision problem is just the graph of the associated function.   (The graph of a function f is the set of pairs ( x , y ) such that f ( x ) = y .)  If this decision problem were effectively solvable then the function problem would be as well.  This reduction does not respect computational complexity, however.  For example, it is possible for the graph of a function to be decidable in polynomial time (in which case running time is computed as a function of the pair ( x , y )) when the function is not computable in polynomial time (in which case running time is computed as a function of x alone).  The function f ( x ) = 2 x has this property.

Every decision problem can be converted into the function problem of computing the characteristic function of the set associated to the decision problem.   If this function is computable then the associated decision problem is decidable. However, this reduction is more liberal than the standard reduction used in computational complexity (sometimes called polynomial-time many-one reduction); for example, the complexity of the characteristic functions of an NP-complete problem and its co-NP-complete complement is exactly the same even though the underlying decision problems may not be considered equivalent in some typical models of computation.

Optimization problems [ edit ] Main article: Optimization problem Unlike decision problems, for which there is only one correct answer for each input, optimization problems are concerned with finding the best answer to a particular input.  Optimization problems arise naturally in many applications, such as the traveling salesman problem and many questions in linear programming .

Function and optimization problems are often transformed into decision problems by considering the question of whether the output is equal to or less than or equal to a given value. This allows the complexity of the corresponding decision problem to be studied; and in many cases the original function or optimization problem can be solved by solving its corresponding decision problem. For example, in the traveling salesman problem, the optimization problem is to produce a tour with minimal weight. The associated decision problem is: for each N , to decide whether the graph has any tour with weight less than N .  By repeatedly answering the decision problem, it is possible to find the minimal weight of a tour.

Because the theory of decision problems is very well developed, research in complexity theory has typically focused on decision problems. Optimization problems themselves are still of interest in computability theory, as well as in fields such as operations research .

See also [ edit ] ALL (complexity) Computational problem Counting problem (complexity) Decidability (logic) – for the problem of deciding whether a formula is a consequence of a logical theory .

Formal language Search problem Word problem (mathematics) Notes [ edit ] ^ a b "CS254: Computational Complexity: Handout 2" (PDF) .

Archived (PDF) from the original on 2015-10-10.

^ This conclusion follows the properties of recursive set , which states that the set of inputs for which the answer is NO is also recursive.

References [ edit ] Kozen, D.C. (2012).

Automata and Computability . Springer.

ISBN 978-1-4612-1844-9 .

Hartley, Rogers Jr (1987).

The Theory of Recursive Functions and Effective Computability . MIT Press.

ISBN 978-0-262-68052-3 .

Sipser, M.

(2020).

Introduction to the Theory of Computation . Cengage Learning.

ISBN 978-0-357-67058-3 .

Soare, Robert I. (1987).

Recursively Enumerable Sets and Degrees . Springer.

ISBN 0-387-15299-7 .

Kroening, Daniel ; Strichman, Ofer (23 May 2008).

Decision procedures . Springer.

ISBN 978-3-540-74104-6 .

Bradley, Aaron; Manna, Zohar (3 September 2007).

The calculus of computation . Springer.

ISBN 978-3-540-74112-1 .

v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal Authority control databases : National Japan NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐qsqt2
Cached time: 20250812000114
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.369 seconds
Real time usage: 0.496 seconds
Preprocessor visited node count: 960/1000000
Revision size: 10261/2097152 bytes
Post‐expand include size: 76919/2097152 bytes
Template argument size: 1050/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 9/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 33218/5000000 bytes
Lua time usage: 0.230/10.000 seconds
Lua memory usage: 5426960/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  361.948      1 -total
 33.12%  119.876      4 Template:Navbox
 30.13%  109.064      1 Template:Mathematical_logic
 24.32%   88.031      1 Template:Reflist
 21.02%   76.073      1 Template:Cite_web
 20.22%   73.191      1 Template:Short_description
 12.15%   43.964      2 Template:Pagetype
 10.06%   36.415      6 Template:Cite_book
  6.07%   21.954      1 Template:Authority_control
  5.63%   20.380      7 Template:Main_other Saved in parser cache with key enwiki:pcache:8336:|#|:idhash:canonical and timestamp 20250812000114 and revision id 1291139298. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Decision_problem&oldid=1291139298 " Categories : Computational problems Computability theory Hidden categories: Articles with short description Short description matches Wikidata This page was last edited on 19 May 2025, at 09:36 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Decision problem 28 languages Add topic

