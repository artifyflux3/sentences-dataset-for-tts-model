Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Design goals 2 History Toggle History subsection 2.1 Name 2.2 Versions 3 Syntax 4 Distinguishing features Toggle Distinguishing features subsection 4.1 Portability 4.2 Typing 4.3 Metaprogramming 4.4 Methods and functions 4.5 Properties 4.6 Namespaces 4.7 Memory access 4.8 Exceptions 4.9 Polymorphism 4.10 Language Integrated Query (LINQ) 4.11 Functional programming 5 Common type system Toggle Common type system subsection 5.1 Categories of data types 5.2 Boxing and unboxing 6 Libraries 7 Examples Toggle Examples subsection 7.1 Hello World 7.2 Generics 8 Standardization and licensing 9 Implementations 10 See also 11 Notes 12 References Toggle References subsection 12.1 Citations 12.2 Sources 13 Further reading 14 External links Toggle the table of contents C Sharp (programming language) 82 languages العربية Azərbaycanca বাংলা 閩南語 / Bân-lâm-gí Беларуская Беларуская (тарашкевіца) Български Bosanski Català Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego ગુજરાતી 客家語 / Hak-kâ-ngî 한국어 Hausa Հայերեն हिन्दी Hrvatski Ido Bahasa Indonesia Íslenska Italiano עברית ქართული Қазақша Kiswahili Кыргызча Latviešu Lietuvių Magyar Македонски മലയാളം مصرى Bahasa Melayu 閩東語 / Mìng-dĕ̤ng-ngṳ̄ မြန်မာဘာသာ Nederlands नेपाल भाषा 日本語 Norsk bokmål Norsk nynorsk Oʻzbekcha / ўзбекча پنجابی ភាសាខ្មែរ Plattdüütsch Polski Português Română Runa Simi Русский Саха тыла Shqip Simple English Slovenčina Slovenščina کوردی Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska தமிழ் Taqbaylit ไทย Тоҷикӣ Türkçe Українська اردو Tiếng Việt Winaray 吴语 Yorùbá 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikiversity Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Programming language The correct title of this article is C# . The substitution of the # is due to technical restrictions .

C# Paradigm Multi-paradigm : structured , imperative , object-oriented , event-driven , task-driven , functional , generic , reflective , concurrent Family C Designed by Anders Hejlsberg ( Microsoft ) Developer Mads Torgersen ( Microsoft ) First appeared 2000 ; 25 years ago ( 2000 ) [ 1 ] Stable release 14.0 [ 2 ] / 9 June 2025 ; 2 months ago ( 9 June 2025 ) Typing discipline Static , dynamic , [ 3 ] strong , safe , nominative , partly inferred Memory management automatic memory management Platform Common Language Infrastructure License Roslyn compiler: MIT/X11 [ 4 ] .NET Core CLR : MIT/X11 [ 5 ] Mono compiler: dual GPLv3 and MIT/X11 DotGNU : dual GPL and LGPL Filename extensions .cs , .csx Website learn .microsoft .com /en-us /dotnet /csharp / Major implementations Visual C# , .NET , Mono , Universal Windows Platform Discontinued : .NET Framework , DotGNU Dialects Cω , Polyphonic C# , Enhanced C# Influenced by C++ , [ 6 ] Cω , Eiffel , F# , [ a ] Haskell , Scala , Icon , J# , J++ , Java , [ 6 ] JavaScript , ML , Modula-3 , Object Pascal , [ 7 ] VB Influenced Chapel , [ 8 ] Clojure , [ 9 ] Crystal , [ 10 ] D , J# , Dart , [ 11 ] F# , Hack , Java , [ 12 ] [ 13 ] Kotlin , Nemerle , Oxygene , Rust , [ 14 ] Swift , [ 15 ] Vala , TypeScript C Sharp Programming at Wikibooks C# ( / ˌ s iː ˈ ʃ ɑːr p / see SHARP ) [ b ] is a general-purpose high-level programming language supporting multiple paradigms . C# encompasses static typing, [ 16 ] : 4 strong typing , lexically scoped , imperative , declarative , functional , generic , [ 16 ] : 22 object-oriented ( class -based), and component-oriented programming disciplines.

[ 17 ] The principal inventors of the C# programming language were Anders Hejlsberg , Scott Wiltamuth, and Peter Golde from Microsoft .

[ 17 ] It was first widely distributed in July 2000 [ 17 ] and was later approved as an international standard by Ecma (ECMA-334) in 2002 and ISO / IEC (ISO/IEC 23270 and 20619 [ c ] ) in 2003. Microsoft introduced C# along with .NET Framework and Microsoft Visual Studio , both of which are technically speaking, closed-source . At the time, Microsoft had no open-source products. Four years later, in 2004, a free and open-source project called Microsoft Mono began, providing a cross-platform compiler and runtime environment for the C# programming language. A decade later, Microsoft released Visual Studio Code (code editor), Roslyn (compiler), and the unified .NET platform (software framework), all of which support C# and are free, open-source, and cross-platform. Mono also joined Microsoft but was not merged into .NET.

As of January 2025, [update] the most recent stable version of the language is C# 13.0, which was released in 2024 in .NET 9.0 [ 18 ] [ 19 ] Design goals [ edit ] The Ecma standard lists these design goals for C#: [ 17 ] The language is intended to be a simple, modern, general-purpose, object-oriented programming language.

The language, and implementations thereof, should provide support for software engineering principles such as strong type checking, array bounds checking , [ 20 ] : 58–59 detection of attempts to use uninitialized variables , and automatic garbage collection .

[ 20 ] : 563 Software robustness, durability, and programmer productivity are important.

The language is intended for use in developing software components suitable for deployment in distributed environments.

Portability is very important for source code and programmers , especially those already familiar with C and C++ .

Support for internationalization [ 20 ] : 314 is very important.

C# is intended to be suitable for writing applications for both hosted and embedded systems , ranging from the very large that use sophisticated operating systems , down to the very small having dedicated functions.

Although C# applications are intended to be economical with regard to memory and processing power requirements, the language was not intended to compete directly on performance and size with C or assembly language.

[ 21 ] History [ edit ] C#'s former logos During the development of the .NET Framework , the class libraries were originally written using a managed code compiler system named Simple Managed C (SMC).

[ 22 ] [ 23 ] In January 1999, Anders Hejlsberg formed a team to build a new language at the time called COOL, which stood for " C-like Object Oriented Language".

[ 24 ] Microsoft had considered keeping the name "COOL(C-like Object Oriented Language)" as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference , the language had been renamed C#, and the class libraries and ASP.NET runtime were ported to C#.

[ citation needed ] Hejlsberg was C#'s principal designer and lead architect at Microsoft, and had been previously involved with the design of Turbo Pascal , Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++ . In interviews and technical papers, he has stated that flaws in most major programming languages (e.g.

C++ , Java , Delphi , and Smalltalk ) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove the design of the C# language.

[ 25 ] James Gosling , who created the Java programming language in 1994, and Bill Joy , a co-founder of Sun Microsystems , the originator of Java, called C# an "imitation" of Java; Gosling further said: "[C# is] sort of Java with reliability, productivity and security deleted." [ 26 ] [ 27 ] In July 2000, Hejlsberg said that C# is "not a Java clone" and is "much closer to C++" in its design.

[ 28 ] Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two quite different languages. One of the first major departures came with the addition of generics to both languages, with vastly different implementations. C# uses reification to provide "first-class" generic objects that can be used like any other class, with code generation performed at class-load time.

[ 29 ] C# has also added several major features to accommodate functional-style programming, culminating in the LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions , extension methods , and anonymous types .

[ 30 ] These features enable C# programmers to use functional programming techniques, such as closures , when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of boilerplate code included in common tasks such as querying a database, parsing an XML file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability.

[ 31 ] C# used to have a mascot called Andy (named after Anders Hejlsberg ). It was retired on January 29, 2004.

[ 32 ] C# was originally submitted to the ISO/IEC JTC 1 subcommittee SC 22 for review, [ 33 ] under ISO/IEC 23270:2003, [ 34 ] was withdrawn and was then approved under ISO/IEC 23270:2006.

[ 35 ] The 23270:2006 is withdrawn under 23270:2018 and approved with this version.

[ 36 ] Name [ edit ] Microsoft first used the name C# in 1988 for a variant of the C language designed for incremental compilation.

[ 37 ] That project was not completed, and the name was later reused.

C-sharp musical note The name "C sharp" was inspired by the musical notation whereby a sharp symbol indicates that the written note should be made a semitone higher in pitch .

[ 38 ] This is similar to the language name of C++ , where "++" indicates that a variable should be incremented by 1 after being evaluated. The sharp symbol also resembles a ligature of four "+" symbols (in a two-by-two grid), further implying that the language is an increment of C++.

[ 39 ] Due to technical limits of display (standard fonts, browsers, etc.), and most keyboard layouts lacking a sharp symbol ( U+266F ♯ MUSIC SHARP SIGN ( &sharp; )), the number sign ( U+0023 # NUMBER SIGN ( &num; )) was chosen to approximate the sharp symbol in the written name of the programming language.

[ 40 ] This convention is reflected in the ECMA-334 C# Language Specification.

[ 17 ] The "sharp" suffix has been used by a number of other Microsoft .NET compatible/compliant languages that are variants of existing languages, including J# (a .NET language also designed by Microsoft that is derived from Java 1.1), A# (from Ada ), and the functional programming language F# .

[ 41 ] The original implementation of Eiffel for .NET was called Eiffel# , [ 42 ] a name retired since the full Eiffel language is now supported. The suffix has also been used for libraries , such as Gtk# (a .NET wrapper for GTK and other GNOME libraries) and Cocoa# (a wrapper for Cocoa ).

Versions [ edit ] Development of the text for standards (beginning with C# 6) is done on GitHub . C# 7 was submitted to Ecma and approved in December 2023. As of January 2024, the standard for C# 8 is currently under development, referencing the approved language proposals .

C# version Language specification Date .NET Visual Studio Ecma ISO/IEC Microsoft 1.0 ECMA-334:2003, December 2002 ISO/IEC 23270:2003, April 2003 January 2002 January 2002 .NET Framework 1.0 Visual Studio .NET 2002 1.1 1.2 October 2003 April 2003 .NET Framework 1.1 Visual Studio .NET 2003 2.0 [ 43 ] ECMA-334:2006, June 2006 ISO/IEC 23270:2006, September 2006 September 2005 [ d ] November 2005 .NET Framework 2.0 .NET Framework 3.0 Visual Studio 2005 Visual Studio 2008 3.0 [ 44 ] None August 2007 November 2007 .NET Framework 2.0 (Except LINQ) [ 45 ] .NET Framework 3.0 (Except LINQ) [ 45 ] .NET Framework 3.5 Visual Studio 2008 4.0 [ 46 ] April 2010 April 2010 .NET Framework 4 Visual Studio 2010 5.0 [ 47 ] ECMA-334:2017, December 2017 ISO/IEC 23270:2018, December 2018 June 2013 August 2012 .NET Framework 4.5 Visual Studio 2012 Visual Studio 2013 6.0 [ 48 ] ECMA-334:2022, June 2022 None Draft July 2015 .NET Framework 4.6 .NET Core 1.0 .NET Core 1.1 Visual Studio 2015 7.0 [ 49 ] [ 50 ] ECMA-334:2023, December 2023 ISO/IEC 20619:2023, September 2023 Specification proposal March 2017 .NET Framework 4.7 Visual Studio 2017 version 15.0 [ 51 ] 7.1 [ 52 ] Specification proposal August 2017 .NET Core 2.0 Visual Studio 2017 version 15.3 [ 53 ] 7.2 [ 54 ] Specification proposal November 2017 Visual Studio 2017 version 15.5 [ 55 ] 7.3 [ 56 ] Specification proposal Archived March 7, 2021, at the Wayback Machine May 2018 .NET Core 2.1 .NET Core 2.2 .NET Framework 4.8 Visual Studio 2017 version 15.7 [ 57 ] 8.0 [ 58 ] None Specification proposal September 2019 .NET Core 3.0 .NET Core 3.1 Visual Studio 2019 version 16.3 [ 59 ] 9.0 [ 60 ] Specification proposal November 2020 .NET 5.0 Visual Studio 2019 version 16.8 [ 61 ] 10.0 [ 62 ] Specification proposal November 2021 .NET 6.0 Visual Studio 2022 version 17.0 [ 63 ] 11.0 [ 64 ] Specification proposal November 2022 .NET 7.0 Visual Studio 2022 version 17.4 [ 65 ] 12.0 [ 66 ] Specification proposal November 2023 .NET 8.0 Visual Studio 2022 version 17.8 [ 67 ] 13.0 [ 68 ] Specification proposal November 2024 .NET 9.0 Visual Studio 2022 version 17.12 [ 69 ] Syntax [ edit ] Main article: C# syntax See also: Syntax (programming languages) The core syntax of the C# language is similar to that of other C-style languages such as C, Objective-C, C++ and Java, particularly: Semicolons are used to denote the end of a statement.

Curly brackets are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into namespaces .

Variables are assigned using an equals sign , but compared using two consecutive equals signs .

Square brackets are used with arrays , both to declare them and to get a value at a given index in one of them.

"class", "int" and "void" are used to define large-scale (usually main) program functions in scripts most of the time in C-style computer programming languages.

Distinguishing features [ edit ] See also: Comparison of C# and Java Some notable features of C# that distinguish it from C, C++, and Java where noted, are: Portability [ edit ] By design, C# is the programming language that most directly reflects the underlying Common Language Infrastructure (CLI).

[ 70 ] Most of its intrinsic types correspond to value-types implemented by the CLI (Common Language Infrastructure) framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime (CLR) , or generate Common Intermediate Language (CIL) , or generate any other specific format. Some C# compilers can also generate machine code like traditional compilers of Objective-C, C, C++, Assembly and Fortran .

[ 71 ] [ 72 ] Typing [ edit ] C# supports strongly, implicitly typed variable declarations with the keyword var , [ 16 ] : 470 and implicitly typed arrays with the keyword new[] followed by a collection initializer.

[ 16 ] : 80 [ 20 ] : 58 Its type system is split into two families: Value types, like the built-in numeric types and user-defined structs, which are automatically handed over as copies when used as parameters, and reference types, including arrays, instances of classes, and strings, which only hand over a pointer to the respective object. Due to their special handling of the equality operator and their immutability , strings will nevertheless behave as if they were values, for all practical purposes. The programmer can even use them as case labels. Where necessary, value types will be boxed automatically.

[ 73 ] C# supports a strict Boolean data type , bool . Statements that take conditions, such as while and if , require an expression of a type that evaluates to the true boolean value. While C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as if (a) require only that a is convertible to bool, allowing a to be an int, or a pointer. C# disallows this "integer meaning true or false" approach, on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if (a = b) (use of assignment = instead of equality == ).

C# is more type safe than C++. The only implicit conversions by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during JIT , and, in some cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ copy constructors and conversion operators, which are both implicit by default.

C# has explicit support for covariance and contravariance in generic types, [ 16 ] : 144 [ 20 ] : 23 unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods.

Enumeration members are placed in their own scope .

The C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions.

Local variables cannot shadow variables of the enclosing block, unlike C and C++, but may shadow type-level names.

Metaprogramming [ edit ] Metaprogramming can be achieved in several ways: Reflection is supported through .NET APIs, which enable scenarios such as type metadata inspection and dynamic method invocation.

Expression trees [ 74 ] represent code as an abstract syntax tree , where each node is an expression that can be inspected or executed. This enables dynamic modification of executable code at runtime. Expression trees introduce some homoiconicity to the language.

Attributes , in C# parlance, are metadata that can be attached to types, members, or entire assemblies , equivalent to annotations in Java . Attributes are accessible both to the compiler and to code through reflection, allowing them to adjust their behaviour.

[ 75 ] Many of the native attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives.

[ citation needed ] System.Reflection.Emit namespace, [ 76 ] which contains classes that emit metadata and CIL (types, assemblies, etc.) at runtime .

The .NET Compiler Platform (Roslyn) provides API access to language compilation services, allowing for the compilation of C# code from within .NET applications. It exposes APIs for syntactic ( lexical ) analysis of code, semantic analysis , dynamic compilation to CIL, and code emission.

[ 77 ] Source generators, [ 78 ] a feature of the Roslyn C# compiler, enable compile time metaprogramming. During the compilation process, developers can inspect the code being compiled with the compiler's API and pass additional generated C# source code to be compiled.

Methods and functions [ edit ] A method in C# is a member of a class that can be invoked as a function (a sequence of instructions), rather than the mere value-holding capability of a field (i.e.

class or instance variable ).

[ 79 ] As in other syntactically similar languages, such as C++ and ANSI C , the signature of a method is a declaration comprising in order: any optional accessibility keywords (such as private ), the explicit specification of its return type (such as int , or the keyword void if no value is returned), the name of the method, and finally, a parenthesized sequence of comma-separated parameter specifications, each consisting of a parameter's type, its formal name and optionally, a default value to be used whenever none is provided. Different from most other languages, call-by-reference parameters have to be marked both at the function definition and at the calling site, and the programmer can choose between ref and out , the latter allowing handing over an uninitialized variable which will have a definite value on return.

[ 80 ] Additionally, the programmer can specify a variable-sized argument list by applying the params keyword to the last parameter.

[ 81 ] Certain specific kinds of methods, such as those that simply get or set a field's value by returning or assigning it, do not require an explicitly stated full signature, but in the general case, the definition of a class includes the full signature declaration of its methods.

[ 82 ] Like C++, and unlike Java, C# programmers must use the scope modifier keyword virtual to allow methods to be overridden by subclasses. Unlike C++, the programmer must explicitly specify the keyword override when doing so.

[ 83 ] This is supposed to avoid confusion between overriding and newly overloading a function (i.e. hiding the former implementation). To do the latter, the programmer has to specify the new keyword.

[ 84 ] The keyword sealed can be used to disallow further overrides for individual methods or whole classes.

[ 85 ] Extension methods in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to virtually add instance methods to a class that they feel should exist on that kind of objects (and instances of the respective derived classes).

[ 16 ] : 103–105 [ 20 ] : 202–203 The type dynamic allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition .

[ 16 ] : 114–118 C# has support for strongly-typed function pointers via the keyword delegate . Like the Qt framework's pseudo -C++ signal and slot , C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so. Unlike fields, event variables can be part of an interface, because they technically consist of two default functions to add and remove to-be-called delegates.

C# offers Java-like synchronized method calls, via the attribute [MethodImpl(MethodImplOptions.Synchronized)] , and has support for mutually-exclusive locks via the keyword lock .

Properties [ edit ] C# supports classes with properties . The properties can be simple accessor functions with a backing field, or implement arbitrary getter and setter functions. A property is read-only if there's no setter. Like with fields, there can be class and instance properties. The underlying methods can be virtual or abstract like any other method.

[ 82 ] Since C# 3.0 the syntactic sugar of auto-implemented properties is available, [ 86 ] where the accessor (getter) and mutator (setter) encapsulate operations on a single field of a class.

Namespaces [ edit ] A C# namespace provides the same level of code isolation as a Java package or a C++ namespace , with rules and features very similar to a package . Namespaces can be imported with the "using" syntax.

[ 87 ] Memory access [ edit ] In C#, memory address pointers can only be used within blocks specifically marked as unsafe , [ 88 ] and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point to a "live" object or have the well-defined null value; it is impossible to obtain a reference to a "dead" object (one that has been garbage collected), or to an arbitrary block of memory. An unsafe pointer can point to an instance of an unmanaged value type that does not contain any references to objects subject to garbage collections such as class instances, arrays or strings. Code that is not marked as unsafe can still store and manipulate pointers through the System.IntPtr type, but it cannot dereference them.

Managed memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed in most cases. Code that retains references to objects longer than is required can still experience higher memory usage than necessary, however once the final reference to an object is released the memory is available for garbage collection.

Exceptions [ edit ] A range of standard exceptions are available to programmers. Methods in standard libraries regularly throw system exceptions in some circumstances and the range of exceptions thrown is normally documented. Custom exception classes can be defined for classes allowing handling to be put in place for particular circumstances as needed.

[ 89 ] The syntax for handling exceptions is the following: try { // something } catch ( Exception ex ) { // if error do this } finally { // always executes, regardless of error occurrence } Most of the time people call this a "try-catch" code block, because of the "try" and "catch" functions being used and accessible on all C# versions.

try { // something here } catch ( Exception ex ) { // example return 0 ; } finally { return 1 ; } Depending on your plans, the "finally" part can be left out. If inspecting the error details is not required, the (Exception ex) parameter can be omitted as well. Also, there can be several "catch" parts handling different kinds of exceptions.

[ 90 ] Checked exceptions are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and version management.

[ 91 ] Polymorphism [ edit ] Unlike C++ , C# does not support multiple inheritance , although a class can implement any number of " interfaces " (fully abstract classes). This was a design decision by the language's lead architect to avoid complications and to simplify architectural requirements throughout CLI .

When implementing multiple interfaces that contain a method with the same name and taking parameters of the same types in the same order (i.e. the same signature ), similar to Java , C# allows both a single method to cover all interfaces and if necessary specific methods for each interface.

C# also offers function overloading (a.k.a.

ad-hoc-polymorphism ), i.e. methods with the same name, but distinguishable signatures.

[ 92 ] Unlike Java, C# additionally supports operator overloading .

[ 93 ] Since version 2.0, C# offers parametric polymorphism , i.e. classes with arbitrary or constrained type parameters, e.g.

List<T> , a variable-sized array which only can contain elements of type T . There are certain kinds of constraints the programmer can specify for the type parameters: Has to be type X ( or one derived from it ), has to implement a certain interface, has to be a reference type, has to be a value type, has to implement a public parameterless constructor . Most of them can be combined, and any number of interfaces can be specified.

[ 94 ] [ 95 ] Language Integrated Query (LINQ) [ edit ] C# has the ability to utilize LINQ through the .NET Framework. A developer can query a variety of data sources, provided the IEnumerable<T> interface is implemented on the object. This includes XML documents, an ADO.NET dataset, and SQL databases.

[ 96 ] Using LINQ in C# brings advantages like IntelliSense support, strong filtering capabilities, type safety with compile error checking ability, and consistency for querying data over a variety of sources.

[ 97 ] There are several different language structures that can be utilized with C# and LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers.

[ 98 ] LINQ has two syntaxes: query syntax and method syntax. However, the compiler always converts the query syntax to method syntax at compile time.

[ 99 ] using System.Linq ; var numbers = new int [] { 5 , 10 , 8 , 3 , 6 , 12 }; // Query syntax (SELECT num FROM numbers WHERE num % 2 = 0 ORDER BY num) var numQuery1 = from num in numbers where num % 2 == 0 orderby num select num ; // Method syntax var numQuery2 = numbers .

Where ( num => num % 2 == 0 ) .

OrderBy ( n => n ); Functional programming [ edit ] Though primarily an imperative language, C# always adds functional features over time, [ 100 ] [ 101 ] for example: Functions as first-class citizen – C# 1.0 delegates [ 102 ] Higher-order functions – C# 1.0 together with delegates Anonymous functions – C# 2 anonymous delegates and C# 3 lambdas expressions [ 103 ] Closures – C# 2 together with anonymous delegates and C# 3 together with lambdas expressions [ 103 ] Type inference – C# 3 with implicitly typed local variables var and C# 9 target-typed new expressions new () List comprehension – C# 3 LINQ Tuples – .NET Framework 4.0 but it becomes popular when C# 7.0 introduced a new tuple type with language support [ 104 ] Nested functions – C# 7.0 [ 104 ] Pattern matching – C# 7.0 [ 104 ] Immutability – C# 7.2 readonly struct C# 9 record types [ 105 ] and Init only setters [ 106 ] Type classes – C# 12 roles/extensions (in development [ 107 ] ) Common type system [ edit ] C# has a unified type system . This unified type system is called Common Type System (CTS).

[ 108 ] : Part 2, Chapter 4: The Type System A unified type system implies that all types, including primitives such as integers, are subclasses of the System .

Object class. For example, every type inherits a ToString () method.

Categories of data types [ edit ] CTS separates data types into two categories: [ 108 ] Reference types Value types Instances of value types neither have referential identity nor referential comparison semantics. Equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from System .

ValueType , always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor because they already have an implicit one which initializes all contained data to the type-dependent default value (0, null, or alike). Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit Unicode code unit), decimal (fixed-point numbers useful for handling currency amounts), and System .

DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures).

In contrast, reference types have the notion of referential identity, meaning that each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System .

String ). Some operations are not always possible, such as creating an instance of a reference type, copying an existing instance, or performing a value comparison on two existing instances. Nevertheless, specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable ). Examples of reference types are object (the ultimate base class for all other C# classes), System .

String (a string of Unicode characters), and System .

Array (a base class for all C# arrays).

Both type categories are extensible with user-defined types.

Boxing and unboxing [ edit ] Boxing is the operation of converting a value-type object into a value of a corresponding reference type.

[ 108 ] Boxing in C# is implicit.

Unboxing is the operation of converting a value of a reference type (previously boxed) into a value of a value type.

[ 108 ] Unboxing in C# requires an explicit type cast . A boxed object of type T can only be unboxed to a T (or a nullable T).

[ 109 ] Example: int foo = 42 ; // Value type.

object bar = foo ; // foo is boxed to bar.

int foo2 = ( int ) bar ; // Unboxed back to value type.

Libraries [ edit ] The C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the Common Language Infrastructure (CLI), which is standardized as ECMA-335 Common Language Infrastructure (CLI) .

In addition to the standard CLI specifications, there are many commercial and community class libraries that build on top of the .NET framework libraries to provide additional functionality.

[ 110 ] C# can make calls to any library included in the List of .NET libraries and frameworks .

Examples [ edit ] Hello World [ edit ] The following is a very simple C# program, a version of the classic " Hello world " example using the top-level statements feature introduced in C# 9: [ 111 ] System .

Console .

WriteLine ( "Hello, world!" ); For code written as C# 8 or lower, the entry point logic of a program must be written in a Main method inside a type: using System ; class Program { static void Main () { Console .

WriteLine ( "Hello, world!" ); } } This code will display this text in the console window: Hello, world!

Each line has a purpose: using System ; The above line imports all types in the System namespace. For example, the Console class used later in the source code is defined in the System namespace, meaning it can be used without supplying the full name of the type (which includes the namespace).

// A version of the classic "Hello World" program This line is a comment; it describes and documents the code for the programmer(s).

class Program Above is a class definition for the Program class. Everything that follows between the pair of braces describes that class.

{ ...

} The curly brackets demarcate the boundaries of a code block. In this first instance, they are marking the start and end of the Program class.

static void Main () This declares the class member method where the program begins execution. The .NET runtime calls the Main method. Unlike in Java , the Main method does not need the public keyword, which tells the compiler that the method can be called from anywhere by any class.

[ 112 ] Writing static void Main ( string [] args ) is equivalent to writing private static void Main ( string [] args ) . The static keyword makes the method accessible without an instance of Program . Each console application's Main entry point must be declared static otherwise the program would require an instance of Program , but any instance would require a program. To avoid that irresolvable circular dependency , C# compilers processing console applications (like that above) report an error if there is no static Main method. The void keyword declares that Main has no return value . (Note, however, that short programs can be written using Top Level Statements introduced in C# 9, as mentioned earlier.) Console .

WriteLine ( "Hello, world!" ); This line writes the output.

Console is a static class in the System namespace. It provides an interface to the standard input/output , and error streams for console applications. The program calls the Console method WriteLine , which displays on the console a line with the argument, the string "Hello, world!" .

Generics [ edit ] Further information: Generic programming With .NET 2.0 and C# 2.0, the community got more flexible collections than those in .NET 1.x. In the absence of generics, developers had to use collections such as ArrayList to store elements as objects of unspecified kind, which incurred performance overhead when boxing/unboxing/type-checking the contained items.

Generics introduced a massive new feature in .NET that allowed developers to create type-safe data structures. This shift is particularly important in the context of converting legacy systems, where updating to generics can significantly enhance performance and maintainability by replacing outdated data structures with more efficient, type-safe alternatives.

[ 113 ] Example public class DataStore < T > { private T [] items = new T [ 10 ]; private int count = 0 ; public void Add ( T item ) { items [ count ++ ] = item ; } public T Get ( int index ) { return items [ index ]; } } Standardization and licensing [ edit ] In August 2001, Microsoft , Hewlett-Packard and Intel co-sponsored the submission of specifications for C# as well as the Common Language Infrastructure (CLI) to the standards organization Ecma International . In December 2001, ECMA released ECMA-334 C# Language Specification . C# became an ISO / IEC standard in 2003 (ISO/IEC 23270:2003 - Information technology — Programming languages — C# ). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002. In June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and generics (somewhat similar to C++ templates ). In July 2005, ECMA submitted to ISO/IEC JTC 1/SC 22, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6–9 months.

The C# language definition and the CLI are standardized under ISO/IEC and Ecma standards that provide reasonable and non-discriminatory licensing protection from patent claims.

Microsoft initially agreed not to sue open-source developers for violating patents in non-profit projects for the part of the framework that is covered by the Open Specification Promise .

[ 114 ] Microsoft has also agreed not to enforce patents relating to Novell products against Novell's paying customers [ 115 ] with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET ( The Mono Project ).

[ 116 ] However, Novell maintained that Mono does not infringe any Microsoft patents.

[ 117 ] Microsoft also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin , which depends on Mono, provided it is obtained through Novell.

[ 118 ] A decade later, Microsoft began developing free, open-source, and cross-platform tooling for C#, namely Visual Studio Code , .NET Core , and Roslyn . Mono joined Microsoft as a project of Xamarin , a Microsoft subsidiary.

Implementations [ edit ] Microsoft has developed open-source reference C# compilers and tools. The first compiler, Roslyn , compiles into intermediate language (IL), and the second one, RyuJIT, [ 119 ] is a JIT (just-in-time) compiler, which is dynamic and does on-the-fly optimization and compiles the IL into native code for the front-end of the CPU.

[ 120 ] RyuJIT is open source and written in C++.

[ 121 ] Roslyn is entirely written in managed code (C#), has been opened up and functionality surfaced as APIs.  It is thus enabling developers to create refactoring and diagnostics tools.

[ 4 ] [ 122 ] Two branches of official implementation are .NET Framework (closed-source, Windows-only) and .NET Core (open-source, cross-platform); they eventually converged into one open-source implementation: .NET 5.0.

[ 123 ] At .NET Framework 4.6, a new JIT compiler replaced the former.

[ 119 ] [ 124 ] Other C# compilers (some of which include an implementation of the Common Language Infrastructure and .NET class libraries): Mono , a Microsoft-sponsored project provides an open-source C# compiler, a complete open-source implementation of the CLI (including the required framework libraries as they appear in the ECMA specification,) and a nearly complete implementation of the NET class libraries up to .NET Framework 3.5.

The Elements tool chain from RemObjects includes RemObjects C#, which compiles C# code to .NET's Common Intermediate Language , Java bytecode , Cocoa , Android bytecode , WebAssembly , and native machine code for Windows, macOS, and Linux.

The DotGNU project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework distribution).

The Unity game engine uses C# as its primary scripting language. The Godot game engine has implemented an optional C# module due to a donation of $24,000 from Microsoft.

[ 125 ] See also [ edit ] Computer programming portal C# topics C# syntax Comparison of C# and Java Comparison of C# and Visual Basic .NET .NET standard libraries IDEs Visual Studio Visual Studio Code Rider LINQPad MonoDevelop Morfik SharpDevelop Turbo C# Microsoft Visual Studio Express Xamarin Studio Notes [ edit ] ^ for async ^ By convention, a number sign is used for the second character in normal text; in artistic representations, sometimes a true sharp sign is used: C♯. However the ECMA 334 standard states: "The name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023)." ^ Language versions 1.0, 2.0, and 5.0 are available as ISO/IEC 23270. Beginning with version 7.0, the specification is available as ISO/IEC 20619 ^ The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above.

References [ edit ] Citations [ edit ] ^ "InfoQ eMag: A Preview of C# 7" .

Archived from the original on April 24, 2023 . Retrieved November 11, 2016 .

^ "What's new in .NET 10" .

^ Torgersen, Mads (October 27, 2008).

"New features in C# 4.0" .

Microsoft . Archived from the original on January 3, 2012 . Retrieved October 28, 2008 .

^ a b "The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.: dotnet/roslyn" . November 13, 2019.

Archived from the original on February 22, 2021 . Retrieved February 13, 2015 – via GitHub.

^ "CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.: dotnet/coreclr" . November 13, 2019.

Archived from the original on October 14, 2019 . Retrieved March 8, 2017 – via GitHub.

^ a b Naugler, David (May 2007). "C# 2.0 for C++ and Java programmer: conference workshop".

Journal of Computing Sciences in Colleges .

22 (5).

Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java.

^ Hamilton, Naomi (October 1, 2008).

"The A-Z of Programming Languages: C#" .

Computerworld . Archived from the original on March 24, 2010 . Retrieved February 12, 2010 .

We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. ( Anders Hejlsberg ) ^ "Chapel spec (Acknowledgments)" (PDF) . Cray Inc. October 1, 2015. Archived from the original (PDF) on February 5, 2016 . Retrieved January 14, 2016 .

^ "Rich Hickey Q&A by Michael Fogus" . Archived from the original on January 11, 2017 . Retrieved January 11, 2017 .

^ Borenszweig, Ary (June 14, 2016).

"Crystal 0.18.0 released!" .

Archived from the original on December 25, 2018 . Retrieved August 7, 2017 .

It's heavily inspired by Ruby, and other languages (like C#, Go and Python).

^ "Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013" .

YouTube . May 16, 2013.

Archived from the original on December 21, 2021 . Retrieved December 22, 2013 .

^ Java 5.0 added several new language features (the enhanced for loop , autoboxing , varargs and annotations ), after they were introduced in the similar (and competing) C# language [1] Archived March 19, 2011, at the Wayback Machine [2] Archived January 7, 2006, at the Wayback Machine ^ Cornelius, Barry (December 1, 2005).

"Java 5 catches up with C#" .

University of Oxford Computing Services.

Archived from the original on March 6, 2023 . Retrieved June 18, 2014 .

In my opinion, it is C# that has caused these radical changes to the Java language. ( Barry Cornelius ) ^ "Influences - The Rust Reference" .

The Rust Reference .

Archived from the original on January 26, 2019 . Retrieved April 18, 2023 .

^ Lattner, Chris (June 3, 2014).

"Chris Lattner's Homepage" . Chris Lattner.

Archived from the original on December 25, 2018 . Retrieved May 12, 2020 .

The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ a b c d e f g Skeet 2019 .

^ a b c d e C# Language Specification (PDF) (4th ed.).

Ecma International . June 2006.

Archived (PDF) from the original on April 21, 2021 . Retrieved January 26, 2012 .

^ Dollard, Kathleen (November 14, 2023).

"Announcing C# 12" .

.NET Blog .

Archived from the original on November 18, 2023 . Retrieved November 18, 2023 .

^ Seth, Gaurav (November 14, 2023).

"Announcing .NET 8" .

.NET Blog .

Archived from the original on November 19, 2023 . Retrieved November 18, 2023 .

^ a b c d e f Albahari 2022 .

^ "Design Goals of C#" .

www.java-samples.com .

Archived from the original on October 6, 2021 . Retrieved October 6, 2021 .

^ Zander, Jason (November 22, 2007).

"Couple of Historical Facts" .

Archived from the original on July 29, 2020 . Retrieved February 23, 2009 .

^ Guthrie, Scott (November 28, 2006).

"What language was ASP.Net originally written in?" . Archived from the original on June 24, 2016 . Retrieved February 21, 2008 .

^ Hamilton, Naomi (October 1, 2008).

"The A-Z of Programming Languages: C#" .

Computerworld . Archived from the original on May 18, 2019 . Retrieved October 1, 2008 .

^ "Details" .

nilsnaegele.com . Archived from the original on April 7, 2019 . Retrieved April 7, 2019 .

^ "Why Microsoft's C# isn't" . CNET: CBS Interactive. 2002.

Archived from the original on August 14, 2023 . Retrieved September 18, 2023 .

^ Joy, Bill (February 7, 2002).

"Microsoft's blind spot" . cnet.com.

Archived from the original on August 14, 2023 . Retrieved September 18, 2023 .

^ Osborn, John (August 1, 2000).

"Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg" . O'Reilly Media.

Archived from the original on January 9, 2010 . Retrieved November 14, 2009 .

^ "Generics (C# Programming Guide)" . Microsoft.

Archived from the original on August 26, 2011 . Retrieved March 21, 2011 .

^ Don Box and Anders Hejlsberg (February 2007).

"LINQ: .NET Language-Integrated Query" . Microsoft.

Archived from the original on August 24, 2011 . Retrieved March 21, 2011 .

^ Mercer, Ian (April 15, 2010).

"Why functional programming and LINQ is often better than procedural code" . abodit.com. Archived from the original on July 11, 2011 . Retrieved March 21, 2011 .

^ Fernandez, Dan (January 29, 2004).

"Andy Retires" .

Dan Fernandez's Blog . Blogs.msdn.com. Archived from the original on January 19, 2016 . Retrieved October 4, 2012 .

^ "Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces" . ISO.

Archived from the original on September 27, 2012 . Retrieved October 4, 2012 .

^ "ISO/IEC 23270:2003 - Information technology - C# Language Specification" . Iso.org. August 23, 2006. Archived from the original on May 8, 2012 . Retrieved October 4, 2012 .

^ "ISO/IEC 23270:2006 - Information technology - Programming languages - C#" . Iso.org. January 26, 2012.

Archived from the original on December 6, 2010 . Retrieved October 4, 2012 .

^ "SO/IEC 23270:2018 Information technology — Programming languages — C#" .

ISO . Retrieved November 26, 2020 .

^ Mariani, Rico (October 5, 2009).

"My History of Visual Studio (Part 1) – Rico Mariani's Performance Tidbits" .

Rico Mariani's Performance Tidbits .

Archived from the original on May 27, 2018 . Retrieved May 26, 2018 .

^ Kovacs, James (September 7, 2007).

"C#/.NET History Lesson" . Archived from the original on March 6, 2009 . Retrieved June 18, 2009 .

^ Hejlsberg, Anders (October 1, 2008).

"The A-Z of Programming Languages: C#" .

Computerworld . Archived from the original on April 2, 2015 . Retrieved June 22, 2014 .

^ "Microsoft C# FAQ" .

Microsoft . Archived from the original on February 14, 2006 . Retrieved March 25, 2008 .

^ "F# FAQ" . Microsoft Research. Archived from the original on February 18, 2009 . Retrieved June 18, 2009 .

^ Simon, Raphael; Stapf, Emmanuel; Meyer, Bertrand (June 2002).

"Full Eiffel on the .NET Framework" .

Microsoft .

Archived from the original on July 21, 2009 . Retrieved June 18, 2009 .

^ "What's new in the C# 2.0 Language and Compiler" . Microsoft. Archived from the original on December 18, 2010 . Retrieved June 11, 2014 .

^ Hejlsberg, Anders; Torgersen, Mads (April 30, 2007).

"Overview of C# 3.0" .

Microsoft Developer Network . Microsoft.

Archived from the original on June 25, 2014 . Retrieved June 11, 2014 .

^ a b "Using C# 3.0 from .NET 2.0" . Danielmoth.com. May 13, 2007.

Archived from the original on September 29, 2012 . Retrieved October 4, 2012 .

^ Hejlsberg, Anders (September 15, 2011).

"Future directions for C# and Visual Basic" .

Channel 9 . BUILD2011. Microsoft. Archived from the original on September 23, 2011 . Retrieved September 21, 2011 .

^ "An Introduction to New Features in C# 5.0" .

The Microsoft MVP Award Program Blog . Microsoft. March 26, 2012. Archived from the original on June 4, 2014 . Retrieved June 11, 2014 .

^ "Languages features in C# 6 and VB 14" .

GitHub . dotnet/roslyn. Archived from the original on January 12, 2016 . Retrieved February 13, 2015 .

^ "What's new in C# 7" .

Microsoft Docs . December 21, 2016. Archived from the original on November 1, 2017.

^ Torgersen, Mads (March 9, 2017).

"New Features in C# 7.0" .

.NET Blog . Microsoft.

Archived from the original on April 11, 2017 . Retrieved June 9, 2017 .

^ "Visual Studio 2017 version 15.0 Release Notes" .

Microsoft Learn . April 11, 2023.

Archived from the original on April 20, 2023 . Retrieved April 19, 2023 .

^ "What's new in C# 7.1" .

Microsoft Docs .

Archived from the original on October 10, 2017 . Retrieved October 9, 2017 .

^ "Visual Studio 2017 version 15.3 Release Notes" .

Microsoft Learn . April 11, 2023.

Archived from the original on March 21, 2023 . Retrieved April 19, 2023 .

^ "What's new in C# 7.2" .

Microsoft Docs .

Archived from the original on December 1, 2017 . Retrieved November 26, 2017 .

^ "Visual Studio 2017 version 15.5 Release Notes" .

Microsoft Learn . April 11, 2023.

Archived from the original on April 20, 2023 . Retrieved April 19, 2023 .

^ "What's new in C# 7.3" .

Microsoft Docs .

Archived from the original on June 23, 2018 . Retrieved June 23, 2018 .

^ "Visual Studio 2017 version 15.7 Release Notes" .

Microsoft Learn . July 13, 2022.

Archived from the original on April 20, 2023 . Retrieved April 19, 2023 .

^ "What's new in C# 8.0" .

Microsoft Docs . March 9, 2023.

Archived from the original on September 6, 2020 . Retrieved April 14, 2019 .

^ "Visual Studio 2019 version 16.3 Release Notes" .

Microsoft Learn . April 11, 2023.

Archived from the original on April 20, 2023 . Retrieved April 19, 2023 .

^ BillWagner.

"What's new in C# 9.0 - C# Guide" .

Microsoft Learn .

Archived from the original on September 5, 2020 . Retrieved October 15, 2020 .

^ "Visual Studio 2019 version 16.8 Release Notes" .

Microsoft Learn . April 11, 2023.

Archived from the original on April 20, 2023 . Retrieved April 19, 2023 .

^ "What's new in C# 10" .

Microsoft Learn .

Archived from the original on February 8, 2022 . Retrieved November 10, 2021 .

^ "Visual Studio 2022 version 17.0 Release Notes" .

Microsoft Learn .

Archived from the original on July 16, 2023 . Retrieved April 19, 2023 .

^ "What's new in C# 11" .

Microsoft Learn .

Archived from the original on August 15, 2022 . Retrieved August 8, 2022 .

^ "Visual Studio 2022 version 17.4 Release Notes" .

Microsoft Learn .

Archived from the original on August 6, 2023 . Retrieved April 19, 2023 .

^ "What's new in C# 12" .

Microsoft Learn .

Archived from the original on July 20, 2023 . Retrieved June 29, 2023 .

^ "Visual Studio 2022 version 17.8 Release Notes" .

Microsoft Learn . August 13, 2024.

Archived from the original on October 6, 2024 . Retrieved November 18, 2024 .

^ "What's new in C# 13" .

Microsoft Learn .

Archived from the original on November 13, 2024 . Retrieved November 18, 2024 .

^ "Visual Studio 2022 Release Notes" .

Microsoft Learn . November 12, 2024.

Archived from the original on November 12, 2024 . Retrieved November 18, 2024 .

^ Novák et al. 2010 .

^ stevewhims; mattwojo (October 20, 2022).

"Compiling Apps with .NET Native - UWP applications" .

learn.microsoft.com .

Archived from the original on October 27, 2023 . Retrieved October 27, 2023 .

^ LakshanF; agocke; Rick-Anderson; et al. (September 12, 2023).

"Native AOT deployment overview - .NET" .

learn.microsoft.com .

Archived from the original on November 11, 2023 . Retrieved October 27, 2023 .

{{ cite web }} :  CS1 maint: numeric names: authors list ( link ) ^ "Types/General, part of the official C# documentation" .

Microsoft .

Archived from the original on March 29, 2024 . Retrieved April 6, 2024 .

^ BillWagner.

"Expression Trees (C#)" .

Microsoft Learn .

Archived from the original on May 15, 2021 . Retrieved May 14, 2021 .

^ "Attribute Class" .

^ dotnet-bot.

"System.Reflection.Emit Namespace" .

learn.microsoft.com .

Archived from the original on April 28, 2023 . Retrieved April 28, 2023 .

^ McAllister, Neil (October 20, 2011).

"Microsoft's Roslyn: Reinventing the compiler as we know it" .

InfoWorld .

Archived from the original on March 5, 2022 . Retrieved March 5, 2022 .

^ "Introducing C# Source Generators" .

.NET Blog . April 29, 2020.

Archived from the original on May 7, 2021 . Retrieved May 14, 2021 .

^ "Classes/fields, part of the official C# documentation" . February 7, 2024.

^ "out (C# Reference)" . March 30, 2024.

^ "Method parameters/params modifier, part of the official C# documentation" . May 21, 2024.

^ a b "Classes/properties, part of the official C# documentation" . February 7, 2024.

^ "virtual (C# Reference)" .

Microsoft Learn . September 15, 2021.

Archived from the original on August 30, 2018 . Retrieved April 4, 2018 .

^ " new modifier, part of the official C# documentation" . April 12, 2023.

^ "Abstract and Sealed Classes and Class Members - C#" . October 27, 2021.

^ "Auto-Implemented Properties (C# Programming Guide)" .

Archived from the original on October 29, 2020 . Retrieved September 12, 2020 .

^ "using directive - C# Reference" .

Microsoft Docs .

Archived from the original on April 14, 2019 . Retrieved April 14, 2019 .

^ BillWagner.

"Unsafe code, pointers to data, and function pointers" .

Microsoft Learn .

Archived from the original on July 4, 2021 . Retrieved June 20, 2021 .

^ "How to create user-defined exceptions" .

Archived from the original on January 26, 2021 . Retrieved September 12, 2020 .

^ "Exception-handling statements, part of the official C# documentation" .

Microsoft Learn . April 22, 2023 . Retrieved June 26, 2024 .

^ Venners, Bill; Eckel, Bruce (August 18, 2003).

"The Trouble with Checked Exceptions" .

Archived from the original on February 18, 2015 . Retrieved March 30, 2010 .

^ "Expressions/Overload resolution, part of the official C# documentation" .

Microsoft Learn . February 7, 2024 . Retrieved April 7, 2024 .

^ BillWagner.

"Operator overloading - C# reference" .

Microsoft Learn .

Archived from the original on June 24, 2021 . Retrieved June 20, 2021 .

^ "Types/Constructed Types, part of the official C# documentation" .

Microsoft Learn . Retrieved April 7, 2024 .

^ "Classes/Type Parameter constraints, part of the official C# documentation" .

Microsoft Learn . February 7, 2024 . Retrieved April 7, 2024 .

^ Zhang, Xue Dong; Teng, Zi Mu; Zhao, Dong Wang (September 2014). "Research of the Database Access Technology Under.NET Framework".

Applied Mechanics and Materials .

644– 650: 3077– 3080.

doi : 10.4028/www.scientific.net/AMM.644-650.3077 .

S2CID 62201466 .

ProQuest 1565579768 .

^ Otey, Michael (February 2006). "LINQ to the Future".

SQL Server Magazine . Vol. 8, no. 2. pp.

17– 21.

ProQuest 214859896 .

^ Sheldon, William (November 2010). "New Features in LINQ".

SQL Server Magazine . Vol. 12, no. 11. pp.

37– 40.

ProQuest 770609095 .

^ BillWagner (September 15, 2021).

"Query Syntax and Method Syntax in LINQ (C#)" .

learn.microsoft.com .

Archived from the original on May 23, 2023 . Retrieved May 23, 2023 .

^ erikdietrich (March 9, 2023).

"The history of C# - C# Guide" .

learn.microsoft.com .

Archived from the original on April 28, 2023 . Retrieved April 28, 2023 .

^ The functional journey of C# - Mads Torgersen - NDC Copenhagen 2022 , August 17, 2022, archived from the original on May 15, 2023 , retrieved May 15, 2023 ^ "The Beauty of Closures" .

csharpindepth.com .

Archived from the original on May 19, 2023 . Retrieved April 28, 2023 .

^ a b BillWagner.

"Anonymous functions - C# Programming Guide" .

Microsoft Learn .

Archived from the original on April 15, 2021 . Retrieved May 15, 2021 .

^ a b c "What's New in C# 7.0" .

Microsoft Docs .

Archived from the original on August 6, 2020 . Retrieved April 14, 2019 .

^ "C# 9.0 on the record" .

.NET Blog . November 10, 2020.

Archived from the original on May 15, 2021 . Retrieved May 15, 2021 .

^ BillWagner (June 30, 2022).

"init keyword - C# Reference" .

learn.microsoft.com .

Archived from the original on May 19, 2023 . Retrieved May 19, 2023 .

^ The .NET Compiler Platform , .NET Platform, April 28, 2023, archived from the original on April 28, 2023 , retrieved April 28, 2023 ^ a b c d Archer 2001 .

^ Lippert, Eric (March 19, 2009).

"Representation and Identity" .

Fabulous Adventures In Coding . Blogs.msdn.com.

Archived from the original on July 12, 2011 . Retrieved October 4, 2012 .

^ "Framework Libraries" .

Microsoft Learn . April 19, 2023.

Archived from the original on July 14, 2019 . Retrieved July 14, 2019 .

^ BillWagner.

"What's new in C# 9.0 - C# Guide" .

Microsoft Learn .

Archived from the original on September 5, 2020 . Retrieved May 14, 2021 .

^ BillWagner.

"Main() and command-line arguments" .

Microsoft Learn .

Archived from the original on August 5, 2021 . Retrieved August 5, 2021 .

^ "Unlocking the Power of C# Generics: A Comprehensive Guide" . April 24, 2024.

^ "Patent Pledge for Open Source Developers" . March 16, 2023.

Archived from the original on December 7, 2017 . Retrieved October 28, 2017 .

^ "Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration" .

Microsoft . November 2, 2006. Archived from the original on May 17, 2009 . Retrieved July 5, 2009 .

Microsoft, on behalf of itself and its Subsidiaries (collectively "Microsoft"), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively "Novell") for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration for such Revenue.

^ "Definitions" .

Microsoft . November 2, 2006.

Archived from the original on November 4, 2012 . Retrieved July 5, 2009 .

^ Steinman, Justin (November 7, 2006).

"Novell Answers Questions from the Community" .

Archived from the original on July 16, 2013 . Retrieved July 5, 2009 .

We maintain that Mono does not infringe any Microsoft patents.

^ "Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration" .

Microsoft . September 28, 2007. Archived from the original on September 23, 2010 . Retrieved March 8, 2008 .

"Downstream Recipient" means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including discontinue) the foregoing covenant... "Moonlight Implementation" means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License.

^ a b "The RyuJIT transition is complete!" .

microsoft.com . June 19, 2018.

Archived from the original on July 19, 2019 . Retrieved July 20, 2021 .

^ "Managed Execution Process" .

microsoft.com .

Archived from the original on December 23, 2017 . Retrieved July 20, 2021 .

^ "coreclr/src/jit/" .

github.com .

Archived from the original on January 9, 2019 . Retrieved July 20, 2021 .

^ "C# Guide" .

Microsoft Learn .

Archived from the original on August 13, 2022 . Retrieved July 28, 2017 .

^ "5.0.8" .

microsoft.com .

Archived from the original on April 23, 2020 . Retrieved July 20, 2021 .

^ "Mitigation: New 64-bit JIT Compiler" .

microsoft.com .

Archived from the original on April 5, 2018 . Retrieved July 20, 2021 .

^ Etcheverry, Ignacio (October 21, 2017).

"Introducing C# in Godot" .

Godot Engine .

Archived from the original on October 26, 2018 . Retrieved October 26, 2018 .

Sources [ edit ] Albahari, Joseph (2022).

C# 10 in a Nutshell (First ed.). O'Reilly.

ISBN 978-1-098-12195-2 .

Archer, Tom (2001). "Part 2, Chapter 4: The Type System".

Inside C# . Redmond, Washington: Microsoft Press.

ISBN 0-7356-1288-9 .

Novák, István; Velvart, Andras; Granicz, Adam; Balássy, György; Hajdrik, Attila; Sellers, Mitchel; Hillar, Gastón C.; Molnár, Ágnes; Kanjilal, Joydip (2010).

Visual Studio 2010 and .NET 4 Six-in-One . Wrox Press.

ISBN 978-0470499481 .

Skeet, Jon (2019).

C# in Depth (Fourth ed.). Manning.

ISBN 978-1617294532 .

Further reading [ edit ] Drayton, Peter; Albahari, Ben; Neward, Ted (2002).

C# Language Pocket Reference . O'Reilly.

ISBN 0-596-00429-X .

Petzold, Charles (2002).

Programming Microsoft Windows with C# . Microsoft Press.

ISBN 0-7356-1370-2 .

External links [ edit ] C# Language Specification C# Programming Guide ISO C# Language Specification C# Compiler Platform ("Roslyn") source code v t e Common Language Infrastructure Architecture Application domain Code Access Security Common Intermediate Language instructions Common Type System Platform Invocation Services Virtual Execution System Components Assembly Delegate Global Assembly Cache Manifest Metadata Standard Libraries Implementations Microsoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono DotGNU Languages Major C# Visual Basic F# PowerShell Other Axum A# Boo Clojure Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Small Basic Comparison C# and Java C# and Visual Basic .NET Visual Basic and Visual Basic .NET v t e Microsoft free and open-source software (FOSS) Overview Microsoft and open source Shared Source Initiative Software Applications 3D Movie Maker Atom Conference XP Family.Show File Manager Open Live Writer Microsoft Edit Microsoft PowerToys Terminal Windows Calculator Windows Console Windows Package Manager WorldWide Telescope XML Notepad Video games Allegiance Programming languages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P Power Fx PowerShell Project Verona Q# Small Basic Online TypeScript Visual Basic Frameworks, development tools .NET .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms Avalonia Babylon.js BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler Dapr DeepSpeed DiskSpd Dryad Dynamic Language Runtime eBPF on Windows Electron Entity Framework Fluent Design System Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Design Language Microsoft Detours Microsoft Enterprise Library Microsoft SEAL mimalloc Mixed Reality Toolkit ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans Playwright ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Voldemort VoTT Vowpal Wabbit Windows App SDK Windows Communication Foundation Windows Driver Frameworks KMDF UMDF Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XDP for Windows XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25, v2.0 & v4.0) Barrelfish SONiC Azure Linux Other ChronoZoom Extensible Storage Engine FlexWiki FourQ Gollum Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Windows Subsystem for Linux Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F# Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category v t e Standards of Ecma International Application interfaces ANSI escape code APIW Common Language Infrastructure Office Open XML OpenXPS File systems (tape) Advanced Intelligent Tape DDS DLT Super DLT Linear Tape-Open (Ultrium-1) VXA File systems (disk) CD-ROM CD File System (CDFS) FAT FAT12 FAT16 FAT16B FD UDF Ultra Density Optical Universal Media Disc Holographic Versatile Disc Graphics Universal 3D Programming languages C++/CLI C# Eiffel JavaScript ( E4X , ECMAScript ) Dart Minimal BASIC Full BASIC Radio link interfaces NFC UWB Other ECMA-35 JSON List of Ecma standards (1961 – present) v t e International Organization for Standardization (ISO) standards List of ISO standards – ISO romanizations – IEC standards 1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 ( -2 ) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18760 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21778 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40314 40500 42010 45001 50001 55000 56000 80000 Category v t e Programming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more...

Lists: Alphabetical Categorical Generational Non-English-based Category v t e IEC standards IEC 60027 60034 60038 60062 60063 60068 60112 60228 60269 60297 60309 60320 60364 60446 60559 60601 60870 60870-5 60870-6 60906-1 60908 60929 60958 60980-344 61030 61131 61131-3 61131-9 61158 61162 61334 61355 61360 61400 61499 61508 61511 61784 61850 61851 61883 61960 61968 61970 62014-4 62026 62056 62061 62196 62262 62264 62304 62325 62351 62365 62366 62379 62386 62455 62680 62682 62700 63110 63119 63382 ISO/IEC 646 1989 2022 4909 5218 6429 6523 7810 7811 7812 7813 7816 7942 8613 8632 8652 8859 9126 9293 9496 9529 9592 9593 9899 9945 9995 10021 10116 10165 10179 10279 10646 10967 11172 11179 11404 11544 11801 12207 13250 13346 13522-5 13568 13816 13818 14443 14496 14651 14882 15288 15291 15408 15444 15445 15504 15511 15693 15897 15938 16262 16485 17024 17025 18004 18014 18181 19752 19757 19770 19788 20000 20802 21000 21827 22275 22537 23000 23003 23008 23270 23360 24707 24727 24744 24752 26300 27000 27000 family 27002 27040 29110 29119 33001 38500 39075 42010 80000 81346 Related International Electrotechnical Commission Authority control databases National Germany United States France BnF data Czech Republic Israel Other ELMCIP Yale LUX Retrieved from " https://en.wikipedia.org/w/index.php?title=C_Sharp_(programming_language)&oldid=1306061235 " Categories : C Sharp programming language family 2000 software American inventions Programming languages High-level programming languages .NET programming languages Class-based programming languages Ecma standards Functional languages IEC standards ISO standards Microsoft programming languages Multi-paradigm programming languages Programming languages created in 2000 Programming languages with an ISO standard Statically typed programming languages Compiled programming languages Hidden categories: Webarchive template wayback links CS1: unfit URL CS1 maint: numeric names: authors list CS1: long volume value Articles with short description Short description is different from Wikidata Restricted titles (non-leading number sign) Use mdy dates from April 2020 Articles containing potentially dated statements from January 2025 All articles containing potentially dated statements All articles with unsourced statements Articles with unsourced statements from July 2025 Articles with unsourced statements from March 2022 Articles with example C++ code Articles with example C Sharp code This page was last edited on 15 August 2025, at 18:17 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents C Sharp (programming language) 82 languages Add topic

