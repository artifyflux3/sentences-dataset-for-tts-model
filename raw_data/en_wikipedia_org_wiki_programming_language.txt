Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Related 2 History Toggle History subsection 2.1 Early developments 2.2 1960s and 1970s 2.3 1980s to 2000s 2.4 2000s to present 3 Definition Toggle Definition subsection 3.1 Syntax 3.2 Semantics 3.2.1 Static semantics 3.2.2 Dynamic semantics 4 Features Toggle Features subsection 4.1 Type system 4.1.1 Commonly supported types 4.1.2 Static and dynamic typing 4.2 Concurrency 4.3 Exception handling 5 Design and implementation Toggle Design and implementation subsection 5.1 Tradeoffs 5.2 Specification 5.3 Implementation 6 Proprietary languages 7 Use Toggle Use subsection 7.1 Measuring language usage 8 Dialects, flavors and implementations 9 Classifications 10 See also 11 References 12 Further reading Toggle the table of contents Programming language 144 languages Afrikaans Alemannisch አማርኛ अंगिका العربية Aragonés অসমীয়া Asturianu Azərbaycanca تۆرکجه বাংলা 閩南語 / Bân-lâm-gí Башҡортса Беларуская Беларуская (тарашкевіца) भोजपुरी Български Boarisch Bosanski Brezhoneg Català Чӑвашла Čeština ChiTumbuka Cymraeg Dansk الدارجة Deutsch Eesti Ελληνικά Español Esperanto Estremeñu Euskara فارسی Fiji Hindi Français Gaeilge Gàidhlig Galego 한국어 Հայերեն हिन्दी Hornjoserbsce Hrvatski Ido Ilokano Bahasa Indonesia Interlingua Interlingue IsiZulu Íslenska Italiano עברית Jawa ქართული Қазақша Kiswahili Kurdî Кыргызча ລາວ Latina Latviešu Lëtzebuergesch Lietuvių La .lojban.

Lombard Magyar Македонски മലയാളം मराठी მარგალური مصرى Bahasa Melayu Minangkabau 閩東語 / Mìng-dĕ̤ng-ngṳ̄ Mirandés Монгол မြန်မာဘာသာ Na Vosa Vakaviti Nederlands नेपाली 日本語 ߒߞߏ Nordfriisk Norsk bokmål Norsk nynorsk Occitan Олык марий Oʻzbekcha / ўзбекча ਪੰਜਾਬੀ پنجابی ပအိုဝ်ႏဘာႏသာႏ پښتو ភាសាខ្មែរ Piemontèis Plattdüütsch Polski Português Qaraqalpaqsha Română Runa Simi Русиньскый Русский Саха тыла Sardu Scots Shqip සිංහල Simple English Slovenčina Slovenščina Ślůnski کوردی Српски / srpski Srpskohrvatski / српскохрватски Sunda Suomi Svenska Tagalog தமிழ் Taqbaylit Татарча / tatarça တႆး తెలుగు Tetun ไทย Тоҷикӣ Türkçe Basa Ugi Українська اردو ئۇيغۇرچە / Uyghurche Vèneto Tiếng Việt 文言 Winaray 吴语 ייִדיש Yorùbá 粵語 Zazaki Žemaitėška 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons MediaWiki Wikibooks Wikifunctions Wikiquote Wikiversity Wikidata item Appearance move to sidebar hide Checked From Wikipedia, the free encyclopedia Page version status This is an accepted version of this page This is the latest accepted revision , reviewed on 11 August 2025 .

Language for controlling a computer This article has an unclear citation style .

The references used may be made clearer with a different or consistent style of citation and footnoting .

( August 2025 ) ( Learn how and when to remove this message ) The source code for a computer program in C . The gray lines are comments that explain the program to humans. When compiled and run , it will give the output " Hello, world!

".

A programming language is an artificial language for expressing computer programs .

[ 1 ] Programming languages typically allow software to be written in a human readable manner.

Execution of a program requires an implementation . There are two main approaches for implementing a programming language – compilation , where programs are compiled ahead-of-time to machine code , and interpretation , where programs are directly executed. In addition to these two extremes, some implementations use hybrid approaches such as just-in-time compilation and bytecode interpreters.

[ 2 ] The design of programming languages has been strongly influenced by computer architecture , with most imperative languages designed around the ubiquitous von Neumann architecture .

[ 3 ] [ full citation needed ] While early programming languages were closely tied to the hardware , modern languages often hide hardware details via abstraction in an effort to enable better software with less effort.

[ citation needed ] Related [ edit ] A programming language differs from a natural language in many ways – especially intent. A natural language is intended for communicating between people, while a programming language is intended to allow people to control a computer.

[ citation needed ] The term computer language is sometimes used interchangeably with programming language [ 4 ] but some contend they are different concepts. Some contend that programming languages are a subset of computer languages.

[ 5 ] Some use computer language to classify a language used in computing that is not considered a programming language.

[ citation needed ] Some regard a programming language as a theoretical construct for programming an abstract machine , and a computer language as the subset thereof that runs on a physical computer, which has finite hardware resources.

[ 6 ] John C. Reynolds emphasizes that a formal specification language is as much a programming language as is a language intended for execution. He argues that textual and even graphical input formats that affect the behavior of a computer are programming languages, despite the fact they are commonly not Turing-complete, and remarks that ignorance of programming language concepts is the reason for many flaws in input formats.

[ 7 ] History [ edit ] Main article: History of programming languages Early developments [ edit ] The first programmable computers were invented at the end of the 1940s, and with them, the first programming languages.

[ 8 ] The earliest computers were programmed in first-generation programming languages (1GLs), machine language (simple instructions that could be directly executed by the processor). This code was very difficult to debug and was not portable between different computer systems.

[ 9 ] In order to improve the ease of programming, assembly languages (or second-generation programming languages —2GLs) were invented, diverging from the machine language to make programs easier to understand for humans, although they did not increase portability.

[ 10 ] Initially, hardware resources were scarce and expensive, while human resources were cheaper. Therefore, cumbersome languages that were time-consuming to use, but were closer to the hardware for higher efficiency were favored.

[ 11 ] The introduction of high-level programming languages ( third-generation programming languages —3GLs)—revolutionized programming. These languages abstracted away the details of the hardware, instead being designed to express algorithms that could be understood more easily by humans. For example, arithmetic expressions could now be written in symbolic notation and later translated into machine code that the hardware could execute.

[ 10 ] In 1957, Fortran (FORmula TRANslation) was invented. Often considered the first compiled high-level programming language, [ 10 ] [ 12 ] Fortran has remained in use into the twenty-first century.

[ 13 ] 1960s and 1970s [ edit ] Two people using an IBM 704 mainframe —the first hardware to support floating-point arithmetic —in 1957.

Fortran was designed for this machine.

[ 14 ] [ 13 ] Around 1960, the first mainframes —general purpose computers—were developed, although they could only be operated by professionals and the cost was extreme. The data and instructions were input by punch cards , meaning that no input could be added while the program was running. The languages developed at this time therefore are designed for minimal interaction.

[ 15 ] After the invention of the microprocessor , computers in the 1970s became dramatically cheaper.

[ 16 ] New computers also allowed more user interaction, which was supported by newer programming languages.

[ 17 ] Lisp , implemented in 1958, was the first functional programming language.

[ 18 ] Unlike Fortran, it supported recursion and conditional expressions , [ 19 ] and it also introduced dynamic memory management on a heap and automatic garbage collection .

[ 20 ] For the next decades, Lisp dominated artificial intelligence applications.

[ 21 ] In 1978, another functional language, ML , introduced inferred types and polymorphic parameters .

[ 17 ] [ 22 ] After ALGOL (ALGOrithmic Language) was released in 1958 and 1960, [ 23 ] it became the standard in computing literature for describing algorithms . Although its commercial success was limited, most popular imperative languages—including C , Pascal , Ada , C++ , Java , and C# —are directly or indirectly descended from ALGOL 60.

[ 24 ] [ 13 ] Among its innovations adopted by later programming languages included greater portability and the first use of context-free , BNF grammar.

[ 25 ] Simula , the first language to support object-oriented programming (including subtypes , dynamic dispatch , and inheritance ), also descends from ALGOL and achieved commercial success.

[ 26 ] C, another ALGOL descendant, has sustained popularity into the twenty-first century. C allows access to lower-level machine operations more than other contemporary languages. Its power and efficiency, generated in part with flexible pointer operations, comes at the cost of making it more difficult to write correct code.

[ 17 ] Prolog , designed in 1972, was the first logic programming language, communicating with a computer using formal logic notation.

[ 27 ] [ 28 ] With logic programming, the programmer specifies a desired result and allows the interpreter to decide how to achieve it.

[ 29 ] [ 28 ] 1980s to 2000s [ edit ] A small selection of programming language textbooks During the 1980s, the invention of the personal computer transformed the roles for which programming languages were used.

[ 30 ] New languages introduced in the 1980s included C++, a superset of C that can compile C programs but also supports classes and inheritance .

[ 31 ] Ada and other new languages introduced support for concurrency .

[ 32 ] The Japanese government invested heavily into the so-called fifth-generation languages that added support for concurrency to logic programming constructs, but these languages were outperformed by other concurrency-supporting languages.

[ 33 ] [ 34 ] Due to the rapid growth of the Internet and the World Wide Web in the 1990s, new programming languages were introduced to support Web pages and networking .

[ 35 ] Java , based on C++ and designed for increased portability across systems and security, enjoyed large-scale success because these features are essential for many Internet applications.

[ 36 ] [ 37 ] Another development was that of dynamically typed scripting languages — Python , JavaScript , PHP , and Ruby —designed to quickly produce small programs that coordinate existing applications . Due to their integration with HTML , they have also been used for building web pages hosted on servers .

[ 38 ] [ 39 ] 2000s to present [ edit ] During the 2000s, there was a slowdown in the development of new programming languages that achieved widespread popularity.

[ 40 ] One innovation was service-oriented programming , designed to exploit distributed systems whose components are connected by a network. Services are similar to objects in object-oriented programming, but run on a separate process.

[ 41 ] C# and F# cross-pollinated ideas between imperative and functional programming.

[ 42 ] After 2010, several new languages— Rust , Go , Swift , Zig and Carbon —competed for the performance-critical software for which C had historically been used.

[ 43 ] Most of the new programming languages use static typing while a few numbers of new languages use dynamic typing like Ring and Julia .

[ 44 ] [ 45 ] Some of the new programming languages are classified as visual programming languages like Scratch , LabVIEW and PWCT . Also, some of these languages mix between textual and visual programming usage like Ballerina .

[ 46 ] [ 47 ] [ 48 ] [ 49 ] Also, this trend lead to developing projects that help in developing new VPLs like Blockly by Google .

[ 50 ] Many game engines like Unreal and Unity added support for visual scripting too.

[ 51 ] [ 52 ] Definition [ edit ] A language can be defined in terms of syntax (form) and semantics (meaning), and often is defined via a formal language specification.

Syntax [ edit ] Main article: Syntax (programming languages) Parse tree of Python code with inset tokenization Syntax highlighting is often used to aid programmers in recognizing elements of source code. The language above is Python .

A programming language's surface form is known as its syntax . Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, some programming languages are graphical , using visual relationships between symbols to specify a program.

The syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics (either formal or hard-coded in a reference implementation ). Since most languages are textual, this article discusses textual syntax.

The programming language syntax is usually defined using a combination of regular expressions (for lexical structure) and Backus–Naur form (for grammatical structure). Below is a simple grammar, based on Lisp : expression ::= atom | list
atom ::= number | symbol
number ::= [+-]?['0'-'9']+
symbol ::= ['A'-'Z''a'-'z'].*
list ::= '(' expression* ')' This grammar specifies the following: an expression is either an atom or a list ; an atom is either a number or a symbol ; a number is an unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign; a symbol is a letter followed by zero or more of any alphabetical characters (excluding whitespace); and a list is a matched pair of parentheses, with zero or more expressions inside it.

The following are examples of well-formed token sequences in this grammar: 12345 , () and (a b c232 (1)) .

Not all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language's rules; and may (depending on the language specification and the soundness of the implementation) result in an error on translation or execution. In some cases, such programs may exhibit undefined behavior . Even when a program is well-defined within a language, it may still have a meaning that is not intended by the person who wrote it.

Using natural language as an example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false: " Colorless green ideas sleep furiously ." is grammatically well-formed but has no generally accepted meaning.

"John is a married bachelor." is grammatically well-formed but expresses a meaning that cannot be true.

The following C language fragment is syntactically correct, but performs operations that are not semantically defined (the operation *p >> 4 has no meaning for a value having a complex type and p->im is not defined because the value of p is the null pointer ): complex * p = NULL ; complex abs_p = sqrt ( * p >> 4 + p -> im ); If the type declaration on the first line were omitted, the program would trigger an error on the undefined variable p during compilation. However, the program would still be syntactically correct since type declarations provide only semantic information.

The grammar needed to specify a programming language can be classified by its position in the Chomsky hierarchy . The syntax of most programming languages can be specified using a Type-2 grammar, i.e., they are context-free grammars .

[ 53 ] Some languages, including Perl and Lisp, contain constructs that allow execution during the parsing phase. Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an undecidable problem , and generally blur the distinction between parsing and execution.

[ 54 ] In contrast to Lisp's macro system and Perl's BEGIN blocks, which may contain general computations, C macros are merely string replacements and do not require code execution.

[ 55 ] Semantics [ edit ] Logical connectives NOT ¬ ¬ A , − − A , A ¯ ¯ , ∼ ∼ A {\displaystyle \neg A,-A,{\overline {A}},\sim A} AND A ∧ ∧ B , A ⋅ ⋅ B , A B , A & & B , A & & & & B {\displaystyle A\land B,A\cdot B,AB,A\ \&\ B,A\ \&\&\ B} NAND A ∧ ∧ ¯ ¯ B , A ↑ ↑ B , A ∣ ∣ B , A ⋅ ⋅ B ¯ ¯ {\displaystyle A{\overline {\land }}B,A\uparrow B,A\mid B,{\overline {A\cdot B}}} OR A ∨ ∨ B , A + B , A ∣ ∣ B , A ∥ ∥ B {\displaystyle A\lor B,A+B,A\mid B,A\parallel B} NOR A ∨ ∨ ¯ ¯ B , A ↓ ↓ B , A + B ¯ ¯ {\displaystyle A{\overline {\lor }}B,A\downarrow B,{\overline {A+B}}} XNOR A ⊙ ⊙ B , A ∨ ∨ ¯ ¯ B ¯ ¯ {\displaystyle A\odot B,{\overline {A{\overline {\lor }}B}}} └ equivalent A ≡ ≡ B , A ⇔ ⇔ B , A ⇋ ⇋ B {\displaystyle A\equiv B,A\Leftrightarrow B,A\leftrightharpoons B} XOR A ∨ ∨ _ _ B , A ⊕ ⊕ B {\displaystyle A{\underline {\lor }}B,A\oplus B} └ nonequivalent A ≢ B , A ⇎ B , A ↮ ↮ B {\displaystyle A\not \equiv B,A\not \Leftrightarrow B,A\nleftrightarrow B} implies A ⇒ ⇒ B , A ⊃ ⊃ B , A → → B {\displaystyle A\Rightarrow B,A\supset B,A\rightarrow B} nonimplication ( NIMPLY ) A ⇏ B , A ⊅ B , A ↛ ↛ B {\displaystyle A\not \Rightarrow B,A\not \supset B,A\nrightarrow B} converse A ⇐ ⇐ B , A ⊂ ⊂ B , A ← ← B {\displaystyle A\Leftarrow B,A\subset B,A\leftarrow B} converse nonimplication A ⇍ B , A ⊄ B , A ↚ ↚ B {\displaystyle A\not \Leftarrow B,A\not \subset B,A\nleftarrow B} Related concepts Propositional calculus Predicate logic Boolean algebra Truth table Truth function Boolean function Functional completeness Scope (logic) Applications Digital logic Programming languages Mathematical logic Philosophy of logic Category v t e Semantics refers to the meaning of content that conforms to a language's syntax.

Static semantics [ edit ] Static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms.

[ 56 ] [ failed verification ] For compiled languages, static semantics essentially include those semantic rules that can be checked at compile time. Examples include checking that every identifier is declared before it is used (in languages that require such declarations) or that the labels on the arms of a case statement are distinct.

[ 57 ] Many important restrictions of this type, like checking that identifiers are used in the appropriate context (e.g. not adding an integer to a function name), or that subroutine calls have the appropriate number and type of arguments, can be enforced by defining them as rules in a logic called a type system . Other forms of static analyses like data flow analysis may also be part of static semantics. Programming languages such as Java and C# have definite assignment analysis , a form of data flow analysis, as part of their respective static semantics.

[ 58 ] Dynamic semantics [ edit ] Main article: Semantics of programming languages This section does not cite any sources .

Please help improve this section by adding citations to reliable sources . Unsourced material may be challenged and removed .

Find sources: "Programming language" – news · newspapers · books · scholar · JSTOR ( April 2024 ) ( Learn how and when to remove this message ) Once data has been specified, the machine must be instructed to perform operations on the data. For example, the semantics may define the strategy by which expressions are evaluated to values, or the manner in which control structures conditionally execute statements . The dynamic semantics (also known as execution semantics ) of a language defines how and when the various constructs of a language should produce a program behavior. There are many ways of defining execution semantics. Natural language is often used to specify the execution semantics of languages commonly used in practice. A significant amount of academic research goes into formal semantics of programming languages , which allows execution semantics to be specified in a formal manner. Results from this field of research have seen limited application to programming language design and implementation outside academia.

[ 58 ] Features [ edit ] A language provides features for the programmer for develop software. Some notable features are described below.

Type system [ edit ] Main articles: Data type , Type system , and Type safety A data type is a set of allowable values and operations that can be performed on these values.

[ 59 ] Each programming language's type system defines which data types exist, the type of an expression , and how type equivalence and type compatibility function in the language.

[ 60 ] According to type theory , a language is fully typed if the specification of every operation defines types of data to which the operation is applicable.

[ 61 ] In contrast, an untyped language, such as most assembly languages , allows any operation to be performed on any data, generally sequences of bits of various lengths.

[ 61 ] In practice, while few languages are fully typed, most offer a degree of typing.

[ 61 ] Because different types (such as integers and floats ) represent values differently, unexpected results will occur if one type is used when another is expected.

Type checking will flag this error, usually at compile time (runtime type checking is more costly).

[ 62 ] With strong typing , type errors can always be detected unless variables are explicitly cast to a different type.

Weak typing occurs when languages allow implicit casting—for example, to enable operations between variables of different types without the programmer making an explicit type conversion. The more cases in which this type coercion is allowed, the fewer type errors can be detected.

[ 63 ] Commonly supported types [ edit ] See also: Primitive data type Early programming languages often supported only built-in, numeric types such as the integer (signed and unsigned) and floating point (to support operations on real numbers that are not integers). Most programming languages support multiple sizes of floats (often called float and double ) and integers depending on the size and precision required by the programmer. Storing an integer in a type that is too small to represent it leads to integer overflow . The most common way of representing negative numbers with signed types is twos complement , although ones complement is also used.

[ 64 ] Other common types include Boolean —which is either true or false—and character —traditionally one byte , sufficient to represent all ASCII characters.

[ 65 ] Arrays are a data type whose elements, in many languages, must consist of a single type of fixed length. Other languages define arrays as references to data stored elsewhere and support elements of varying types.

[ 66 ] Depending on the programming language, sequences of multiple characters, called strings , may be supported as arrays of characters or their own primitive type .

[ 67 ] Strings may be of fixed or variable length, which enables greater flexibility at the cost of increased storage space and more complexity.

[ 68 ] Other data types that may be supported include lists , [ 69 ] associative (unordered) arrays accessed via keys, [ 70 ] records in which data is mapped to names in an ordered structure, [ 71 ] and tuples —similar to records but without names for data fields.

[ 72 ] Pointers store memory addresses, typically referencing locations on the heap where other data is stored.

[ 73 ] The simplest user-defined type is an ordinal type , often called an enumeration , whose values can be mapped onto the set of positive integers.

[ 74 ] Since the mid-1980s, most programming languages also support abstract data types , in which the representation of the data and operations are hidden from the user , who can only access an interface .

[ 75 ] The benefits of data abstraction can include increased reliability, reduced complexity, less potential for name collision , and allowing the underlying data structure to be changed without the client needing to alter its code.

[ 76 ] Static and dynamic typing [ edit ] In static typing , all expressions have their types determined before a program executes, typically at compile-time.

[ 61 ] Most widely used, statically typed programming languages require the types of variables to be specified explicitly. In some languages, types are implicit; one form of this is when the compiler can infer types based on context. The downside of implicit typing is the potential for errors to go undetected.

[ 77 ] Complete type inference has traditionally been associated with functional languages such as Haskell and ML .

[ 78 ] With dynamic typing, the type is not attached to the variable but only the value encoded in it. A single variable can be reused for a value of a different type. Although this provides more flexibility to the programmer, it is at the cost of lower reliability and less ability for the programming language to check for errors.

[ 79 ] Some languages allow variables of a union type to which any type of value can be assigned, in an exception to their usual static typing rules.

[ 80 ] Concurrency [ edit ] See also: Concurrent computing In computing, multiple instructions can be executed simultaneously. Many programming languages support instruction-level and subprogram-level concurrency.

[ 81 ] By the twenty-first century, additional processing power on computers was increasingly coming from the use of additional processors, which requires programmers to design software that makes use of multiple processors simultaneously to achieve improved performance.

[ 82 ] Interpreted languages such as Python and Ruby do not support the concurrent use of multiple processors.

[ 83 ] Other programming languages do support managing data shared between different threads by controlling the order of execution of key instructions via the use of semaphores , controlling access to shared data via monitor , or enabling message passing between threads.

[ 84 ] Exception handling [ edit ] Main article: Exception handling Many programming languages include exception handlers, a section of code triggered by runtime errors that can deal with them in two main ways: [ 85 ] Termination: shutting down and handing over control to the operating system . This option is considered the simplest.

Resumption: resuming the program near where the exception occurred. This can trigger a repeat of the exception, unless the exception handler is able to modify values to prevent the exception from reoccurring.

Some programming languages support dedicating a block of code to run regardless of whether an exception occurs before the code is reached; this is called finalization.

[ 86 ] There is a tradeoff between increased ability to handle exceptions and reduced performance.

[ 87 ] For example, even though array index errors are common [ 88 ] C does not check them for performance reasons.

[ 87 ] Although programmers can write code to catch user-defined exceptions, this can clutter a program. Standard libraries in some languages, such as C, use their return values to indicate an exception.

[ 89 ] Some languages and their compilers have the option of turning on and off error handling capability, either temporarily or permanently.

[ 90 ] Design and implementation [ edit ] Main article: Programming language design and implementation One of the most important influences on programming language design has been computer architecture .

Imperative languages , the most commonly used type, were designed to perform well on von Neumann architecture , the most common computer architecture.

[ 91 ] In von Neumann architecture, the memory stores both data and instructions, while the CPU that performs instructions on data is separate, and data must be piped back and forth to the CPU. The central elements in these languages are variables, assignment , and iteration , which is more efficient than recursion on these machines.

[ 92 ] Many programming languages have been designed from scratch, altered to meet new needs, and combined with other languages. Many have eventually fallen into disuse.

[ citation needed ] The birth of programming languages in the 1950s was stimulated by the desire to make a universal programming language suitable for all machines and uses, avoiding the need to write code for different computers.

[ 93 ] By the early 1960s, the idea of a universal language was rejected due to the differing requirements of the variety of purposes for which code was written.

[ 94 ] Tradeoffs [ edit ] Desirable qualities of programming languages include readability, writability, and reliability.

[ 95 ] These features can reduce the cost of training programmers in a language, the amount of time needed to write and maintain programs in the language, the cost of compiling the code, and increase runtime performance.

[ 96 ] Although early programming languages often prioritized efficiency over readability, the latter has grown in importance since the 1970s. Having multiple operations to achieve the same result can be detrimental to readability, as is overloading operators , so that the same operator can have multiple meanings.

[ 97 ] Another feature important to readability is orthogonality , limiting the number of constructs that a programmer has to learn.

[ 98 ] A syntax structure that is easily understood and special words that are immediately obvious also supports readability.

[ 99 ] Writability is the ease of use for writing code to solve the desired problem. Along with the same features essential for readability, [ 100 ] abstraction —interfaces that enable hiding details from the client—and expressivity —enabling more concise programs—additionally help the programmer write code.

[ 101 ] The earliest programming languages were tied very closely to the underlying hardware of the computer, but over time support for abstraction has increased, allowing programmers express ideas that are more remote from simple translation into underlying hardware instructions. Because programmers are less tied to the complexity of the computer, their programs can do more computing with less effort from the programmer.

[ 102 ] Most programming languages come with a standard library of commonly used functions.

[ 103 ] Reliability means that a program performs as specified in a wide range of circumstances.

[ 104 ] Type checking , exception handling , and restricted aliasing (multiple variable names accessing the same region of memory) all can improve a program's reliability.

[ 105 ] Programming language design often involves tradeoffs.

[ 106 ] For example, features to improve reliability typically come at the cost of performance.

[ 107 ] Increased expressivity due to a large number of operators makes writing code easier but comes at the cost of readability.

[ 107 ] Natural-language programming has been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate.

Edsger W. Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs.

[ 108 ] Alan Perlis was similarly dismissive of the idea.

[ 109 ] Specification [ edit ] Main article: Programming language specification The specification of a programming language is an artifact that the language users and the implementors can use to agree upon whether a piece of source code is a valid program in that language, and if so what its behavior shall be.

A programming language specification can take several forms, including the following: An explicit definition of the syntax, static semantics, and execution semantics of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written in natural language (e.g., as in the C language ), or a formal semantics (e.g., as in Standard ML [ 110 ] and Scheme [ 111 ] specifications).

A description of the behavior of a translator for the language (e.g., the C++ and Fortran specifications). The syntax and semantics of the language have to be inferred from this description, which may be written in natural or formal language.

A reference or model implementation , sometimes written in the language being specified (e.g., Prolog or ANSI REXX [ 112 ] ). The syntax and semantics of the language are explicit in the behavior of the reference implementation.

Implementation [ edit ] Main article: Programming language implementation An implementation of a programming language is the conversion of a program into machine code that can be executed by the hardware. The machine code then can be executed with the help of the operating system .

[ 113 ] The most common form of interpretation in production code is by a compiler , which translates the source code via an intermediate-level language into machine code, known as an executable . Once the program is compiled, it will run more quickly than with other implementation methods.

[ 114 ] Some compilers are able to provide further optimization to reduce memory or computation usage when the executable runs, but increasing compilation time.

[ 115 ] Another implementation method is to run the program with an interpreter , which translates each line of software into machine code just before it executes. Although it can make debugging easier, the downside of interpretation is that it runs 10 to 100 times slower than a compiled executable.

[ 116 ] Hybrid interpretation methods provide some of the benefits of compilation and some of the benefits of interpretation via partial compilation. One form this takes is just-in-time compilation , in which the software is compiled ahead of time into an intermediate language, and then into machine code immediately before execution.

[ 117 ] Proprietary languages [ edit ] Although most of the most commonly used programming languages have fully open specifications and implementations, many programming languages exist only as proprietary programming languages with the implementation available only from a single vendor, which may claim that such a proprietary language is their intellectual property. Proprietary programming languages are commonly domain-specific languages or internal scripting languages for a single product; some proprietary languages are used only internally within a vendor, while others are available to external users.

[ citation needed ] Some programming languages exist on the border between proprietary and open; for example, Oracle Corporation asserts proprietary rights to some aspects of the Java programming language , [ 118 ] and Microsoft 's C# programming language, which has open implementations of most parts of the system, also has Common Language Runtime (CLR) as a closed environment.

[ 119 ] Many proprietary languages are widely used, in spite of their proprietary nature; examples include MATLAB , VBScript , and Wolfram Language . Some languages may make the transition from closed to open; for example, Erlang was originally Ericsson's internal programming language.

[ 120 ] Open source programming languages are particularly helpful for open science applications, enhancing the capacity for replication and code sharing.

[ 121 ] Use [ edit ] Thousands of different programming languages have been created, mainly in the computing field.

[ 122 ] Individual software projects commonly use five programming languages or more.

[ 123 ] Programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, figuratively speaking, computers "do exactly what they are told to do", and cannot "understand" what code the programmer intended to write. The combination of the language definition, a program, and the program's inputs must fully specify the external behavior that occurs when the program is executed, within the domain of control of that program. On the other hand, ideas about an algorithm can be communicated to humans without the precision required for execution by using pseudocode , which interleaves natural language with code written in a programming language.

A programming language provides a structured mechanism for defining pieces of data, and the operations or transformations that may be carried out automatically on that data. A programmer uses the abstractions present in the language to represent the concepts involved in a computation. These concepts are represented as a collection of the simplest elements available (called primitives ).

[ 124 ] Programming is the process by which programmers combine these primitives to compose new programs, or adapt existing ones to new uses or a changing environment.

Programs for a computer might be executed in a batch process without any human interaction, or a user might type commands in an interactive session of an interpreter . In this case the "commands" are simply programs, whose execution is chained together. When a language can run its commands through an interpreter (such as a Unix shell or other command-line interface ), without compiling, it is called a scripting language .

[ 125 ] Measuring language usage [ edit ] Determining which is the most widely used programming language is difficult since the definition of usage varies by context. One language may occupy the greater number of programmer hours, a different one has more lines of code, and a third may consume the most CPU time. Some languages are very popular for particular kinds of applications. For example, COBOL is still strong in the corporate data center, often on large mainframes ; [ 126 ] [ 127 ] Fortran in scientific and engineering applications; Ada in aerospace, transportation, military, real-time, and embedded applications; and C in embedded applications and operating systems. Other languages are regularly used to write many different kinds of applications.

Various methods of measuring language popularity, each subject to a different bias over what is measured, have been proposed: counting the number of job advertisements that mention the language [ 128 ] the number of books sold that teach or describe the language [ 129 ] estimates of the number of existing lines of code written in the language –  which may underestimate languages not often found in public searches [ 130 ] counts of language references (i.e., to the name of the language) found using a web search engine.

Combining and averaging information from various internet sites, stackify.com reported the ten most popular programming languages (in descending order by overall popularity): Java , C , C++ , Python , C# , JavaScript , VB .NET , R , PHP , and MATLAB .

[ 131 ] As of June 2024, the top five programming languages as measured by TIOBE index are Python , C++ , C , Java and C# . TIOBE provides a list of top 100 programming languages according to popularity and update this list every month.

[ 132 ] Dialects, flavors and implementations [ edit ] A dialect of a programming language or a data exchange language is a (relatively small) variation or extension of the language that does not change its intrinsic nature. With languages such as Scheme and Forth , standards may be considered insufficient, inadequate, or illegitimate by implementors, so often they will deviate from the standard, making a new dialect . In other cases, a dialect is created for use in a domain-specific language , often a subset. In the Lisp world, most languages that use basic S-expression syntax and Lisp-like semantics are considered Lisp dialects, although they vary wildly as do, say, Racket and Clojure . As it is common for one language to have several dialects, it can become quite difficult for an inexperienced programmer to find the right documentation. The BASIC language has many dialects .

Classifications [ edit ] Further information: Categorical list of programming languages Programming languages can be described per the following high-level yet sometimes overlapping classifications: [ 133 ] Imperative An imperative programming language supports implementing logic encoded as a sequence of ordered operations. Most popularly used languages are classified as imperative.

[ 134 ] Functional A functional programming language supports successively applying functions to the given parameters. Although appreciated by many researchers for their simplicity and elegance, problems with efficiency have prevented them from being widely adopted.

[ 135 ] Logic A logic programming language is designed so that the software, rather than the programmer, decides what order in which the instructions are executed.

[ 136 ] Object-oriented Object-oriented programming (OOP) is characterized by features such as data abstraction , inheritance , and dynamic dispatch . OOP is supported by most popular imperative languages and some functional languages.

[ 134 ] Markup Although a markup language is not a programming language per se, it might support integration with a programming language.

Special There are special-purpose languages that are not easily compared to other programming languages.

[ 137 ] See also [ edit ] Computer programming portal Comparison of programming languages (basic instructions) Comparison of programming languages Computer programming Computer science and Outline of computer science Domain-specific language Domain-specific modeling Educational programming language Esoteric programming language Extensible programming Category:Extensible syntax programming languages Invariant-based programming List of BASIC dialects List of open-source programming languages Lists of programming languages List of programming language researchers Programming languages used in most popular websites Language-oriented programming Logic programming Literate programming Metaprogramming Ruby (programming language) § Metaprogramming Modeling language Programming language theory Pseudocode Rebol § Dialects Reflective programming Scientific programming language Scripting language Software engineering and List of software engineering topics References [ edit ] ^ Information technology — Vocabulary .

^ Sebesta, Robert W. (2023).

Concepts of Programming Languages (12th global ed.). Pearson. pp.

46– 51.

ISBN 978-1-292-43682-1 .

^ Sebesta , p. 18.

sfn error: no target: CITEREFSebesta ( help ) ^ Robert A. Edmunds, The Prentice-Hall standard glossary of computer terminology, Prentice-Hall, 1985, p. 91 ^ Pascal Lando, Anne Lapujade, Gilles Kassel, and Frédéric Fürst, Towards a General Ontology of Computer Programs Archived 7 July 2015 at the Wayback Machine , ICSOFT 2007 Archived 27 April 2010 at the Wayback Machine , pp. 163–170 ^ R. Narasimhan, Programming Languages and Computers: A Unified Metatheory, pp. 189—247 in Franz Alt, Morris Rubinoff (eds.) Advances in computers, Volume 8, Academic Press, 1994, ISBN 0-12-012108-5 , p.215: "[...] the model [...] for computer languages differs from that [...] for programming languages in only two respects. In a computer language, there are only finitely many names—or registers—which can assume only finitely many values—or states—and these states are not further distinguished in terms of any other attributes. [author's footnote:] This may sound like a truism but its implications are far-reaching. For example, it would imply that any model for programming languages, by fixing certain of its parameters or features, should be reducible in a natural way to a model for computer languages." ^ John C. Reynolds, "Some thoughts on teaching programming and programming languages", SIGPLAN Notices , Volume 43, Issue 11, November 2008, p.109 ^ Gabbrielli & Martini 2023 , p. 519.

^ Gabbrielli & Martini 2023 , pp. 520–521.

^ a b c Gabbrielli & Martini 2023 , p. 521.

^ Gabbrielli & Martini 2023 , p. 522.

^ Sebesta 2012 , p. 42.

^ a b c Gabbrielli & Martini 2023 , p. 524.

^ Sebesta 2012 , pp. 42–44.

^ Gabbrielli & Martini 2023 , pp. 523–524.

^ Gabbrielli & Martini 2023 , p. 527.

^ a b c Gabbrielli & Martini 2023 , p. 528.

^ "How Lisp Became God's Own Programming Language" .

twobithistory.org .

Archived from the original on 10 April 2024 . Retrieved 10 April 2024 .

^ Sebesta 2012 , pp. 47–48.

^ Gabbrielli & Martini 2023 , p. 526.

^ Sebesta 2012 , p. 50.

^ Sebesta 2012 , pp. 701–703.

^ Gabbrielli & Martini 2023 , pp. 524–525.

^ Sebesta 2012 , pp. 56–57.

^ Gabbrielli & Martini 2023 , p. 525.

^ Gabbrielli & Martini 2023 , pp. 526–527.

^ Gabbrielli & Martini 2023 , p. 531.

^ a b Sebesta 2012 , p. 79.

^ Gabbrielli & Martini 2023 , p. 530.

^ Gabbrielli & Martini 2023 , pp. 532–533.

^ Gabbrielli & Martini 2023 , p. 534.

^ Gabbrielli & Martini 2023 , pp. 534–535.

^ Gabbrielli & Martini 2023 , p. 535.

^ Sebesta 2012 , p. 736.

^ Gabbrielli & Martini 2023 , p. 536.

^ Gabbrielli & Martini 2023 , pp. 536–537.

^ Sebesta 2012 , pp. 91–92.

^ Gabbrielli & Martini 2023 , pp. 538–539.

^ Sebesta 2012 , pp. 97–99.

^ Gabbrielli & Martini 2023 , p. 542.

^ Gabbrielli & Martini 2023 , pp. 474–475, 477, 542.

^ Gabbrielli & Martini 2023 , pp. 542–543.

^ Gabbrielli & Martini 2023 , p. 544.

^ Bezanson, Jeff; Karpinski, Stefan; Shah, Viral B.; Edelman, Alan (2012). "Julia: A Fast Dynamic Language for Technical Computing".

arXiv : 1209.5145 [ cs.PL ].

^ Ayouni, M. and Ayouni, M., 2020. Data Types in Ring. Beginning Ring Programming: From Novice to Professional, pp.51-98.

^ Sáez-López, J.M., Román-González, M. and Vázquez-Cano, E., 2016. Visual programming languages integrated across the curriculum in elementary school: A two year case study using “Scratch” in five schools. Computers & Education, 97, pp.129-141.

^ Fayed, M.S., Al-Qurishi, M., Alamri, A. and Al-Daraiseh, A.A., 2017, March. PWCT: visual language for IoT and cloud computing applications and systems. In Proceedings of the Second International Conference on Internet of things, Data and Cloud Computing (pp. 1-5).

^ Kodosky, J., 2020. LabVIEW. Proceedings of the ACM on Programming Languages, 4(HOPL), pp.1-54.

^ Fernando, A. and Warusawithana, L., 2020. Beginning Ballerina Programming: From Novice to Professional. Apress.

^ Baluprithviraj, K.N., Bharathi, K.R., Chendhuran, S. and Lokeshwaran, P., 2021, March. Artificial intelligence based smart door with face mask detection. In 2021 International Conference on Artificial Intelligence and Smart Systems (ICAIS) (pp. 543-548). IEEE.

^ Sewell, B., 2015. Blueprints visual scripting for unreal engine. Packt Publishing Ltd.

^ Bertolini, L., 2018. Hands-On Game Development without Coding: Create 2D and 3D games with Visual Scripting in Unity. Packt Publishing Ltd.

^ Michael Sipser (1996).

Introduction to the Theory of Computation . PWS Publishing.

ISBN 978-0-534-94728-6 .

Section 2.2: Pushdown Automata, pp.101–114.

^ Jeffrey Kegler, " Perl and Undecidability Archived 17 August 2009 at the Wayback Machine ", The Perl Review . Papers 2 and 3 prove, using respectively Rice's theorem and direct reduction to the halting problem , that the parsing of Perl programs is in general undecidable.

^ Marty Hall, 1995, Lecture Notes: Macros Archived 6 August 2013 at the Wayback Machine , PostScript version Archived 17 August 2000 at the Wayback Machine ^ Aaby, Anthony (2004).

Introduction to Programming Languages . Archived from the original on 8 November 2012 . Retrieved 29 September 2012 .

^ Michael Lee Scott, Programming language pragmatics , Edition 2, Morgan Kaufmann, 2006, ISBN 0-12-633951-1 , p. 18–19 ^ a b Winskel, Glynn (5 February 1993).

The Formal Semantics of Programming Languages: An Introduction . MIT Press.

ISBN 978-0-262-73103-4 .

^ Sebesta 2012 , p. 244.

^ Sebesta 2012 , p. 245.

^ a b c d Andrew Cooke.

"Introduction To Computer Languages" .

Archived from the original on 15 August 2012 . Retrieved 13 July 2012 .

^ Sebesta 2012 , pp. 15, 408–409.

^ Sebesta 2012 , pp. 303–304.

^ Sebesta 2012 , pp. 246–247.

^ Sebesta 2012 , p. 249.

^ Sebesta 2012 , p. 260.

^ Sebesta 2012 , p. 250.

^ Sebesta 2012 , p. 254.

^ Sebesta 2012 , pp. 281–282.

^ Sebesta 2012 , pp. 272–273.

^ Sebesta 2012 , pp. 276–277.

^ Sebesta 2012 , p. 280.

^ Sebesta 2012 , pp. 289–290.

^ Sebesta 2012 , p. 255.

^ Sebesta 2012 , pp. 244–245.

^ Sebesta 2012 , p. 477.

^ Sebesta 2012 , p. 211.

^ Leivant, Daniel (1983).

Polymorphic type inference . ACM SIGACT-SIGPLAN symposium on Principles of programming languages. Austin, Texas: ACM Press. pp.

88– 98.

doi : 10.1145/567067.567077 .

ISBN 978-0-89791-090-3 .

^ Sebesta 2012 , pp. 212–213.

^ Sebesta 2012 , pp. 284–285.

^ Sebesta 2012 , p. 576.

^ Sebesta 2012 , p. 579.

^ Sebesta 2012 , p. 585.

^ Sebesta 2012 , pp. 585–586.

^ Sebesta 2012 , pp. 630, 634.

^ Sebesta 2012 , p. 635.

^ a b Sebesta 2012 , p. 631.

^ Sebesta 2012 , p. 261.

^ Sebesta 2012 , p. 632.

^ Sebesta 2012 , pp. 631, 635–636.

^ Sebesta 2012 , p. 18.

^ Sebesta 2012 , p. 19.

^ Nofre, Priestley & Alberts 2014 , p. 55.

^ Nofre, Priestley & Alberts 2014 , p. 60.

^ Sebesta 2012 , p. 8.

^ Sebesta 2012 , pp. 16–17.

^ Sebesta 2012 , pp. 8–9.

^ Sebesta 2012 , pp. 9–10.

^ Sebesta 2012 , pp. 12–13.

^ Sebesta 2012 , p. 13.

^ Sebesta 2012 , pp. 14–15.

^ Frederick P. Brooks, Jr.: The Mythical Man-Month , Addison-Wesley, 1982, pp. 93–94 ^ Busbee, Kenneth Leroy; Braunschweig, Dave (15 December 2018).

"Standard Libraries" .

Programming Fundamentals – A Modular Structured Approach . Retrieved 27 January 2024 .

^ Sebesta 2012 , p. 15.

^ Sebesta 2012 , pp. 8, 16.

^ Sebesta 2012 , pp. 18, 23.

^ a b Sebesta 2012 , p. 23.

^ Dijkstra, Edsger W.

On the foolishness of "natural language programming." Archived 20 January 2008 at the Wayback Machine EWD667.

^ Perlis, Alan (September 1982).

"Epigrams on Programming" .

SIGPLAN Notices Vol. 17, No. 9 . pp.

7– 13.

Archived from the original on 17 January 1999.

^ Milner, R.

; M. Tofte ; R. Harper ; D. MacQueen (1997).

The Definition of Standard ML (Revised) . MIT Press.

ISBN 978-0-262-63181-5 .

^ Kelsey, Richard; William Clinger; Jonathan Rees (February 1998).

"Section 7.2 Formal semantics" .

Revised 5 Report on the Algorithmic Language Scheme .

Archived from the original on 6 July 2006.

^ ANSI – Programming Language Rexx, X3-274.1996 ^ Sebesta 2012 , pp. 23–24.

^ Sebesta 2012 , pp. 25–27.

^ Sebesta 2012 , p. 27.

^ Sebesta 2012 , p. 28.

^ Sebesta 2012 , pp. 29–30.

^ See: Oracle America, Inc. v. Google, Inc.

[ user-generated source ] ^ "Guide to Programming Languages | ComputerScience.org" .

ComputerScience.org .

Archived from the original on 13 May 2018 . Retrieved 13 May 2018 .

^ "The basics" .

ibm.com . 10 May 2011.

Archived from the original on 14 May 2018 . Retrieved 13 May 2018 .

^ Abdelaziz, Abdullah I.; Hanson, Kent A.; Gaber, Charles E.; Lee, Todd A. (2023).

"Optimizing large real-world data analysis with parquet files in R: A step-by-step tutorial" .

Pharmacoepidemiology and Drug Safety .

33 (3): e5728.

doi : 10.1002/pds.5728 .

PMID 37984998 .

^ "HOPL: an interactive Roster of Programming Languages" . Australia: Murdoch University . Archived from the original on 20 February 2011 . Retrieved 1 June 2009 .

This site lists 8512 languages.

^ Mayer, Philip; Bauer, Alexander (2015). "An empirical analysis of the utilization of multiple programming languages in open source projects".

Proceedings of the 19th International Conference on Evaluation and Assessment in Software Engineering . Proceedings of the 19th International Conference on Evaluation and Assessment in Software Engineering – EASE '15. New York, NY, US: ACM. pp. 4:1–4:10.

doi : 10.1145/2745802.2745805 .

ISBN 978-1-4503-3350-4 .

Results: We found (a) a mean number of 5 languages per project with a clearly dominant main general-purpose language and 5 often-used DSL types, (b) a significant influence of the size, number of commits, and the main language on the number of languages as well as no significant influence of age and number of contributors, and (c) three language ecosystems grouped around XML, Shell/Make, and HTML/CSS. Conclusions: Multi-language programming seems to be common in open-source projects and is a factor that must be dealt with in tooling and when assessing the development and maintenance of such software systems.

^ Abelson, Sussman, and Sussman.

"Structure and Interpretation of Computer Programs" . Archived from the original on 26 February 2009 . Retrieved 3 March 2009 .

{{ cite web }} :  CS1 maint: multiple names: authors list ( link ) ^ Vicki, Brown; Morin, Rich (1999).

"Scripting Languages" .

MacTech .

Archived from the original on 2 December 2017.

^ Georgina Swan (21 September 2009).

"COBOL turns 50" . Computerworld. Archived from the original on 19 October 2013 . Retrieved 19 October 2013 .

^ Ed Airey (3 May 2012).

"7 Myths of COBOL Debunked" . developer.com.

Archived from the original on 19 October 2013 . Retrieved 19 October 2013 .

^ Nicholas Enticknap.

"SSL/Computer Weekly IT salary survey: finance boom drives IT job growth" .

Computer Weekly .

Archived from the original on 26 October 2011 . Retrieved 14 June 2013 .

^ "Counting programming languages by book sales" . Radar.oreilly.com. 2 August 2006. Archived from the original on 17 May 2008.

^ Bieman, J.M.; Murdock, V., Finding code on the World Wide Web: a preliminary investigation, Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation, 2001 ^ "Most Popular and Influential Programming Languages of 2018" . stackify.com. 18 December 2017.

Archived from the original on 30 August 2018 . Retrieved 29 August 2018 .

^ "TIOBE Index" . Retrieved 24 June 2024 .

^ Sebesta 2012 , p. 21.

^ a b Sebesta 2012 , pp. 21–22.

^ Sebesta 2012 , p. 12.

^ Sebesta 2012 , p. 22.

^ Sebesta 2012 , pp. 22–23.

Further reading [ edit ] See also: History of programming languages § Further reading Abelson, Harold ; Sussman, Gerald Jay (1996).

Structure and Interpretation of Computer Programs (2nd ed.). MIT Press. Archived from the original on 9 March 2018.

Raphael Finkel : Advanced Programming Language Design , Addison Wesley 1995.

Daniel P. Friedman , Mitchell Wand , Christopher T. Haynes : Essentials of Programming Languages , The MIT Press 2001.

David Gelernter , Suresh Jagannathan : Programming Linguistics , The MIT Press 1990.

Ellis Horowitz (ed.): Programming Languages, a Grand Tour (3rd ed.), 1987.

Ellis Horowitz: Fundamentals of Programming Languages , 1989.

Shriram Krishnamurthi : Programming Languages: Application and Interpretation , online publication Archived 30 April 2021 at the Wayback Machine .

Gabbrielli, Maurizio; Martini, Simone (2023).

Programming Languages: Principles and Paradigms (2nd ed.). Springer.

ISBN 978-3-031-34144-1 .

Bruce J. MacLennan : Principles of Programming Languages: Design, Evaluation, and Implementation , Oxford University Press 1999.

John C. Mitchell : Concepts in Programming Languages , Cambridge University Press 2002.

Nofre, David; Priestley, Mark; Alberts, Gerard (2014).

"When Technology Became Language: The Origins of the Linguistic Conception of Computer Programming, 1950–1960" .

Technology and Culture .

55 (1): 40– 75.

doi : 10.1353/tech.2014.0031 .

ISSN 0040-165X .

JSTOR 24468397 .

PMID 24988794 .

Benjamin C. Pierce : Types and Programming Languages , The MIT Press 2002.

Terrence W. Pratt and Marvin Victor Zelkowitz : Programming Languages: Design and Implementation (4th ed.), Prentice Hall 2000.

Peter H. Salus .

Handbook of Programming Languages (4 vols.). Macmillan 1998.

Ravi Sethi : Programming Languages: Concepts and Constructs , 2nd ed., Addison-Wesley 1996.

Michael L. Scott and Jonathan Aldrich: Programming Language Pragmatics , 5th ed., Morgan Kaufmann Publishers 2025.

Sebesta, Robert W. (2012).

Concepts of Programming Languages (10 ed.). Addison-Wesley.

ISBN 978-0-13-139531-2 .

Franklyn Turbak and David Gifford with Mark Sheldon: Design Concepts in Programming Languages , The MIT Press 2009.

Peter Van Roy and Seif Haridi .

Concepts, Techniques, and Models of Computer Programming , The MIT Press 2004.

David A. Watt .

Programming Language Concepts and Paradigms . Prentice Hall 1990.

David A. Watt and Muffy Thomas .

Programming Language Syntax and Semantics . Prentice Hall 1991.

David A. Watt.

Programming Language Processors . Prentice Hall 1993.

David A. Watt.

Programming Language Design Concepts . John Wiley & Sons 2004.

Wilson, Leslie B. (2001).

Comparative Programming Languages, Third Edition . Addison-Wesley.

ISBN 0-201-71012-9 .

v t e Computer science Note: This template roughly follows the 2012 ACM Computing Classification System .

Hardware Printed circuit board Peripheral Integrated circuit Very-large-scale integration System on a chip (SoC) Energy consumption (green computing) Electronic design automation Hardware acceleration Processor Size / Form Computer systems organization Computer architecture Computational complexity Dependability Embedded system Real-time computing Cyber-physical system Fault tolerance Wireless sensor network Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Control variable Software development process Requirements analysis Software design Software construction Software deployment Software engineering Software maintenance Programming team Open-source model Theory of computation Model of computation Stochastic Formal language Automata theory Computability theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Theoretical computer science Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security hacker Security services Intrusion detection system Hardware security Network security Information security Application security Human–centered computing Interaction design Augmented reality Virtual reality Social computing Ubiquitous computing Visualization Accessibility Human–computer interaction Mobile computing Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Photograph manipulation Graphics processing unit Image compression Solid modeling Applied computing Quantum computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Differentiable computing Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Category Outline Glossaries v t e Types of programming languages Level Machine Assembly Compiled Interpreted Low-level High-level Very high-level Esoteric Generation First Second Third Fourth Fifth v t e Programming languages Comparison Timeline History Ada ALGOL Simula APL Assembly BASIC Visual Basic classic .NET C C++ C# COBOL Erlang Elixir Forth Fortran Go Haskell Java JavaScript Julia Kotlin Lisp Lua MATLAB ML Caml OCaml Pascal Object Pascal Perl Raku PHP Prolog Python R Ruby Rust SAS SQL Scratch Shell Smalltalk Swift more...

Lists: Alphabetical Categorical Generational Non-English-based Category v t e Types of computer language Types Architecture description Data exchange Hardware description Knowledge representation Markup Modeling Programming language Query Shading Specification Stylesheet Transformation See also Category:Lists of computer languages Category:Lists of programming languages List of programming languages by type Programming language at Wikipedia's sister projects : Definitions from Wiktionary Media from Commons Quotations from Wikiquote Textbooks from Wikibooks Resources from Wikiversity Data from Wikidata Authority control databases International FAST National Germany United States France BnF data Japan Czech Republic Other Yale LUX NewPP limit report
Parsed by mw‐web.codfw.main‐7889cf5cc‐x2xwb
Cached time: 20250818085514
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.296 seconds
Real time usage: 1.645 seconds
Preprocessor visited node count: 11706/1000000
Revision size: 65114/2097152 bytes
Post‐expand include size: 212009/2097152 bytes
Template argument size: 13874/2097152 bytes
Highest expansion depth: 14/100
Expensive parser function count: 30/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 233001/5000000 bytes
Lua time usage: 0.778/10.000 seconds
Lua memory usage: 11828127/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00% 1320.091      1 -total
 25.10%  331.281      1 Template:Reflist
 21.36%  282.032    101 Template:Sfn
  8.72%  115.151      1 Template:Logical_connectives_sidebar
  8.49%  112.104      1 Template:Sidebar
  6.53%   86.167      1 Template:Cite_ISO_standard
  6.22%   82.132      1 Template:Short_description
  5.77%   76.160     14 Template:Cite_web
  5.29%   69.898      1 Template:Sister_bar
  4.69%   61.849      2 Template:Ambox Saved in parser cache with key enwiki:stable-pcache:23015:|#|:idhash:canonical and timestamp 20250818085514 and revision id 1305358530. Rendering was triggered because: unknown Retrieved from " https://en.wikipedia.org/w/index.php?title=Programming_language&oldid=1305358530 " Categories : Programming language classification Programming languages Notation Hidden categories: Harv and Sfn no-target errors Webarchive template wayback links Accuracy disputes from June 2023 CS1 maint: multiple names: authors list Articles with short description Short description is different from Wikidata Wikipedia pending changes protected pages Use dmy dates from September 2020 Wikipedia references cleanup from August 2025 All articles needing references cleanup Articles covered by WikiProject Wikify from August 2025 All articles covered by WikiProject Wikify All articles with incomplete citations Articles with incomplete citations from August 2025 All articles with unsourced statements Articles with unsourced statements from August 2025 Articles with unsourced statements from October 2024 All articles with failed verification Articles with failed verification from January 2023 Articles needing additional references from April 2024 All articles needing additional references Articles with unsourced statements from August 2024 Articles with unsourced statements from June 2023 Articles with example C code This page was last edited on 11 August 2025, at 16:03 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Programming language 144 languages Add topic

