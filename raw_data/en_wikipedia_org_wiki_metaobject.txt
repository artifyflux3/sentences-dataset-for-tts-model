Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Metaobject protocol Toggle Metaobject protocol subsection 1.1 Runtime and compile time 1.2 Usage 2 See also 3 References 4 External links Toggle the table of contents Metaobject 6 languages العربية Français Հայերեն Italiano 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Object that manipulates, creates, describes, and implements other objects In computer science , a metaobject is an object that manipulates, creates, describes, or implements objects (including itself). The object that the metaobject pertains to is called the base object. Some information that a metaobject might define includes the base object's type , interface , class , methods , attributes , parse tree , etc. Metaobjects are examples of the computer science concept of reflection , where a system has access (usually at run time) to its own internal structure. Reflection enables a system to essentially rewrite itself on the fly, to alter its own implementation as it executes.

[ 1 ] Metaobject protocol [ edit ] A metaobject protocol ( MOP ) provides the vocabulary ( protocol ) to access and manipulate the structure and behaviour of systems of objects. Typical functions of a metaobject protocol include: [ 2 ] Create or delete a new class Create a new property or method Cause a class to inherit from a different class ("change the class structure") Generate or change the code defining the methods of a class Metaobject protocol is contrary to Bertrand Meyer 's open/closed principle , which holds that software object systems should be open for extension but closed for modification . This principle effectively draws a distinction between extending an object by adding to it, and modifying an object by redefining it, proposing that the former is a desirable quality ("objects should be extensible to meet the requirements of future use cases"), while the latter is undesirable ("objects should provide a stable interface not subject to summary revision"). Metaobject protocol, by contrast, transparently exposes the internal composition of objects and the entire object system in terms of the system itself. In practice, this means that programmers may use objects to redefine themselves, possibly in quite complex ways.

Furthermore, metaobject protocol is not merely an interface to an "underlying" implementation; rather, through metaobject protocol the object system is recursively implemented in terms of a meta -object system, which itself is theoretically implemented in terms of a meta -metaobject system, and so on until an arbitrary base case (a consistent state of the object system) is determined, with the protocol as such being the recursive functional relationship between these implementation levels.

Implementing object systems in such a way opens the possibility for radical discretionary redesign, providing deep flexibility but introducing possibly complex or difficult-to-understand metastability issues (for instance, the object system must not destructively update its own metaobject protocol - its internal self-representation - but the potential destructiveness of some updates is non-trivial to predict and may be hard to reason about), depending on the recursive depth to which the desired modifications are propagated.

[ 3 ] For this reason, metaobject protocol, when present in a language, is usually used sparingly and for specialised purposes such as software that transforms other software or itself in sophisticated ways, for example in reverse engineering.

[ 4 ] Runtime and compile time [ edit ] When compilation is not available at run-time there are additional complications for the implementation of metaobject protocol. For example, it is possible to change the type hierarchy with such a protocol but doing so may cause problems for code compiled with an alternative class model definition. Some environments have found innovative solutions for this, e.g., by handling metaobject issues at compile time. A good example of this is OpenC++ .

[ 5 ] The Semantic Web object-oriented model is more dynamic than most standard object systems, and is consistent with runtime metaobject protocols. For example, in the Semantic Web model classes are expected to change their relations to each other and there is a special inference engine known as a classifier that can validate and analyze evolving class models.

[ 6 ] Usage [ edit ] The first metaobject protocol was in the Smalltalk object-oriented programming language developed at Xerox PARC . The Common Lisp Object System (CLOS) came later and was influenced by the Smalltalk protocol as well as by Brian C. Smith 's original studies on 3-Lisp as an infinite tower of evaluators.

[ 7 ] The CLOS model, unlike the Smalltalk model, allows a class to have more than one superclass ; this raises additional complexity in issues such as resolving the lineage of the class hierarchy on some object instance. CLOS also allows for dynamic multimethod dispatch , which is handled via generic functions rather than message passing like in Smalltalk's single dispatch .

[ 8 ] The most influential book describing the semantics and implementation of the metaobject protocol in Common Lisp is The Art of the Metaobject Protocol by Gregor Kiczales et al.

[ 9 ] Metaobject protocols are also extensively used in software engineering applications. In virtually all commercial CASE, re-engineering, and Integrated Development Environments there is some form of metaobject protocol to represent and manipulate the design artifacts.

[ 10 ] [ 11 ] [ 12 ] A metaobject protocol is one way to implement aspect-oriented programming . Many of the early founders of MOPs, including Gregor Kiczales , have since moved on to be the primary advocates for aspect-oriented programming. Kiczales et al. of PARC were hired to design AspectJ for Java , a language which does not possess a native metaobject protocol.

See also [ edit ] Kind (type theory) Metaclass Javassist Joose JavaScript meta object system Moose Perl meta object system OpenJava Unified Modeling Language : UML Groovy References [ edit ] ^ Smith, Brian C (1982-01-01).

"Procedural Reflection In Programming Languages" .

MIT Technical Report (MIT-LCS-TR-272). Archived from the original on 13 December 2015 . Retrieved 16 December 2013 .

^ Foote, Brian; Ralph Johnson (1–6 October 1989).

"Reflective facilities in Smalltalk-80" .

Conference proceedings on Object-oriented programming systems, languages and applications . pp.

327– 335.

doi : 10.1145/74877.74911 .

ISBN 0897913337 . Retrieved 16 December 2013 .

^ The Art of the Metaobject Protocol , Appendix C — Living with Circularity ^ Favre, Lilliana; Liliana Martinez; Claudia Pereira (2009). "MDA-Based Reverse Engineering of Object Oriented Code".

Enterprise, Business-Process and Information Systems Modeling . Lecture Notes in Business Information Processing. Vol. 29. Springer. pp.

251– 263.

doi : 10.1007/978-3-642-01862-6_21 .

ISBN 978-3-642-01861-9 .

^ Chiba, Shigeru (1995).

"A metaobject protocol for C++" .

Proceedings of the tenth annual conference on Object-oriented programming systems, languages, and applications . pp.

285– 299.

doi : 10.1145/217838.217868 .

ISBN 978-0897917032 .

S2CID 3090058 . Retrieved 27 December 2013 .

^ Knublauch, Holger; Oberle, Daniel; Tetlow, Phil; Wallace, Evan (2006-03-09).

"A Semantic Web Primer for Object-Oriented Software Developers" .

W3C . Retrieved 2008-07-30 .

^ Daniel P. Friedman; Mitchell Wand (1988). "The mystery of the tower revealed: A non-reflective description of the reflective tower".

Proceedings of the 1986 ACM conference on LISP and functional programming - LFP '86 . pp.

298– 307.

doi : 10.1145/319838.319871 .

ISBN 978-0897912006 .

S2CID 7974739 .

^ "Integrating Object-Oriented and Functional Programming" (PDF) . Retrieved 7 July 2016 .

^ Kiczales, Gregor; Jim des Rivieres; Daniel G. Bobrow (July 30, 1991).

The Art of the Metaobject Protocol . The MIT Press.

ISBN 978-0262610742 .

^ Johnson, Lewis; David R. Harris; Kevin M. Benner; Martin S. Feather (October 1992). "Aries: The Requirements/Specification Facet for KBSA".

Rome Laboratory Final Technical Report . RL-TR-92-248.

^ "The Origin of Refine" (PDF) .

www.metaware.fr . Metaware White Paper. Archived from the original (PDF) on 7 January 2014 . Retrieved 6 January 2014 .

^ "OMG's MetaObject Facility" .

omg.org . Object Management Group . Retrieved 7 January 2014 .

External links [ edit ] The Guile MOP specification (GOOPS, based on Tiny CLOS) Metaobjects and the Metaobject Protocol Common Lisp Object System Metaobject Protocol (contains two chapters from The Art of the Metaobject Protocol ) Python 2.6 Metaprogramming v t e Data types Uninterpreted Bit Byte Trit Tryte Word Bit array Numeric Arbitrary-precision or bignum Complex Decimal Fixed point Block floating point Floating point Reduced precision Minifloat Half precision bfloat16 Single precision Double precision Quadruple precision Octuple precision Extended precision Long double Integer signedness Interval Rational Pointer Address physical virtual Reference Text Character String null-terminated Composite Algebraic data type generalized Array Associative array Class Dependent Equality Inductive Intersection List Object metaobject Option type Product Record or Struct Refinement Set Union tagged Other Boolean Bottom type Collection Enumerated type Exception Function type Opaque data type Recursive data type Semaphore Stream Strongly typed identifier Top type Type class Empty type Unit type Void Related topics Abstract data type Boxing Data structure Generic Kind metaclass Parametric polymorphism Primitive data type Interface Subtyping Type constructor Type conversion Type system Type theory Variable Retrieved from " https://en.wikipedia.org/w/index.php?title=Metaobject&oldid=1304004292 " Category : Object (computer science) Hidden categories: CS1: long volume value Articles with short description Short description is different from Wikidata This page was last edited on 3 August 2025, at 10:40 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Metaobject 6 languages Add topic

