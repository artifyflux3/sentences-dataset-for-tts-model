Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Formal definition 2 Solution 3 Theoretical aspects Toggle Theoretical aspects subsection 3.1 Computational Complexity 3.2 Function problems 4 Variants Toggle Variants subsection 4.1 Dynamic CSPs 4.2 Flexible CSPs 4.3 Decentralized CSPs 5 See also 6 References 7 Further reading Toggle the table of contents Constraint satisfaction problem 13 languages Deutsch Español فارسی Français 한국어 हिन्दी Italiano עברית 日本語 Português Русский Українська 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Set of objects whose state must satisfy limits Not to be confused with Communicating sequential processes .

This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Constraint satisfaction problem" – news · newspapers · books · scholar · JSTOR ( November 2014 ) ( Learn how and when to remove this message ) Constraint satisfaction problems ( CSPs ) are mathematical questions defined as a set of objects whose state must satisfy a number of constraints or limitations . CSPs represent the entities in a problem as a homogeneous collection of finite constraints over variables , which is solved by constraint satisfaction methods. CSPs are the subject of research in both artificial intelligence and operations research , since the regularity in their formulation provides a common basis to analyze and solve problems of many seemingly unrelated families.

CSPs often exhibit high complexity , requiring a combination of heuristics and combinatorial search methods to be solved in a reasonable time.

Constraint programming (CP) is the field of research that specifically focuses on tackling these kinds of problems.

[ 1 ] [ 2 ] Additionally, the Boolean satisfiability problem (SAT), satisfiability modulo theories (SMT), mixed integer programming (MIP) and answer set programming (ASP) are all fields of research focusing on the resolution of particular forms of the constraint satisfaction problem.

Examples of problems that can be modeled as a constraint satisfaction problem include: Type inference [ 3 ] [ 4 ] Eight queens puzzle Map coloring problem Maximum cut problem [ 5 ] Sudoku , crosswords , futoshiki , Kakuro (Cross Sums), Numbrix / Hidato , Zebra Puzzle , and many other logic puzzles These are often provided with tutorials of CP , ASP, Boolean SAT and SMT solvers. In the general case, constraint problems can be much harder, and may not be expressible in some of these simpler systems. "Real life" examples include automated planning , [ 6 ] [ 7 ] lexical disambiguation , [ 8 ] [ 9 ] musicology , [ 10 ] product configuration [ 11 ] and resource allocation .

[ 12 ] The existence of a solution to a CSP can be viewed as a decision problem . This can be decided by finding a solution, or failing to find a solution after exhaustive search ( stochastic algorithms typically never reach an exhaustive conclusion, while directed searches often do, on sufficiently small problems). In some cases the CSP might be known to have solutions beforehand, through some other mathematical inference process.

Formal definition [ edit ] Formally, a constraint satisfaction problem is defined as a triple ⟨ ⟨ X , D , C ⟩ ⟩ {\displaystyle \langle X,D,C\rangle } , where [ 13 ] X = { X 1 , … … , X n } {\displaystyle X=\{X_{1},\ldots ,X_{n}\}} is a set of variables, D = { D 1 , … … , D n } {\displaystyle D=\{D_{1},\ldots ,D_{n}\}} is a set of their respective domains of values, and C = { C 1 , … … , C m } {\displaystyle C=\{C_{1},\ldots ,C_{m}\}} is a set of constraints.

Each variable X i {\displaystyle X_{i}} can take on the values in the nonempty domain D i {\displaystyle D_{i}} .
Every constraint C j ∈ ∈ C {\displaystyle C_{j}\in C} is in turn a pair ⟨ ⟨ t j , R j ⟩ ⟩ {\displaystyle \langle t_{j},R_{j}\rangle } , where t j ⊆ ⊆ { 1 , 2 , … … , n } {\displaystyle t_{j}\subseteq \{1,2,\ldots ,n\}} is a set of k {\displaystyle k} indices and R j {\displaystyle R_{j}} is a k {\displaystyle k} -ary relation on the corresponding product of domains × × i ∈ ∈ t j D i {\displaystyle \times _{i\in t_{j}}D_{i}} where the product is taken with indices in ascending order. An evaluation of the variables is a function from a subset of variables to a particular set of values in the corresponding subset of domains. An evaluation v {\displaystyle v} satisfies a constraint ⟨ ⟨ t j , R j ⟩ ⟩ {\displaystyle \langle t_{j},R_{j}\rangle } if the values assigned to the variables t j {\displaystyle t_{j}} satisfy the relation R j {\displaystyle R_{j}} .

An evaluation is consistent if it does not violate any of the constraints. An evaluation is complete if it includes all variables. An evaluation is a solution if it is consistent and complete; such an evaluation is said to solve the constraint satisfaction problem.

Solution [ edit ] Constraint satisfaction problems on finite domains are typically solved using a form of search . The most used techniques are variants of backtracking , constraint propagation , and local search . These techniques are also often combined, as in the VLNS method, and current research involves other technologies such as linear programming .

[ 14 ] Backtracking is a recursive algorithm. It maintains a partial assignment of the variables. Initially, all variables are unassigned. At each step, a variable is chosen, and all possible values are assigned to it in turn. For each value, the consistency of the partial assignment with the constraints is checked; in case of consistency, a recursive call is performed. When all values have been tried, the algorithm backtracks. In this basic backtracking algorithm, consistency is defined as the satisfaction of all constraints whose variables are all assigned. Several variants of backtracking exist.

Backmarking improves the efficiency of checking consistency.

Backjumping allows saving part of the search by backtracking "more than one variable" in some cases.

Constraint learning infers and saves new constraints that can be later used to avoid part of the search.

Look-ahead is also often used in backtracking to attempt to foresee the effects of choosing a variable or a value, thus sometimes determining in advance when a subproblem is satisfiable or unsatisfiable.

Constraint propagation techniques are methods used to modify a constraint satisfaction problem. More precisely, they are methods that enforce a form of local consistency , which are conditions related to the consistency of a group of variables and/or constraints. Constraint propagation has various uses. First, it turns a problem into one that is equivalent but is usually simpler to solve. Second, it may prove satisfiability or unsatisfiability of problems. This is not guaranteed to happen in general; however, it always happens for some forms of constraint propagation and/or for certain kinds of problems. The most known and used forms of local consistency are arc consistency , hyper-arc consistency , and path consistency . The most popular constraint propagation method is the AC-3 algorithm , which enforces arc consistency.

Local search methods are incomplete satisfiability algorithms. They may find a solution of a problem, but they may fail even if the problem is satisfiable. They work by iteratively improving a complete assignment over the variables. At each step, a small number of variables are changed in value, with the overall aim of increasing the number of constraints satisfied by this assignment.  The min-conflicts algorithm is a local search algorithm specific for CSPs and is based on that principle. In practice, local search appears to work well when these changes are also affected by random choices. An integration of search with local search has been developed, leading to hybrid algorithms .

Theoretical aspects [ edit ] Computational Complexity [ edit ] CSPs are also studied in computational complexity theory , finite model theory and universal algebra . It turned out that questions about the complexity of CSPs translate into important universal-algebraic questions about underlying algebras. This approach is known as the algebraic approach to CSPs.

[ 15 ] Since every computational decision problem is polynomial-time equivalent to a CSP with an infinite template, [ 16 ] general CSPs can have arbitrary complexity. In particular, there are also CSPs within the class of NP-intermediate problems, whose existence was demonstrated by Ladner , under the assumption that P ≠ NP .

However, a large class of CSPs arising from natural applications satisfy a complexity dichotomy, meaning that every CSP within that class is either in P or NP-complete . These CSPs thus provide one of the largest known subsets of NP which avoids NP-intermediate problems. A complexity dichotomy was first proven by Schaefer for Boolean CSPs, i.e. CSPs over a 2-element domain and where all the available relations are Boolean operators . This result has been generalized for various classes of CSPs, most notably for all CSPs over finite domains. This finite-domain dichotomy conjecture was first formulated by Tomás Feder and Moshe Vardi, [ 17 ] and finally proven independently by Andrei Bulatov [ 18 ] and Dmitriy Zhuk in 2017.

[ 19 ] Other classes for which a complexity dichotomy has been confirmed are all first-order reducts of ( Q , < ) {\displaystyle (\mathbb {Q} ,<)} , [ 20 ] all first-order reducts of the countable random graph , [ 21 ] all first-order reducts of the model companion of the class of all C-relations, [ 22 ] all first-order reducts of the universal homogenous poset , [ 23 ] all first-order reducts of homogenous undirected graphs, [ 24 ] all first-order reducts of all unary structures, [ 25 ] all CSPs in the complexity class MMSNP.

[ 26 ] Most classes of CSPs that are known to be tractable are those where the hypergraph of constraints has bounded treewidth , [ 27 ] or where the constraints have arbitrary form but there exist equationally non-trivial polymorphisms of the set of constraint relations.

[ 28 ] An infinite-domain dichotomy conjecture [ 29 ] has been formulated for all CSPs of reducts of finitely bounded homogenous structures, stating that the CSP of such a structure is in P if and only if its polymorphism clone is equationally non-trivial, and NP-hard otherwise.

The complexity of such infinite-domain CSPs as well as of other generalisations (Valued CSPs, Quantified CSPs, Promise CSPs) is still an area of active research.

[ 30 ] [1] [2] Every CSP can also be considered as a conjunctive query containment problem.

[ 31 ] Function problems [ edit ] A similar situation exists between the functional classes FP and #P . By a generalization of Ladner's theorem , there are also problems in neither FP nor #P-complete as long as FP ≠ #P. As in the decision case, a problem in the #CSP is defined by a set of relations. Each problem takes a Boolean formula as input and the task is to compute the number of satisfying assignments. This can be further generalized by using larger domain sizes and attaching a weight to each satisfying assignment and computing the sum of these weights. It is known that any complex weighted #CSP problem is either in FP or #P-hard.

[ 32 ] Variants [ edit ] The classic model of Constraint Satisfaction Problem defines a model of static, inflexible constraints. This rigid model is a shortcoming that makes it difficult to represent problems easily.

[ 33 ] Several modifications of the basic CSP definition have been proposed to adapt the model to a wide variety of problems.

Dynamic CSPs [ edit ] Dynamic CSPs [ 34 ] ( DCSP s) are useful when the original formulation of a problem is altered in some way, typically because the set of constraints to consider evolves because of the environment.

[ 35 ] DCSPs are viewed as a sequence of static CSPs, each one a transformation of the previous one in which variables and constraints can be added (restriction) or removed (relaxation). Information found in the initial formulations of the problem can be used to refine the next ones. The solving method can be classified according to the way in which information is transferred: Oracles : the solution found to previous CSPs in the sequence are used as heuristics to guide the resolution of the current CSP from scratch.

Local repair: each CSP is calculated starting from the partial solution of the previous one and repairing the inconsistent constraints with local search .

Constraint recording: new constraints are defined in each stage of the search to represent the learning of inconsistent group of decisions. Those constraints are carried over to the new CSP problems.

Flexible CSPs [ edit ] Classic CSPs treat constraints as hard, meaning that they are imperative (each solution must satisfy all of them) and inflexible (in the sense that they must be completely satisfied or else they are completely violated).

Flexible CSP s relax those assumptions, partially relaxing the constraints and allowing the solution to not comply with all of them. This is similar to preferences in preference-based planning . Some types of flexible CSPs include: MAX-CSP, where a number of constraints are allowed to be violated, and the quality of a solution is measured by the number of satisfied constraints.

Weighted CSP , a MAX-CSP in which each violation of a constraint is weighted according to a predefined preference. Thus satisfying constraint with more weight is preferred.

Fuzzy CSP model constraints as fuzzy relations in which the satisfaction of a constraint is a continuous function of its variables' values, going from fully satisfied to fully violated.

Decentralized CSPs [ edit ] In DCSPs [ 36 ] each constraint variable is thought of as having a separate geographic location.  Strong constraints are placed on information exchange between variables, requiring the use of fully distributed algorithms to solve the constraint satisfaction problem.

See also [ edit ] Constraint composite graph Constraint programming Declarative programming Constrained optimization (COP) Distributed constraint optimization Graph homomorphism Unique games conjecture Weighted constraint satisfaction problem (WCSP) References [ edit ] ^ Lecoutre, Christophe (2013).

Constraint Networks: Techniques and Algorithms . Wiley. p. 26.

ISBN 978-1-118-61791-5 .

^ "Constraints – incl. option to publish open access" .

springer.com . Retrieved 2019-10-03 .

^ Chandra, Satish; Gordon, Colin S.; Jeannin, Jean-Baptiste; Schlesinger, Cole; Sridharan, Manu; Tip, Frank; Choi, Youngil (2016).

"Type inference for static compilation of JavaScript" (PDF) .

Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications . pp.

410– 429.

doi : 10.1145/2983990.2984017 .

ISBN 978-1-4503-4444-9 .

^ Jim, Trevor, and Jens Palsberg. " Type inference in systems of recursive types with subtyping ." Available on authors' web page (1999).

^ Farhi, Edward; Aram W Harrow (2016). "Quantum Supremacy through the Quantum Approximate Optimization Algorithm".

arXiv : 1602.07674 [ quant-ph ].

^ Malik Ghallab; Dana Nau; Paolo Traverso (21 May 2004).

Automated Planning: Theory and Practice . Elsevier. pp. 1–.

ISBN 978-0-08-049051-9 .

^ Dynamic Flexible Constraint Satisfaction and Its Application to AI Planning , Archived 2009-02-06 at the Wayback Machine Ian Miguel – slides.

^ Demetriou, George C. " Lexical disambiguation using constraint handling in Prolog (CHIP) ." Proceedings of the sixth conference on European chapter of the Association for Computational Linguistics. Association for Computational Linguistics, 1993.

^ MacDonald, Maryellen C., and Mark S. Seidenberg. " Constraint satisfaction accounts of lexical and sentence comprehension ." Handbook of Psycholinguistics (Second Edition). 2006. 581–611.

^ Mauricio Toro, Carlos Agon, Camilo Rueda, Gerard Assayag. " GELISP: A FRAMEWORK TO REPRESENT MUSICAL CONSTRAINT SATISFACTION PROBLEMS AND SEARCH STRATEGIES ." Journal of Theoretical and Applied Information Technology 86 (2). 2016. 327–331.

^ Applying constraint satisfaction approach to solve product configuration problems with cardinality-based configuration rules , Dong Yang & Ming Dong, Journal of Intelligent Manufacturing volume 24, pages99–111 (2013) ^ Modi, Pragnesh Jay, et al. " A dynamic distributed constraint satisfaction approach to resource allocation ." International Conference on Principles and Practice of Constraint Programming. Springer, Berlin, Heidelberg, 2001.

^ Stuart Jonathan Russell; Peter Norvig (2010).

Artificial Intelligence: A Modern Approach . Prentice Hall. p. Chapter 6.

ISBN 9780136042594 .

^ Milano, Michela ; Van Hentenryck, Pascal, eds. (2011).

Hybrid optimization : the ten years of CPAIOR . International Conference on Integration of AI and OR Techniques in Constraint Programming for Combinatorial Optimisation Problems. New York: Springer.

ISBN 9781441916440 .

OCLC 695387020 .

^ Barto, Libor; Brady, Zarathustra; Bulatov, Andrei; Kozik, Marcin; Zhuk, Dmitriy (2024-05-15). "Unifying the Three Algebraic Approaches to the CSP via Minimal Taylor Algebras".

Theoretics .

3 : 11361.

arXiv : 2104.11808 .

doi : 10.46298/theoretics.24.14 .

ISSN 2751-4838 .

^ Bodirsky, Manuel; Grohe, Martin (2008).

"Non-dichotomies in Constraint Satisfaction Complexity" . In Aceto, Luca; Damgård, Ivan; Goldberg, Leslie Ann; Halldórsson, Magnús M.; Ingólfsdóttir, Anna; Walukiewicz, Igor (eds.).

Automata, Languages and Programming . Lecture Notes in Computer Science. Vol. 5126. Berlin, Heidelberg: Springer. pp.

184– 196.

doi : 10.1007/978-3-540-70583-3_16 .

ISBN 978-3-540-70583-3 .

^ Feder, Tomás; Vardi, Moshe Y.

(1998).

"The Computational Structure of Monotone Monadic SNP and Constraint Satisfaction: A Study through Datalog and Group Theory" .

SIAM Journal on Computing .

28 (1): 57– 104.

doi : 10.1137/S0097539794266766 .

ISSN 0097-5397 .

^ Bulatov, Andrei (2017). "A Dichotomy Theorem for Nonuniform CSPs".

Proceedings of the 58th IEEE Annual Symposium on Foundations of Computer Science, FOCS 2017 . IEEE Computer Society. pp.

319– 330.

arXiv : 1703.03021 .

doi : 10.1109/FOCS.2017.37 .

ISBN 978-1-5386-3464-6 .

^ Zhuk, Dmitriy (2020). "A Proof of the CSP Dichotomy Conjecture".

Journal of the ACM .

67 (5): 1– 78.

arXiv : 1704.01914 .

doi : 10.1145/3402029 .

^ Bodirsky, Manuel; Kára, Jan (2010-02-08).

"The complexity of temporal constraint satisfaction problems" .

J. ACM .

57 (2): 9:1–9:41.

doi : 10.1145/1667053.1667058 .

ISSN 0004-5411 .

^ Bodirsky, Manuel; Pinsker, Michael (2011). "Schaefer's theorem for graphs".

Proceedings of the 43rd Annual Symposium on Theory of Computing (STOC '11) .

Association for Computing Machinery . pp.

655– 664.

arXiv : 1011.2894 .

doi : 10.1145/1993636.1993724 .

ISBN 978-1-4503-0691-1 .

S2CID 47097319 .

^ Bodirsky, Manuel; Jonsson, Peter; Pham, Trung Van (2017-08-02).

"The Complexity of Phylogeny Constraint Satisfaction Problems" .

ACM Trans. Comput. Logic .

18 (3): 23:1–23:42.

arXiv : 1503.07310 .

doi : 10.1145/3105907 .

ISSN 1529-3785 .

^ Kompatscher, Michael; Pham, Trung Van (2017). "A Complexity Dichotomy for Poset Constraint Satisfaction".

34th Symposium on Theoretical Aspects of Computer Science (STACS 2017) . Leibniz International Proceedings in Informatics. Vol. 66. Schloss Dagstuhl – Leibniz-Zentrum für Informatik. pp. 47:1–47:12.

doi : 10.4230/LIPIcs.STACS.2017.47 .

ISBN 978-3-95977-028-6 .

^ Bodirsky, Manuel; Martin, Barnaby; Pinsker, Michael; Pongrácz, András (January 2019).

"Constraint Satisfaction Problems for Reducts of Homogeneous Graphs" .

SIAM Journal on Computing .

48 (4): 1224– 1264.

arXiv : 1602.05819 .

doi : 10.1137/16M1082974 .

ISSN 0097-5397 .

^ Bodirsky, Manuel; Mottet, Antoine (2018-05-20), "A Dichotomy for First-Order Reducts of Unary Structures", Logical Methods in Computer Science , 14 (2), arXiv : 1601.04520 , doi : 10.23638/LMCS-14(2:13)2018 ^ Bodirsky, Manuel; Madelaine, Florent; Mottet, Antoine (2018-07-09).

"A universal-algebraic proof of the complexity dichotomy for Monotone Monadic SNP" .

Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science . LICS '18. New York, NY, USA: Association for Computing Machinery. pp.

105– 114.

arXiv : 1802.03255 .

doi : 10.1145/3209108.3209156 .

ISBN 978-1-4503-5583-4 .

^ Barto, Libor; Kozik, Marcin (2014-01-01).

"Constraint Satisfaction Problems Solvable by Local Consistency Methods" .

J. ACM .

61 (1): 3:1–3:19.

doi : 10.1145/2556646 .

ISSN 0004-5411 .

^ Bodirsky, Manuel (2021).

Complexity of Infinite-Domain Constraint Satisfaction . Lecture Notes in Logic. Cambridge: Cambridge University Press.

ISBN 978-1-107-04284-1 .

^ Bodirsky, Manuel; Pinsker, Michael; Pongrácz, András (March 2021).

"Projective Clone Homomorphisms" .

The Journal of Symbolic Logic .

86 (1): 148– 161.

arXiv : 1409.4601 .

doi : 10.1017/jsl.2019.23 .

hdl : 2437/268560 .

ISSN 0022-4812 .

^ Pinsker, Michael (2022-03-31). "Current Challenges in Infinite-Domain Constraint Satisfaction: Dilemmas of the Infinite Sheep".

arXiv : 2203.17182 [ cs.LO ].

^ Kolaitis, Phokion G.; Vardi, Moshe Y.

(2000).

"Conjunctive-Query Containment and Constraint Satisfaction" .

Journal of Computer and System Sciences .

61 (2): 302– 332.

doi : 10.1006/jcss.2000.1713 .

^ Cai, Jin-Yi; Chen, Xi (2012). "Complexity of counting CSP with complex weights".

Proceedings of the Forty-Fourth Annual ACM Symposium on Theory of Computing (STOC '12) . pp.

909– 920.

arXiv : 1111.2384 .

doi : 10.1145/2213977.2214059 .

ISBN 978-1-4503-1245-5 .

S2CID 53245129 .

^ Miguel, Ian (July 2001).

Dynamic Flexible Constraint Satisfaction and its Application to AI Planning (Ph.D. thesis).

University of Edinburgh School of Informatics .

CiteSeerX 10.1.1.9.6733 .

hdl : 1842/326 .

^ Dechter, R. and Dechter, A., Belief Maintenance in Dynamic Constraint Networks Archived 2012-11-17 at the Wayback Machine In Proc. of AAAI-88, 37–42.

^ Solution reuse in dynamic constraint satisfaction problems , Thomas Schiex ^ Duffy, K.R.; Leith, D.J. (August 2013), "Decentralized Constraint Satisfaction", IEEE/ACM Transactions on Networking, 21(4) , vol. 21, pp.

1298– 1308, arXiv : 1103.3240 , doi : 10.1109/TNET.2012.2222923 , S2CID 11504393 Further reading [ edit ] A quick introduction to constraint satisfaction on YouTube Manuel Bodirsky (2021).

Complexity of Infinite-Domain Constraint Satisfaction . Cambridge University Press.

https://doi.org/10.1017/9781107337534 Steven Minton; Andy Philips; Mark D. Johnston; Philip Laird (1993). "Minimizing Conflicts: A Heuristic Repair Method for Constraint-Satisfaction and Scheduling Problems".

Journal of Artificial Intelligence Research .

58 ( 1– 3): 161– 205.

CiteSeerX 10.1.1.308.6637 .

doi : 10.1016/0004-3702(92)90007-k .

S2CID 14830518 .

Tsang, Edward (1993).

Foundations of Constraint Satisfaction . Academic Press.

ISBN 0-12-701610-4 Chen, Hubie (December 2009). "A Rendezvous of Logic, Complexity, and Algebra".

ACM Computing Surveys .

42 (1): 1– 32.

arXiv : cs/0611018 .

doi : 10.1145/1592451.1592453 .

S2CID 11975818 .

Dechter, Rina (2003).

Constraint processing . Morgan Kaufmann.

ISBN 1-55860-890-7 Apt, Krzysztof (2003).

Principles of constraint programming . Cambridge University Press.

ISBN 9780521825832 .

ISBN 0-521-82583-0 Lecoutre, Christophe (2009).

Constraint Networks: Techniques and Algorithms . ISTE/Wiley.

ISBN 978-1-84821-106-3 Tomás Feder, Constraint satisfaction: a personal perspective , manuscript.

Constraints archive Forced Satisfiable CSP Benchmarks of Model RB Archived 2021-01-25 at the Wayback Machine Benchmarks – XML representation of CSP instances XCSP3 – An XML-based format designed to represent CSP instances Constraint Propagation – Dissertation by Guido Tack giving a good survey of theory and implementation issues v t e Industrial and applied mathematics Computational Algorithms design analysis Automata theory Automated theorem proving Coding theory Computational geometry Constraint satisfaction Constraint programming Computational logic Cryptography Information theory Statistics Mathematical software Arbitrary-precision arithmetic Finite element analysis Tensor software Interactive geometry software Optimization software Statistical software Numerical-analysis software Numerical libraries Solvers Discrete Computer algebra Computational number theory Combinatorics Graph theory Discrete geometry Analysis Approximation theory Clifford analysis Clifford algebra Differential equations Ordinary differential equations Partial differential equations Stochastic differential equations Differential geometry Differential forms Gauge theory Geometric analysis Dynamical systems Chaos theory Control theory Functional analysis Operator algebra Operator theory Harmonic analysis Fourier analysis Multilinear algebra Exterior Geometric Tensor Vector Multivariable calculus Exterior Geometric Tensor Vector Numerical analysis Numerical linear algebra Numerical methods for ordinary differential equations Numerical methods for partial differential equations Validated numerics Variational calculus Probability theory Distributions ( random variables ) Stochastic processes / analysis Path integral Stochastic variational calculus Mathematical physics Analytical mechanics Lagrangian Hamiltonian Field theory Classical Conformal Effective Gauge Quantum Statistical Topological Perturbation theory in quantum mechanics Potential theory String theory Bosonic Topological Supersymmetry Supersymmetric quantum mechanics Supersymmetric theory of stochastic dynamics Algebraic structures Algebra of physical space Feynman integral Poisson algebra Quantum group Renormalization group Representation theory Spacetime algebra Superalgebra Supersymmetry algebra Decision sciences Game theory Operations research Optimization Social choice theory Statistics Mathematical economics Mathematical finance Other applications Biology Chemistry Psychology Sociology " The Unreasonable Effectiveness of Mathematics in the Natural Sciences " Related Mathematics Organizations Society for Industrial and Applied Mathematics Japan Society for Industrial and Applied Mathematics Société de Mathématiques Appliquées et Industrielles International Council for Industrial and Applied Mathematics European Community on Computational Methods in Applied Sciences Category Mathematics portal / outline / topics list Retrieved from " https://en.wikipedia.org/w/index.php?title=Constraint_satisfaction_problem&oldid=1296417118 " Categories : Constraint programming NP-complete problems Hidden categories: Webarchive template wayback links Articles with short description Short description is different from Wikidata Articles needing additional references from November 2014 All articles needing additional references This page was last edited on 19 June 2025, at 22:02 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Constraint satisfaction problem 13 languages Add topic

