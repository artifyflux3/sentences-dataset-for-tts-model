Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Notation 2 Definition Toggle Definition subsection 2.1 Truth table 2.2 Defined by other operators 3 Introduction and elimination rules 4 Negation Toggle Negation subsection 4.1 Definition 4.2 Other proof strategies 5 Properties 6 Applications in computer engineering 7 Set-theoretic correspondence 8 Natural language 9 See also 10 References 11 External links Toggle the table of contents Logical conjunction 49 languages العربية Azərbaycanca Български Bosanski Català Čeština Dansk Deutsch Eesti Ελληνικά Emiliàn e rumagnòl Español Esperanto Euskara فارسی Français Galego 한국어 Հայերեն Ido Bahasa Indonesia Italiano עברית Қазақша Кыргызча Lietuvių Lombard Magyar Македонски Nederlands 日本語 Norsk bokmål Piemontèis Polski Português Русский Shqip Simple English Slovenčina Slovenščina کوردی Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska ไทย Українська 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from Logical and ) Logical connective AND Not to be confused with Circumflex Agent (^) , Capital Lambda (Λ) , Turned V (Λ) , or Exterior Product (∧) .

Logical conjunction AND Definition x y {\displaystyle xy} Truth table ( 1000 ) {\displaystyle (1000)} Logic gate Normal forms Disjunctive x y {\displaystyle xy} Conjunctive x y {\displaystyle xy} Zhegalkin polynomial x y {\displaystyle xy} Post's lattices 0-preserving yes 1-preserving yes Monotone no Affine no Self-dual no v t e Logical connectives NOT ¬ ¬ A , − − A , A ¯ ¯ , ∼ ∼ A {\displaystyle \neg A,-A,{\overline {A}},\sim A} AND A ∧ ∧ B , A ⋅ ⋅ B , A B , A & & B , A & & & & B {\displaystyle A\land B,A\cdot B,AB,A\ \&\ B,A\ \&\&\ B} NAND A ∧ ∧ ¯ ¯ B , A ↑ ↑ B , A ∣ ∣ B , A ⋅ ⋅ B ¯ ¯ {\displaystyle A{\overline {\land }}B,A\uparrow B,A\mid B,{\overline {A\cdot B}}} OR A ∨ ∨ B , A + B , A ∣ ∣ B , A ∥ ∥ B {\displaystyle A\lor B,A+B,A\mid B,A\parallel B} NOR A ∨ ∨ ¯ ¯ B , A ↓ ↓ B , A + B ¯ ¯ {\displaystyle A{\overline {\lor }}B,A\downarrow B,{\overline {A+B}}} XNOR A ⊙ ⊙ B , A ∨ ∨ ¯ ¯ B ¯ ¯ {\displaystyle A\odot B,{\overline {A{\overline {\lor }}B}}} └ equivalent A ≡ ≡ B , A ⇔ ⇔ B , A ⇋ ⇋ B {\displaystyle A\equiv B,A\Leftrightarrow B,A\leftrightharpoons B} XOR A ∨ ∨ _ _ B , A ⊕ ⊕ B {\displaystyle A{\underline {\lor }}B,A\oplus B} └ nonequivalent A ≢ B , A ⇎ B , A ↮ ↮ B {\displaystyle A\not \equiv B,A\not \Leftrightarrow B,A\nleftrightarrow B} implies A ⇒ ⇒ B , A ⊃ ⊃ B , A → → B {\displaystyle A\Rightarrow B,A\supset B,A\rightarrow B} nonimplication ( NIMPLY ) A ⇏ B , A ⊅ B , A ↛ ↛ B {\displaystyle A\not \Rightarrow B,A\not \supset B,A\nrightarrow B} converse A ⇐ ⇐ B , A ⊂ ⊂ B , A ← ← B {\displaystyle A\Leftarrow B,A\subset B,A\leftarrow B} converse nonimplication A ⇍ B , A ⊄ B , A ↚ ↚ B {\displaystyle A\not \Leftarrow B,A\not \subset B,A\nleftarrow B} Related concepts Propositional calculus Predicate logic Boolean algebra Truth table Truth function Boolean function Functional completeness Scope (logic) Applications Digital logic Programming languages Mathematical logic Philosophy of logic Category v t e Venn diagram of A ∧ ∧ B ∧ ∧ C {\displaystyle A\wedge B\land C} In logic , mathematics and linguistics , and ( ∧ ∧ {\displaystyle \wedge } ) is the truth-functional operator of conjunction or logical conjunction . The logical connective of this operator is typically represented as ∧ ∧ {\displaystyle \wedge } [ 1 ] or & & {\displaystyle \&} or K {\displaystyle K} (prefix) or × × {\displaystyle \times } or ⋅ ⋅ {\displaystyle \cdot } [ 2 ] in which ∧ ∧ {\displaystyle \wedge } is the most modern and widely used.

The and of a set of operands is true if and only if all of its operands are true, i.e., A ∧ ∧ B {\displaystyle A\land B} is true if and only if A {\displaystyle A} is true and B {\displaystyle B} is true.

An operand of a conjunction is a conjunct .

[ 3 ] Beyond logic, the term "conjunction" also refers to similar concepts in other fields: In natural language , the denotation of expressions such as English " and "; In programming languages , the short-circuit and control structure ; In set theory , intersection .

In lattice theory , logical conjunction ( greatest lower bound ).

Notation [ edit ] And is usually denoted by an infix operator: in mathematics and logic, it is denoted by a "wedge" ∧ ∧ {\displaystyle \wedge } (Unicode U+2227 ∧ LOGICAL AND ), [ 1 ] & & {\displaystyle \&} or × × {\displaystyle \times } ; in electronics, ⋅ ⋅ {\displaystyle \cdot } ; and in programming languages & , && , or and .   In Jan Łukasiewicz 's prefix notation for logic , the operator is K {\displaystyle K} , for Polish koniunkcja .

[ 4 ] In mathematics, the conjunction of an arbitrary number of elements a 1 , … … , a n {\displaystyle a_{1},\ldots ,a_{n}} can be denoted as an iterated binary operation using a "big wedge" ⋀ (Unicode U+22C0 ⋀ N-ARY LOGICAL AND ): [ 5 ] ⋀ ⋀ i = 1 n a i = a 1 ∧ ∧ a 2 ∧ ∧ … … a n − − 1 ∧ ∧ a n {\displaystyle \bigwedge _{i=1}^{n}a_{i}=a_{1}\wedge a_{2}\wedge \ldots a_{n-1}\wedge a_{n}} Definition [ edit ] In classical logic , logical conjunction is an operation on two logical values , typically the values of two propositions , that produces a value of true if and only if (also known as iff) both of its operands are true.

[ 2 ] [ 1 ] The conjunctive identity is true, which is to say that AND-ing an expression with true will never change the value of the expression. In keeping with the concept of vacuous truth , when conjunction is defined as an operator or function of arbitrary arity , the empty conjunction (AND-ing over an empty set of operands) is often defined as having the result true.

Truth table [ edit ] Conjunctions of the arguments on the left — The true bit s form a Sierpinski triangle .

The truth table of A ∧ ∧ B {\displaystyle A\land B} : [ 1 ] [ 2 ] A {\displaystyle A} B {\displaystyle B} A ∧ ∧ B {\displaystyle A\land B} F F F F T F T F F T T T Defined by other operators [ edit ] In systems where logical conjunction is not a primitive, it may be defined as [ 6 ] A ∧ ∧ B = ¬ ¬ ( A → → ¬ ¬ B ) {\displaystyle A\land B=\neg (A\to \neg B)} It can be checked by the following truth table (compare the last two columns): A {\displaystyle A} B {\displaystyle B} ¬ ¬ B {\displaystyle \neg B} A → → ¬ ¬ B {\displaystyle A\rightarrow \neg B} ¬ ¬ ( A → → ¬ ¬ B ) {\displaystyle \neg (A\rightarrow \neg B)} A ∧ ∧ B {\displaystyle A\land B} F F T T F F F T F T F F T F T T F F T T F F T T or A ∧ ∧ B = ¬ ¬ ( ¬ ¬ A ∨ ∨ ¬ ¬ B ) .

{\displaystyle A\land B=\neg (\neg A\lor \neg B).} It can be checked by the following truth table (compare the last two columns): A {\displaystyle A} B {\displaystyle B} ¬ ¬ A {\displaystyle \neg A} ¬ ¬ B {\displaystyle \neg B} ¬ ¬ A ∨ ∨ ¬ ¬ B {\displaystyle \neg A\lor \neg B} ¬ ¬ ( ¬ ¬ A ∨ ∨ ¬ ¬ B ) {\displaystyle \neg (\neg A\lor \neg B)} A ∧ ∧ B {\displaystyle A\land B} F F T T T F F F T T F T F F T F F T T F F T T F F F T T Introduction and elimination rules [ edit ] As a rule of inference, conjunction introduction is a classically valid , simple argument form . The argument form has two premises, A {\displaystyle A} and B {\displaystyle B} . Intuitively, it permits the inference of their conjunction.

A {\displaystyle A} , B {\displaystyle B} .

Therefore, A and B .

or in logical operator notation, where \vdash  expresses provability: ⊢ ⊢ A , {\displaystyle \vdash A,} ⊢ ⊢ B {\displaystyle \vdash B} ⊢ ⊢ A ∧ ∧ B {\displaystyle \vdash A\land B} Here is an example of an argument that fits the form conjunction introduction : Bob likes apples.

Bob likes oranges.

Therefore, Bob likes apples and Bob likes oranges.

Conjunction elimination is another classically valid , simple argument form . Intuitively, it permits the inference from any conjunction of either element of that conjunction.

A {\displaystyle A} and B {\displaystyle B} .

Therefore, A {\displaystyle A} .

...or alternatively, A {\displaystyle A} and B {\displaystyle B} .

Therefore, B {\displaystyle B} .

In logical operator notation: ⊢ ⊢ A ∧ ∧ B {\displaystyle \vdash A\land B} ⊢ ⊢ A {\displaystyle \vdash A} ...or alternatively, ⊢ ⊢ A ∧ ∧ B {\displaystyle \vdash A\land B} ⊢ ⊢ B {\displaystyle \vdash B} Negation [ edit ] Definition [ edit ] A conjunction A ∧ ∧ B {\displaystyle A\land B} is proven false by establishing either ¬ ¬ A {\displaystyle \neg A} or ¬ ¬ B {\displaystyle \neg B} . In terms of the object language, this reads ¬ ¬ A → → ¬ ¬ ( A ∧ ∧ B ) {\displaystyle \neg A\to \neg (A\land B)} This formula can be seen as a special case of ( A → → C ) → → ( ( A ∧ ∧ B ) → → C ) {\displaystyle (A\to C)\to ((A\land B)\to C)} when C {\displaystyle C} is a false proposition.

Other proof strategies [ edit ] If A {\displaystyle A} implies ¬ ¬ B {\displaystyle \neg B} , then both ¬ ¬ A {\displaystyle \neg A} as well as A {\displaystyle A} prove the conjunction false: ( A → → ¬ ¬ B ) → → ¬ ¬ ( A ∧ ∧ B ) {\displaystyle (A\to \neg {}B)\to \neg (A\land B)} In other words, a conjunction can actually be proven false just by knowing about the relation of its conjuncts, and not necessary about their truth values.

This formula can be seen as a special case of ( A → → ( B → → C ) ) → → ( ( A ∧ ∧ B ) → → C ) {\displaystyle (A\to (B\to C))\to ((A\land B)\to C)} when C {\displaystyle C} is a false proposition.

Either of the above are constructively valid proofs by contradiction.

Properties [ edit ] commutativity : yes A ∧ ∧ B {\displaystyle A\land B} ⇔ ⇔ {\displaystyle \Leftrightarrow } B ∧ ∧ A {\displaystyle B\land A} ⇔ ⇔ {\displaystyle \Leftrightarrow } associativity : yes [ 7 ] A {\displaystyle ~A} ∧ ∧ {\displaystyle ~~~\land ~~~} ( B ∧ ∧ C ) {\displaystyle (B\land C)} ⇔ ⇔ {\displaystyle \Leftrightarrow } ( A ∧ ∧ B ) {\displaystyle (A\land B)} ∧ ∧ {\displaystyle ~~~\land ~~~} C {\displaystyle ~C} ∧ ∧ {\displaystyle ~~~\land ~~~} ⇔ ⇔ {\displaystyle \Leftrightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } ∧ ∧ {\displaystyle ~~~\land ~~~} distributivity : with various operations, especially with or A {\displaystyle ~A} ∧ ∧ {\displaystyle \land } ( B ∨ ∨ C ) {\displaystyle (B\lor C)} ⇔ ⇔ {\displaystyle \Leftrightarrow } ( A ∧ ∧ B ) {\displaystyle (A\land B)} ∨ ∨ {\displaystyle \lor } ( A ∧ ∧ C ) {\displaystyle (A\land C)} ∧ ∧ {\displaystyle \land } ⇔ ⇔ {\displaystyle \Leftrightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } ∨ ∨ {\displaystyle \lor } others with exclusive or : A {\displaystyle ~A} ∧ ∧ {\displaystyle \land } ( B ⊕ ⊕ C ) {\displaystyle (B\oplus C)} ⇔ ⇔ {\displaystyle \Leftrightarrow } ( A ∧ ∧ B ) {\displaystyle (A\land B)} ⊕ ⊕ {\displaystyle \oplus } ( A ∧ ∧ C ) {\displaystyle (A\land C)} ∧ ∧ {\displaystyle \land } ⇔ ⇔ {\displaystyle \Leftrightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } ⊕ ⊕ {\displaystyle \oplus } with material nonimplication : A {\displaystyle ~A} ∧ ∧ {\displaystyle \land } ( B ↛ ↛ C ) {\displaystyle (B\nrightarrow C)} ⇔ ⇔ {\displaystyle \Leftrightarrow } ( A ∧ ∧ B ) {\displaystyle (A\land B)} ↛ ↛ {\displaystyle \nrightarrow } ( A ∧ ∧ C ) {\displaystyle (A\land C)} ∧ ∧ {\displaystyle \land } ⇔ ⇔ {\displaystyle \Leftrightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } ↛ ↛ {\displaystyle \nrightarrow } with itself: A {\displaystyle ~A} ∧ ∧ {\displaystyle \land } ( B ∧ ∧ C ) {\displaystyle (B\land C)} ⇔ ⇔ {\displaystyle \Leftrightarrow } ( A ∧ ∧ B ) {\displaystyle (A\land B)} ∧ ∧ {\displaystyle \land } ( A ∧ ∧ C ) {\displaystyle (A\land C)} ∧ ∧ {\displaystyle \land } ⇔ ⇔ {\displaystyle \Leftrightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } ∧ ∧ {\displaystyle \land } idempotency : yes A {\displaystyle ~A~} ∧ ∧ {\displaystyle ~\land ~} A {\displaystyle ~A~} ⇔ ⇔ {\displaystyle \Leftrightarrow } A {\displaystyle A~} ∧ ∧ {\displaystyle ~\land ~} ⇔ ⇔ {\displaystyle \Leftrightarrow } monotonicity : yes A → → B {\displaystyle A\rightarrow B} ⇒ ⇒ {\displaystyle \Rightarrow } ( A ∧ ∧ C ) {\displaystyle (A\land C)} → → {\displaystyle \rightarrow } ( B ∧ ∧ C ) {\displaystyle (B\land C)} ⇒ ⇒ {\displaystyle \Rightarrow } ⇔ ⇔ {\displaystyle \Leftrightarrow } → → {\displaystyle \rightarrow } truth-preserving: yes When all inputs are true, the output is true.

A ∧ ∧ B {\displaystyle A\land B} ⇒ ⇒ {\displaystyle \Rightarrow } A ∧ ∧ B {\displaystyle A\land B} ⇒ ⇒ {\displaystyle \Rightarrow } (to be tested) falsehood-preserving: yes When all inputs are false, the output is false.

A ∧ ∧ B {\displaystyle A\land B} ⇒ ⇒ {\displaystyle \Rightarrow } A ∨ ∨ B {\displaystyle A\lor B} ⇒ ⇒ {\displaystyle \Rightarrow } (to be tested) Walsh spectrum : (1,-1,-1,1) Non linearity : 1 (the function is bent ) If using binary values for true (1) and false (0), then logical conjunction works exactly like normal arithmetic multiplication .

Applications in computer engineering [ edit ] AND logic gate In high-level computer programming and digital electronics , logical conjunction is commonly represented by an infix operator, usually as a keyword such as " AND ", an algebraic multiplication, or the ampersand symbol & (sometimes doubled as in && ). Many languages also provide short-circuit control structures corresponding to logical conjunction.

Logical conjunction is often used for bitwise operations, where 0 corresponds to false and 1 to true: 0 AND 0 = 0 , 0 AND 1 = 0 , 1 AND 0 = 0 , 1 AND 1 = 1 .

The operation can also be applied to two binary words viewed as bitstrings of equal length, by taking the bitwise AND of each pair of bits at corresponding positions. For example: 11000110 AND 10100011 = 10000010 .

This can be used to select part of a bitstring using a bit mask .  For example, 1001 1 101 AND 0000 1 000 = 0000 1 000 extracts the fourth bit of an 8-bit bitstring.

In computer networking , bit masks are used to derive the network address of a subnet within an existing network from a given IP address , by ANDing the IP address and the subnet mask .

Logical conjunction " AND " is also used in SQL operations to form database queries.

The Curry–Howard correspondence relates logical conjunction to product types .

Set-theoretic correspondence [ edit ] The membership of an element of an intersection set in set theory is defined in terms of a logical conjunction: x ∈ ∈ A ∩ ∩ B {\displaystyle x\in A\cap B} if and only if ( x ∈ ∈ A ) ∧ ∧ ( x ∈ ∈ B ) {\displaystyle (x\in A)\wedge (x\in B)} . Through this correspondence, set-theoretic intersection shares several properties with logical conjunction, such as associativity , commutativity and idempotence .

Natural language [ edit ] As with other notions formalized in mathematical logic, the logical conjunction and is related to, but not the same as, the grammatical conjunction and in natural languages.

English "and" has properties not captured by logical conjunction.  For example, "and" sometimes implies order having the sense of "then". For example, "They got married and had a child" in common discourse means that the marriage came before the child.

The word "and" can also imply a partition of a thing into parts, as "The American flag is red, white, and blue."  Here, it is not meant that the flag is at once red, white, and blue, but rather that each color is a part of the flag.

See also [ edit ] And-inverter graph AND gate Bitwise AND Boolean algebra Boolean conjunctive query Boolean domain Boolean function Boolean-valued function Conjunction/disjunction duality Conjunction elimination Conjunction (grammar) De Morgan's laws First-order logic Fréchet inequalities Homogeneity (linguistics) List of Boolean algebra topics Logical disjunction Logical graph Negation Operation Peano–Russell notation Propositional calculus References [ edit ] ^ a b c d "2.2: Conjunctions and Disjunctions" .

Mathematics LibreTexts . 2019-08-13 . Retrieved 2020-09-02 .

^ a b c "Conjunction, Negation, and Disjunction" .

philosophy.lander.edu . Retrieved 2020-09-02 .

^ Beall, Jeffrey C. (2010).

Logic: the basics (1. publ ed.). London: Routledge. p. 17.

ISBN 978-0-203-85155-5 .

^ Józef Maria Bocheński (1959), A Précis of Mathematical Logic , translated by Otto Bird from the French and German editions, Dordrecht, South Holland:  D. Reidel, passim.

^ Weisstein, Eric W.

"Conjunction" .

MathWorld--A Wolfram Web Resource . Retrieved 24 September 2024 .

^ Smith, Peter.

"Types of proof system" (PDF) . p. 4.

^ Howson, Colin (1997).

Logic with trees: an introduction to symbolic logic . London; New York: Routledge. p. 38.

ISBN 978-0-415-13342-5 .

External links [ edit ] Wikimedia Commons has media related to Logical conjunction .

"Conjunction" , Encyclopedia of Mathematics , EMS Press , 2001 [1994] Wolfram MathWorld: Conjunction "Property and truth table of AND propositions" . Archived from the original on May 6, 2017.

v t e Common logical connectives Tautology / True ⊤ ⊤ {\displaystyle \top } Alternative denial ( NAND gate ) ∧ ∧ ¯ ¯ {\displaystyle {\overline {\wedge }}} Converse implication ⇐ ⇐ {\displaystyle \Leftarrow } Implication ( IMPLY gate ) ⇒ ⇒ {\displaystyle \Rightarrow } Disjunction ( OR gate ) ∨ ∨ {\displaystyle \lor } Negation ( NOT gate ) ¬ ¬ {\displaystyle \neg } Exclusive or ( XOR gate ) ⊕ ⊕ {\displaystyle \oplus } Biconditional ( XNOR gate ) ⊙ ⊙ {\displaystyle \odot } Statement ( Digital buffer ) Joint denial ( NOR gate ) ∨ ∨ ¯ ¯ {\displaystyle {\overline {\vee }}} Nonimplication ( NIMPLY gate ) ⇏ ⇏ {\displaystyle \nRightarrow } Converse nonimplication ⇍ ⇍ {\displaystyle \nLeftarrow } Conjunction ( AND gate ) ∧ ∧ {\displaystyle \land } Contradiction / False ⊥ ⊥ {\displaystyle \bot } Philosophy portal v t e Common logical symbols ∧ or & and ∨ or ¬ or ~ not → implies ⊃ implies , superset ↔ or ≡ iff | nand ∀ universal quantification ∃ existential quantification ⊤ true , tautology ⊥ false , contradiction ⊢ entails, proves ⊨ entails, therefore ∴ therefore ∵ because Philosophy portal Mathematics portal v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal Authority control databases : National Germany NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐282tl
Cached time: 20250817214139
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.706 seconds
Real time usage: 1.163 seconds
Preprocessor visited node count: 4125/1000000
Revision size: 18708/2097152 bytes
Post‐expand include size: 160453/2097152 bytes
Template argument size: 3492/2097152 bytes
Highest expansion depth: 24/100
Expensive parser function count: 8/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 87669/5000000 bytes
Lua time usage: 0.299/10.000 seconds
Lua memory usage: 8459748/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  543.808      1 -total
 17.93%   97.523      1 Template:Reflist
 14.46%   78.638      5 Template:Cite_web
 13.96%   75.889      1 Template:Short_description
 11.08%   60.243      1 Template:Infobox_logical_connective
 10.71%   58.227      1 Template:Infobox
 10.63%   57.806      5 Template:Navbox
 10.02%   54.467      2 Template:Unichar
  9.21%   50.086      1 Template:Logical_connectives_sidebar
  9.16%   49.811      2 Template:Unichar/main Saved in parser cache with key enwiki:pcache:18152:|#|:idhash:canonical and timestamp 20250817214139 and revision id 1277025477. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Logical_conjunction&oldid=1277025477 " Categories : Logical connectives Semantics Hidden categories: Articles with short description Short description matches Wikidata Commons category link from Wikidata Pages that use a deprecated format of the math tags This page was last edited on 22 February 2025, at 05:16 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Logical conjunction 49 languages Add topic

