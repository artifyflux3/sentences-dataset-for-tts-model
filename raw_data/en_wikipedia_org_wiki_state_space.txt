Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Definition 2 Properties Toggle Properties subsection 2.1 Size 2.1.1 Finite 2.1.2 Infinite 3 Exploration Toggle Exploration subsection 3.1 Search states 3.2 Methods 4 See also 5 References Toggle the table of contents State space (computer science) 12 languages العربية Català Čeština Deutsch فارسی Français Bahasa Indonesia Italiano Українська Tiếng Việt 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from State space ) Set of all possible values of a system "State space" redirects here. For other uses, see State space (disambiguation) .

This article includes a list of general references , but it lacks sufficient corresponding inline citations .

Please help to improve this article by introducing more precise citations.

( February 2012 ) ( Learn how and when to remove this message ) Vacuum World, a shortest path problem with a finite state space In computer science , a state space is a discrete space representing the set of all possible configurations of a system.

[ 1 ] It is a useful abstraction for reasoning about the behavior of a given system and is widely used in the fields of artificial intelligence and game theory .

For instance, the toy problem Vacuum World has a discrete finite state space in which there are a limited set of configurations that the vacuum and dirt can be in. A "counter" system, where states are the natural numbers starting at 1 and are incremented over time [ 2 ] has an infinite discrete state space. The angular position of an undamped pendulum [ 3 ] is a continuous (and therefore infinite) state space.

Definition [ edit ] State spaces are useful in computer science as a simple model of machines. Formally, a state space can be defined as a tuple [ N , A , S , G ] where: N is a set of states A is a set of arcs connecting the states S is a nonempty subset of N that contains start states G is a nonempty subset of N that contains the goal states.

Properties [ edit ] a b c d e f g h 8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1 a b c d e f g h A valid state in the state space of the eight queens puzzle A state space has some common properties: complexity, where branching factor is important structure of the space, see also graph theory : directionality of arcs tree rooted graph For example, the Vacuum World has a branching factor of 4, as the vacuum cleaner can end up in 1 of 4 adjacent squares after moving (assuming it cannot stay in the same square nor move diagonally). The arcs of Vacuum World are bidirectional, since any square can be reached from any adjacent square, and the state space is not a tree since it is possible to enter a loop by moving between any 4 adjacent squares.

State spaces can be either infinite or finite, and discrete or continuous.

Size [ edit ] The size of the state space for a given system is the number of possible configurations of the space.

[ 3 ] Finite [ edit ] If the size of the state space is finite, calculating the size of the state space is a combinatorial problem.

[ 4 ] For example, in the eight queens puzzle , the state space can be calculated by counting all possible ways to place 8 pieces on an 8x8 chessboard. This is the same as choosing 8 positions without replacement from a set of 64, or ( 64 8 ) = 4 , 426 , 165 , 368 {\displaystyle {\binom {64}{8}}=4,426,165,368} This is significantly greater than the number of legal configurations of the queens, 92. In many games the effective state space is small compared to all reachable/legal states. This property is also observed in chess , where the effective state space is the set of positions that can be reached by game-legal moves.  This is far smaller than the set of positions that can be achieved by placing combinations of the available chess pieces directly on the board.

Infinite [ edit ] All continuous state spaces can be described by a corresponding continuous function and are therefore infinite.

[ 3 ] Discrete state spaces can also have ( countably ) infinite size, such as the state space of the time-dependent "counter" system, [ 2 ] similar to the system in queueing theory defining the number of customers in a line, which would have state space {0, 1, 2, 3, ...}.

Exploration [ edit ] Main article: State space search Exploring a state space is the process of enumerating possible states in search of a goal state. The state space of Pacman , for example, contains a goal state whenever all food pellets have been eaten, and is explored by moving Pacman around the board.

[ 5 ] Search states [ edit ] A search state is a compressed representation of a world state in a state space, and is used for exploration. Search states are used because a state space often encodes more information than is necessary to explore the space. Compressing each world state to only information needed for exploration improves efficiency by reducing the number of states in the search.

[ 5 ] For example, a state in the Pacman space includes information about the direction Pacman is facing (up, down, left, or right). Since it does not cost anything to change directions in Pacman, search states for Pacman would not include this information and reduce the size of the search space by a factor of 4, one for each direction Pacman could be facing.

Methods [ edit ] Standard search algorithms are effective in exploring discrete state spaces. The following algorithms exhibit both completeness and optimality in searching a state space: [ 5 ] [ 6 ] Breadth-first search A* search Uniform cost search These methods do not extend naturally to exploring continuous state spaces. Exploring a continuous state space in search of a given goal state is equivalent to optimizing an arbitrary continuous function which is not always possible; see mathematical optimization .

See also [ edit ] Computer programming portal Phase space for information about phase state (like continuous state space) in physics and mathematics.

Probability space for information about state space in probability.

Game complexity theory, which relies on the state space of game outcomes Cognitive Model#Dynamical systems for information about state space with a dynamical systems model of cognition.

State space planning State (computer science) Artificial intelligence Dynamical systems Glossary of artificial intelligence Machine learning Mathematical optimization Multi-agent system Game theory Combinatorics References [ edit ] ^ Nykamp, Duane.

"State space definition" .

Math Insights . Retrieved 17 November 2019 .

^ a b Papernick, Norman.

"Infinite States and Infinite State Transitions" . Carnegie Mellon University . Retrieved 12 November 2019 .

^ a b c Nykamp, Duane.

"The idea of a dynamical system" .

Math Insights . Retrieved 12 November 2019 .

^ Zhang, Weixong (1999).

State-space search: algorithms, complexity, extensions, and applications . Springer.

ISBN 978-0-387-98832-0 .

^ a b c Abbeel, Pieter.

"Lecture 2: Uninformed Search" .

UC Berkeley CS188 Intro to AI . Retrieved 30 October 2019 .

^ Abbeel, Pieter.

"Lecture 3: Informed Search" .

UC Berkeley CS188 Intro to AI . Retrieved 12 November 2019 .

NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐bmnfr
Cached time: 20250812033302
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.263 seconds
Real time usage: 0.374 seconds
Preprocessor visited node count: 986/1000000
Revision size: 8030/2097152 bytes
Post‐expand include size: 23592/2097152 bytes
Template argument size: 1010/2097152 bytes
Highest expansion depth: 13/100
Expensive parser function count: 6/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 26985/5000000 bytes
Lua time usage: 0.155/10.000 seconds
Lua memory usage: 5328134/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  295.226      1 -total
 40.09%  118.361      1 Template:Reflist
 32.14%   94.900      5 Template:Cite_web
 20.81%   61.432      1 Template:Short_description
 15.92%   46.996      1 Template:More_footnotes
 13.81%   40.785      1 Template:Ambox
 12.18%   35.968      2 Template:Pagetype
  6.67%   19.692      1 Template:Redirect
  5.40%   15.956      5 Template:Main_other
  4.97%   14.684      1 Template:Portal Saved in parser cache with key enwiki:pcache:546101:|#|:idhash:canonical and timestamp 20250812033302 and revision id 1280840973. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=State_space_(computer_science)&oldid=1280840973 " Categories : Models of computation Dynamical systems Reconfiguration Hidden categories: Articles with short description Short description is different from Wikidata Articles lacking in-text citations from February 2012 All articles lacking in-text citations This page was last edited on 16 March 2025, at 19:28 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents State space (computer science) 12 languages Add topic

