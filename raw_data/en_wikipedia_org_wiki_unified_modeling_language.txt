Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Use Toggle Use subsection 1.1 Elements 1.2 Sharing 1.3 Cardinality notation 1.4 Artifacts 1.5 Metamodeling 2 Diagrams Toggle Diagrams subsection 2.1 Structure diagrams 2.2 Behavior diagrams 2.3 Interaction diagrams 2.4 Examples 3 Adoption 4 History Toggle History subsection 4.1 Origin 4.2 UML 1.x 4.3 UML 2 5 See also 6 References 7 Further reading 8 External links Toggle the table of contents Unified Modeling Language 55 languages Afrikaans العربية Azərbaycanca Български Bosanski Català Čeština ChiTumbuka Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego 한국어 हिन्दी Bahasa Indonesia Interlingua Íslenska Italiano עברית Lietuvių Magyar Македонски മലയാളം Bahasa Melayu Монгол Nederlands 日本語 Norsk bokmål Polski Português Qaraqalpaqsha Română Русский Shqip Simple English Slovenčina Slovenščina Српски / srpski Suomi Svenska தமிழ் తెలుగు ไทย Türkçe Українська Tiếng Việt Yorùbá 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikiversity Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Software design modeling notation "UML" redirects here. For other uses, see UML (disambiguation) .

UML Family Modeling language Website www .uml .org The Unified Modeling Language ( UML ) is a general-purpose, object-oriented, visual modeling language that provides a way to visualize the architecture and design of a system; like a blueprint .

[ 1 ] [ 2 ] UML defines notation for many types of diagrams which focus on aspects such as behavior, interaction, and structure.

UML is both a formal metamodel and a collection of graphical templates. The metamodel defines the elements in an object-oriented model such as classes and properties. It is essentially the same thing as the metamodel in object-oriented programming (OOP), however for OOP, the metamodel is primarily used at run time to dynamically inspect and modify an application object model. The UML metamodel provides a mathematical, formal foundation for the graphic views used in the modeling language to describe an emerging system.

UML was created in an attempt by some of the major thought leaders in the object-oriented community to define a standard language at the OOPSLA '95 Conference. Originally, Grady Booch and James Rumbaugh merged their models into a unified model. This was followed by Booch's company Rational Software purchasing Ivar Jacobson's Objectory company and merging their model into the UML. At the time Rational and Objectory were two of the dominant players in the small world of independent vendors of object-oriented tools and methods.

[ 3 ] The Object Management Group (OMG) then took ownership of UML.

The creation of UML was motivated by the desire to standardize the disparate nature of notational systems and approaches to software design at the time.

[ 4 ] In 1997, UML was adopted as a standard by the Object Management Group (OMG) and has been managed by this organization ever since. In 2005, UML was also published by the International Organization for Standardization (ISO) and the International Electrotechnical Commission (IEC) as the ISO/IEC 19501 standard.

[ 5 ] Since then the standard has been periodically revised to cover the latest revision of UML.

[ 6 ] Most developers do not use UML per se, but instead produce more informal diagrams, often hand-drawn. These diagrams, however, often include elements from UML.

[ 7 ] : 536 Use [ edit ] UML is primarily used for software development (in any industry or domain) [ 8 ] but also used outside elsewhere including business processes , system functions , database schemas , workflow in the legal systems, medical electronics , Health care systems , and hardware design .

[ 9 ] UML is designed for use with many object-oriented software development methods; both today and for the methods when it was first developed including OMT , Booch method , Objectory , and especially for RUP which it was originally intended to be used with when work began at Rational Software.

[ 10 ] Although originally intended for object-oriented design documentation, UML has been used effectively in other contexts such as modeling business process.

[ 11 ] [ 12 ] As UML is not inherently linked to a particular programming language , it can be used for modeling a system independent of language. Some UML tools generate source code from a UML model.

[ 13 ] Elements [ edit ] Components in a travel reservation system UML diagrams support visualizing system aspects like: [ 14 ] Activities (jobs) Components and how they can interact User interface How the system runs In addition to notational elements with well-defined meanings, UML diagrams also allow for free-form comments (notes) that explain aspects such as use, constraint, and intent.

Sharing [ edit ] UML models can be exchanged among UML tools via the XML Metadata Interchange (XMI) format.

Cardinality notation [ edit ] As with database Chen, Bachman, and ISO ER diagrams , class models are specified to use "look-across" cardinalities , even though several authors ( Merise , [ 15 ] Elmasri & Navathe, [ 16 ] amongst others [ 17 ] )
prefer same-side or "look-here" for roles and both minimum and maximum cardinalities. Recent researchers (Feinerer [ 18 ] and Dullea et al.

[ 19 ] )
have shown that the "look-across" technique used by UML and ER diagrams is less effective and less coherent when applied to n -ary relationships of order strictly greater than 2.

Feinerer says: "Problems arise if we operate under the look-across semantics as used for UML associations. Hartmann [ 20 ] investigates this situation and shows how and why different transformations fail.", and: "As we will see on the next few pages, the look-across interpretation introduces several difficulties which prevent the extension of simple mechanisms from binary to n -ary associations." Artifacts [ edit ] Artifact manifesting components An artifact
is the "specification of a physical piece of information that is used or produced by a software development process , or by deployment and operation of a system" [ 21 ] including models, source code , scripts, executables , tables in database systems , development deliverables, a design documents , and email messages.

[ 21 ] An artifact is the physical entity that is deployed to a node [ 21 ] . Other UML elements such as classes and components are first manifest into artifacts and instances of these artifacts are then deployed. Artifacts can be composed of other artifacts.

Metamodeling [ edit ] Illustration of the Meta-Object Facility The OMG developed a metamodeling architecture to define UML, called the Meta-Object Facility (MOF).

[ 22 ] MOF is designed as a four-layered architecture, as shown in the image at right. It provides a meta-meta model at the top, called the M3 layer. This M3-model is the language used by Meta-Object Facility to build metamodels, called M2-models.

The most prominent example of a Layer 2 Meta-Object Facility model is the UML metamodel, which describes UML itself. These M2-models describe elements of the M1-layer, and thus M1-models. These would be, for example, models written in UML. The last layer is the M0-layer or data layer. It is used to describe runtime instances of the system.

[ 23 ] The metamodel can be extended using a mechanism called stereotyping . This has been criticized as being insufficient/untenable by Brian Henderson-Sellers and Cesar Gonzalez-Perez in "Uses and Abuses of the Stereotype Mechanism in UML 1.x and 2.0".

[ 24 ] Diagrams [ edit ] UML diagram types Structural UML diagrams Class diagram Component diagram Composite structure diagram Deployment diagram Object diagram Package diagram Profile diagram Behavioral UML diagrams Activity diagram Communication diagram Interaction overview diagram Sequence diagram State diagram Timing diagram Use case diagram v t e UML 2 defines many types of diagrams – shown as a taxonomy in the image.

[ 14 ] [ 25 ] Hierarchy of UML 2.2 Diagrams, shown as a class diagram Structure diagrams [ edit ] Structure diagrams emphasize the structure of the system – using objects, classifiers, relationships, attributes and operations. They are used to document software architecture .

Class diagram – Describes the structure of a class Component diagram – Describes how a software system is split into components and dependencies between the components Composite structure diagram Deployment diagram Object diagram Package diagram Profile diagram Behavior diagrams [ edit ] Behavior diagrams emphasize the behavior of a system by showing collaborations among objects and changes to the internal states of objects. They are used to describe the functionality of a system.

Activity diagram – Describes the business and operational activities of components State machine diagram Use case diagram – Depicts of a user's interaction with a system [ 26 ] Interaction diagrams [ edit ] Interaction diagrams, a subset of behavior diagrams, emphasize the flow of control and data between components of a system.

Communication diagram – shows communication between components Interaction overview diagram Sequence diagram – shows interactions arranged in time sequence; can be drawn via tools such as Lucidchart and Draw.io Timing diagram – focuses on timing constraints Examples [ edit ] Component diagram Class diagram Activity diagram Use case diagram Use case diagram Deployment diagram Adoption [ edit ] In 2013, UML had been marketed by OMG for many contexts, but aimed primarily at software development with limited success.

[ 12 ] [ 27 ] It has been treated, at times, as a design silver bullet , which leads to problems. UML misuse includes overuse (designing every part of the system with it, which is unnecessary) and assuming that novices can design with it.

[ 28 ] It is considered a large language, with many constructs . Some people (including Jacobson ) feel that UML's size hinders learning and therefore uptake.

[ 29 ] Visual Studio dropped support for UML in 2016 due to lack of use.

[ 30 ] According to Google Trends , use of the term UML has declined since 2004 although leveled off in the last 5 years.

[ 31 ] History [ edit ] Timeline and relationships of object-oriented methods and notation UML has evolved since the second half of the 1990s and has its roots in the object-oriented programming methods developed in the late 1980s and early 1990s. The image shows a timeline of the history of UML and other object-oriented modeling methods and notation.

Origin [ edit ] Rational Software hired James Rumbaugh from General Electric in 1994 and after that, the company became the source for two of the most popular object-oriented modeling approaches of the day: [ 32 ] Rumbaugh's object-modeling technique (OMT) and Grady Booch's method. They were soon assisted in their efforts by Ivar Jacobson , the creator of the object-oriented software engineering (OOSE) method, who joined them at Rational in 1995.

[ 4 ] UML 1.x [ edit ] UML is originally based on the notations of the Booch method , the object-modeling technique (OMT), and object-oriented software engineering (OOSE), which were integrated into a single language.

[ 14 ] UML was developed at Rational Software in 1994–1995, with further development led by them through 1996.

[ 4 ] Under the technical leadership of Rumbaugh, Jacobson, and Booch, a consortium called the UML Partners was organized in 1996 to complete the Unified Modeling Language (UML) specification and propose it to the Object Management Group (OMG) for standardization. The partnership also contained additional interested parties (for example HP , DEC , IBM , and Microsoft ). The UML Partners' UML 1.0 draft was proposed to the OMG in January 1997 by the consortium. During the same month, the UML Partners formed a group, designed to define the exact meaning of language constructs, chaired by Cris Kobryn and administered by Ed Eykholt, to finalize the specification and integrate it with other standardization efforts. The result of this work, UML 1.1, was submitted to the OMG in August 1997 and adopted by the OMG in November 1997.

[ 4 ] [ 33 ] After the first release, a task force was formed [ 4 ] to improve the language, which released several minor revisions, 1.3, 1.4, and 1.5.

[ 34 ] The standards it produced (as well as the original standard) have been noted as being ambiguous and inconsistent.

[ 35 ] UML 2 [ edit ] UML 2.0 major revision replaced version 1.5 in 2005, which was developed with an enlarged consortium to improve the language further to reflect new experiences on the usage of its features.

[ 36 ] Although UML 2.1 was never released as a formal specification, versions 2.1.1 and 2.1.2 appeared in 2007, followed by UML 2.2 in February 2009. UML 2.3 was formally released in May 2010.

[ 37 ] UML 2.4.1 was formally released in August 2011.

[ 37 ] UML 2.5 was released in October 2012 as an "In progress" version and was officially released in June 2015.

[ 37 ] The formal version 2.5.1 was adopted in December 2017.

[ 1 ] There are four parts to the UML 2.x specification: The Superstructure that defines the notation and semantics for diagrams and their model elements The Infrastructure that defines the core metamodel on which the Superstructure is based The Object Constraint Language (OCL) for defining rules for model elements The UML Diagram Interchange that defines how UML 2 diagram layouts are exchanged Until UML 2.4.1, the latest versions of these standards were: [ 38 ] UML Superstructure version 2.4.1 UML Infrastructure version 2.4.1 OCL version 2.3.1 UML Diagram Interchange version 1.0.

Since version 2.5, the UML Specification has been simplified (without Superstructure and Infrastructure), and the latest versions of these standards are now: [ 39 ] UML Specification 2.5.1 OCL version 2.4 It continues to be updated and improved by the revision task force, who resolve any issues with the language.

[ 40 ] See also [ edit ] Business Process Model and Notation – Graphical representation for specifying business processes C4 model – Technique for modelling software architecture Department of Defense Architecture Framework – Enterprise architecture framework DOT (graph description language) – File format List of Unified Modeling Language tools MODAF – Enterprise architecture framework Model-based testing Model-driven engineering – Software development methodology Modeling and Analysis of Real Time and Embedded systems Object-oriented role analysis and modeling Process Specification Language – Set of logic terms used to describe processes Systems Modeling Language – General-purpose modeling language Pages displaying short descriptions of redirect targets References [ edit ] ^ a b Unified Modeling Language 2.5.1 . Object Management Group Document Number formal/2017-12-05. Object Management Group Standards Development Organization. December 2017.

^ [1412.2458] Systems, Views and Models of UML. By Ruth Breu Radu Grosu Franz Huber Bernhard Rumpe Wolfgang Schwerin. arXiv arxiv.org ^ "From Unified Method to Unified Language" .

modelseverywhere.wordpress.com . 13 November 2010 . Retrieved 19 December 2013 .

^ a b c d e Unified Modeling Language User Guide, The (2 ed.). Addison-Wesley. 2005. p. 496.

ISBN 0321267974 .

See the sample content: look for history ^ "ISO/IEC 19501:2005 - Information technology - Open Distributed Processing - Unified Modeling Language (UML) Version 1.4.3" . Iso.org. 1 April 2005 . Retrieved 7 May 2015 .

^ "ISO/IEC 19505-1:2012 - Information technology - Object Management Group Unified Modeling Language (OMG UML) - Part 1: Infrastructure" . Iso.org. 20 April 2012 . Retrieved 10 April 2014 .

^ Sebastian Baltes; Stephan Diehl (11 November 2014).

"Sketches and diagrams in practice" .

Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering . FSE 2014.

Association for Computing Machinery . pp.

530– 541.

arXiv : 1706.09172 .

doi : 10.1145/2635868.2635891 .

ISBN 978-1-4503-3056-5 .

S2CID 2436333 .

^ Conallen, Jim (1999).

"Modeling Web Application Architectures with UML" (PDF) .

Communications of the ACM .

42 (10): 63– 70.

doi : 10.1145/317665.317677 .

^ "Grady Booch, Jacobson and Rumbaugh book".

{{ cite web }} : Missing or empty |url= ( help ) ^ John Hunt (2000).

The Unified Process for Practitioners: Object-oriented Design, UML and Java . Springer, 2000.

ISBN 1-85233-275-1 . p. 5.door ^ Satish Mishra (1997).

"Visual Modeling & Unified Modeling Language (UML): Introduction to UML" Archived 20 July 2011 at the Wayback Machine . Rational Software Corporation. Accessed 9 November 2008.

^ a b "UML, Success Stories" . Retrieved 9 April 2014 .

^ "Importance of UML" .

^ a b c "OMG Unified Modeling Language (OMG UML), Superstructure. Version 2.4.1" . Object Management Group . Retrieved 9 April 2014 .

^ Hubert Tardieu, Arnold Rochfeld and René Colletti La methode MERISE: Principes et outils (Paperback - 1983) ^ Elmasri, Ramez, B. Shamkant, Navathe, Fundamentals of Database Systems, third ed., Addison-Wesley, Menlo Park, CA, USA, 2000.

^ Paolo Atzeni; Wesley Chu; Hongjun Lu; Shuigeng Zhou; Tok Wang Ling, eds. (27 October 2004).

Conceptual Modeling – ER 2004: 23rd International Conference on Conceptual Modeling, Shanghai, China, November 8–12, 2004 .

Lecture Notes in Computer Science 3288 (2004 ed.).

Springer .

ISBN 3540237232 .

^ Ingo Feinerer (March 2007).

A Formal Treatment of UML Class Diagrams as an Efficient Method for Configuration Management (PDF) (Doctor of Technical Sciences thesis). Vienna: Technical University of Vienna. Archived from the original (PDF) on 29 June 2024 . Retrieved 25 May 2024 .

^ James Dullea; Il-Yeol Song; Ioanna Lamprou (1 November 2003). "An analysis of structural validity in entity-relationship modeling".

Data & Knowledge Engineering .

47 (2): 167– 205.

doi : 10.1016/S0169-023X(03)00049-1 .

^ Sven Hartmann (17 January 2003).

Reasoning about participation constraints and Chen's constraints . ADC '03: Proceedings of the 14th Australasian database conference.

Australian Computer Society . pp.

105– 113.

^ a b c "Artifacts".

Unified Modeling Language 2.5.1 .

OMG Document Number formal/2017-12-05.

Object Management Group Standards Development Organization (OMG SDO). December 2017. p. 656.

^ Iman Poernomo (2006) " The Meta-Object Facility Typed Archived 30 June 2016 at the Wayback Machine " in: Proceeding SAC '06 Proceedings of the 2006 ACM symposium on Applied computing . pp. 1845–1849 ^ "UML 2.4.1 Infrastructure" . Omg.org. 5 August 2011 . Retrieved 10 April 2014 .

^ Brian Henderson-Sellers ; Cesar Gonzalez-Perez (1 October 2006). "Uses and abuses of the stereotype mechanism in UML 1.x and 2.0".

MoDELS '06: Proceedings of the 9th International Conference on Model Driven Engineering Languages and Systems .

Lecture Notes in Computer Science 4199.

4199 .

Berlin , Germany: Springer-Verlag : 16– 26.

doi : 10.1007/11880240_2 .

ISBN 978-3-540-45772-5 .

^ Jon Holt Institution of Electrical Engineers (2004).

UML for Systems Engineering: Watching the Wheels IET, 2004, ISBN 0-86341-354-4 . p. 58 ^ Manuel Almendros-Jiménez, Jesús & Iribarne, Luis. (2007). Describing Use-Case Relationships with Sequence Diagrams. Comput. J.. 50. 116-128. 10.1093/comjnl/bxl053.

^ "UML 2.5: Do you even care?" .

Dr. Dobb's .

"UML truly is ubiquitous" ^ "Death by UML Fever" .

^ "Ivar Jacobson on UML, MDA, and the future of methodologies" .

^ Krill, Paul (18 October 2016).

"UML to be ejected from Microsoft Visual Studio" .

InfoWorld . Retrieved 23 July 2023 .

^ "Google Trends" .

Google Trends . Archived from the original on 23 July 2023 . Retrieved 23 July 2023 .

^ Andreas Zendler (1997) Advanced Concepts, Life Cycle Models and Tools for Objeckt-Oriented Software Development . p. 122 ^ "UML Specification version 1.1 (OMG document ad/97-08-11)" . Omg.org . Retrieved 22 September 2011 .

^ "UML" . Omg.org . Retrieved 10 April 2014 .

^ Génova et alia 2004 "Open Issues in Industrial Use Case Modeling" ^ "UML 2.0" . Omg.org . Retrieved 22 September 2011 .

^ a b c "UML" . Omg.org . Retrieved 22 September 2011 .

^ OMG.

"OMG Formal Specifications (Modeling and Metadata paragraph)" . Retrieved 12 February 2016 .

^ OMG.

"about the unified modeling language specification" . Retrieved 22 February 2020 .

^ "Issues for UML 2.6 Revision task Force mailing list" . Omg.org . Retrieved 10 April 2014 .

Further reading [ edit ] Ambler, Scott William (2004).

The Object Primer: Agile Model Driven Development with UML 2 . Cambridge University Press.

ISBN 0-521-54018-6 . Archived from the original on 31 January 2010 . Retrieved 29 April 2006 .

Chonoles, Michael Jesse; James A. Schardt (2003).

UML 2 for Dummies . Wiley Publishing.

ISBN 0-7645-2614-6 .

Fowler, Martin (2004).

UML Distilled: A Brief Guide to the Standard Object Modeling Language (3rd ed.). Addison-Wesley.

ISBN 0-321-19368-7 .

Jacobson, Ivar ; Grady Booch; James Rumbaugh (1998).

The Unified Software Development Process . Addison Wesley Longman.

ISBN 0-201-57169-2 .

Martin, Robert Cecil (2003).

UML for Java Programmers . Prentice Hall.

ISBN 0-13-142848-9 .

Noran, Ovidiu S.

"Business Modelling: UML vs. IDEF" (PDF) . Archived from the original (PDF) on 18 July 2024 . Retrieved 14 November 2022 .

Horst Kargl.

"Interactive UML Metamodel with additional Examples" .

Penker, Magnus; Hans-Erik Eriksson (2000).

Business Modeling with UML . John Wiley & Sons.

ISBN 0-471-29551-5 .

Douglass, Bruce Powel.

"Bruce Douglass: Real-Time Agile Systems and Software Development" (web) . Retrieved 1 January 2019 .

Douglass, Bruce (2014).

Real-Time UML Workshop 2nd Edition . Newnes.

ISBN 978-0-471-29551-8 .

Douglass, Bruce (2004).

Real-Time UML 3rd Edition . Newnes.

ISBN 978-0321160768 .

Douglass, Bruce (2002).

Real-Time Design Patterns . Addison-Wesley Professional.

ISBN 978-0201699562 .

Douglass, Bruce (2009).

Real-Time Agility . Addison-Wesley Professional.

ISBN 978-0321545497 .

Douglass, Bruce (2010).

Design Patterns for Embedded Systems in C . Newnes.

ISBN 978-1856177078 .

External links [ edit ] Wikimedia Commons has media related to Unified Modeling Language .

Wikiversity has learning resources about UML Official website Current UML specification: Unified Modeling Language 2.5.1 .

OMG Document Number formal/2017-12-05.

Object Management Group Standards Development Organization (OMG SDO). December 2017.

v t e Unified Modeling Language Actors Organizations Object Management Group UML Partners Persons Grady Booch Ivar Jacobson James Rumbaugh Concepts Object oriented Object-oriented programming Object-oriented analysis and design Object-oriented modeling Structure Actor Attribute Artifact Class Component Interface Object Package Profile diagram Behavior Activity Event Message Method State Use case Relationships Association Composition Dependency Generalization (or Inheritance ) Extensibility Profile Stereotype Other Multiplicity Diagrams Structure Class Component Composite structure Deployment Object Package Behaviour Activity State Machine Use case Interaction Communications Sequence Interaction overview Timing Derived languages Systems Modeling Language (SysML) UML eXchange Format (UXF) XML Metadata Interchange (XMI) Executable UML (xUML) Other topics Glossary of UML terms Rational Unified Process List of Unified Modeling Language tools Object Modeling in Color v t e Software engineering Fields Computer programming DevOps Empirical software engineering Experimental software engineering Formal methods Requirements engineering Search-based software engineering Site reliability engineering Social software engineering Software deployment Software design Software maintenance Software testing Systems analysis Concepts Abstraction CI/CD Compatibility Backward compatibility Compatibility layer Compatibility mode Forward compatibility Software incompatibility Component-based software engineering Data modeling Enterprise architecture Functional specification Modeling language Programming paradigm Software Software archaeology Software architecture Software configuration management Software development process/methodology Software quality Software quality assurance Software system Software verification and validation Structured analysis Essential analysis Orientations Agile Aspect-oriented Object orientation Ontology SDLC Service orientation Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD Scrum Spiral model UP V-model Waterfall model XP Model-driven engineering Round-trip engineering Other CMMI Data model ER model Function model Information model Metamodeling Object model SPICE Systems model View model Languages IDEF SysML UML USL Systems design Requirements Functional requirement Non-functional requirement Capacity Users Compute Memory Storage Network Web traffic Interface API SOAP REST GraphQL gRPC Webhook High-level design Client Load balancing Application server Message queue Integration Vertical Peer-to-peer API gateway pub-sub Event source ETL Batch Stream Orchestration Architectures Monolithic Microservices Event-driven Client–server Serverless Circuit breaker Rate limiting Database Relational NoSQL Graph Key–value LSM tree Time series Column oriented Principles Consistency Reliability CAP theorem Maintainability Configurability Modularity Durability Scalability Stateless Asynchronous I/O Loose coupling Availability Fault tolerance Failover Single point of failure Replication Consistent hashing Circuit breaker Latency Cache CDN Shard Database index Pre-caching Storage Object storage Block storage Observability Logging Metrics Tracing Error rate Queries per second Notification system Anomaly detection Related fields Computer engineering Computer science Information science Project management Risk management Systems engineering Commons Category v t e International Organization for Standardization (ISO) standards List of ISO standards – ISO romanizations – IEC standards 1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 ( -2 ) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18760 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21778 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40314 40500 42010 45001 50001 55000 56000 80000 Category Authority control databases International FAST National Germany United States France BnF data Czech Republic Israel Other Yale LUX Retrieved from " https://en.wikipedia.org/w/index.php?title=Unified_Modeling_Language&oldid=1304687981 " Categories : Unified Modeling Language Architecture description language Data modeling languages Data modeling diagrams Diagrams Knowledge representation ISO standards Specification languages Software modeling language Modeling languages Hidden categories: CS1 errors: requires URL Webarchive template wayback links Articles with short description Short description is different from Wikidata Use American English from March 2020 All Wikipedia articles written in American English Use dmy dates from September 2020 Pages displaying short descriptions of redirect targets via Module:Annotated link Commons link from Wikidata This page was last edited on 7 August 2025, at 15:09 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Unified Modeling Language 55 languages Add topic

