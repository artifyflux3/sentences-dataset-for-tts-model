Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History 2 Platform support Toggle Platform support subsection 2.1 DOS and Windows 3 C0 control codes 4 Fe Escape sequences 5 Control Sequence Introducer commands 6 Select Graphic Rendition parameters Toggle Select Graphic Rendition parameters subsection 6.1 Colors 6.1.1 3-bit and 4-bit 6.1.2 8-bit 6.1.3 24-bit 6.1.4 Unix environment variables relating to color support 7 Operating System Command sequences 8 Fs Escape sequences 9 Fp Escape sequences 10 nF Escape sequences 11 Examples Toggle Examples subsection 11.1 In shell scripting 11.2 In C 12 Terminal input sequences 13 See also 14 Notes 15 References 16 External links Toggle the table of contents ANSI escape code 16 languages العربية Català Čeština Deutsch Español فارسی Français 한국어 Italiano 日本語 Português Русский Suomi Українська Yorùbá 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Method used for display options on video text terminals "ANSI code" redirects here. For other uses, see ANSI (disambiguation) .

ANSI X3.64 (ISO/IEC 6429) Output of the system-monitor htop , an ncurses-application (which uses SGR and other ANSI/ISO control sequences).

Standard ECMA -48 ISO/IEC 6429 FIPS 86 ANSI X3.64 JIS X 0211 Classification ISO/IEC 2022 based control code and control sequence set Other related encoding(s) ITU T.61 ISO/IEC 8613 -6 / ITU T.416 Other control function standards: ITU T.101 JIS X 0207 ISO 6630 DIN 31626 ETS 300 706 ANSI escape sequences are a standard for in-band signaling to control cursor location, color, font styling, and other options on video text terminals and terminal emulators . Certain sequences of bytes , most starting with an ASCII escape character and a bracket character, are embedded into text.  The terminal interprets these sequences as commands, rather than text to display verbatim.

ANSI sequences were introduced in the 1970s to replace vendor-specific sequences and became widespread in the computer equipment market by the early 1980s. Although hardware text terminals have become increasingly rare in the 21st century, the relevance of the ANSI standard persists because a great majority of terminal emulators and command consoles interpret at least a portion of the ANSI standard.

History [ edit ] Almost all manufacturers of video terminals added vendor-specific escape sequences to perform operations such as placing the cursor at arbitrary positions on the screen. One example is the VT52 terminal, which allowed the cursor to be placed at an x,y location on the screen by sending the ESC character, a Y character, and then two characters representing numerical values equal to the x,y location plus 32 (thus starting at the ASCII space character and avoiding the control characters). The Hazeltine 1500 had a similar feature, invoked using ~ , DC1 and then the X and Y positions separated with a comma. While the two terminals had identical functionality in this regard, different control sequences had to be used to invoke them.

As these sequences were different for different terminals, elaborate libraries such as termcap ("terminal capabilities") and utilities such as tput had to be created so programs could use the same API to work with any terminal. In addition, many of these terminals required sending numbers (such as row and column) as the binary values of the characters; for some programming languages, and for systems that did not use ASCII internally, it was often difficult to turn a number into the correct character.

The ANSI standard attempted to address these problems by making a command set that all terminals would use and requiring all numeric information to be transmitted as ASCII numbers. The first standard in the series was ECMA-48 , adopted in 1976.

[ 1 ] It was a continuation of a series of character coding standards, the first one being ECMA-6 from 1965, a 7-bit standard from which ISO 646 originates. The name "ANSI escape sequence" dates from 1979 when ANSI adopted ANSI X3.64.  The ANSI X3L2 committee collaborated with the ECMA committee TC 1 to produce nearly identical standards. These two standards were merged into an international standard, ISO 6429.

[ 1 ] In 1994, ANSI withdrew its standard in favor of the international standard.

The DEC VT100 video display terminal.

The first popular video terminal to support these sequences was the Digital VT100 , introduced in 1978.

[ 2 ] This model was very successful in the market, which sparked a variety of VT100 clones, among the earliest and most popular of which was the much more affordable Zenith Z-19 in 1979.

[ 3 ] Others included the Qume QVT-108, Televideo TVI-970, Wyse WY-99GT as well as optional "VT100" or "VT103" or "ANSI" modes with varying degrees of compatibility on many other brands. The popularity of these gradually led to more and more software (especially bulletin board systems and other online services ) assuming the escape sequences worked, leading to almost all new terminals and emulator programs supporting them.

In 1981, ANSI X3.64 was adopted for use in the US government by FIPS publication 86.  Later, the US government stopped duplicating industry standards, so FIPS pub. 86 was withdrawn.

[ 4 ] ECMA-48 has been updated several times and is currently at its 5th edition, from 1991.

[ 5 ] It is also adopted by ISO and IEC as standard ISO/IEC 6429 .

[ 6 ] A version is adopted as a Japanese Industrial Standard , as JIS X 0211 .

Related standards include ITU T.61 , the Teletex standard, and the ISO/IEC 8613 , the Open Document Architecture standard (mainly ISO/IEC 8613-6 or ITU T.416). The two systems share many escape codes with the ANSI system, with extensions that are not necessarily meaningful to computer terminals. Both systems quickly fell into disuse, but ECMA-48 does mark the extensions used in them as reserved.

Platform support [ edit ] The Xterm terminal emulator.

In the early 1980s, large amounts of software directly used these sequences to update screen displays. This included everything on VMS (which assumed DEC terminals), most software designed to be portable on CP/M home computers, and even lots of Unix software as it was easier to use than the termcap libraries, such as the shell script examples below in this article.

Terminal emulators for communicating with remote machines almost always implement ANSI escape codes. This includes anything written to communicate with bulletin-board systems on home and personal computers. On Unix terminal emulators such as xterm also can communicate with software running on the same machine, and thus software running in X11 under a terminal emulator could assume the ability to write these sequences.

As computers got more powerful even built-in displays started supporting them, allowing software to be portable between CP/M systems. There were attempts to extend the escape sequences to support printers [ 7 ] and as an early PDF-like document storage format, the Open Document Architecture .

[ citation needed ] DOS and Windows [ edit ] The IBM PC, introduced in 1981, did not support these or any other escape sequences for updating the screen. Only a few control characters ( BEL , CR , LF , BS ) were interpreted by the underlying BIOS. Any display effects had to be done with BIOS calls, which were notoriously slow, or by directly manipulating the IBM PC hardware. This made any interesting software non-portable and led to the need to duplicate details of the display hardware in PC Clones .

DOS version 2.0 included an optional device driver named ANSI.SYS . Poor performance, and the fact that it was not installed by default, meant software rarely (if ever) took advantage of it.

The Windows Console did not support ANSI escape sequences, nor did Microsoft provide any method to enable them. Some replacements such as JP Software's TCC (formerly 4NT), Michael J. Mefford's ANSI.COM, Jason Hood's ANSICON [ 8 ] and Maximus5's ConEmu enabled ANSI escape sequences. Software such as the Python colorama package [ 9 ] or Cygwin modified text in-process as it was sent to the console, extracting the ANSI Escape sequences and emulating them with Windows calls.

In 2016, Microsoft released the Windows 10 version 1511 update which unexpectedly implemented support for ANSI escape sequences, over three decades after the debut of Windows.

[ 10 ] This was done alongside Windows Subsystem for Linux , apparently to allow Unix-like terminal-based software to use the Windows Console. Windows PowerShell 5.1 enabled this by default, and PowerShell 6 made it possible to embed the necessary ESC character into a string with `e .

[ 11 ] Windows Terminal , introduced in 2019, supports the sequences by default.

[ 12 ] Since Windows 11 22H2 and Windows Terminal 1.15, Windows Terminal replaces Windows Console as the default.

[ 13 ] [ 14 ] C0 control codes [ edit ] Almost all users assume some functions of some single-byte characters. Initially defined as part of ASCII, the default C0 control code set is now defined in ISO 6429 (ECMA-48), making it part of the same standard as the C1 set invoked by the ANSI escape sequences (although ISO 2022 allows the ISO 6429 C0 set to be used without the ISO 6429 C1 set, and vice versa , provided that 0x1B is always ESC). This is used to shorten the amount of data transmitted, or to perform some functions that are unavailable from escape sequences: Popular C0 control codes (not an exhaustive list) ^ C0 Abbr Name Effect ^G 0x07 BEL Bell Makes an audible noise.

^H 0x08 BS Backspace Moves the cursor left (but may "backwards wrap" if cursor is at start of line).

^I 0x09 HT Tab Moves the cursor right to next tab stop.

^J 0x0A LF Line Feed Moves to next line, scrolls the display up if at bottom of the screen. Usually does not move horizontally, though programs should not rely on this.

^L 0x0C FF Form Feed Move a printer to top of next page. Usually does not move horizontally, though programs should not rely on this. Effect on video terminals varies.

^M 0x0D CR Carriage Return Moves the cursor to column zero.

^[ 0x1B ESC Escape Starts all the escape sequences Escape sequences vary in length. The general format for an ANSI-compliant escape sequence is defined by ANSI X3.41 (equivalent to ECMA-35 or ISO/IEC 2022).

[ 15 ] : 13.1 The escape sequences consist only of bytes in the range 0x20—0x7F (all the non-control ASCII characters), and can be parsed without looking ahead. The behavior when a control character, a byte with the high bit set, or a byte that is not part of any valid sequence, is encountered before the end is undefined.

Fe Escape sequences [ edit ] If the ESC is followed by a byte in the range 0x40 to 0x5F, the escape sequence is of type Fe . Its interpretation is delegated to the applicable C1 control code standard.

[ 15 ] : 13.2.1 Accordingly, all escape sequences corresponding to C1 control codes from ANSI X3.64 / ECMA-48 follow this format.

[ 16 ] : 5.3.a The standard says that, in 8-bit environments, the control functions corresponding to type Fe escape sequences (those from the set of C1 control codes ) can be represented as single bytes in the 0x80–0x9F range.

[ 16 ] : 5.3.b This is possible in character encodings conforming to the provisions for an 8-bit code made in ISO 2022, such as the ISO 8859 series. However, in character encodings used on modern devices such as UTF-8 or CP-1252 , those codes are often used for other purposes, so only the 2-byte sequence is typically used. In the case of UTF-8, representing a C1 control code via the C1 Controls and Latin-1 Supplement block results in a different two-byte code (e.g.

0xC2,0x8E for U+008E ), but no space is saved this way.

Some type Fe (C1 set element) ANSI escape sequences (not an exhaustive list) Code C1 Abbr Name Effect ESC N 0x8E SS2 Single Shift Two Select a single character from one of the alternative character sets . SS2 selects the G2 character set, and SS3 selects the G3 character set.

[ 17 ] In a 7-bit environment, this is followed by one or more GL bytes (0x20–0x7F) specifying a character from that set.

[ 15 ] : 9.4 In an 8-bit environment, these may instead be GR bytes (0xA0–0xFF).

[ 15 ] : 8.4 ESC O 0x8F SS3 Single Shift Three ESC P 0x90 DCS Device Control String Terminated by ST.

[ 16 ] : 5.6 Xterm's uses of this sequence include defining User-Defined Keys, and requesting or setting Termcap/Terminfo data.

[ 17 ] ESC [ 0x9B CSI Control Sequence Introducer Starts most of the useful sequences, terminated by a byte in the range 0x40 through 0x7E.

[ 16 ] : 5.4 ESC \ 0x9C ST String Terminator Terminates strings in other controls.

[ 16 ] : 8.3.143 ESC ] 0x9D OSC Operating System Command Starts a control string for the operating system to use, terminated by ST.

[ 16 ] : 8.3.89 ESC X 0x98 SOS Start of String Takes an argument of a string of text, terminated by ST.

[ 16 ] : 5.6 The uses for these string control sequences are defined by the application [ 16 ] : 8.3.2, 8.3.128 or privacy discipline.

[ 16 ] : 8.3.94 These functions are rarely implemented and the arguments are ignored by xterm.

[ 17 ] Some Kermit clients allow the server to automatically execute Kermit commands on the client by embedding them in APC sequences; this is a potential security risk if the server is untrusted.

[ 18 ] ESC ^ 0x9E PM Privacy Message ESC _ 0x9F APC Application Program Command Control Sequence Introducer commands [ edit ] For Control Sequence Introducer, or CSI, commands, the ESC [ (written as \e[ , \x1b[ or \033[ in several programming languages) is followed by any number (including none) of "parameter bytes" in the range 0x30–0x3F (ASCII 0–9:;<=>?

), then by any number of "intermediate bytes" in the range 0x20–0x2F (ASCII space and !"#$%&'()*+,-./ ), then finally by a single "final byte" in the range 0x40–0x7E (ASCII @A–Z[\]^_`a–z{|}~ ).

[ 16 ] : 5.4 All common sequences just use the parameters as a series of semicolon-separated numbers such as 1;2;3 .

[ 16 ] : 5.4.2 Missing numbers are treated as 0 ( 1;;3 acts like the middle number is 0 , and no parameters at all in ESC[m acts like a 0 reset code). Some sequences (such as CUU) treat 0 as 1 in order to make missing parameters useful.

[ 16 ] : F.4.2 A subset of arrangements was declared "private" so that terminal manufacturers could insert their own sequences without conflicting with the standard. Sequences containing the parameter bytes <=>?

or the final bytes 0x70–0x7E ( p–z{|}~ ) are private.

The behavior of the terminal is undefined in the case where a CSI sequence contains any character outside of the range 0x20–0x7E. These illegal characters are either C0 control characters (the range 0–0x1F), DEL (0x7F), or bytes with the high bit set. Possible responses are to ignore the byte, to process it immediately, and furthermore whether to continue with the CSI sequence, to abort it immediately, or to ignore the rest of it.

[ citation needed ] Some ANSI control sequences (not an exhaustive list) Code [ a ] Abbr Name Effect CSI n A CUU Cursor Up Moves the cursor n (default 1 ) cells in the given direction. If the cursor is already at the edge of the screen, this has no effect.

CSI n B CUD Cursor Down CSI n C CUF Cursor Forward CSI n D CUB Cursor Back CSI n E CNL Cursor Next Line Moves cursor to beginning of the line n (default 1 ) lines down.  (not ANSI.SYS ) CSI n F CPL Cursor Previous Line Moves cursor to beginning of the line n (default 1 ) lines up.  (not ANSI.SYS ) CSI n G CHA Cursor Horizontal Absolute Moves the cursor to column n (default 1 ).  (not ANSI.SYS ) CSI n ; m H CUP Cursor Position Moves the cursor to row n , column m .  The values are 1-based, and default to 1 (top left corner) if omitted.  A sequence such as CSI ;5H is a synonym for CSI 1;5H as well as CSI 17;H is the same as CSI 17H and CSI 17;1H CSI n J ED Erase in Display Clears part of the screen. If n is 0 (or missing), clear from cursor to end of screen. If n is 1 , clear from cursor to beginning of the screen. If n is 2 , clear entire screen (and moves cursor to upper left on DOS ANSI.SYS ).  If n is 3 , clear entire screen and delete all lines saved in the scrollback buffer (this feature was added for xterm and is supported by other terminal applications).

CSI n K EL Erase in Line Erases part of the line. If n is 0 (or missing), clear from cursor to the end of the line. If n is 1 , clear from cursor to beginning of the line. If n is 2 , clear entire line.  Cursor position does not change.

CSI n S SU Scroll Up Scroll whole page up by n (default 1 ) lines.  New lines are added at the bottom.  (not ANSI.SYS ) CSI n T SD Scroll Down Scroll whole page down by n (default 1 ) lines.  New lines are added at the top.  (not ANSI.SYS ) CSI n ; m f HVP Horizontal Vertical Position Same as CUP, but counts as a format effector function (like CR or LF ) rather than an editor function (like CUD or CNL). This can lead to different handling in certain terminal modes.

[ 16 ] : Annex A CSI n m SGR Select Graphic Rendition Sets colors and style of the characters following this code CSI 5i AUX Port On Enable aux serial port usually for local serial printer CSI 4i AUX Port Off Disable aux serial port usually for local serial printer CSI 6n DSR Device Status Report Reports the cursor position (CPR) by transmitting ESC[n;mR , where n is the row and m is the column.

Some popular private sequences Code Abbr Name Effect CSI s SCP, SCOSC Save Current Cursor Position Saves the cursor position/state in SCO console mode.

[ 19 ] In vertical split screen mode, instead used to set (as CSI n ; n s ) or reset left and right margins.

[ 20 ] CSI u RCP, SCORC Restore Saved Cursor Position Restores the cursor position/state in SCO console mode.

[ 21 ] CSI ? 25 h DECTCEM Shows the cursor, from the VT220 .

CSI ? 25 l DECTCEM Hides the cursor.

CSI ? 1004 h Enable reporting focus. Reports whenever terminal emulator enters or exits focus as ESC [I and ESC [O , respectively.

CSI ? 1004 l Disable reporting focus.

CSI ? 1049 h Enable alternative screen buffer, from xterm CSI ? 1049 l Disable alternative screen buffer, from xterm CSI ? 2004 h Turn on bracketed paste mode.

[ 22 ] In bracketed paste mode, text pasted into the terminal will be surrounded by ESC [200~ and ESC [201~ ; programs running in the terminal should not treat characters bracketed by those sequences as commands ( Vim , for example, does not treat them as commands).

[ 23 ] From xterm [ 24 ] CSI ? 2004 l Turn off bracketed paste mode.

Select Graphic Rendition parameters [ edit ] The control sequence CSI n m , named Select Graphic Rendition (SGR), sets display attributes. Several attributes can be set in the same sequence, separated by semicolons.

[ 25 ] Each display attribute remains in effect until a following occurrence of SGR resets it.

[ 16 ] If no codes are given, CSI m is treated as CSI 0 m (reset / normal).

n Name Note 0 Reset or normal All attributes become turned off 1 Bold or increased intensity As with faint, the color change is a PC (SCO / CGA ) invention.

[ 26 ] [ better source needed ] 2 Faint, decreased intensity, or dim May be implemented as a light font weight like bold.

[ 27 ] 3 Italic Not widely supported. Sometimes treated as inverse or blink.

[ 26 ] 4 Underline Style extensions exist for Kitty, VTE, mintty, iTerm2 and Konsole.

[ 28 ] [ 29 ] [ 30 ] 5 Slow blink Sets blinking to less than 150 times per minute 6 Rapid blink MS-DOS ANSI.SYS, 150+ per minute; not widely supported 7 Reverse video or invert Swap foreground and background colors; inconsistent emulation [ 31 ] [ dubious – discuss ] 8 Conceal or hide Not widely supported.

9 Crossed-out , or strike Characters legible but marked as if for deletion. Not supported in Terminal.app.

10 Primary (default) font 11–19 Alternative font Select alternative font n − 10 20 Fraktur (Gothic) Rarely supported 21 Doubly underlined; or: not bold Double-underline per ECMA-48, [ 16 ] : 8.3.117 but instead disables bold intensity on several terminals, including in the Linux kernel 's console before version 4.17.

[ 32 ] 22 Normal intensity Neither bold nor faint; color changes where intensity is implemented as such.

23 Neither italic, nor blackletter 24 Not underlined Neither singly nor doubly underlined 25 Not blinking Turn blinking off 26 Proportional spacing ITU T.61 and T.416, not known to be used on terminals 27 Not reversed 28 Reveal Not concealed 29 Not crossed out 30–37 Set foreground color 38 Set foreground color Next arguments are 5;n or 2;r;g;b 39 Default foreground color Implementation defined (according to standard) 40–47 Set background color 48 Set background color Next arguments are 5;n or 2;r;g;b 49 Default background color Implementation defined (according to standard) 50 Disable proportional spacing T.61 and T.416 51 Framed Implemented as " emoji variation selector " in mintty.

[ 33 ] 52 Encircled 53 Overlined Not supported in Terminal.app 54 Neither framed nor encircled 55 Not overlined 58 Set underline color Not in standard; implemented in Kitty, VTE, mintty, and iTerm2.

[ 28 ] [ 29 ] Next arguments are 5;n or 2;r;g;b .

59 Default underline color Not in standard; implemented in Kitty, VTE, mintty, and iTerm2.

[ 28 ] [ 29 ] 60 Ideogram underline or right side line Rarely supported 61 Ideogram double underline, or double line on the right side 62 Ideogram overline or left side line 63 Ideogram double overline, or double line on the left side 64 Ideogram stress marking 65 No ideogram attributes Reset the effects of all of 60 – 64 73 Superscript Implemented only in mintty [ 33 ] 74 Subscript 75 Neither superscript nor subscript 90–97 Set bright foreground color Not in standard; originally implemented by aixterm [ 17 ] 100–107 Set bright background color Colors [ edit ] 3-bit and 4-bit [ edit ] The original specification only had 8 colors, and just gave them names. The SGR parameters 30–37 selected the foreground color, while 40–47 selected the background. Quite a few terminals implemented "bold" (SGR code 1) as a brighter color rather than a different font, thus providing 8 additional foreground colors. Usually you could not get these as background colors, though sometimes inverse video (SGR code 7) would allow that. Examples: to get black letters on white background use ESC[30;47m , to get red use ESC[31m , to get bright red use ESC[1;31m . To reset colors to their defaults, use ESC[39;49m (not supported on some terminals), or reset all attributes with ESC[0m . Later terminals added the ability to directly specify the "bright" colors with 90–97 and 100–107.

The chart below shows a few examples of how classical standards and modern terminal emulators translate the 4-bit color codes into 24-bit color codes.

FG BG Name CGA/EGA/VGA Windows Console [ b ] Windows PowerShell& 1.0–6.0 [ c ] Visual Studio Code [ d ] Windows 10 Console [ e ] Terminal.app PuTTY mIRC xterm Ubuntu [ f ] Eclipse Terminal 30 40 Black 0, 0, 0 12, 12, 12 0, 0, 0 1, 1, 1 0, 0, 0 31 41 Red 170, 0, 0 128, 0, 0 205, 49, 49 197, 15, 31 153, 0, 0 187, 0, 0 127, 0, 0 205, 0, 0 222, 56, 43 205, 0, 0 32 42 Green 0, 170, 0 0, 128, 0 13, 188, 121 19, 161, 14 0, 166, 0 0, 187, 0 0, 147, 0 0, 205, 0 57, 181, 74 0, 205, 0 33 43 Yellow 170, 85, 0 128, 128, 0 238, 237, 240 229, 229, 16 193, 156, 0 153, 153, 0 187, 187, 0 252, 127, 0 205, 205, 0 255, 199, 6 205, 205, 0 34 44 Blue 0, 0, 170 0, 0, 128 36, 114, 200 0, 55, 218 0, 0, 178 0, 0, 187 0, 0, 127 0, 0, 238 [ 35 ] 0, 111, 184 0, 0, 238 35 45 Magenta 170, 0, 170 128, 0, 128 1, 36, 86 188, 63, 188 136, 23, 152 178, 0, 178 187, 0, 187 156, 0, 156 205, 0, 205 118, 38, 113 205, 0, 205 36 46 Cyan 0, 170, 170 0, 128, 128 17, 168, 205 58, 150, 221 0, 166, 178 0, 187, 187 0, 147, 147 0, 205, 205 44, 181, 233 0, 205, 205 37 47 White 170, 170, 170 192, 192, 192 229, 229, 229 204, 204, 204 191, 191, 191 187, 187, 187 210, 210, 210 229, 229, 229 204, 204, 204 229, 229, 229 90 100 Bright Black (Gray) 85, 85, 85 128, 128, 128 102, 102, 102 118, 118, 118 102, 102, 102 85, 85, 85 127, 127, 127 127, 127, 127 128, 128, 128 0, 0, 0 91 101 Bright Red 255, 85, 85 255, 0, 0 241, 76, 76 231, 72, 86 230, 0, 0 255, 85, 85 255, 0, 0 92 102 Bright Green 85, 255, 85 0, 255, 0 35, 209, 139 22, 198, 12 0, 217, 0 85, 255, 85 0, 252, 0 0, 255, 0 93 103 Bright Yellow 255, 255, 85 255, 255, 0 245, 245, 67 249, 241, 165 230, 230, 0 255, 255, 85 255, 255, 0 94 104 Bright Blue 85, 85, 255 0, 0, 255 59, 142, 234 59, 120, 255 0, 0, 255 85, 85, 255 0, 0, 252 92, 92, 255 [ 36 ] 0, 0, 255 92, 92, 255 95 105 Bright Magenta 255, 85, 255 255, 0, 255 214, 112, 214 180, 0, 158 230, 0, 230 255, 85, 255 255, 0, 255 96 106 Bright Cyan 85, 255, 255 0, 255, 255 41, 184, 219 97, 214, 214 0, 230, 230 85, 255, 255 0, 255, 255 97 107 Bright White 255, 255, 255 229, 229, 229 242, 242, 242 230, 230, 230 255, 255, 255 8-bit [ edit ] See also: Web colors § Web-safe colors As 256-color lookup tables became common on graphic cards, escape sequences were added to select from a pre-defined set of 256 colors: [ 37 ] ESC[38;5; ⟨n⟩ m Select foreground color      where n is a number from the table below
ESC[48;5; ⟨n⟩ m Select background color
  0-  7:  standard colors (as in ESC [ 30–37 m)
  8- 15:  high intensity colors (as in ESC [ 90–97 m)
 16-231:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)
232-255:  grayscale from dark to light in 24 steps The colors displayed by these values vary across terminal/emulator implementations as the recognized ECMA-48 and ITU's T.416 specifications do not define a specific color palette for this lookup table. While it is common to use the above formula for the color palette, in particular the algorithm and choice of colors for the 16-231 cube values differs between implementations. The color palette and algorithm used by XTerm is specified below as a sample.

[ 16 ] [ 38 ] The ITU 's T.416 Information technology - Open Document Architecture (ODA) and interchange format: Character content architectures [ 38 ] uses ":" as separator characters instead: ESC[38:5: ⟨n⟩ m Select foreground color      where n is a number from the table below
ESC[48:5: ⟨n⟩ m Select background color 256-color mode — foreground: ESC[38;5;#m   background: ESC[48;5;#m Standard colors High-intensity colors 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 216 colorsrayscale colors 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 To calculate the RGB values of the colors in the table above, the following Python script can be used: # print a list of the 256-color red/green/blue values used by xterm.

# # reference: # https://github.com/ThomasDickey/ncurses-snapshots/blob/master/test/xterm-16color.dat # https://github.com/ThomasDickey/xterm-snapshots/blob/master/XTerm-col.ad # https://github.com/ThomasDickey/xterm-snapshots/blob/master/256colres.pl print ( "colors 0-16 correspond to the ANSI and aixterm naming" ) for code in range ( 0 , 16 ): if code > 8 : level = 255 elif code == 7 : level = 229 else : level = 205 r = 127 if code == 8 else level if ( code & 1 ) != 0 else 92 if code == 12 else 0 g = 127 if code == 8 else level if ( code & 2 ) != 0 else 92 if code == 12 else 0 b = 127 if code == 8 else 238 if code == 4 else level if ( code & 4 ) != 0 else 0 print ( f " { code : 3d } : { r : 02X } { g : 02X } { b : 02X } " ) print ( "colors 16-231 are a 6x6x6 color cube" ) for red in range ( 0 , 6 ): for green in range ( 0 , 6 ): for blue in range ( 0 , 6 ): code = 16 + ( red * 36 ) + ( green * 6 ) + blue r = red * 40 + 55 if red != 0 else 0 g = green * 40 + 55 if green != 0 else 0 b = blue * 40 + 55 if blue != 0 else 0 print ( f " { code : 3d } : { r : 02X } { g : 02X } { b : 02X } " ) print ( "colors 232-255 are a grayscale ramp, intentionally leaving out black and white" ) code = 232 for gray in range ( 0 , 24 ): level = gray * 10 + 8 code = 232 + gray print ( f " { code : 3d } : { level : 02X } { level : 02X } { level : 02X } " ) There has also been a similar but incompatible 88-color encoding using the same escape sequence, seen in rxvt and xterm-88color .

[ 39 ] It uses a 4×4×4 color cube.

24-bit [ edit ] As "true color" graphic cards with 16 to 24 bits of color became common, applications began to support 24-bit colors. Terminal emulators supporting setting 24-bit foreground and background colors with escape sequences include Xterm, [ 17 ] KDE's Konsole , [ 40 ] [ 41 ] and iTerm, as well as all libvte based terminals, [ 42 ] including GNOME Terminal .

[ 43 ] ESC[38;2; ⟨r⟩ ; ⟨g⟩ ; ⟨b⟩ m Select RGB foreground color
ESC[48;2; ⟨r⟩ ; ⟨g⟩ ; ⟨b⟩ m Select RGB background color The syntax is likely based on the ITU 's T.416 Open Document Architecture (ODA) and interchange format: Character content architectures, [ 38 ] which was adopted as ISO/IEC 8613-6 but ended up as a commercial failure.

[ citation needed ] The ODA version is more elaborate and thus incompatible: The parameters after the '2' (r, g, and b) are optional and can be left empty.

Semicolons are replaced by colons, as above.

There is a leading "colorspace ID".

[ 17 ] The definition of the colorspace ID is not included in that specification, so it may be blank to represent the unspecified default. For CMYK color specifications, mintty interprets the colorspace ID parameter as specifying the maximum value which the channel values are given out of (e.g. 100 or 255).

[ 33 ] In addition to the '2' value after 48 to specify a Red-Green-Blue format (and the '5' above for a 0-255 indexed color), there are alternatives of '0' for implementation-defined and '1' for transparent - neither of which have any further parameters; '3' specifies colors using a Cyan-Magenta-Yellow scheme, and '4' for a Cyan-Magenta-Yellow-Black one, the latter using the position marked as "unused" for the Black component.

[ 38 ] ESC[38:2: ⟨Color-Space-ID⟩ : ⟨r⟩ : ⟨g⟩ : ⟨b⟩ : ⟨unused⟩ : ⟨ CS tolerance ⟩ : ⟨Color-Space⟩ m Select RGB foreground color
ESC[48:2: ⟨Color-Space-ID⟩ : ⟨r⟩ : ⟨g⟩ : ⟨b⟩ : ⟨unused⟩ : ⟨CS tolerance⟩ : ⟨Color-Space⟩ m Select RGB background color where Color-Space indicates the Color-Space associated with the given tolerance: 0 for CIELUV or 1 for CIELAB.

The ITU-RGB variation is supported by xterm, with the colorspace ID and tolerance parameters ignored. The simpler scheme using semicolons is initially found in Konsole.

[ 17 ] : Can I set a color by its number?

Unix environment variables relating to color support [ edit ] Rather than using the color support in termcap and terminfo introduced in SVr3.2 (1987), [ 44 ] the S-Lang library (version 0.99-32, June 1996) used a separate environment variable $COLORTERM to indicate whether a terminal emulator could use colors at all, and later added values to indicate if it supported 24-bit color.

[ 45 ] [ 46 ] This system, although poorly documented, became widespread enough for Fedora and RHEL to consider using it as a simpler and more universal detection mechanism compared to querying the now-updated libraries.

[ 47 ] Some terminal emulators (urxvt, konsole) set $COLORFGBG to report the color scheme of the terminal (mainly light vs. dark background). This behavior originated in S-Lang [ 46 ] and is used by vim. Gnome-terminal refuses to add this behavior, as the syntax for the value is not agreed upon, the value cannot be changed upon a runtime change of the palette, and more "proper" xterm OSC 4/10/11 sequences already exist.

[ 48 ] Operating System Command sequences [ edit ] Most Operating System Command sequences were defined by Xterm, but many are also supported by other terminal emulators. For historical reasons, Xterm can end the command with BEL (0x07) as well as the standard ST (0x9C or 0x1B 0x5C).

[ 17 ] For example, Xterm allows the window title to be set by ESC ]0;this is the window title BEL .

A non-xterm extension is the hyperlink, ESC ]8;;link ST from 2017, used by VTE, [ 49 ] [ discuss ] iTerm2, [ 49 ] and mintty, [ 50 ] among others.

[ 51 ] The Linux console uses ESC ] P n rr gg bb to change the palette, which, if hard-coded into an application, may hang other terminals.

[ 52 ] However, appending ST will be ignored by Linux and form a proper, ignorable sequence for other terminals.

[ citation needed ] Fs Escape sequences [ edit ] If the ESC is followed by a byte in the range 0x60—0x7E , the escape sequence is of type Fs . This type is used for control functions individually registered with the ISO-IR registry.

[ 53 ] A table of these is listed under ISO/IEC 2022 .

Fp Escape sequences [ edit ] If the ESC is followed by a byte in the range 0x30—0x3F , the escape sequence is of type Fp , which is set apart for up to sixteen private-use control functions.

[ 15 ] : 6.5.3 Some type Fp (private-use) escape sequences recognised by the VT100 Abbr Name Effect ESC 7 DECSC DEC Save Cursor Saves the cursor position, encoding shift state and formatting attributes.

[ 54 ] [ 17 ] ESC 8 DECRC DEC Restore Cursor Restores the cursor position, encoding shift state and formatting attributes from the previous DECSC if any, otherwise resets these all to their defaults.

[ 54 ] [ 17 ] nF Escape sequences [ edit ] If the ESC is followed by a byte in the range 0x20—0x2F , the escape sequence is of type nF . Said byte is followed by any number of additional bytes in this range, and then a byte in the range 0x30-0x7E . These escape sequences are further subcategorised by the low two bits of the first byte, e.g. "type 2F " for sequences where the first byte is 0x22 ; and by whether the final byte is in the range 0x30—0x3F indicating private use (e.g. "type 2Fp ") or not (e.g. "type 2Ft ").

[ 15 ] : 13.2.1 Most of the nFt sequences are for changing the current character set, and are listed in ISO/IEC 2022 . Some others: Some type 0Ft (announcement) ANSI escape sequences [ 17 ] [ 15 ] : 15.2 Abbr Name Effect ESC SP F ACS6 S7C1T Announce Code Structure 6 Send 7-bit C1 Control Character to the Host Makes the function keys send ESC + letter instead of 8-bit C1 codes.

ESC SP G ACS7 S8C1T Announce Code Structure 7 Send 8-bit C1 Control Character to the Host Makes the function keys send 8-bit C1 codes.

If the first byte is '#' the public sequences are reserved for additional ISO-IR registered individual control functions.

[ 15 ] : 6.5.2 No such sequences are presently registered.

[ 53 ] Type 3Fp sequences (which includes ones starting with '#') are available for private-use control functions.

[ 15 ] : 6.5.3 Some type 3Fp (private-use) escape sequences recognised by the VT100 Abbr Name Effect ESC # 3 DECDHL DEC Double-Height Letters, Top Half Makes the current line use characters twice as tall. This code is for the top half.

[ 55 ] ESC # 4 DECDHL DEC Double-Height Letters, Bottom Half Makes the current line use characters twice as tall. This code is for the bottom half.

[ 55 ] ESC # 5 DECSWL DEC Single-Width Line Makes the current line use single-width characters, per the default behaviour.

[ 56 ] [ 17 ] ESC # 6 DECDWL DEC Double-Width Line Makes the current line use double-width characters, discarding any characters in the second half of the line.

[ 57 ] [ 17 ] Examples [ edit ] CSI 2 J — This clears the screen and, on some devices, locates the cursor to the y,x position 1,1 (upper left corner).

CSI 32 m — This makes text green. The green may be a dark, dull green, so you may wish to enable Bold with the sequence CSI 1 m which would make it bright green, or combined as CSI 32 ; 1 m .  Some implementations use the Bold state to make the character Bright.

CSI 0 ; 6 8 ; "DIR" ; 13 p — This reassigns the key F10 to send to the keyboard buffer the string "DIR" and ENTER, which in the DOS command line would display the contents of the current directory. (MS-DOS ANSI.SYS only) This was sometimes used for ANSI bombs .  This is a private-use code (as indicated by the letter p), using a non-standard extension to include a string-valued parameter.  Following the letter of the standard would consider the sequence to end at the letter D.

CSI s — This saves the cursor position. Using the sequence CSI u will restore it to the position. Say the current cursor position is 7(y) and 10(x). The sequence CSI s will save those two numbers. Now you can move to a different cursor position, such as 20(y) and 3(x), using the sequence CSI 20 ; 3 H or CSI 20 ; 3 f . Now if you use the sequence CSI u the cursor position will return to 7(y) and 10(x). Some terminals require the DEC sequences ESC 7 / ESC 8 instead which is more widely supported.

In shell scripting [ edit ] ANSI escape codes are often used in UNIX and UNIX-like terminals to provide syntax highlighting . For example, on compatible terminals, the following list command color-codes file and directory names by type.

ls --color Users can employ escape codes in their scripts by including them as part of standard output or standard error . For example, the following GNU sed command embellishes the output of the make command by displaying lines containing words starting with "WARN" in reverse video and words starting with "ERR" in bright yellow on a dark red background ( letter case is ignored). The representations of the codes are highlighted.

[ 58 ] make 2>&1 | sed -e 's/.*\bWARN.*/ \x1b[7m & \x1b[0m /i' -e 's/.*\bERR.*/ \x1b[93;41m & \x1b[0m /i' The following Bash function flashes the terminal (by alternately sending reverse and normal video mode codes) until the user presses a key.

[ 59 ] flasher () { while true ; do printf \\e[?5h ; sleep 0 .1 ; printf \\e[?5l ; read -s -n1 -t1 && break ; done ; } This can be used to alert a programmer when a lengthy command terminates, such as with make ; flasher .

[ 60 ] printf \\ 033c This will reset the console, similar to the command reset on modern Linux systems; however it should work even on older Linux systems and on other (non-Linux) UNIX variants.

In C [ edit ] This following program creates a table of numbers from 0 to 109, each of which is displayed in the format specified by the Select Graphic Rendition escape sequence using that number as the graphic rendition code.

Output of example program on Gnome Terminal #include <stdio.h> int main ( void ) { int i , j , n ; for ( i = 0 ; i < 11 ; i ++ ) { for ( j = 0 ; j < 10 ; j ++ ) { n = 10 * i + j ; if ( n > 108 ) break ; printf ( " \033 [%dm %3d \033 [m" , n , n ); } printf ( " \n " ); } return 0 ; } Terminal input sequences [ edit ] This section needs additional citations for verification .

Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.

Find sources: "ANSI escape code" – news · newspapers · books · scholar · JSTOR ( October 2023 ) ( Learn how and when to remove this message ) Pressing special keys on the keyboard, as well as outputting many xterm CSI, DCS, or OSC sequences, often produces a CSI, DCS, or OSC sequence, sent from the terminal to the computer as though the user typed it.

When typing input on a terminal keypresses outside the normal main alphanumeric keyboard area can be sent to the host as ANSI sequences. For keys that have an equivalent output function, such as the cursor keys, these often mirror the output sequences. However, for most keypresses there isn't an equivalent output sequence to use.

There are several encoding schemes, and unfortunately most terminals mix sequences from different schemes, so host software has to be able to deal with input sequences using any scheme. 
To complicate the matter, the VT terminals themselves have two schemes of input, normal mode and application mode that can be switched by the application.

(draft section) <char>                                         -> char
<esc> <nochar>                                 -> esc
<esc> <esc>                                    -> esc
<esc> <char>                                   -> Alt-keypress or keycode sequence
<esc> '[' <nochar>                             -> Alt-[
<esc> '[' (<modifier>) <char>                  -> keycode sequence, <modifier> is a decimal
                                                  number and defaults to 1 (xterm)
<esc> '[' (<keycode>) (';'<modifier>) '~'      -> keycode sequence, <keycode> and <modifier>
                                                  are decimal numbers and default to 1 (vt) If the terminating character is '~', the first number must be present and is a
keycode number, the second number is an optional modifier value. If the terminating
character is a letter, the letter is the keycode value, and the optional number is
the modifier value.

The modifier value defaults to 1, and after subtracting 1 is a bitmap of modifier
keys being pressed: Meta + Ctrl + Alt + ⇧ Shift . So, for example, <esc>[4;2~ is ⇧ Shift + End , <esc>[20~ is function key F9 , <esc>[5C is Ctrl + → .

In other words, the modifier is the sum of the following numbers: Key pressed Number Comment 1 always added, the rest are optional Shift 1 (Left) Alt 2 Control 4 Meta 8 vt sequences:
<esc>[1~    - Home        <esc>[16~   -             <esc>[31~   - F17
<esc>[2~    - Insert      <esc>[17~   - F6          <esc>[32~   - F18
<esc>[3~    - Delete      <esc>[18~   - F7          <esc>[33~   - F19
<esc>[4~    - End         <esc>[19~   - F8          <esc>[34~   - F20
<esc>[5~    - PgUp        <esc>[20~   - F9          <esc>[35~   - 
<esc>[6~    - PgDn        <esc>[21~   - F10         
<esc>[7~    - Home        <esc>[22~   -             
<esc>[8~    - End         <esc>[23~   - F11         
<esc>[9~    -             <esc>[24~   - F12         
<esc>[10~   - F0          <esc>[25~   - F13         
<esc>[11~   - F1          <esc>[26~   - F14         
<esc>[12~   - F2          <esc>[27~   -             
<esc>[13~   - F3          <esc>[28~   - F15         
<esc>[14~   - F4          <esc>[29~   - F16         
<esc>[15~   - F5          <esc>[30~   -

xterm sequences:
<esc>[A     - Up          <esc>[K     -             <esc>[U     -
<esc>[B     - Down        <esc>[L     -             <esc>[V     -
<esc>[C     - Right       <esc>[M     -             <esc>[W     -
<esc>[D     - Left        <esc>[N     -             <esc>[X     -
<esc>[E     -             <esc>[O     -             <esc>[Y     -
<esc>[F     - End         <esc>[1P    - F1          <esc>[Z     -
<esc>[G     - Keypad 5    <esc>[1Q    - F2       
<esc>[H     - Home        <esc>[1R    - F3       
<esc>[I     -             <esc>[1S    - F4       
<esc>[J     -             <esc>[T     - <esc>[A to <esc>[D are the same as the ANSI output sequences. The <modifier> is normally omitted if no modifier keys are pressed, but most implementations always emit the <modifier> for F1 – F4 . (draft section) Xterm has a comprehensive documentation page on the various function-key and mouse input sequence schemes from DEC's VT terminals and various other terminals it emulates.

[ 17 ] Thomas Dickey has added a lot of support to it over time; [ 61 ] he also maintains a list of default keys used by other terminal emulators for comparison.

[ 62 ] On the Linux console, certain function keys generate sequences of the form CSI [ char . The CSI sequence should terminate on the [ .

Old versions of Terminator generate SS3 1; modifiers char when F1 – F4 are pressed with modifiers. The faulty behavior was copied from GNOME Terminal .

[ citation needed ] xterm replies CSI row ; column R if asked for cursor position and CSI 1 ; modifiers R if the F3 key is pressed with modifiers, which collide in the case of row == 1 . This can be avoided by using the ?

private modifier as CSI ? 6 n , which will be reflected in the response as CSI ?

row ; column R .

many terminals prepend ESC to any character that is typed with the alt key down. This creates ambiguity for uppercase letters and symbols @[\]^_ , which would form C1 codes.

[ clarification needed ] Konsole generates SS3 modifiers char when F1 – F4 are pressed with modifiers.

[ clarification needed ] iTerm2 supports reporting additional keys via an enhanced CSI u mode.

[ 63 ] See also [ edit ] ANSI art Control character ISO/IEC JTC 1/SC 2 C0 and C1 control codes Notes [ edit ] ^ Note that some n and m are italicized; these are placeholders for numeric parameters, not literal characters.

^ Seen in DOS shell window (non-fullscreen) running in Windows 3.x all the way up to cmd.exe in Windows 8.1 ^ PowerShell's default shortcut .lnk , unchanged for over a decade, remaps yellow and magenta to give PowerShell distinctive foreground/background colors compared to the Command Prompt.

[ 34 ] PowerShell 7 is unaffected.

^ Debug console, "Dark+" theme ^ Campbell theme, used as of Windows 10 version 1709.

^ For virtual terminals, from /etc/vtrgb.

References [ edit ] ^ a b "Standard ECMA-48: Control Functions for Character-Imaging I/O Devices" (PDF) (Second ed.).

Ecma International . August 1979. Brief History.

^ Williams, Paul (2006).

"Digital's Video Terminals" . VT100.net . Retrieved 17 August 2011 .

^ Heathkit Company (1979).

"Heathkit Catalog 1979" . Heathkit Company. Archived from the original on 13 January 2012 . Retrieved 4 November 2011 .

^ "Withdrawn FIPS Listed by Number" (PDF) .

National Institute of Standards and Technology . 15 December 2016 . Retrieved 2 January 2022 .

^ "ECMA-48 — Control functions for coded character sets" .

ECMA International .

^ ISO/IEC 6429:1992 — Information technology — Control functions for coded character sets .

ISO .

^ "Amiga Printer Command Definitions" . Commodore . Retrieved 10 July 2013 .

^ Hood, Jason (2005).

"Process ANSI escape sequences for Windows console programs" . Jason Hood's Home page . Retrieved 9 May 2013 .

^ "colorama · PyPI" .

Python Package Index . Retrieved 27 February 2022 .

^ bitcrazed.

"Console Virtual Terminal Sequences - Windows Console" .

docs.microsoft.com . Retrieved 30 May 2018 .

^ "PowerShell Help: About Special Characters" . 12 January 2023.

^ "Windows Console and Terminal Ecosystem Roadmap" . Microsoft. 2018 . Retrieved 13 March 2021 .

this includes retiring the classic console host user interface from its default position in favor of Windows Terminal, ConPTY, and virtual terminal sequences.

^ "Windows Terminal is now the Default in Windows 11" .

^ "Command Prompt and Windows Powershell for Windows 11" .

^ a b c d e f g h i "Standard ECMA-35: Character Code Structure and Extension Techniques" (PDF) (Sixth ed.).

Ecma International . 1994.

^ a b c d e f g h i j k l m n o p "Standard ECMA-48: Control Functions for Coded Character Sets" (PDF) (Fifth ed.).

Ecma International . June 1991.

^ a b c d e f g h i j k l m n Moy, Edward; Gildea, Stephen; Dickey, Thomas (2019).

"XTerm Control Sequences (ctlseqs)" .

Invisible Island .

^ Frank da Cruz; Christine Gianone (1997).

Using C-Kermit . Digital Press. p. 278.

ISBN 978-1-55558-164-0 .

^ "SCOSC—Save Current Cursor Position" .

VT510 Video Terminal Programmer Information .

DEC .

^ "DECSLRM—Set Left and Right Margins" .

VT510 Video Terminal Programmer Information .

DEC .

^ "SCORC—Restore Saved Cursor Position" .

VT510 Video Terminal Programmer Information .

DEC .

^ Moy, Edward; Gildea, Stephen; Dickey, Thomas.

"XTerm Control Sequences" . Functions using CSI, ordered by the final character(s) . Retrieved 4 February 2022 .

^ Conrad Irwin (April 2013).

"bracketed paste mode" .

cirw.in .

^ Moy, Edward; Gildea, Stephen; Dickey, Thomas.

"XTerm Control Sequences" . Bracketed Paste Mode . Retrieved 4 February 2022 .

^ "console_codes(4) - Linux manual page" .

man7.org . Retrieved 23 March 2018 .

^ a b "screen(HW)" .

SCO OpenServer Release 5.0.7 Manual . 11 February 2003.

^ "Bug 791596 – Thoughts about faint (SGR 2)" .

bugzilla.gnome.org .

^ a b c "Curly and colored underlines (#6382) · Issues · George Nachman / iterm2" .

GitLab . 11 December 2017.

^ a b c "Extensions to the xterm protocol" .

kitty documentation . Retrieved 1 July 2020 .

^ "Curly and colored underlines" .

KDE bugtracker . 27 August 2022.

^ "console-termio-realizer" .

jdebp.uk .

^ "console_codes(4)" .

Linux Programmer's Manual . 5.10. Linux man-pages project.

^ a b c "mintty/mintty: Text attributes and rendering" .

GitHub .

^ "default shortcut on Windows remaps ANSI colors 35,36 · Issue #4266 · PowerShell/PowerShell" .

GitHub . Retrieved 21 December 2022 .

^ Changed from 0, 0, 205 in July 2004 "Patch #192 – 2004/7/12 – XFree86 4.4.99.9" .

^ Changed from 0, 0, 255 in July 2004 "Patch #192 – 2004/7/12 – XFree86 4.4.99.9" .

^ Dickey, Thomas E.

"XTerm FAQ: Can I set a color by its number?" . Retrieved 28 March 2025 .

^ a b c d "T.416 Information technology - Open Document Architecture (ODA) and interchange format: Character content architectures" .

^ Dickey, Thomas E.

"Ncurses FAQ: Why not make "xterm" equated to "xterm-256color"?" . Retrieved 28 March 2025 .

^ "color-spaces.pl (a copy of 256colors2.pl from xterm dated 1999-07-11)" . KDE. 6 December 2006.

[ permanent dead link ] ^ "README.moreColors" . KDE. 22 April 2010.

^ "libvte's bug report and patches: Support for 16 million colors" . GNOME Bugzilla. 4 April 2014 . Retrieved 5 June 2016 .

^ "How to enable 24bit true color support in Gnome terminal?" .

^ "History".

curs_color(3X) - manipulate terminal colors with curses .

^ "Midnight Commander: lib/tty/color-slang.c" .

Fossies . Archived from the original on 13 February 2022 . Retrieved 13 February 2022 .

^ a b Dickey, Thomas E. (2017).

"NCURSES — comments on S-Lang" .

invisible-island.net .

^ "Features/256 Color Terminals - Fedora Project Wiki" .

Fedora Project .

Archived from the original on 4 October 2012.

^ "Bug 733423 – Please set COLORFGBG environment variable for automatic color detection" .

bugzilla.gnome.org .

^ a b Koblinger, Egmont.

"Hyperlinks (a.k.a. HTML-like anchors) in terminal emulators" .

GitHub Gists .

^ "mintty/mintty: Control Sequences" .

GitHub .

^ Koblinger, Egmont.

"OSC 8 adoption in terminal emulators" .

GitHub .

^ "console_codes — Linux console escape and control sequences" .

Linux Programmer's Manual .

^ a b ISO-IR: ISO/IEC International Register of Coded Character Sets To Be Used With Escape Sequences (PDF) . ITSCJ/ IPSJ . Archived from the original (PDF) on 12 May 2023 . Retrieved 12 May 2023 .

^ a b Digital .

"DECSC—Save Cursor" .

VT510 Video Terminal Programmer Information .

^ a b ANSI Escape sequences - VT100 / VT52 , archived from the original on 27 February 2009 , retrieved 21 August 2020 ^ Digital .

"DECSWL—Single-Width, Single-Height Line" .

VT510 Video Terminal Programmer Information .

^ Digital .

"DECDWL—Double-Width, Single-Height Line" .

VT510 Video Terminal Programmer Information .

^ "Chapter 9. System tips" .

debian.org .

^ "VT100.net: Digital VT100 User Guide" . Retrieved 19 January 2015 .

^ "bash – How to get a notification when my commands are done – Ask Different" . Retrieved 19 January 2015 .

^ Dickey, Thomas.

"XTerm FAQ: Comparing versions, by counting controls" .

Invisible Island . Retrieved 25 January 2020 .

^ Dickey, Thomas (2016).

"Table of function-keys for XTerm and other Terminal Emulators" .

Invisible Island . Retrieved 25 January 2020 .

^ "CSI u - Documentation - iTerm2 - macOS Terminal Replacement" .

iTerm2 . Retrieved 15 August 2023 .

External links [ edit ] Standard ECMA-48, Control Functions For Coded Character Sets . ( 5th edition, June 1991 ), European Computer Manufacturers Association, Geneva 1991 (also published by ISO and IEC as standard ISO/IEC 6429) vt100.net DEC Documents "ANSI.SYS -- ansi terminal emulation escape sequences" . Archived from the original on 6 February 2006 . Retrieved 22 February 2007 .

Xterm / Escape Sequences AIXterm / Escape Sequences A collection of escape sequences for terminals that are vaguely compliant with ECMA-48 and friends.

"ANSI Escape Sequences" . Archived from the original on 25 May 2011.

ITU-T Rec. T.416 (03/93) Information technology – Open Document Architecture (ODA) and interchange format: Character content architectures v t e Character encodings Early telecommunications Telegraph code Needle Morse Non-Latin Wabun/Kana Chinese Cyrillic Baudot and Murray Fieldata ASCII ISO/IEC 646 BCDIC Teletex and Videotex / Teletext T.51/ISO/IEC 6937 ITU T.61 ITU T.101 World System Teletext background sets Transcode ISO/IEC 8859 Approved parts -1 (Western Europe) -2 (Central Europe) -3 (Maltese/Esperanto) -4 (North Europe) -5 (Cyrillic) -6 (Arabic) -7 (Greek) -8 (Hebrew) -9 (Turkish) -10 (Nordic) -11 (Thai) -13 (Baltic) -14 (Celtic) -15 (New Western Europe) -16 (Romanian) Abandoned parts -12 (Devanagari) Proposed but not approved KOI-8 Cyrillic Sámi Adaptations Welsh Estonian Ukrainian Cyrillic Bibliographic use MARC-8 ANSEL CCCII/EACC ISO 5426 5426-2 5427 5428 6438 6862 National standards ArmSCII Big5 BraSCII BSCII CNS 11643 DIN 66003 ELOT 927 GOST 10859 GB 2312 GB 12345 GB 12052 GB 18030 HKSCS ISCII JIS X 0201 JIS X 0208 JIS X 0212 JIS X 0213 KOI-7 KPS 9566 KS X 1001 KS X 1002 LST 1564 LST 1590-4 PASCII Shift JIS SI 960 TIS-620 TSCII VISCII VSCII YUSCII ISO/IEC 2022 ISO/IEC 8859 ISO/IEC 10367 Extended Unix Code / EUC Mac OS Code pages ("scripts") Armenian Arabic Barents Cyrillic Celtic Central European Croatian Cyrillic Devanagari Farsi (Persian) Font X (Kermit) Gaelic Georgian Greek Gujarati Gurmukhi Hebrew Iceland Inuit Keyboard Latin (Kermit) Maltese/Esperanto Ogham Roman Romanian Sámi Turkish Turkic Cyrillic Ukrainian VT100 DOS code pages 437 737 850 858 861 862 863 864 865 866 867 868 869 899 904 932 936 942 949 950 951 1040 1043 1046 1098 1115 1116 1117 1118 1127 ABICOMP CS Indic CSX Indic CSX+ Indic CWI-2 Iran System Kamenický Mazovia MIK IBM AIX code pages 895 896 912 915 921 922 1006 1008 1009 1010 1012 1013 1014 1015 1016 1017 1018 1019 1046 1133 Windows code pages CER-GS 932 936 ( GBK ) 950 Extended Latin-8 1250 1251 1252 1253 1254 1255 1256 1257 1258 1270 Cyrillic + French Cyrillic + German Polytonic Greek EBCDIC code pages Japanese language in EBCDIC DKOI DEC terminals ( VTx ) Multinational (MCS) National Replacement (NRCS) French Canadian Swiss Spanish United Kingdom Dutch Finnish French Norwegian and Danish Swedish Norwegian and Danish (alternative) 8-bit Greek 8-bit Turkish SI 960 Hebrew Special Graphics Technical (TCS) Platform specific 1052 1053 1054 1055 1058 Acorn RISC OS Amstrad CPC Apple II ATASCII Atari ST BICS Casio calculators CDC Compucolor 8001 Compucolor II CP/M+ DEC RADIX 50 DEC MCS / NRCS DG International Galaksija GEM GSM 03.38 HP Roman HP FOCAL HP RPL SQUOZE LICS LMBCS MSX NEC APC NeXT PETSCII PostScript Standard PostScript Latin 1 SAM Coupé Sega SC-3000 Sharp calculators Sharp MZ Sinclair QL Teletext TI calculators TRS-80 Ventura International WISCII XCCS ZX80 ZX81 ZX Spectrum Unicode / ISO/IEC 10646 UTF-1 UTF-7 UTF-8 UTF-16 UTF-32 UTF-EBCDIC GB 18030 DIN 91379 BOCU-1 CESU-8 SCSU TACE16 Comparison of Unicode encodings TeX typesetting system Cork LY1 OML OMS OT1 Miscellaneous code pages ABICOMP ASMO 449 Digital encoding of APL symbols ISO-IR-68 ARIB STD-B24 Fieldata HZ IEC-P27-1 INIS 7-bit 8-bit ISO-IR-169 ISO 2033 KOI KOI8-R KOI8-RU KOI8-U Mojikyō SEASCII Stanford/ITS Symbol TRON Unified Hangul Code Control character Morse prosigns C0 and C1 control codes ISO/IEC 6429 JIS X 0211 Unicode control, format and separator characters Whitespace characters Related topics CCSID Character encodings in HTML Charset detection Han unification Hardware code page MICR code Mojibake Variable-length encoding Character sets v t e Standards of Ecma International Application interfaces ANSI escape code APIW Common Language Infrastructure Office Open XML OpenXPS File systems (tape) Advanced Intelligent Tape DDS DLT Super DLT Linear Tape-Open (Ultrium-1) VXA File systems (disk) CD-ROM CD File System (CDFS) FAT FAT12 FAT16 FAT16B FD UDF Ultra Density Optical Universal Media Disc Holographic Versatile Disc Graphics Universal 3D Programming languages C++/CLI C# Eiffel JavaScript ( E4X , ECMAScript ) Dart Minimal BASIC Full BASIC Radio link interfaces NFC UWB Other ECMA-35 JSON List of Ecma standards (1961 – present) v t e International Organization for Standardization (ISO) standards List of ISO standards – ISO romanizations – IEC standards 1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 ( -2 ) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18760 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21778 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40314 40500 42010 45001 50001 55000 56000 80000 Category v t e IEC standards IEC 60027 60034 60038 60062 60063 60068 60112 60228 60269 60297 60309 60320 60364 60446 60559 60601 60870 60870-5 60870-6 60906-1 60908 60929 60958 60980-344 61030 61131 61131-3 61131-9 61158 61162 61334 61355 61360 61400 61499 61508 61511 61784 61850 61851 61883 61960 61968 61970 62014-4 62026 62056 62061 62196 62262 62264 62304 62325 62351 62365 62366 62379 62386 62455 62680 62682 62700 63110 63119 63382 ISO/IEC 646 1989 2022 4909 5218 6429 6523 7810 7811 7812 7813 7816 7942 8613 8632 8652 8859 9126 9293 9496 9529 9592 9593 9899 9945 9995 10021 10116 10165 10179 10279 10646 10967 11172 11179 11404 11544 11801 12207 13250 13346 13522-5 13568 13816 13818 14443 14496 14651 14882 15288 15291 15408 15444 15445 15504 15511 15693 15897 15938 16262 16485 17024 17025 18004 18014 18181 19752 19757 19770 19788 20000 20802 21000 21827 22275 22537 23000 23003 23008 23270 23360 24707 24727 24744 24752 26300 27000 27000 family 27002 27040 29110 29119 33001 38500 39075 42010 80000 81346 Related International Electrotechnical Commission Retrieved from " https://en.wikipedia.org/w/index.php?title=ANSI_escape_code&oldid=1304720165 " Categories : Computer standards Ecma standards American National Standards Institute standards ISO standards Text user interface Hidden categories: All articles with dead external links Articles with dead external links from June 2020 Articles with permanently dead external links Articles with short description Short description is different from Wikidata Use dmy dates from May 2021 All articles with unsourced statements Articles with unsourced statements from November 2023 Articles with unsourced statements from July 2015 All articles lacking reliable references Articles lacking reliable references from June 2020 All accuracy disputes Articles with disputed statements from April 2023 Articles with unsourced statements from February 2022 Articles with unsourced statements from January 2017 Articles needing additional references from October 2023 All articles needing additional references Articles with unsourced statements from December 2010 Wikipedia articles needing clarification from November 2010 This page was last edited on 7 August 2025, at 19:20 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents ANSI escape code 16 languages Add topic

