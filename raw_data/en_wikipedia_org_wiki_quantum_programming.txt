Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Quantum instruction sets Toggle Quantum instruction sets subsection 1.1 Blackbird 1.2 cQASM 1.3 OpenQASM 1.4 QIR 1.5 Quil 2 Quantum software development kits Toggle Quantum software development kits subsection 2.1 SDKs with access to quantum processors 2.1.1 Cirq 2.1.2 Classiq 2.1.3 Forest 2.1.4 MindQuantum 2.1.5 Ocean 2.1.6 PennyLane 2.1.7 Perceval 2.1.8 ProjectQ 2.1.9 qBraid SDK 2.1.10 Qibo 2.1.11 Qiskit 2.1.12 Qrisp 2.1.13 Quantum Development Kit 2.1.14 Strawberry Fields 2.1.15 t|ket> 3 Quantum programming languages Toggle Quantum programming languages subsection 3.1 Imperative languages 3.1.1 Ket 3.1.2 LQP 3.1.3 Q language 3.1.4 Q# 3.1.5 QCL 3.1.6 qGCL 3.1.7 QMASM 3.1.8 Qmod 3.1.9 Q|SI> 3.1.10 Quantum pseudocode 3.1.11 Scaffold 3.1.12 Silq 3.2 Functional languages 3.2.1 LIQUi|> 3.2.2 QFC and QPL 3.2.3 QML 3.2.4 Quantum lambda calculi 3.2.5 Quipper 4 See also 5 References 6 Further reading 7 External links Toggle the table of contents Quantum programming 13 languages العربية Català فارسی 한국어 日本語 Polski Português Русский Suomi Türkçe Українська Tiếng Việt 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Computer programming for quantum computers This article relies excessively on references to primary sources .

Please improve this article by adding secondary or tertiary sources .

Find sources: "Quantum programming" – news · newspapers · books · scholar · JSTOR ( August 2024 ) ( Learn how and when to remove this message ) Quantum programming refers to the process of designing and implementing algorithms that operate on quantum systems , typically using quantum circuits composed of quantum gates, measurements, and classical control logic. These circuits are developed to manipulate quantum states for specific computational tasks or experimental outcomes. Quantum programs may be executed on quantum processors, simulated on classical hardware, or implemented through laboratory instrumentation for research purposes.

When working with quantum processor-based systems, quantum programming languages provide high-level abstractions to express quantum algorithms efficiently. These languages often integrate with classical programming environments and support hybrid quantum-classical workflows. The development of quantum software has been strongly influenced by the open-source community, with many toolkits and frameworks—such as Qiskit , Cirq , PennyLane, and qBraid SDK—available under open licenses.

[ 1 ] [ 2 ] Quantum programming can also be used to model or control experimental systems through quantum instrumentation and sensor-based platforms. While some quantum computing architectures—such as linear optical quantum computing using the KLM protocol —require specialized hardware, others use gate-based quantum processors accessible through software interfaces. In both cases, quantum programming serves as the bridge between theoretical algorithms and physical implementation.

Quantum instruction sets [ edit ] Quantum instruction sets are used to turn higher level algorithms into physical instructions that can be executed on quantum processors. Sometimes these instructions are specific to a given hardware platform, e.g.

ion traps or superconducting qubits .

Blackbird [ edit ] Blackbird [ 3 ] [ 4 ] is a quantum instruction set and intermediate representation used by Xanadu Quantum Technologies and Strawberry Fields. It is designed to represent continuous-variable quantum programs that can run on photonic quantum hardware.

cQASM [ edit ] cQASM, [ 5 ] also known as common QASM, is a hardware-agnostic quantum assembly language which guarantees the interoperability between all the quantum compilation and simulation tools. It was introduced by the QCA Lab at TUDelft .

OpenQASM [ edit ] Main article: OpenQASM OpenQASM [ 6 ] is the intermediate representation introduced by IBM for use with Qiskit and the IBM Quantum Platform.

QIR [ edit ] Quantum Intermediate Representation (QIR) is a hardware-agnostic intermediate representation developed by Microsoft as part of the Quantum Development Kit . It is based on the LLVM compiler infrastructure and is designed to represent quantum programs in a way that supports optimization and execution across diverse quantum hardware backends.

[ 7 ] QIR serves as a common target for quantum compilers, enabling interoperation between different programming languages, such as Q#, and low-level hardware control layers. It is maintained by the QIR Alliance , a collaborative group of academic and industry partners.

Quil [ edit ] Main article: Quil (instruction set architecture) Quil is an instruction set architecture for quantum computing that first introduced a shared quantum/classical memory model. It was introduced by Robert Smith, Michael Curtis, and William Zeng in A Practical Quantum Instruction Set Architecture .

[ 8 ] Many quantum algorithms (including quantum teleportation , quantum error correction , simulation, [ 9 ] [ 10 ] and optimization algorithms [ 11 ] ) require a shared memory architecture.

Quantum software development kits [ edit ] Quantum software development kits provide collections of tools to create and manipulate quantum programs.

[ 12 ] They also provide the means to simulate the quantum programs or prepare them to be run using cloud-based quantum devices and self-hosted quantum devices.

SDKs with access to quantum processors [ edit ] The following software development kits can be used to run quantum circuits on prototype quantum devices, as well as on simulators.

Cirq [ edit ] Main article: Cirq An open source project developed by Google , which uses the Python programming language to create and manipulate quantum circuits.  Programs written in Cirq can be run on IonQ , Pasqal , [ 13 ] Rigetti , and Alpine Quantum Technologies .

[ 14 ] Classiq [ edit ] A cloud-based quantum IDE developed by Classiq, uses a high-level quantum language, Qmod , to generate scalable and efficient quantum circuits with a hardware-aware synthesis engine, that can be deployed across a wide range of QPUs. The platform includes a large library of quantum algorithms.

Forest [ edit ] An open source project developed by Rigetti , which uses the Python programming language to create and manipulate quantum circuits. Results are obtained either using simulators or prototype quantum devices provided by Rigetti. As well as the ability to create programs using basic quantum operations, higher level algorithms are available within the Grove package.

[ 15 ] Forest is based on the Quil instruction set.

MindQuantum [ edit ] MindQuantum is a quantum computing framework based on MindSpore , focusing on the implementation of NISQ algorithms.

[ 16 ] [ 17 ] [ 18 ] Ocean [ edit ] An open source suite of tools developed by D-Wave. Written mostly in the Python programming language, it enables users to formulate problems in Ising Model and Quadratic Unconstrained Binary Optimization formats (QUBO). Results can be obtained by submitting to an online quantum computer in Leap, D-Wave's real-time Quantum Application Environment, customer-owned machines, or classical samplers.

[ citation needed ] A sample code using projectq with Python PennyLane [ edit ] An open-source Python library developed by Xanadu Quantum Technologies for differentiable programming of quantum computers.

[ 19 ] [ 20 ] [ 21 ] [ 22 ] PennyLane provides users the ability to create models using TensorFlow , NumPy , or PyTorch , and connect them with quantum computer backends available from IBMQ , Google Quantum , Rigetti , Quantinuum [ 23 ] and Alpine Quantum Technologies .

[ 14 ] [ 24 ] Perceval [ edit ] An open-source project created by Quandela [ fr ] for designing photonic quantum circuits and developing quantum algorithms, based on Python . Simulations are run either on the user's own computer or on the cloud . Perceval is also used to connect to Quandela's cloud-based photonic quantum processor .

[ 25 ] [ 26 ] ProjectQ [ edit ] An open source project developed at the Institute for Theoretical Physics at ETH , which uses the Python programming language to create and manipulate quantum circuits.

[ 27 ] Results are obtained either using a simulator, or by sending jobs to IBM quantum devices.

qBraid SDK [ edit ] The qBraid SDK is an open-source platform-agnostic quantum runtime framework developed by qBraid. It enables users to write quantum programs once and execute them across various quantum hardware and simulators without modifying the code. The SDK supports multiple quantum programming libraries, including Qiskit, Cirq, PennyLane, PyQuil, and Braket, among others. It features a graph-based transpiler that facilitates conversion between different quantum program types, allowing seamless interoperability between frameworks. The SDK also provides tools for job submission, result retrieval, and circuit visualization. It is integrated with qBraid Lab, offering access to over 20 quantum devices and simulators from providers such as IonQ, Rigetti, QuEra, and IQM.

[ 28 ] [ 29 ] Qibo [ edit ] An open source full-stack API for quantum simulation, quantum hardware control and calibration developed by multiple research laboratories, including QRC , CQT and INFN .

Qibo is a modular framework which includes multiple backends for quantum simulation and hardware control.

[ 30 ] [ 31 ] This project aims at providing a platform agnostic quantum hardware control framework with drivers for multiple instruments [ 32 ] and tools for quantum calibration, characterization and validation.

[ 33 ] This framework focuses on self-hosted quantum devices by simplifying the software development required in labs.

Qiskit [ edit ] Main article: Qiskit An open source project developed by IBM .

[ 34 ] Quantum circuits are created and manipulated using Python . Results are obtained either using simulators that run on the user's own device, simulators provided by IBM or prototype quantum devices provided by IBM. As well as the ability to create programs using basic quantum operations, higher level tools for algorithms and benchmarking are available within specialized packages.

[ 35 ] Qiskit is based on the OpenQASM standard for representing quantum circuits. It also supports pulse level control of quantum systems via QiskitPulse standard.

[ 36 ] Qrisp [ edit ] Qrisp [ 37 ] is an open source project coordinated by the Eclipse Foundation [ 38 ] and developed in Python programming by Fraunhofer FOKUS [ 39 ] Qrisp is a high-level programming language for creating and compiling quantum algorithms. Its structured programming model enables scalable development and maintenance. The expressive syntax is based on variables instead of qubits, with the QuantumVariable as core class, and functions instead of gates. Additional tools, such as a performant simulator and automatic uncomputation, complement the extensive framework.
Furthermore, it is platform independent, since it offers alternative compilation of elementary functions down to the circuit level, based on device-specific gate sets.

Quantum Development Kit [ edit ] A project developed by Microsoft [ 40 ] as part of the .NET Framework . Quantum programs can be written and run within Visual Studio and VSCode using the quantum programming language Q#.  Programs developed in the QDK can be run on Microsoft's Azure Quantum , [ 41 ] and run on quantum computers from Quantinuum , [ 23 ] IonQ , and Pasqal .

[ 13 ] Strawberry Fields [ edit ] An open-source Python library developed by Xanadu Quantum Technologies for designing, simulating, and optimizing continuous variable (CV) quantum optical circuits.

[ 42 ] [ 43 ] Three simulators are provided - one in the Fock basis , one using the Gaussian formulation of quantum optics, [ 44 ] and one using the TensorFlow machine learning library. Strawberry Fields is also the library for executing programs on Xanadu's quantum photonic hardware.

[ 45 ] [ 46 ] t|ket> [ edit ] A quantum programming environment and optimizing compiler developed by Quantinuum that targets simulators and several trapped-ion quantum hardware backends, released in December 2018.

[ 47 ] Quantum programming languages [ edit ] There are two main groups of quantum programming languages: imperative quantum programming languages and functional quantum programming languages.

Imperative languages [ edit ] The most prominent representatives of the imperative languages are QCL, [ 48 ] LanQ [ 49 ] and Q|SI>.

[ 50 ] Ket [ edit ] Ket [ 51 ] is an open-source embedded language designed to facilitate quantum programming, leveraging the familiar syntax and simplicity of Python. It serves as an integral component of the Ket Quantum Programming Platform, [ 52 ] seamlessly integrating with a Rust runtime library and a quantum simulator. Maintained by Quantuloop, the project emphasizes accessibility and versatility for researchers and developers. The following example demonstrates the implementation of a Bell state using Ket: from ket import * a , b = quant ( 2 ) # Allocate two quantum bits H ( a ) # Put qubit `a` in a superposition cnot ( a , b ) # Entangle the two qubits in the Bell state m_a = measure ( a ) # Measure qubit `a`, collapsing qubit `b` as well m_b = measure ( b ) # Measure qubit `b` # Assert that the measurement of both qubits will always be equal assert m_a .

value == m_b .

value LQP [ edit ] The Logic of Quantum Programs (LQP) is a dynamic quantum logic, capable of expressing important features of quantum measurements and unitary evolutions of multi-partite states, and provides logical characterizations of various forms of entanglement. The logic has been used to specify and verify the correctness of various protocols in quantum computation.

[ 53 ] [ 54 ] Q language [ edit ] Q Language is the second implemented imperative quantum programming language.

[ 55 ] Q Language was implemented as an extension of C++ programming language. It provides classes for basic quantum operations like QHadamard, QFourier, QNot, and QSwap, which are derived from the base class Qop.  New operators can be defined using C++ class mechanism.

Quantum memory is represented by class Qreg.

Qreg x1 ; // 1-qubit quantum register with initial value 0 Qreg x2 ( 2 , 0 ); // 2-qubit quantum register with initial value 0 The computation process is executed using a provided simulator. Noisy environments can be simulated using parameters of the simulator.

Q# [ edit ] Main article: Q Sharp A language developed by Microsoft to be used with the Quantum Development Kit .

[ 56 ] QCL [ edit ] Main article: Quantum Computation Language Quantum Computation Language (QCL) is one of the first implemented quantum programming languages .

[ 57 ] The most important feature of QCL is the support for user-defined operators and functions. Its syntax resembles the syntax of the C programming language and its classical data types are similar to primitive data types in C. One can combine classical code and quantum code in the same program.

qGCL [ edit ] Quantum Guarded Command Language (qGCL) was defined by P. Zuliani in his PhD thesis. It is based on Guarded Command Language created by Edsger Dijkstra .

It can be described as a language of quantum programs specification.

QMASM [ edit ] Quantum Macro Assembler (QMASM) is a low-level language specific to quantum annealers such as the D-Wave.

[ 58 ] Qmod [ edit ] Quantum Modeling (Qmod) language is a high-level language that abstracts away the gate-level qubit operation, providing a functional approach to the implementation of quantum algorithms on quantum registers.
The language is part of the Classiq platform and can be used directly with its native syntax, through a Python SDK, or with a visual editor, all methods can take advantage of the larger library of algorithms and the efficient circuit optimization.

Q|SI> [ edit ] Q|SI> is a platform embedded in .Net language supporting quantum programming in a quantum extension of while-language.

[ 50 ] [ 59 ] This platform includes a compiler of the quantum while-language [ 60 ] and a chain of tools for the simulation of quantum computation, optimisation of quantum circuits, termination analysis of quantum programs, [ 61 ] and verification of quantum programs.

[ 62 ] [ 63 ] Quantum pseudocode [ edit ] Quantum pseudocode proposed by E. Knill is the first formalized language for description of quantum algorithms .  It was introduced and, moreover, was tightly connected with a model of quantum machine called Quantum Random Access Machine (QRAM).

Scaffold [ edit ] Scaffold is C-like language, that compiles to QASM and OpenQASM.  It is built on top of the LLVM Compiler Infrastructure to perform optimizations on Scaffold code before generating a specified instruction set.

[ 64 ] [ 65 ] Silq [ edit ] Silq is a high-level programming language for quantum computing with a strong static type system, developed at ETH Zürich .

[ 66 ] [ 67 ] Functional languages [ edit ] Efforts are underway to develop functional programming languages for quantum computing . Functional programming languages are well-suited for reasoning about programs. Examples include Selinger's QPL, [ 68 ] and the Haskell -like language QML by Altenkirch and Grattage.

[ 69 ] [ 70 ] Higher-order quantum programming languages, based on lambda calculus , have been proposed by van Tonder, [ 71 ] Selinger and Valiron [ 72 ] and by Arrighi and Dowek.

[ 73 ] LIQUi|> [ edit ] LIQUi|> (pronounced liquid ) is a quantum simulation extension on the F# programming language.

[ 74 ] It is currently being developed by the Quantum Architectures and Computation Group (QuArC) [ 75 ] part of the StationQ efforts at Microsoft Research. LIQUi|> seeks to allow theorists to experiment with quantum algorithm design before physical quantum computers are available for use.

[ 76 ] It includes a programming language, optimization and scheduling algorithms, and quantum simulators. LIQUi|> can be used to translate a quantum algorithm written in the form of a high-level program into the low-level machine instructions for a quantum device.

[ 77 ] QFC and QPL [ edit ] QFC and QPL are two closely related quantum programming languages defined by Peter Selinger. They differ only in their syntax: QFC uses a flow chart syntax, whereas QPL uses a textual syntax. These languages have classical control flow but can operate on quantum or classical data. Selinger gives a denotational semantics for these languages in a category of superoperators .

QML [ edit ] QML is a Haskell -like quantum programming language by Altenkirch and Grattage.

[ 78 ] [ 69 ] Unlike Selinger's QPL, this language takes duplication, rather than discarding, of quantum information as a primitive operation. Duplication in this context is understood to be the operation that maps | ϕ ϕ ⟩ ⟩ {\displaystyle |\phi \rangle } to | ϕ ϕ ⟩ ⟩ ⊗ ⊗ | ϕ ϕ ⟩ ⟩ {\displaystyle |\phi \rangle \otimes |\phi \rangle } , and is not to be confused with the impossible operation of cloning ; the authors claim it is akin to how sharing is modeled in classical languages. QML also introduces both classical and quantum control operators, whereas most other languages rely on classical control.

An operational semantics for QML is given in terms of quantum circuits , while a denotational semantics is presented in terms of superoperators , and these are shown to agree. Both the operational and denotational semantics have been implemented (classically) in Haskell.

[ 79 ] Quantum lambda calculi [ edit ] Quantum lambda calculi are extensions of the classical lambda calculus introduced by Alonzo Church and Stephen Cole Kleene in the 1930s. The purpose of quantum lambda calculi is to extend quantum programming languages with a theory of higher-order functions .

The first attempt to define a quantum lambda calculus was made by Philip Maymin in 1996.

[ 80 ] His lambda-q calculus is powerful enough to express any quantum computation. However, this language can efficiently solve NP-complete problems, and therefore appears to be strictly stronger than the standard quantum computational models (such as the quantum Turing machine or the quantum circuit model). Therefore, Maymin's lambda-q calculus is probably not implementable on a physical device [ citation needed ] .

In 2003, André van Tonder defined an extension of the lambda calculus suitable for proving correctness of quantum programs. He also provided an implementation in the Scheme programming language.

[ 81 ] In 2004, Selinger and Valiron defined a strongly typed lambda calculus for quantum computation with a type system based on linear logic .

[ 82 ] Quipper [ edit ] For the education technology company, see Quipper (company) .

Quipper was published in 2013.

[ 83 ] [ 84 ] It is implemented as an embedded language, using Haskell as the host language.

[ 85 ] For this reason, quantum programs written in Quipper are written in Haskell using provided libraries. For example, the following code implements preparation of a superposition import Quipper spos :: Bool -> Circ Qubit spos b = do q <- qinit b r <- hadamard q return r See also [ edit ] Computer programming portal List of quantum computing journals References [ edit ] ^ Häner, Thomas; Steiger, Damian S.; Svore, Krysta ; Troyer, Matthias (2018). "A software methodology for compiling quantum programs".

Quantum Science and Technology .

3 (2): 020501.

arXiv : 1604.01401 .

Bibcode : 2018QS&T....3b0501H .

doi : 10.1088/2058-9565/aaa5cc .

ISSN 2058-9565 .

^ "Qiskit GitHub repository" .

GitHub .

^ "Blackbird Quantum Assembly Language — Blackbird 0.2.0 documentation" .

quantum-blackbird.readthedocs.io . Retrieved June 24, 2019 .

^ Weedbrook, Christian; Amy, Matthew; Bergholm, Ville; Quesada, Nicolás; Izaac, Josh; Killoran, Nathan (March 11, 2019). "Strawberry Fields: A Software Platform for Photonic Quantum Computing".

Quantum .

3 : 129.

arXiv : 1804.03159 .

Bibcode : 2019Quant...3..129K .

doi : 10.22331/q-2019-03-11-129 .

S2CID 54763305 .

^ Bertels, K.; Almudever, C. G.; Hogaboam, J. W.; Ashraf, I.; Guerreschi, G. G.; Khammassi, N. (May 24, 2018). "cQASM v1.0: Towards a Common Quantum Assembly Language".

arXiv : 1805.09607v1 [ quant-ph ].

^ qiskit-openqasm: OpenQASM specification , International Business Machines, July 4, 2017 , retrieved July 6, 2017 ^ "Quantum Intermediate Representation (QIR)" .

QIR Alliance . Retrieved June 2, 2025 .

^ Smith, Robert S.; Curtis, Michael J.; Zeng, William J. (2016). "A Practical Quantum Instruction Set Architecture".

arXiv : 1608.03355 [ quant-ph ].

^ McClean, Jarrod R.; Romero, Jonathan; Babbush, Ryan; Aspuru-Guzik, Alán (February 4, 2016). "The theory of variational hybrid quantum-classical algorithms".

New Journal of Physics .

18 (2): 023023.

arXiv : 1509.04279 .

Bibcode : 2016NJPh...18b3023M .

doi : 10.1088/1367-2630/18/2/023023 .

ISSN 1367-2630 .

S2CID 92988541 .

^ Rubin, Nicholas C.; Curtis, Michael J.; Zeng, William J. (2016). "A Hybrid Classical/Quantum Approach for Large-Scale Studies of Quantum Systems with Density Matrix Embedding Theory".

arXiv : 1610.06910 [ quant-ph ].

^ Farhi, Edward; Goldstone, Jeffrey; Gutmann, Sam (2014). "A Quantum Approximate Optimization Algorithm".

arXiv : 1411.4028 [ quant-ph ].

^ Häner, Thomas; Steiger, Damian S.; Svore, Krysta ; Troyer, Matthias (2018). "A software methodology for compiling quantum programs".

Quantum Science and Technology .

3 (2): 020501.

arXiv : 1604.01401 .

Bibcode : 2018QS&T....3b0501H .

doi : 10.1088/2058-9565/aaa5cc .

ISSN 2058-9565 .

S2CID 1922315 .

^ a b "PASQAL" .

PASQAL .

[ permanent dead link ] ^ a b "Home" .

AQT | ALPINE QUANTUM TECHNOLOGIES .

^ "Welcome to the Documentation for Grove! — Grove 1.7.0 documentation" .

grove-docs.readthedocs.io .

^ "MindSpore Quantum Documentation" .

www.mindspore.cn/mindquantum .

^ Xu, Xusheng; et al. (2024). "MindSpore Quantum: A User-Friendly, High-Performance, and AI-Compatible Quantum Computing Framework".

arXiv : 2406.17248 [ quant-ph ].

^ "mindquantum" .

github.com .

^ "PennyLane Documentation — PennyLane 0.14.1 documentation" .

pennylane.readthedocs.io . Retrieved March 26, 2021 .

^ "AWS joins PennyLane, an open-source framework that melds machine learning with quantum computing" .

SiliconANGLE . February 17, 2021 . Retrieved March 26, 2021 .

^ "SD Times Open-Source Project of the Week: PennyLane" .

SD Times . February 26, 2021 . Retrieved March 26, 2021 .

^ Salamone, Salvatore (December 13, 2020).

"Real-time Analytics News Roundup for Week Ending December 12" .

RTInsights . Retrieved March 26, 2021 .

^ a b "Accelerating Quantum Computing" .

www.quantinuum.com .

^ "Plugins and ecosystem — PennyLane" .

pennylane.ai . Archived from the original on September 26, 2021 . Retrieved March 26, 2021 .

^ "La puissance d'un ordinateur quantique testée en ligne (The power of a quantum computer tested online)" .

Le Monde.fr . Le Monde. November 22, 2022.

^ Heurtel, Nicolas; Fyrillas, Andreas; de Gliniasty, Grégoire; Le Bihan, Raphaël; Malherbe, Sébastien; Pailhas, Marceau; Bertasi, Eric; Bourdoncle, Boris; Emeriau, Pierre-Emmanuel; Mezher, Rawad; Music, Luka; Belabas, Nadia; Valiron, Benoît; Senellart, Pascale; Mansfield, Shane; Senellart, Jean (February 21, 2023).

"Perceval: A Software Platform for Discrete Variable Photonic Quantum Computing" .

Quantum .

7 : 931.

arXiv : 2204.00602 .

Bibcode : 2023Quant...7..931H .

doi : 10.22331/q-2023-02-21-931 .

S2CID 247922568 .

^ "Home" .

^ "qBraid SDK Overview" .

docs.qbraid.com .

^ "qBraid Announces qBraid SDK Integrated with Amazon Braket on qBraid Lab" .

qbraid.com .

^ Efthymiou, Stavros; Ramos-Calderer, Sergi; Bravo-Prieto, Carlos; Pérez-Salinas, Adrián; García-Martín, Diego; Garcia-Saez, Artur; Latorre, José Ignacio; Carrazza, Stefano (January 1, 2022).

"Qibo: a framework for quantum simulation with hardware acceleration" .

Quantum Science and Technology .

7 (1): 015018.

arXiv : 2009.01845 .

Bibcode : 2022QS&T....7a5018E .

doi : 10.1088/2058-9565/ac39f5 .

hdl : 2434/887963 .

ISSN 2058-9565 .

S2CID 221507478 .

^ Efthymiou, Stavros; Lazzarin, Marco; Pasquale, Andrea; Carrazza, Stefano (September 22, 2022).

"Quantum simulation with just-in-time compilation" .

Quantum .

6 : 814.

arXiv : 2203.08826 .

Bibcode : 2022Quant...6..814E .

doi : 10.22331/q-2022-09-22-814 .

S2CID 247518955 .

^ "Qibolab" . November 2, 2022 – via GitHub.

^ "Qibocal" . November 1, 2022 – via GitHub.

^ "qiskit.org" .

qiskit.org .

^ "Qiskit Overview" . Retrieved February 10, 2021 .

^ McKay, David C.; Alexander, Thomas; Bello, Luciano; Biercuk, Michael J.; Bishop, Lev; Chen, Jiayin; Chow, Jerry M.; Córcoles, Antonio D.; Egger, Daniel; Filipp, Stefan; Gomez, Juan; Hush, Michael; Javadi-Abhari, Ali; Moreda, Diego; Nation, Paul; Paulovicks, Brent; Winston, Erick; Wood, Christopher J.; Wootton, James; Gambetta, Jay M. (2018). "Qiskit Backend Specifications for OpenQASM and OpenPulse Experiments".

arXiv : 1809.03452 [ quant-ph ].

^ "Qrisp official website" .

^ "Eclipse Foundation (website)" .

^ "Fraunhofer FOKUS (website)" .

^ "Azure Quantum documentation, QDK & Q# API reference - Azure Quantum" .

learn.microsoft.com .

^ "What is Azure Quantum? - Azure Quantum" .

learn.microsoft.com . January 11, 2023.

^ "Strawberry Fields — Strawberry Fields 0.8.0 documentation" .

strawberryfields.readthedocs.io . Retrieved September 25, 2018 .

^ Killoran, Nathan; Izaac, Josh; Quesada, Nicolás; Bergholm, Ville; Amy, Matthew; Weedbrook, Christian (2019). "Strawberry Fields: A Software Platform for Photonic Quantum Computing".

Quantum .

3 : 129.

arXiv : 1804.03159 .

Bibcode : 2019Quant...3..129K .

doi : 10.22331/q-2019-03-11-129 .

S2CID 54763305 .

^ Weedbrook, Christian; Pirandola, Stefano; García-Patrón, Raúl; Cerf, Nicolas J.; Ralph, Timothy C.; Shapiro, Jeffrey H.; Lloyd, Seth (May 1, 2012). "Gaussian quantum information".

Reviews of Modern Physics .

84 (2): 621– 669.

arXiv : 1110.3234 .

Bibcode : 2012RvMP...84..621W .

doi : 10.1103/RevModPhys.84.621 .

S2CID 119250535 .

^ "Hardware — Strawberry Fields" .

strawberryfields.ai . Retrieved March 26, 2021 .

^ "In the Race to Hundreds of Qubits, Photons May Have "Quantum Advantage" " .

IEEE Spectrum: Technology, Engineering, and Science News . March 5, 2021 . Retrieved March 26, 2021 .

^ "pytket" .

GitHub . January 22, 2022.

^ Bernhard Omer.

"The QCL Programming Language" .

^ Hynek Mlnařík.

"LanQ – a quantum imperative programming language" .

^ a b Liu, Shusen; Zhou, li; Guan, Ji; He, Yang; Duan, Runyao; Ying, Mingsheng (May 9, 2017). "Q|SI>: A Quantum Programming Language".

Scientia Sinica Informationis .

47 (10): 1300.

arXiv : 1710.09500 .

doi : 10.1360/N112017-00095 .

S2CID 9163705 .

^ Da Rosa, Evandro Chagas Ribeiro; De Santiago, Rafael (January 31, 2022).

"Ket Quantum Programming" .

ACM Journal on Emerging Technologies in Computing Systems .

18 (1): 1– 25.

doi : 10.1145/3474224 .

ISSN 1550-4832 .

^ "Ket Quantum Programming" .

quantumket.org . Retrieved May 18, 2023 .

^ A. Baltag and S. Smets, "LQP: The Dynamic Logic of Quantum Information" , Mathematical Structures in Computer Science 16(3):491-525, 2006.

^ Baltag, Alexandru; Bergfeld, Jort; Kishida, Kohei; Sack, Joshua; Smets, Sonja; Zhong, Shengyang (2014).

"PLQP & Company: Decidable Logics for Quantum Algorithms" .

International Journal of Theoretical Physics .

53 (10): 3628– 3647.

Bibcode : 2014IJTP...53.3628B .

doi : 10.1007/s10773-013-1987-3 .

S2CID 254573992 .

^ "Software for the Q language" . November 23, 2001. Archived from the original on June 20, 2009 . Retrieved July 20, 2017 .

^ "Introduction to Q# & Quantum Development Kit - Azure Quantum" .

learn.microsoft.com . March 30, 2023.

^ "QCL - A Programming Language for Quantum Computers" .

tuwien.ac.at . Retrieved July 20, 2017 .

^ Scott Pakin, "A Quantum Macro Assembler" , Proceedings of the 20th Annual IEEE High Performance Extreme Computing Conference 2016 ^ Ying, Mingsheng (January 2012).

"Floyd–hoare Logic for Quantum Programs" .

ACM Trans. Program. Lang. Syst .

33 (6): 19:1–19:49.

doi : 10.1145/2049706.2049708 .

ISSN 0164-0925 .

S2CID 416960 .

^ Ying, Mingsheng; Feng, Yuan (2010).

"A Flowchart Language for Quantum Programming" .

IEEE Transactions on Software Engineering .

37 (4): 466– 485.

doi : 10.1109/TSE.2010.94 .

ISSN 0098-5589 .

S2CID 5879273 .

^ Ying, Mingsheng; Yu, Nengkun; Feng, Yuan; Duan, Runyao (2013). "Verification of quantum programs".

Science of Computer Programming .

78 (9): 1679– 1700.

arXiv : 1106.4063 .

doi : 10.1016/j.scico.2013.03.016 .

S2CID 18913620 .

^ Ying, Mingsheng; Ying, Shenggang; Wu, Xiaodi (2017), "Invariants of quantum programs: Characterisations and generation", ACM SIGPLAN Notices , 52 : 818– 832, doi : 10.1145/3093333.3009840 , hdl : 10453/127333 ^ Liu, Tao; Li, Yangjia; Wang, Shuling; Ying, Mingsheng; Zhan, Naijun (2016). "A Theorem Prover for Quantum Hoare Logic and its Applications".

arXiv : 1601.03835 [ cs.LO ].

^ Javadi-Abhari, Ali.

"Scaffold: Quantum Programming Language" .

Princeton University-Department of Computer Science . Princeton University. Archived from the original on September 20, 2020 . Retrieved September 22, 2020 .

^ Litteken, Andrew (May 28, 2020).

"An updated LLVM-based quantum research compiler with further OpenQASM support" .

Quantum Science and Technology .

5 (3): 034013.

Bibcode : 2020QS&T....5c4013L .

doi : 10.1088/2058-9565/ab8c2c .

OSTI 1803951 .

S2CID 219101628 .

^ "What is Silq?" .

silq.ethz.ch . Retrieved June 21, 2020 .

^ Bichsel, Benjamin; Baader, Maximilian; Gehr, Timon; Vechev, Martin (June 11, 2020). "Silq: A high-level quantum language with safe uncomputation and intuitive semantics".

Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation . London UK: ACM. pp.

286– 300.

doi : 10.1145/3385412.3386007 .

ISBN 978-1-4503-7613-6 .

S2CID 219397029 .

^ Peter Selinger, "Towards a quantum programming language" , Mathematical Structures in Computer Science 14(4):527-586, 2004.

^ a b Jonathan Grattage: QML Research Archived March 31, 2008, at the Wayback Machine (website) ^ T. Altenkirch, V. Belavkin, J. Grattage, A. Green, A. Sabry, J. K. Vizzotto, QML: A Functional Quantum Programming Language Archived 2006-07-10 at the Wayback Machine (website) ^ Andre van Tonder, "A Lambda Calculus for Quantum Computation" , SIAM J. Comput., 33(5), 1109–1135. (27 pages), 2004. Also available from arXiv:quant-ph/0307150 ^ Peter Selinger and Benoît Valiron, "A lambda calculus for quantum computation with classical control" , Mathematical Structures in Computer Science 16(3):527-552, 2006.

^ Pablo Arrighi, Gilles Dowek, "Linear-algebraic lambda-calculus: higher-order, encodings and confluence" , 2006 ^ "The Language Integrated Quantum Operations Simulator" .

github.io . Retrieved July 20, 2017 .

^ Quantum Architectures and Computation Group (QuArC), https://www.microsoft.com/en-us/research/group/quantum-architectures-and-computation-group-quarc/ , 2011 ^ "StationQ" .

microsoft.com . Retrieved July 20, 2017 .

^ "Language-Integrated Quantum Operations: LIQUi|>" .

Microsoft . 2016.

^ "QML: A Functional Quantum Programming Language" . September 26, 2007. Archived from the original on September 26, 2007.

^ Jonathan Grattage, QML: A Functional Quantum Programming Language (compiler) Archived 2016-03-05 at the Wayback Machine , 2005–2008 ^ Philip Maymin, "Extending the Lambda Calculus to Express Randomized and Quantumized Algorithms" , 1996 ^ André van Tonder.

"A lambda calculus for quantum computation (website)" . Archived from the original on March 5, 2016 . Retrieved October 2, 2007 .

^ Peter Selinger, Benoˆıt Valiron, "Quantum Lambda Calculus" ^ "The Quipper Language" .

^ Alexander S. Green; Peter LeFanu Lumsdaine; Neil J. Ross; Peter Selinger; Benoît Valiron.

"The Quipper Language (website)" .

^ Alexander S. Green; Peter LeFanu Lumsdaine; Neil J. Ross; Peter Selinger; Benoît Valiron (2013). "An Introduction to Quantum Programming in Quipper".

Reversible Computation . Lecture Notes in Computer Science. Vol. 7948. pp.

110– 124.

arXiv : 1304.5485 .

doi : 10.1007/978-3-642-38986-3_10 .

ISBN 978-3-642-38985-6 .

S2CID 9135905 .

Further reading [ edit ] Mingsheng, Ying (2024).

Foundations of quantum programming (2nd ed.). Cambridge, Massachusetts: Morgan Kaufmann.

ISBN 978-0-4431-5942-8 .

OCLC 1406095194 . 978-0-4431-5943-5 (eBook).

Serrano, Manuel A.; Pérez-Castillo, Ricardo; Piattini, Mario, eds. (2022).

Quantum Software Engineering (1st ed.). Cham, Switzerland: Springer.

doi : 10.1007/978-3-031-05324-5 .

ISBN 978-3-031-05323-8 .

OCLC 1347696597 . 978-3-031-05326-9 (softcover) & 978-3-031-05324-5 (eBook).

External links [ edit ] Curated list of all quantum open-source software projects Bibliography on Quantum Programming Languages (updated in May 2007) Quantum Physics and Logic (QPL) Conference Series (L stood for 'Languages' until 2006) Quantum programming language in Quantiki QMASM documentation pyQuil documentation including Introduction to Quantum Computing Archived July 18, 2018, at the Wayback Machine Scaffold Source v t e Quantum information science General DiVincenzo's criteria NISQ era Quantum computing timeline Quantum information Quantum programming Quantum simulation Qubit physical vs. logical Quantum processors cloud-based Theorems Bell's Eastin–Knill Gleason's Gottesman–Knill Holevo's No-broadcasting No-cloning No-communication No-deleting No-hiding No-teleportation PBR Quantum speed limit Threshold Solovay–Kitaev Schrödinger-HJW Quantum communication Classical capacity entanglement-assisted quantum capacity Entanglement distillation Entanglement swapping Monogamy of entanglement LOCC Quantum channel quantum network State purification Quantum teleportation quantum energy teleportation quantum gate teleportation Superdense coding Quantum cryptography Post-quantum cryptography Quantum coin flipping Quantum money Quantum key distribution BB84 SARG04 other protocols Quantum secret sharing Quantum algorithms Algorithmic cooling Amplitude amplification Bernstein–Vazirani BHT Boson sampling Deutsch–Jozsa Grover's HHL Hidden subgroup Magic state distillation Quantum annealing Quantum counting Quantum Fourier transform Quantum optimization Quantum phase estimation Shor's Simon's VQE Quantum complexity theory BQP DQC1 EQP QIP QMA PostBQP Quantum processor benchmarks Quantum supremacy Quantum volume Randomized benchmarking XEB Relaxation times T 1 T 2 Quantum computing models Adiabatic quantum computation Continuous-variable quantum information One-way quantum computer cluster state Quantum circuit quantum logic gate Quantum machine learning quantum neural network Quantum Turing machine Topological quantum computer Hamiltonian quantum computation Quantum error correction Codes 5 qubit CSS GKP quantum convolutional stabilizer Shor Bacon–Shor Steane Toric gnu Entanglement-assisted Physical implementations Quantum optics Cavity QED Circuit QED Linear optical QC KLM protocol Ultracold atoms Neutral atom QC Trapped-ion QC Spin -based Kane QC Spin qubit QC NV center NMR QC Superconducting Charge qubit Flux qubit Phase qubit Transmon Quantum programming OpenQASM – Qiskit – IBM QX Quil – Forest/Rigetti QCS Cirq Q# libquantum many others...

Quantum information science Quantum mechanics topics v t e Emerging technologies Fields Quantum algorithms amplifier bus cellular automata channel circuit complexity theory computing cryptography post-quantum dynamics electronics error correction finite automata image processing imaging information key distribution logic logic clock logic gate machine machine learning metamaterial network neural network optics programming sensing simulator teleportation Other Acoustic levitation Anti-gravity Cloak of invisibility Digital scent technology Force field Plasma window Immersive virtual reality Magnetic refrigeration Phased-array optics Thermoacoustic heat engine List v t e Programming paradigms ( Comparison by language ) Imperative Structured Jackson structures Block-structured Modular Non-structured Procedural Programming in the large and in the small Design by contract Invariant-based Nested function Object-oriented ( comparison , list ) Class-based , Prototype-based , Object-based Agent Immutable object Persistent Uniform function call syntax Declarative Functional ( comparison ) Recursive Anonymous function ( Partial application ) Higher-order Purely functional Total Strict GADTs Dependent types Functional logic Point-free style Expression-oriented Applicative , Concatenative Function-level , Value-level Dataflow Flow-based Reactive ( Functional reactive ) Signals Streams Synchronous Logic Abductive logic Answer set Constraint ( Constraint logic ) Inductive logic Nondeterministic Ontology Probabilistic logic Query Domain- specific language (DSL) Algebraic modeling Array Automata-based ( Action ) Command ( Spacecraft ) Differentiable End-user Grammar-oriented Interface description Language-oriented List comprehension Low-code Modeling Natural language Non-English-based Page description Pipes and filters Probabilistic Quantum Scientific Scripting Set-theoretic Simulation Stack-based System Tactile Templating Transformation ( Graph rewriting , Production , Pattern ) Visual Concurrent , distributed , parallel Actor-based Automatic mutual exclusion Choreographic programming Concurrent logic ( Concurrent constraint logic ) Concurrent OO Macroprogramming Multitier programming Organic computing Parallel programming models Partitioned global address space Process-oriented Relativistic programming Service-oriented Structured concurrency Metaprogramming Attribute-oriented Automatic ( Inductive ) Dynamic Extensible Generic Homoiconicity Interactive Macro ( Hygienic ) Metalinguistic abstraction Multi-stage Program synthesis ( Bayesian , Inferential , by demonstration , by example ) Reflective Self-modifying code Symbolic Template Separation of concerns Aspects Components Data-driven Data-oriented Event-driven Features Literate Roles Subjects NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐nsszm
Cached time: 20250817060220
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.893 seconds
Real time usage: 1.059 seconds
Preprocessor visited node count: 5899/1000000
Revision size: 45252/2097152 bytes
Post‐expand include size: 253468/2097152 bytes
Template argument size: 4237/2097152 bytes
Highest expansion depth: 17/100
Expensive parser function count: 19/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 302976/5000000 bytes
Lua time usage: 0.566/10.000 seconds
Lua memory usage: 7809212/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  863.756      1 -total
 59.73%  515.885      1 Template:Reflist
 21.18%  182.929     16 Template:Cite_journal
 20.20%  174.493     45 Template:Cite_web
 10.72%   92.565      8 Template:Navbox
  8.82%   76.181      1 Template:Quantum_computing
  7.17%   61.945      7 Template:Cite_arXiv
  6.98%   60.310      1 Template:Short_description
  6.58%   56.798      1 Template:Primary_sources
  5.94%   51.324      1 Template:Ambox Saved in parser cache with key enwiki:pcache:2137644:|#|:idhash:canonical and timestamp 20250817060220 and revision id 1305273849. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Quantum_programming&oldid=1305273849 " Categories : Quantum programming Programming language classification Programming paradigms Quantum computing Hidden categories: All articles with dead external links Articles with dead external links from July 2025 Articles with permanently dead external links Webarchive template wayback links Articles with short description Short description is different from Wikidata Articles lacking reliable references from August 2024 All articles lacking reliable references Use mdy dates from February 2023 Use American English from February 2023 All Wikipedia articles written in American English All articles with unsourced statements Articles with unsourced statements from June 2021 Articles with unsourced statements from February 2019 This page was last edited on 11 August 2025, at 02:57 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Quantum programming 13 languages Add topic

