Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Formal definition 2 Example 3 Use Toggle Use subsection 3.1 Infinite asymptotics 3.2 Infinitesimal asymptotics 4 Properties Toggle Properties subsection 4.1 Product 4.2 Sum 4.3 Multiplication by a constant 5 Multiple variables 6 Matters of notation Toggle Matters of notation subsection 6.1 Equals sign 6.2 Other arithmetic operators 6.2.1 Example 6.3 Multiple uses 6.4 Typesetting 7 Orders of common functions 8 Related asymptotic notations Toggle Related asymptotic notations subsection 8.1 Little-o notation 8.2 Big Omega notation 8.2.1 The Hardy–Littlewood definition 8.2.1.1 Simple examples 8.2.2 The Knuth definition 8.3 Family of Bachmann–Landau notations 8.4 Use in computer science 8.5 Other notation 8.6 Extensions to the Bachmann–Landau notations 9 Generalizations and related usages 10 History (Bachmann–Landau, Hardy, and Vinogradov notations) 11 See also 12 References and notes Toggle References and notes subsection 12.1 Notes 13 Further reading 14 External links Toggle the table of contents Big O notation 37 languages العربية Azərbaycanca বাংলা Беларуская Català Čeština Deutsch Español Esperanto Euskara فارسی Français Galego 한국어 हिन्दी Bahasa Indonesia Italiano עברית ქართული Magyar Nederlands 日本語 Norsk bokmål Polski Português Română Русский Simple English Slovenščina Српски / srpski Svenska ไทย Türkçe Українська Tiếng Việt 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Describes limiting behavior of a function Example of Big O notation: f ( x ) = O ( g ( x ) ) {\displaystyle {\color {red}f(x)}=O({\color {blue}g(x)})} as x → → ∞ ∞ {\displaystyle x\to \infty } since there exists M > 0 {\displaystyle M>0} (e.g., M = 1 {\displaystyle M=1} ) and x 0 {\displaystyle x_{0}} (e.g., x 0 = 5 {\displaystyle x_{0}=5} ) such that 0 ≤ ≤ f ( x ) ≤ ≤ M g ( x ) {\displaystyle 0\leq {\color {red}f(x)}\leq M{\color {blue}g(x)}} whenever x ≥ ≥ x 0 {\displaystyle x\geq x_{0}} .

Fit approximation Concepts Orders of approximation Scale analysis Big O notation Curve fitting False precision Significant figures Other fundamentals Approximation Generalization error Taylor polynomial Scientific modelling v t e Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. Big O is a member of a family of notations invented by German mathematicians Paul Bachmann , [ 1 ] Edmund Landau , [ 2 ] and others, collectively called Bachmann–Landau notation or asymptotic notation .  The letter O was chosen by Bachmann to stand for Ordnung , meaning the order of approximation .

In computer science , big O notation is used to classify algorithms according to how their run time or space requirements [ a ] grow as the input size grows.

[ 3 ] In analytic number theory , big O notation is often used to express a bound on the difference between an arithmetical function and a better understood approximation; one well-known example is the remainder term in the prime number theorem . Big O notation is also used in many other fields to provide similar estimates.

Big O notation characterizes functions according to their growth rates: different functions with the same asymptotic growth rate may be represented using the same O notation. The letter O is used because the growth rate of a function is also referred to as the order of the function .  A description of a function in terms of big O notation usually only provides an upper bound on the growth rate of the function.

Associated with big O notation are several related notations, using the symbols o {\displaystyle o} , Ω Ω {\displaystyle \Omega } , ω ω {\displaystyle \omega } , and Θ Θ {\displaystyle \Theta } to describe other kinds of bounds on asymptotic growth rates.

[ 3 ] Formal definition [ edit ] Let f , {\displaystyle f,} the function to be estimated, be a real or complex valued function, and let g , {\displaystyle g,} the comparison function, be a real valued function. Let both functions be defined on some unbounded subset of the positive real numbers , and g ( x ) {\displaystyle g(x)} be non-zero (often, but not necessarily, strictly positive) for all large enough values of x .

{\displaystyle x.} [ 4 ] One writes f ( x ) = O ( g ( x ) ) as x → → ∞ ∞ {\displaystyle f(x)=O{\bigl (}g(x){\bigr )}\quad {\text{ as }}x\to \infty } and it is read " f ( x ) {\displaystyle f(x)} is big O of g ( x ) {\displaystyle g(x)} " or more often " f ( x ) {\displaystyle f(x)} is of the order of g ( x ) {\displaystyle g(x)} " if the absolute value of f ( x ) {\displaystyle f(x)} is at most a positive constant multiple of the absolute value of g ( x ) {\displaystyle g(x)} for all sufficiently large values of x .

{\displaystyle x.} That is, f ( x ) = O ( g ( x ) ) {\displaystyle f(x)=O{\bigl (}g(x){\bigr )}} if there exists a positive real number M {\displaystyle M} and a real number x 0 {\displaystyle x_{0}} such that | f ( x ) | ≤ ≤ M | g ( x ) | for all x ≥ ≥ x 0 .

{\displaystyle |f(x)|\leq M\ |g(x)|\quad {\text{ for all }}x\geq x_{0}~.} In many contexts, the assumption that we are interested in the growth rate as the variable x {\displaystyle \ x\ } goes to infinity or to zero is left unstated, and one writes more simply that f ( x ) = O ( g ( x ) ) .

{\displaystyle f(x)=O{\bigl (}g(x){\bigr )}.} The notation can also be used to describe the behavior of f {\displaystyle f} near some real number a {\displaystyle a} (often, a = 0 {\displaystyle a=0} ): we say f ( x ) = O ( g ( x ) ) as x → → a {\displaystyle f(x)=O{\bigl (}g(x){\bigr )}\quad {\text{ as }}\ x\to a} if there exist positive numbers δ δ {\displaystyle \delta } and M {\displaystyle M} such that for all defined x {\displaystyle x} with 0 < | x − − a | < δ δ , {\displaystyle 0<|x-a|<\delta ,} | f ( x ) | ≤ ≤ M | g ( x ) | .

{\displaystyle |f(x)|\leq M|g(x)|.} As g ( x ) {\displaystyle g(x)} is non-zero for adequately large (or small) values of x , {\displaystyle x,} both of these definitions can be unified using the limit superior : f ( x ) = O ( g ( x ) ) as x → → a {\displaystyle f(x)=O{\bigl (}g(x){\bigr )}\quad {\text{ as }}\ x\to a} if lim sup x → → a | f ( x ) | | g ( x ) | < ∞ ∞ .

{\displaystyle \limsup _{x\to a}{\frac {\left|f(x)\right|}{\left|g(x)\right|}}<\infty .} And in both of these definitions the limit point a {\displaystyle a} (whether ∞ ∞ {\displaystyle \infty } or not) is a cluster point of the domains of f {\displaystyle f} and g , {\displaystyle g,} i. e., in every neighbourhood of a {\displaystyle a} there have to be infinitely many points in common. Moreover, as pointed out in the article about the limit inferior and limit superior , the lim sup x → → a {\displaystyle \textstyle \limsup _{x\to a}} (at least on the extended real number line ) always exists.

In computer science, a slightly more restrictive definition is common: f {\displaystyle f} and g {\displaystyle g} are both required to be functions from some unbounded subset of the positive integers to the nonnegative real numbers; then f ( x ) = O ( g ( x ) ) {\displaystyle f(x)=O{\bigl (}g(x){\bigr )}} if there exist positive integer numbers M {\displaystyle M} and n 0 {\displaystyle n_{0}} such that | f ( n ) | ≤ ≤ M | g ( n ) | {\displaystyle |f(n)|\leq M|g(n)|} for all n ≥ ≥ n 0 .

{\displaystyle n\geq n_{0}.} [ 5 ] Example [ edit ] In typical usage the O {\displaystyle O} notation is asymptotical, that is, it refers to very large x {\displaystyle x} .  In this setting, the contribution of the terms that grow "most quickly" will eventually make the other ones irrelevant. As a result, the following simplification rules can be applied: If f ( x ) {\displaystyle f(x)} is a sum of several terms, if there is one with largest growth rate, it can be kept, and all others omitted.

If f ( x ) {\displaystyle f(x)} is a product of several factors, any constants (factors in the product that do not depend on x {\displaystyle x} ) can be omitted.

For example, let f ( x ) = 6 x 4 − − 2 x 3 + 5 {\displaystyle f(x)=6x^{4}-2x^{3}+5} , and suppose we wish to simplify this function, using O {\displaystyle O} notation, to describe its growth rate as x → → ∞ ∞ {\displaystyle x\rightarrow \infty } . This function is the sum of three terms: 6 x 4 {\displaystyle 6x^{4}} , − − 2 x 3 {\displaystyle -2x^{3}} , and 5 {\displaystyle 5} . Of these three terms, the one with the highest growth rate is the one with the largest exponent as a function of x {\displaystyle x} , namely 6 x 4 {\displaystyle 6x^{4}} . Now one may apply the second rule: 6 x 4 {\displaystyle 6x^{4}} is a product of 6 {\displaystyle 6} and x 4 {\displaystyle x^{4}} in which the first factor does not depend on x {\displaystyle x} . Omitting this factor results in the simplified form x 4 {\displaystyle x^{4}} . Thus, we say that f ( x ) {\displaystyle f(x)} is a "big O" of x 4 {\displaystyle x^{4}} . Mathematically, we can write f ( x ) = O ( x 4 ) {\displaystyle f(x)=O(x^{4})} . One may confirm this calculation using the formal definition: let f ( x ) = 6 x 4 − − 2 x 3 + 5 {\displaystyle f(x)=6x^{4}-2x^{3}+5} and g ( x ) = x 4 {\displaystyle g(x)=x^{4}} . Applying the formal definition from above, the statement that f ( x ) = O ( x 4 ) {\displaystyle f(x)=O(x^{4})} is equivalent to its expansion, | f ( x ) | ≤ ≤ M x 4 {\displaystyle |f(x)|\leq Mx^{4}} for some suitable choice of a real number x 0 {\displaystyle x_{0}} and a positive real number M {\displaystyle M} and for all x > x 0 {\displaystyle x>x_{0}} . To prove this, let x 0 = 1 {\displaystyle x_{0}=1} and M = 13 {\displaystyle M=13} . Then, for all x > x 0 {\displaystyle x>x_{0}} : | 6 x 4 − − 2 x 3 + 5 | ≤ ≤ 6 x 4 + | − − 2 x 3 | + 5 ≤ ≤ 6 x 4 + 2 x 4 + 5 x 4 = 13 x 4 {\displaystyle {\begin{aligned}|6x^{4}-2x^{3}+5|&\leq 6x^{4}+|-2x^{3}|+5\\&\leq 6x^{4}+2x^{4}+5x^{4}\\&=13x^{4}\end{aligned}}} so | 6 x 4 − − 2 x 3 + 5 | ≤ ≤ 13 x 4 .

{\displaystyle |6x^{4}-2x^{3}+5|\leq 13x^{4}.} Use [ edit ] Big O notation has two main areas of application: In mathematics , it is commonly used to describe how closely a finite series approximates a given function , especially in the case of a truncated Taylor series or asymptotic expansion .

In computer science , it is useful in the analysis of algorithms .

[ 3 ] In both applications, the function g ( x ) {\displaystyle g(x)} appearing within the O ( ⋅ ⋅ ) {\displaystyle O(\cdot )} is typically chosen to be as simple as possible, omitting constant factors and lower order terms.

There are two formally close, but noticeably different, usages of this notation: [ citation needed ] infinite asymptotics infinitesimal asymptotics.

This distinction is only in application and not in principle, however—the formal definition for the "big O" is the same for both cases, only with different limits for the function argument.

[ original research?

] Infinite asymptotics [ edit ] Graphs of functions commonly used in the analysis of algorithms, showing the number of operations N {\displaystyle N} versus input size n {\displaystyle n} for each function Big O notation is useful when analyzing algorithms for efficiency. For example, the time (or the number of steps) it takes to complete a problem of size n {\displaystyle n} might be found to be T ( n ) = 4 n 2 − − 2 n + 2 {\displaystyle T(n)=4n^{2}-2n+2} . As n {\displaystyle n} grows large, the n 2 {\displaystyle n^{2}} term will come to dominate, so that all other terms can be neglected—for instance when n = 500 {\displaystyle n=500} , the term 4 n 2 {\displaystyle 4n^{2}} is 1000 times as large as the 2 n {\displaystyle 2n} term. Ignoring the latter would have negligible effect on the expression's value for most purposes. Further, the coefficients become irrelevant if we compare to any other order of expression, such as an expression containing a term n 3 {\displaystyle n^{3}} or n 4 {\displaystyle n^{4}} . Even if T ( n ) = 1000000 n 2 {\displaystyle T(n)=1000000n^{2}} , if U ( n ) = n 3 {\displaystyle U(n)=n^{3}} , the latter will always exceed the former once n grows larger than 1000000 {\displaystyle 1000000} , viz.

T ( 1000000 ) = 1000000 3 = U ( 1000000 ) {\displaystyle T(1000000)=1000000^{3}=U(1000000)} . Additionally, the number of steps depends on the details of the machine model on which the algorithm runs, but different types of machines typically vary by only a constant factor in the number of steps needed to execute an algorithm. So the big O notation captures what remains: we write either T ( n ) = O ( n 2 ) {\displaystyle T(n)=O(n^{2})} or T ( n ) ∈ ∈ O ( n 2 ) {\displaystyle T(n)\in O(n^{2})} and say that the algorithm has order of n 2 time complexity. The sign " = " is not meant to express "is equal to" in its normal mathematical sense, but rather a more colloquial "is", so the second expression is sometimes considered more accurate (see the " Equals sign " discussion below) while the first is considered by some as an abuse of notation .

[ 6 ] Infinitesimal asymptotics [ edit ] Big O can also be used to describe the error term in an approximation to a mathematical function. The most significant terms are written explicitly, and then the least-significant terms are summarized in a single big O term.  Consider, for example, the exponential series and two expressions of it that are valid when x is small: e x = 1 + x + x 2 2 !

+ x 3 3 !

+ x 4 4 !

+ ⋯ ⋯ for all finite x = 1 + x + x 2 2 + O ( x 3 ) as x → → 0 = 1 + x + O ( x 2 ) as x → → 0 {\displaystyle {\begin{aligned}e^{x}&=1+x+{\frac {x^{2}}{2!}}+{\frac {x^{3}}{3!}}+{\frac {x^{4}}{4!}}+\dotsb &&{\text{for all finite }}x\\[4pt]&=1+x+{\frac {x^{2}}{2}}+O(x^{3})&&{\text{as }}x\to 0\\[4pt]&=1+x+O(x^{2})&&{\text{as }}x\to 0\end{aligned}}} The middle expression (the one with O ( x 3 ) {\displaystyle O(x^{3})} ) means the absolute-value of the error e x − − ( 1 + x + x 2 2 ) {\displaystyle e^{x}-(1+x+{\frac {x^{2}}{2}})} is at most some constant times | x 3 | {\displaystyle |x^{3}|} when x {\displaystyle x} is close enough to 0 {\displaystyle 0} .

Properties [ edit ] If the function f can be written as a finite sum of other functions, then the fastest growing one determines the order of f ( n ) . For example, f ( n ) = 9 log ⁡ ⁡ n + 5 ( log ⁡ ⁡ n ) 4 + 3 n 2 + 2 n 3 = O ( n 3 ) as n → → ∞ ∞ .

{\displaystyle f(n)=9\log n+5(\log n)^{4}+3n^{2}+2n^{3}=O(n^{3})\qquad {\text{as }}n\to \infty .} In particular, if a function may be bounded by a polynomial in n , then as n tends to infinity , one may disregard lower-order terms of the polynomial. The sets O ( n c ) and O ( c n ) are very different. If c is greater than one, then the latter grows much faster. A function that grows faster than n c for any c is called superpolynomial .  One that grows more slowly than any exponential function of the form c n is called subexponential . An algorithm can require time that is both superpolynomial and subexponential; examples of this include the fastest known algorithms for integer factorization and the function n log n .

We may ignore any powers of n inside of the logarithms. The set O (log n ) is exactly the same as O (log( n c )) . The logarithms differ only by a constant factor (since log( n c ) = c log n ) and thus the big O notation ignores that. Similarly, logs with different constant bases are equivalent. On the other hand, exponentials with different bases are not of the same order. For example, 2 n and 3 n are not of the same order.

Changing units may or may not affect the order of the resulting algorithm. Changing units is equivalent to multiplying the appropriate variable by a constant wherever it appears. For example, if an algorithm runs in the order of n 2 , replacing n by cn means the algorithm runs in the order of c 2 n 2 , and the big O notation ignores the constant c 2 . This can be written as c 2 n 2 = O( n 2 ) . If, however, an algorithm runs in the order of 2 n , replacing n with cn gives 2 cn = (2 c ) n . This is not equivalent to 2 n in general. Changing variables may also affect the order of the resulting algorithm. For example, if an algorithm's run time is O ( n ) when measured in terms of the number n of digits of an input number x , then its run time is O (log x ) when measured as a function of the input number x itself, because n = O (log x ) .

Product [ edit ] f 1 = O ( g 1 ) and f 2 = O ( g 2 ) ⇒ ⇒ f 1 f 2 = O ( g 1 g 2 ) {\displaystyle f_{1}=O(g_{1}){\text{ and }}f_{2}=O(g_{2})\Rightarrow f_{1}f_{2}=O(g_{1}g_{2})} f ⋅ ⋅ O ( g ) = O ( f g ) {\displaystyle f\cdot O(g)=O(fg)} Sum [ edit ] If f 1 = O ( g 1 ) {\displaystyle f_{1}=O(g_{1})} and f 2 = O ( g 2 ) {\displaystyle f_{2}=O(g_{2})} then f 1 + f 2 = O ( max ( | g 1 | , | g 2 | ) ) {\displaystyle f_{1}+f_{2}=O(\max(|g_{1}|,|g_{2}|))} . It follows that if f 1 = O ( g ) {\displaystyle f_{1}=O(g)} and f 2 = O ( g ) {\displaystyle f_{2}=O(g)} then f 1 + f 2 ∈ ∈ O ( g ) {\displaystyle f_{1}+f_{2}\in O(g)} .

Multiplication by a constant [ edit ] Let k be a nonzero constant. Then O ( | k | ⋅ ⋅ g ) = O ( g ) {\displaystyle O(|k|\cdot g)=O(g)} .  In other words, if f = O ( g ) {\displaystyle f=O(g)} , then k ⋅ ⋅ f = O ( g ) .

{\displaystyle k\cdot f=O(g).} Multiple variables [ edit ] Big O (and little o, Ω, etc.) can also be used with multiple variables. To define big O formally for multiple variables, suppose f {\displaystyle f} and g {\displaystyle g} are two functions defined on some subset of R n {\displaystyle \mathbb {R} ^{n}} . We say f ( x ) is O ( g ( x ) ) as x → → ∞ ∞ {\displaystyle f(\mathbf {x} ){\text{ is }}O(g(\mathbf {x} ))\quad {\text{ as }}\mathbf {x} \to \infty } if and only if there exist constants M {\displaystyle M} and C > 0 {\displaystyle C>0} such that | f ( x ) | ≤ ≤ C | g ( x ) | {\displaystyle |f(\mathbf {x} )|\leq C|g(\mathbf {x} )|} for all x {\displaystyle \mathbf {x} } with x i ≥ ≥ M {\displaystyle x_{i}\geq M} for some i .

{\displaystyle i.} [ 7 ] Equivalently, the condition that x i ≥ ≥ M {\displaystyle x_{i}\geq M} for some i {\displaystyle i} can be written ‖ ‖ x ‖ ‖ ∞ ∞ ≥ ≥ M {\displaystyle \|\mathbf {x} \|_{\infty }\geq M} , where ‖ ‖ x ‖ ‖ ∞ ∞ {\displaystyle \|\mathbf {x} \|_{\infty }} denotes the Chebyshev norm . For example, the statement f ( n , m ) = n 2 + m 3 + O ( n + m ) as n , m → → ∞ ∞ {\displaystyle f(n,m)=n^{2}+m^{3}+O(n+m)\quad {\text{ as }}n,m\to \infty } asserts that there exist constants C and M such that | f ( n , m ) − − ( n 2 + m 3 ) | ≤ ≤ C | n + m | {\displaystyle |f(n,m)-(n^{2}+m^{3})|\leq C|n+m|} whenever either m ≥ ≥ M {\displaystyle m\geq M} or n ≥ ≥ M {\displaystyle n\geq M} holds.  This definition allows all of the coordinates of x {\displaystyle \mathbf {x} } to increase to infinity. In particular, the statement f ( n , m ) = O ( n m ) as n , m → → ∞ ∞ {\displaystyle f(n,m)=O(n^{m})\quad {\text{ as }}n,m\to \infty } (i.e., ∃ ∃ C ∃ ∃ M ∀ ∀ n ∀ ∀ m ⋯ ⋯ {\displaystyle \exists C\,\exists M\,\forall n\,\forall m\,\cdots } ) is quite different from ∀ ∀ m : : f ( n , m ) = O ( n m ) as n → → ∞ ∞ {\displaystyle \forall m\colon ~f(n,m)=O(n^{m})\quad {\text{ as }}n\to \infty } (i.e., ∀ ∀ m ∃ ∃ C ∃ ∃ M ∀ ∀ n ⋯ ⋯ {\displaystyle \forall m\,\exists C\,\exists M\,\forall n\,\cdots } ).

Under this definition, the subset on which a function is defined is significant when generalizing statements from the univariate setting to the multivariate setting. For example, if f ( n , m ) = 1 {\displaystyle f(n,m)=1} and g ( n , m ) = n {\displaystyle g(n,m)=n} , then f ( n , m ) = O ( g ( n , m ) ) {\displaystyle f(n,m)=O(g(n,m))} if we restrict f {\displaystyle f} and g {\displaystyle g} to [ 1 , ∞ ∞ ) 2 {\displaystyle [1,\infty )^{2}} , but not if they are defined on [ 0 , ∞ ∞ ) 2 {\displaystyle [0,\infty )^{2}} .

This is not the only generalization of big O to multivariate functions, and in practice, there is some inconsistency in the choice of definition.

[ 8 ] Matters of notation [ edit ] Equals sign [ edit ] The statement " f ( x ) is O [ g ( x )] " as defined above is usually written as f ( x ) = O [ g ( x )] . Some consider this to be an abuse of notation , since the use of the equals sign could be misleading as it suggests a symmetry that this statement does not have. As de Bruijn says, O [ x ] = O [ x 2 ] is true but O [ x 2 ] = O [ x ] is not.

[ 9 ] Knuth describes such statements as "one-way equalities", since if the sides could be reversed, "we could deduce ridiculous things like n = n 2 from the identities n = O [ n 2 ] and n 2 = O [ n 2 ] ".

[ 10 ] In another letter, Knuth also pointed out that [ 11 ] the equality sign is not symmetric with respect to such notations [as, in this notation,] mathematicians customarily use the '=' sign as they use the word 'is' in English: Aristotle is a man, but a man isn't necessarily Aristotle.

For these reasons, it would be more precise to use set notation and write f ( x ) ∈ O [ g ( x )] –  read as: " f ( x ) is an element of O [ g ( x )] ", or " f ( x ) is in the set O [ g ( x )] " –  thinking of O [ g ( x )] as the class of all functions h ( x ) such that | h ( x ) | ≤ C | g ( x ) | for some positive real number C .

[ 10 ] However, the use of the equals sign is customary.

[ 9 ] [ 10 ] Other arithmetic operators [ edit ] Big O notation can also be used in conjunction with other arithmetic operators in more complicated equations. For example, h ( x ) + O ( f ( x )) denotes the collection of functions having the growth of h ( x ) plus a part whose growth is limited to that of f ( x ) . Thus, g ( x ) = h ( x ) + O ( f ( x ) ) {\displaystyle g(x)=h(x)+O(f(x))} expresses the same as g ( x ) − − h ( x ) = O ( f ( x ) ) .

{\displaystyle g(x)-h(x)=O(f(x)).} Example [ edit ] Suppose an algorithm is being developed to operate on a set of n elements. Its developers are interested in finding a function T ( n ) that will express how long the algorithm will take to run (in some arbitrary measurement of time) in terms of the number of elements in the input set. The algorithm works by first calling a subroutine to sort the elements in the set and then perform its own operations. The sort has a known time complexity of O ( n 2 ) , and after the subroutine runs the algorithm must take an additional 55 n 3 + 2 n + 10 steps before it terminates.  Thus the overall time complexity of the algorithm can be expressed as T ( n ) = 55 n 3 + O ( n 2 ) . Here the terms 2 n + 10 are subsumed within the faster-growing O ( n 2 ) .  Again, this usage disregards some of the formal meaning of the " = " symbol, but it does allow one to use the big O notation as a kind of convenient placeholder.

Multiple uses [ edit ] In more complicated usage, O (·) can appear in different places in an equation, even several times on each side. For example, the following are true for n → → ∞ ∞ {\displaystyle n\to \infty } : ( n + 1 ) 2 = n 2 + O ( n ) , ( n + O ( n 1 / 2 ) ) ⋅ ⋅ ( n + O ( log ⁡ ⁡ n ) ) 2 = n 3 + O ( n 5 / 2 ) , n O ( 1 ) = O ( e n ) .

{\displaystyle {\begin{aligned}(n+1)^{2}&=n^{2}+O(n),\\(n+O(n^{1/2}))\cdot (n+O(\log n))^{2}&=n^{3}+O(n^{5/2}),\\n^{O(1)}&=O(e^{n}).\end{aligned}}} The meaning of such statements is as follows: for any functions which satisfy each O (·) on the left side, there are some functions satisfying each O (·) on the right side, such that substituting all these functions into the equation makes the two sides equal. For example, the third equation above means: "For any function f ( n ) = O (1) , there is some function g ( n ) = O ( e n ) such that n f ( n ) = g ( n ) ". In terms of the "set notation" above, the meaning is that the class of functions represented by the left side is a subset of the class of functions represented by the right side. In this use the " = " is a formal symbol that unlike the usual use of " = " is not a symmetric relation . Thus for example n O (1) = O ( e n ) does not imply the false statement O ( e n ) = n O (1) .

Typesetting [ edit ] Big O is typeset as an italicized uppercase " O " , as in the following example: O ( n 2 ) {\displaystyle O(n^{2})} .

[ 12 ] [ 13 ] In TeX , it is produced by simply typing 'O' inside math mode.  Unlike Greek-named Bachmann–Landau notations, it needs no special symbol. However, some authors use the calligraphic variant O {\displaystyle {\mathcal {O}}} instead.

[ 14 ] [ 15 ] Orders of common functions [ edit ] Further information: Time complexity § Table of common time complexities "O(1)" redirects here. For the quasicoherent sheaf, see Proj construction § The twisting sheaf of Serre .

Here is a list of classes of functions that are commonly encountered when analyzing the running time of an algorithm.  In each case, c is a positive constant and n increases without bound. The slower-growing functions are generally listed first.

Notation Name Example O ( 1 ) {\displaystyle O(1)} constant Finding the median value for a sorted array of numbers; Calculating ( − − 1 ) n {\displaystyle (-1)^{n}} ; Using a constant-size lookup table O ( α α ( n ) ) {\displaystyle O(\alpha (n))} inverse Ackermann function Amortized complexity per operation for the Disjoint-set data structure O ( log ⁡ ⁡ log ⁡ ⁡ n ) {\displaystyle O(\log \log n)} double logarithmic Average number of comparisons spent finding an item using interpolation search in a sorted array of uniformly distributed values O ( log ⁡ ⁡ n ) {\displaystyle O(\log n)} logarithmic Finding an item in a sorted array with a binary search or a balanced search tree as well as all operations in a binomial heap O ( ( log ⁡ ⁡ n ) c ) {\displaystyle O((\log n)^{c})} c > 1 {\textstyle c>1} polylogarithmic Matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine .

O ( n c ) {\displaystyle O(n^{c})} 0 < c < 1 {\textstyle 0<c<1} fractional power Searching in a k-d tree O ( n ) {\displaystyle O(n)} linear Finding an item in an unsorted list or in an unsorted array; adding two n -bit integers by ripple carry O ( n log ∗ ∗ ⁡ ⁡ n ) {\displaystyle O(n\log ^{*}n)} n log-star n Performing triangulation of a simple polygon using Seidel's algorithm, [ 16 ] where log ∗ ∗ ⁡ ⁡ ( n ) = { 0 , if n ≤ ≤ 1 1 + log ∗ ∗ ⁡ ⁡ ( log ⁡ ⁡ n ) , if n > 1 {\displaystyle \log ^{*}(n)={\begin{cases}0,&{\text{if }}n\leq 1\\1+\log ^{*}(\log n),&{\text{if }}n>1\end{cases}}} O ( n log ⁡ ⁡ n ) = O ( log ⁡ ⁡ n !

) {\displaystyle O(n\log n)=O(\log n!)} linearithmic , loglinear, quasilinear, or " n log n " Performing a fast Fourier transform ; fastest possible comparison sort ; heapsort and merge sort O ( n 2 ) {\displaystyle O(n^{2})} quadratic Multiplying two n -digit numbers by schoolbook multiplication ; simple sorting algorithms, such as bubble sort , selection sort and insertion sort ; (worst-case) bound on some usually faster sorting algorithms such as quicksort , Shellsort , and tree sort O ( n c ) {\displaystyle O(n^{c})} polynomial or algebraic Tree-adjoining grammar parsing; maximum matching for bipartite graphs ; finding the determinant with LU decomposition L n [ α α , c ] = e ( c + o ( 1 ) ) ( ln ⁡ ⁡ n ) α α ( ln ⁡ ⁡ ln ⁡ ⁡ n ) 1 − − α α {\displaystyle L_{n}[\alpha ,c]=e^{(c+o(1))(\ln n)^{\alpha }(\ln \ln n)^{1-\alpha }}} 0 < α α < 1 {\textstyle 0<\alpha <1} L-notation or sub-exponential Factoring a number using the quadratic sieve or number field sieve O ( c n ) {\displaystyle O(c^{n})} c > 1 {\textstyle c>1} exponential Finding the (exact) solution to the travelling salesman problem using dynamic programming ; determining if two logical statements are equivalent using brute-force search O ( n !

) {\displaystyle O(n!)} factorial Solving the travelling salesman problem via brute-force search; generating all unrestricted permutations of a poset ; finding the determinant with Laplace expansion ; enumerating all partitions of a set The statement f ( n ) = O ( n !

) {\displaystyle f(n)=O(n!)} is sometimes weakened to f ( n ) = O ( n n ) {\displaystyle f(n)=O\left(n^{n}\right)} to derive simpler formulas for asymptotic complexity. For any k > 0 {\displaystyle k>0} and c > 0 {\displaystyle c>0} , O ( n c ( log ⁡ ⁡ n ) k ) {\displaystyle O(n^{c}(\log n)^{k})} is a subset of O ( n c + ε ε ) {\displaystyle O(n^{c+\varepsilon })} for any ε ε > 0 {\displaystyle \varepsilon >0} , so may be considered as a polynomial with some bigger order.

Related asymptotic notations [ edit ] Big O is widely used in computer science. Together with some other related notations, it forms the family of Bachmann–Landau notations.

[ citation needed ] Little-o notation [ edit ] "Little o" redirects here. For the baseball player, see Omar Vizquel . For the Greek letter, see Omicron .

Intuitively, the assertion " f ( x ) is o ( g ( x )) " (read " f ( x ) is little-o of g ( x ) " or " f ( x ) is of inferior order to g ( x ) ") means that g ( x ) grows much faster than f ( x ) , or equivalently f ( x ) grows much slower than g ( x ) . As before, let f be a real or complex valued function and g a real valued function, both defined on some unbounded subset of the positive real numbers , such that g ( x ) {\displaystyle g(x)} is strictly positive for all large enough values of x . One writes f ( x ) = o ( g ( x ) ) as x → → ∞ ∞ {\displaystyle f(x)=o(g(x))\quad {\text{ as }}x\to \infty } if for every positive constant ε there exists a constant x 0 {\displaystyle x_{0}} such that | f ( x ) | ≤ ≤ ε ε g ( x ) for all x ≥ ≥ x 0 .

{\displaystyle |f(x)|\leq \varepsilon g(x)\quad {\text{ for all }}x\geq x_{0}.} [ 17 ] For example, one has 2 x = o ( x 2 ) {\displaystyle 2x=o(x^{2})} and 1 / x = o ( 1 ) , {\displaystyle 1/x=o(1),} both as x → → ∞ ∞ .

{\displaystyle x\to \infty .} The difference between the definition of the big-O notation and the definition of little-o is that while the former has to be true for at least one constant M , the latter must hold for every positive constant ε , however small.

[ 18 ] In this way, little-o notation makes a stronger statement than the corresponding big-O notation: every function that is little-o of g is also big-O of g , but not every function that is big-O of g is little-o of g . For example, 2 x 2 = O ( x 2 ) {\displaystyle 2x^{2}=O(x^{2})} but 2 x 2 ≠ ≠ o ( x 2 ) {\displaystyle 2x^{2}\neq o(x^{2})} .

If g ( x ) {\displaystyle g(x)} is nonzero, or at least becomes nonzero beyond a certain point, the relation f ( x ) = o ( g ( x ) ) {\displaystyle f(x)=o(g(x))} is equivalent to lim x → → ∞ ∞ f ( x ) g ( x ) = 0 {\displaystyle \lim _{x\to \infty }{\frac {f(x)}{g(x)}}=0} (and this is in fact how Landau [ 17 ] originally defined the little-o notation).

Little-o respects a number of arithmetic operations.  For example, if c is a nonzero constant and f = o ( g ) {\displaystyle f=o(g)} then c ⋅ ⋅ f = o ( g ) {\displaystyle c\cdot f=o(g)} , and if f = o ( F ) {\displaystyle f=o(F)} and g = o ( G ) {\displaystyle g=o(G)} then f ⋅ ⋅ g = o ( F ⋅ ⋅ G ) .

{\displaystyle f\cdot g=o(F\cdot G).} if f = o ( F ) {\displaystyle f=o(F)} and g = o ( G ) {\displaystyle g=o(G)} then f + g = o ( F + G ) {\displaystyle f+g=o(F+G)} It also satisfies a transitivity relation: if f = o ( g ) {\displaystyle f=o(g)} and g = o ( h ) {\displaystyle g=o(h)} then f = o ( h ) .

{\displaystyle f=o(h).} Little-o can also be generalized to the finite case: [ 19 ] f ( x ) = o ( g ( x ) ) as x → → x 0 {\displaystyle f(x)=o(g(x))\quad {\text{ as }}x\to x_{0}} if f ( x ) = α α ( x ) g ( x ) {\displaystyle f(x)=\alpha (x)g(x)} for some α α ( x ) {\displaystyle \alpha (x)} with lim x → → x 0 α α ( x ) = 0 {\displaystyle \lim _{x\to x_{0}}\alpha (x)=0} .

Or, if g ( x ) {\displaystyle g(x)} is nonzero in a neighbourhood around x 0 {\displaystyle x_{0}} : f ( x ) = o ( g ( x ) ) as x → → x 0 {\displaystyle f(x)=o(g(x))\quad {\text{ as }}x\to x_{0}} if lim x → → x 0 f ( x ) g ( x ) = 0 {\displaystyle \lim _{x\to x_{0}}{\frac {f(x)}{g(x)}}=0} .

This definition especially useful in the computation of limits using Taylor series . For example: sin ⁡ ⁡ x = x − − x 3 3 !

+ … … = x + o ( x 2 ) as x → → 0 {\displaystyle \sin x=x-{\frac {x^{3}}{3!}}+\ldots =x+o(x^{2}){\text{ as }}x\to 0} , so lim x → → 0 sin ⁡ ⁡ x x = lim x → → 0 x + o ( x 2 ) x = lim x → → 0 1 + o ( x ) = 1 {\displaystyle \lim _{x\to 0}{\frac {\sin x}{x}}=\lim _{x\to 0}{\frac {x+o(x^{2})}{x}}=\lim _{x\to 0}1+o(x)=1} Big Omega notation [ edit ] Another asymptotic notation is Ω Ω {\displaystyle \Omega } , read "big omega".

[ 20 ] There are two widespread and incompatible definitions of the statement f ( x ) = Ω Ω ( g ( x ) ) {\displaystyle f(x)=\Omega (g(x))} as x → → a , {\displaystyle x\to a,} where a is some real number, ∞ ∞ {\displaystyle \infty } ,  or − − ∞ ∞ {\displaystyle -\infty } , where f and g are real functions defined in a neighbourhood of a , and where g is positive in this neighbourhood.

The Hardy–Littlewood definition is used mainly in analytic number theory , and the Knuth definition mainly in computational complexity theory ; the definitions are not equivalent.

The Hardy–Littlewood definition [ edit ] In 1914 G.H. Hardy and J.E. Littlewood introduced the new symbol Ω Ω , {\displaystyle \ \Omega \ ,} [ 21 ] which is defined as follows: f ( x ) = Ω Ω ( g ( x ) ) {\displaystyle f(x)=\Omega {\bigl (}\ g(x)\ {\bigr )}\quad } as x → → ∞ ∞ {\displaystyle \quad x\to \infty \quad } if lim sup x → → ∞ ∞ | f ( x ) g ( x ) | > 0 .

{\displaystyle \quad \limsup _{x\to \infty }\ \left|{\frac {\ f(x)\ }{g(x)}}\right|>0~.} Thus f ( x ) = Ω Ω ( g ( x ) ) {\displaystyle ~f(x)=\Omega {\bigl (}\ g(x)\ {\bigr )}~} is the negation of f ( x ) = o ( g ( x ) ) .

{\displaystyle ~f(x)=o{\bigl (}\ g(x)\ {\bigr )}~.} In 1916 the same authors introduced the two new symbols Ω Ω R {\displaystyle \ \Omega _{R}\ } and Ω Ω L , {\displaystyle \ \Omega _{L}\ ,} defined as: [ 22 ] f ( x ) = Ω Ω R ( g ( x ) ) {\displaystyle f(x)=\Omega _{R}{\bigl (}\ g(x)\ {\bigr )}\quad } as x → → ∞ ∞ {\displaystyle \quad x\to \infty \quad } if lim sup x → → ∞ ∞ f ( x ) g ( x ) > 0 ; {\displaystyle \quad \limsup _{x\to \infty }\ {\frac {\ f(x)\ }{g(x)}}>0\ ;} f ( x ) = Ω Ω L ( g ( x ) ) {\displaystyle f(x)=\Omega _{L}{\bigl (}\ g(x)\ {\bigr )}\quad } as x → → ∞ ∞ {\displaystyle \quad x\to \infty \quad } if lim inf x → → ∞ ∞ f ( x ) g ( x ) < 0 .

{\displaystyle \quad ~\liminf _{x\to \infty }\ {\frac {\ f(x)\ }{g(x)}}<0~.} These symbols were used by E. Landau , with the same meanings, in 1924.

[ 23 ] Authors that followed Landau,  however, use a different notation for the same definitions: [ citation needed ] The symbol Ω Ω R {\displaystyle \ \Omega _{R}\ } has been replaced by the current notation Ω Ω + {\displaystyle \ \Omega _{+}\ } with the same definition, and Ω Ω L {\displaystyle \ \Omega _{L}\ } became Ω Ω − − .

{\displaystyle \ \Omega _{-}~.} These three symbols Ω Ω , Ω Ω + , Ω Ω − − , {\displaystyle \ \Omega \ ,\Omega _{+}\ ,\Omega _{-}\ ,} as well as f ( x ) = Ω Ω ± ± ( g ( x ) ) {\displaystyle \ f(x)=\Omega _{\pm }{\bigl (}\ g(x)\ {\bigr )}\ } (meaning that f ( x ) = Ω Ω + ( g ( x ) ) {\displaystyle \ f(x)=\Omega _{+}{\bigl (}\ g(x)\ {\bigr )}\ } and f ( x ) = Ω Ω − − ( g ( x ) ) {\displaystyle \ f(x)=\Omega _{-}{\bigl (}\ g(x)\ {\bigr )}\ } are both satisfied), are now currently used in analytic number theory .

[ 24 ] [ 25 ] Simple examples [ edit ] We have sin ⁡ ⁡ x = Ω Ω ( 1 ) {\displaystyle \sin x=\Omega (1)\quad } as x → → ∞ ∞ , {\displaystyle \quad x\to \infty \ ,} and more precisely sin ⁡ ⁡ x = Ω Ω ± ± ( 1 ) {\displaystyle \sin x=\Omega _{\pm }(1)\quad } as x → → ∞ ∞ .

{\displaystyle \quad x\to \infty ~.} We have 1 + sin ⁡ ⁡ x = Ω Ω ( 1 ) {\displaystyle 1+\sin x=\Omega (1)\quad } as x → → ∞ ∞ , {\displaystyle \quad x\to \infty \ ,} and more precisely 1 + sin ⁡ ⁡ x = Ω Ω + ( 1 ) {\displaystyle 1+\sin x=\Omega _{+}(1)\quad } as x → → ∞ ∞ ; {\displaystyle \quad x\to \infty \ ;} however 1 + sin ⁡ ⁡ x ≠ ≠ Ω Ω − − ( 1 ) {\displaystyle 1+\sin x\neq \Omega _{-}(1)\quad } as x → → ∞ ∞ .

{\displaystyle \quad x\to \infty ~.} The Knuth definition [ edit ] In 1976 Donald Knuth published a paper to justify his use of the Ω Ω {\displaystyle \Omega } -symbol to describe a stronger property.

[ 26 ] Knuth wrote: "For all the applications I have seen so far in computer science, a stronger requirement ... is much more appropriate". He defined f ( x ) = Ω Ω ( g ( x ) ) ⟺ ⟺ g ( x ) = O ( f ( x ) ) {\displaystyle f(x)=\Omega (g(x))\Longleftrightarrow g(x)=O(f(x))} with the comment: "Although I have changed Hardy and Littlewood's definition of Ω Ω {\displaystyle \Omega } , I feel justified in doing so because their definition is by no means in wide use, and because there are other ways to say what they want to say in the comparatively rare cases when their definition applies." [ 26 ] Family of Bachmann–Landau notations [ edit ] Notation Name [ 26 ] Description Formal definition Limit definition [ 27 ] [ 28 ] [ 29 ] [ 26 ] [ 21 ] f ( n ) = o ( g ( n ) ) {\displaystyle f(n)=o(g(n))} Small O; Small Oh; Little O; Little Oh f is dominated by g asymptotically (for any constant factor k {\displaystyle k} ) ∀ ∀ k > 0 ∃ ∃ n 0 ∀ ∀ n > n 0 : : | f ( n ) | ≤ ≤ k g ( n ) {\displaystyle \forall k>0\,\exists n_{0}\,\forall n>n_{0}\colon |f(n)|\leq k\,g(n)} lim n → → ∞ ∞ f ( n ) g ( n ) = 0 {\displaystyle \lim _{n\to \infty }{\frac {f(n)}{g(n)}}=0} f ( n ) = O ( g ( n ) ) {\displaystyle f(n)=O(g(n))} Big O; Big Oh; Big Omicron | f | {\displaystyle |f|} is asymptotically bounded above by g (up to constant factor k {\displaystyle k} ) ∃ ∃ k > 0 ∃ ∃ n 0 ∀ ∀ n > n 0 : : | f ( n ) | ≤ ≤ k g ( n ) {\displaystyle \exists k>0\,\exists n_{0}\,\forall n>n_{0}\colon |f(n)|\leq k\,g(n)} lim sup n → → ∞ ∞ | f ( n ) | g ( n ) < ∞ ∞ {\displaystyle \limsup _{n\to \infty }{\frac {\left|f(n)\right|}{g(n)}}<\infty } f ( n ) ≍ ≍ g ( n ) {\displaystyle f(n)\asymp g(n)} (Hardy's notation) or f ( n ) = Θ Θ ( g ( n ) ) {\displaystyle f(n)=\Theta (g(n))} (Knuth notation) Of the same order as (Hardy); Big Theta (Knuth) f is asymptotically bounded by g both above (with constant factor k 2 {\displaystyle k_{2}} ) and below (with constant factor k 1 {\displaystyle k_{1}} ) ∃ ∃ k 1 > 0 ∃ ∃ k 2 > 0 ∃ ∃ n 0 ∀ ∀ n > n 0 : : {\displaystyle \exists k_{1}>0\,\exists k_{2}>0\,\exists n_{0}\,\forall n>n_{0}\colon } k 1 g ( n ) ≤ ≤ f ( n ) ≤ ≤ k 2 g ( n ) {\displaystyle k_{1}\,g(n)\leq f(n)\leq k_{2}\,g(n)} f ( n ) = O ( g ( n ) ) {\displaystyle f(n)=O(g(n))} and g ( n ) = O ( f ( n ) ) {\displaystyle g(n)=O(f(n))} f ( n ) ∼ ∼ g ( n ) {\displaystyle f(n)\sim g(n)} Asymptotic equivalence f is equal to g asymptotically ∀ ∀ ε ε > 0 ∃ ∃ n 0 ∀ ∀ n > n 0 : : | f ( n ) g ( n ) − − 1 | < ε ε {\displaystyle \forall \varepsilon >0\,\exists n_{0}\,\forall n>n_{0}\colon \left|{\frac {f(n)}{g(n)}}-1\right|<\varepsilon } lim n → → ∞ ∞ f ( n ) g ( n ) = 1 {\displaystyle \lim _{n\to \infty }{\frac {f(n)}{g(n)}}=1} f ( n ) = Ω Ω ( g ( n ) ) {\displaystyle f(n)=\Omega (g(n))} Big Omega in complexity theory (Knuth) f is bounded below by g asymptotically ∃ ∃ k > 0 ∃ ∃ n 0 ∀ ∀ n > n 0 : : f ( n ) ≥ ≥ k g ( n ) {\displaystyle \exists k>0\,\exists n_{0}\,\forall n>n_{0}\colon f(n)\geq k\,g(n)} lim inf n → → ∞ ∞ f ( n ) g ( n ) > 0 {\displaystyle \liminf _{n\to \infty }{\frac {f(n)}{g(n)}}>0} f ( n ) = ω ω ( g ( n ) ) {\displaystyle f(n)=\omega (g(n))} Small Omega; Little Omega f dominates g asymptotically ∀ ∀ k > 0 ∃ ∃ n 0 ∀ ∀ n > n 0 : : f ( n ) > k g ( n ) {\displaystyle \forall k>0\,\exists n_{0}\,\forall n>n_{0}\colon f(n)>k\,g(n)} lim n → → ∞ ∞ f ( n ) g ( n ) = ∞ ∞ {\displaystyle \lim _{n\to \infty }{\frac {f(n)}{g(n)}}=\infty } f ( n ) = Ω Ω ( g ( n ) ) {\displaystyle f(n)=\Omega (g(n))} Big Omega in number theory (Hardy–Littlewood) | f | {\displaystyle |f|} is not dominated by g asymptotically ∃ ∃ k > 0 ∀ ∀ n 0 ∃ ∃ n > n 0 : : | f ( n ) | ≥ ≥ k g ( n ) {\displaystyle \exists k>0\,\forall n_{0}\,\exists n>n_{0}\colon |f(n)|\geq k\,g(n)} lim sup n → → ∞ ∞ | f ( n ) | g ( n ) > 0 {\displaystyle \limsup _{n\to \infty }{\frac {\left|f(n)\right|}{g(n)}}>0} The limit definitions assume g ( n ) > 0 {\displaystyle g(n)>0} for sufficiently large n {\displaystyle n} . The table is (partly) sorted from smallest to largest, in the sense that o , O , Θ Θ , ∼ ∼ , {\displaystyle o,O,\Theta ,\sim ,} (Knuth's version of) Ω Ω , ω ω {\displaystyle \Omega ,\omega } on functions correspond to < , ≤ ≤ , ≈ ≈ , = , {\displaystyle <,\leq ,\approx ,=,} ≥ ≥ , > {\displaystyle \geq ,>} on the real line [ 29 ] (the Hardy–Littlewood version of Ω Ω {\displaystyle \Omega } , however, doesn't correspond to any such description).

Computer science uses the big O {\displaystyle O} , big Theta Θ Θ {\displaystyle \Theta } , little o {\displaystyle o} , little omega ω ω {\displaystyle \omega } and Knuth's big Omega Ω Ω {\displaystyle \Omega } notations.

[ 30 ] Analytic number theory often uses the big O {\displaystyle O} , small o {\displaystyle o} , Hardy's ≍ ≍ {\displaystyle \asymp } , [ 31 ] Hardy–Littlewood's big Omega Ω Ω {\displaystyle \Omega } (with or without the +, − or ± subscripts) and ∼ ∼ {\displaystyle \sim } notations.

[ 24 ] The small omega ω ω {\displaystyle \omega } notation is not used as often in analysis.

[ 32 ] Use in computer science [ edit ] Further information: Analysis of algorithms Informally, especially in computer science, the big O notation often can be used somewhat differently to describe an asymptotic tight bound where using big Theta Θ notation might be more factually appropriate in a given context.

[ 33 ] For example, when considering a function T ( n ) = 73 n 3 + 22 n 2 + 58, all of the following are generally acceptable, but tighter bounds (such as numbers 2 and 3 below) are usually strongly preferred over looser bounds (such as number 1 below).

T ( n ) = O ( n 100 ) T ( n ) = O ( n 3 ) T ( n ) = Θ( n 3 ) The equivalent English statements are respectively: T ( n ) grows asymptotically no faster than n 100 T ( n ) grows asymptotically no faster than n 3 T ( n ) grows asymptotically as fast as n 3 .

So while all three statements are true, progressively more information is contained in each. In some fields, however, the big O notation (number 2 in the lists above) would be used more commonly than the big Theta notation (items numbered 3 in the lists above). For example, if T ( n ) represents the running time of a newly developed algorithm for input size n , the inventors and users of the algorithm might be more inclined to put an upper asymptotic bound on how long it will take to run without making an explicit statement about the lower asymptotic bound.

Other notation [ edit ] In their book Introduction to Algorithms , Cormen , Leiserson , Rivest and Stein consider the set of functions f which satisfy f ( n ) = O ( g ( n ) ) ( n → → ∞ ∞ ) .

{\displaystyle f(n)=O(g(n))\quad (n\to \infty )~.} In a correct notation this set can, for instance, be called O ( g ), where O ( g ) = { f : there exist positive constants c and n 0 such that 0 ≤ ≤ f ( n ) ≤ ≤ c g ( n ) for all n ≥ ≥ n 0 } .

{\displaystyle O(g)=\{f:{\text{there exist positive constants}}~c~{\text{and}}~n_{0}~{\text{such that}}~0\leq f(n)\leq cg(n){\text{ for all }}n\geq n_{0}\}.} [ 34 ] The authors state that the use of equality operator (=) to denote set membership rather than the set membership operator (∈) is an abuse of notation, but that doing so has advantages.

[ 6 ] Inside an equation or inequality, the use of asymptotic notation stands for an anonymous function in the set O ( g ), which eliminates lower-order terms, and helps to reduce inessential clutter in equations, for example: [ 35 ] 2 n 2 + 3 n + 1 = 2 n 2 + O ( n ) .

{\displaystyle 2n^{2}+3n+1=2n^{2}+O(n).} Extensions to the Bachmann–Landau notations [ edit ] Another notation sometimes used in computer science is Õ (read soft-O ), which hides polylogarithmic factors. There are two definitions in use: some authors use f ( n ) = Õ ( g ( n )) as shorthand for f ( n ) = O ( g ( n ) log k n ) for some k , while others use it as shorthand for f ( n ) = O ( g ( n ) log k g ( n )) .

[ 36 ] When g ( n ) is polynomial in n , there is no difference; however, the latter definition allows one to say, e.g. that n 2 n = O ~ ~ ( 2 n ) {\displaystyle n2^{n}={\tilde {O}}(2^{n})} while the former definition allows for log k ⁡ ⁡ n = O ~ ~ ( 1 ) {\displaystyle \log ^{k}n={\tilde {O}}(1)} for any constant k . Some authors write O * for the same purpose as the latter definition.

[ 37 ] Essentially, it is big O notation, ignoring logarithmic factors because the growth-rate effects of some other super-logarithmic function indicate a growth-rate explosion for large-sized input parameters that is more important to predicting bad run-time performance than the finer-point effects contributed by the logarithmic-growth factor(s). This notation is often used to obviate the "nitpicking" within growth-rates that are stated as too tightly bounded for the matters at hand (since log k n is always o ( n ε ) for any constant k and any ε > 0 ).

Also, the L notation , defined as L n [ α α , c ] = e ( c + o ( 1 ) ) ( ln ⁡ ⁡ n ) α α ( ln ⁡ ⁡ ln ⁡ ⁡ n ) 1 − − α α , {\displaystyle L_{n}[\alpha ,c]=e^{(c+o(1))(\ln n)^{\alpha }(\ln \ln n)^{1-\alpha }},} is convenient for functions that are between polynomial and exponential in terms of ln ⁡ ⁡ n {\displaystyle \ln n} .

Generalizations and related usages [ edit ] The generalization to functions taking values in any normed vector space is straightforward (replacing absolute values by norms), where f and g need not take their values in the same space. A generalization to functions g taking values in any topological group is also possible [ citation needed ] .
The "limiting process" x → x o can also be generalized by introducing an arbitrary filter base , i.e. to directed nets f and g . The o notation can be used to define derivatives and differentiability in quite general spaces, and also (asymptotical) equivalence of functions, f ∼ ∼ g ⟺ ⟺ ( f − − g ) ∈ ∈ o ( g ) {\displaystyle f\sim g\iff (f-g)\in o(g)} which is an equivalence relation and a more restrictive notion than the relationship " f is Θ( g )" from above. (It reduces to lim f / g = 1 if f and g are positive real valued functions.)  For example, 2 x is Θ( x ), but 2 x − x is not o ( x ).

History (Bachmann–Landau, Hardy, and Vinogradov notations) [ edit ] The symbol O was first introduced by number theorist Paul Bachmann in 1894, in the second volume of his book Analytische Zahlentheorie (" analytic number theory ").

[ 1 ] The number theorist Edmund Landau adopted it, and was thus inspired to introduce in 1909 the notation o; [ 2 ] hence both are now called Landau symbols. These notations were used in applied mathematics during the 1950s for asymptotic analysis.

[ 38 ] The symbol Ω Ω {\displaystyle \Omega } (in the sense "is not an o of") was introduced in 1914 by Hardy and Littlewood.

[ 21 ] Hardy and Littlewood also introduced in 1916 the symbols Ω Ω R {\displaystyle \Omega _{R}} ("right") and Ω Ω L {\displaystyle \Omega _{L}} ("left"), [ 22 ] precursors of the modern symbols Ω Ω + {\displaystyle \Omega _{+}} ("is not smaller than a small o of") and Ω Ω − − {\displaystyle \Omega _{-}} ("is not larger than a small o of"). Thus the Omega symbols (with their original meanings) are sometimes also referred to as "Landau symbols". This notation Ω Ω {\displaystyle \Omega } became commonly used in number theory at least since the 1950s.

[ 39 ] The symbol ∼ ∼ {\displaystyle \sim } , although it had been used before with different meanings, [ 29 ] was given its modern definition by  Landau in 1909 [ 40 ] and by Hardy in 1910.

[ 41 ] Just above on the same page of his tract Hardy defined the symbol ≍ ≍ {\displaystyle \asymp } , where f ( x ) ≍ ≍ g ( x ) {\displaystyle f(x)\asymp g(x)} means that both f ( x ) = O ( g ( x ) ) {\displaystyle f(x)=O(g(x))} and g ( x ) = O ( f ( x ) ) {\displaystyle g(x)=O(f(x))} are satisfied. The notation is still currently used in analytic number theory.

[ 42 ] [ 31 ] In his tract Hardy also proposed the symbol ≍ ≍ − − {\displaystyle \mathbin {\,\asymp \;\;\;\;\!\!\!\!\!\!\!\!\!\!\!\!\!-} } , where f ≍ ≍ − − g {\displaystyle f\mathbin {\,\asymp \;\;\;\;\!\!\!\!\!\!\!\!\!\!\!\!\!-} g} means that f ∼ ∼ K g {\displaystyle f\sim Kg} for some constant K ≠ 0 {\displaystyle K\not =0} .

In the 1970s the big O was popularized in computer science by Donald Knuth , who proposed the different notation f ( x ) = Θ Θ ( g ( x ) ) {\displaystyle f(x)=\Theta (g(x))} for Hardy's f ( x ) ≍ ≍ g ( x ) {\displaystyle f(x)\asymp g(x)} , and proposed a different definition for the Hardy and Littlewood Omega notation.

[ 26 ] Two other symbols coined by Hardy were (in terms of the modern O notation) f ≼ ≼ g ⟺ ⟺ f = O ( g ) {\displaystyle f\preccurlyeq g\iff f=O(g)} and f ≺ ≺ g ⟺ ⟺ f = o ( g ) ; {\displaystyle f\prec g\iff f=o(g);} (Hardy however never defined or used the notation ≺ ≺ ≺ ≺ {\displaystyle \prec \!\!\prec } , nor ≪ ≪ {\displaystyle \ll } , as it has been sometimes reported).
Hardy introduced the symbols ≼ ≼ {\displaystyle \preccurlyeq } and ≺ ≺ {\displaystyle \prec } (as well as the already mentioned other symbols) in his 1910 tract "Orders of Infinity", and made use of them only in three papers (1910–1913). In his nearly 400 remaining papers and books he consistently used the Landau symbols O and o.

Hardy's symbols ≼ ≼ {\displaystyle \preccurlyeq } and ≺ ≺ {\displaystyle \prec } (as well as ≍ ≍ − − {\displaystyle \mathbin {\,\asymp \;\;\;\;\!\!\!\!\!\!\!\!\!\!\!\!\!-} } ) are not used anymore. On the other hand, in the 1930s, [ 43 ] the Russian number theorist Ivan Matveyevich Vinogradov introduced his notation ≪ ≪ {\displaystyle \ll } , which  has been increasingly used in number theory instead of  the O {\displaystyle O} notation. We have f ≪ ≪ g ⟺ ⟺ f = O ( g ) , {\displaystyle f\ll g\iff f=O(g),} and frequently both notations are used in the same paper.

The big-O originally stands for "order of" ("Ordnung", Bachmann 1894), and is thus a Latin letter. Neither Bachmann nor Landau ever call it "Omicron". The symbol was much later on (1976) viewed by Knuth as a capital omicron , [ 26 ] probably in reference to his definition of the symbol Omega . The digit zero should not be used.

See also [ edit ] Asymptotic computational complexity Asymptotic expansion : Approximation of functions generalizing Taylor's formula Asymptotically optimal algorithm : A phrase frequently used to describe an algorithm that has an upper bound asymptotically within a constant of a lower bound for the problem Big O in probability notation : O p , o p Limit inferior and limit superior : An explanation of some of the limit notation used in this article Master theorem (analysis of algorithms) : For analyzing divide-and-conquer recursive algorithms using big O notation Nachbin's theorem : A precise method of bounding complex analytic functions so that the domain of convergence of integral transforms can be stated Order of approximation Order of accuracy Computational complexity of mathematical operations References and notes [ edit ] ^ a b Bachmann, Paul (1894).

Analytische Zahlentheorie [ Analytic Number Theory ] (in German). Vol. 2. Leipzig: Teubner.

^ a b Landau, Edmund (1909).

Handbuch der Lehre von der Verteilung der Primzahlen [ Handbook on the theory of the distribution of the primes ] (in German). Vol. 1. Leipzig: B. G. Teubner. p. 61.

Also see page 883 in vol. 2 of the book (not available from the link given).

^ a b c Cormen, Thomas H.

; Leiserson, Charles E.

; Rivest, Ronald L.

(1990). "Growth of Functions".

Introduction to Algorithms (1st ed.). MIT Press and McGraw-Hill. pp.

23– 41.

ISBN 978-0-262-53091-0 .

^ Landau, Edmund (1909).

Handbuch der Lehre von der Verteilung der Primzahlen [ Handbook on the theory of the distribution of the primes ] (in German). Leipzig: B.G. Teubner. p. 31.

^ Sipser, Michael (1997).

Introduction to the Theory of Computation . Boston, MA: PWS Publishing. p. 227, def. 7.2.

^ a b Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L. (2009).

Introduction to Algorithms (3rd ed.). Cambridge/MA: MIT Press. p.

45 .

ISBN 978-0-262-53305-8 .

Because θ ( g ( n )) is a set, we could write " f ( n ) ∈ θ ( g ( n ))" to indicate that f ( n ) is a member of θ ( g ( n )). Instead, we will usually write f ( n ) = θ ( g ( n )) to express the same notion. You might be confused because we abuse equality in this way, but we shall see later in this section that doing so has its advantages.

^ Cormen et al. (2009) , p. 53 ^ Howell, Rodney.

"On Asymptotic Notation with Multiple Variables" (PDF) .

Archived (PDF) from the original on 2015-04-24 . Retrieved 2015-04-23 .

^ a b de Bruijn, N.G.

(1958).

Asymptotic Methods in Analysis . Amsterdam: North-Holland. pp.

5– 7.

ISBN 978-0-486-64221-5 .

Archived from the original on 2023-01-17 . Retrieved 2021-09-15 .

{{ cite book }} : ISBN / Date incompatibility ( help ) ^ a b c Graham, Ronald ; Knuth, Donald ; Patashnik, Oren (1994).

Concrete Mathematics (2 ed.). Reading, Massachusetts: Addison–Wesley. p. 446.

ISBN 978-0-201-55802-9 .

Archived from the original on 2023-01-17 . Retrieved 2016-09-23 .

^ Donald Knuth (June–July 1998).

"Teach Calculus with Big O" (PDF) .

Notices of the American Mathematical Society .

45 (6): 687.

Archived (PDF) from the original on 2021-10-14 . Retrieved 2021-09-05 .

( Unabridged version Archived 2008-05-13 at the Wayback Machine ) ^ Donald E. Knuth, The art of computer programming. Vol. 1. Fundamental algorithms, third edition, Addison Wesley Longman, 1997.  Section 1.2.11.1.

^ Ronald L. Graham, Donald E. Knuth, and Oren Patashnik, Concrete Mathematics: A Foundation for Computer Science (2nd ed.) , Addison-Wesley, 1994. Section 9.2, p. 443.

^ Sivaram Ambikasaran and Eric Darve, An O ( N log ⁡ ⁡ N ) {\displaystyle {\mathcal {O}}(N\log N)} Fast Direct Solver for Partial Hierarchically Semi-Separable Matrices, J. Scientific Computing 57 (2013), no. 3, 477–501.

^ Saket Saurabh and Meirav Zehavi, ( k , n − − k ) {\displaystyle (k,n-k)} -Max-Cut: An O ∗ ∗ ( 2 p ) {\displaystyle {\mathcal {O}}^{*}(2^{p})} -Time Algorithm and a Polynomial Kernel, Algorithmica 80 (2018), no. 12, 3844–3860.

^ Seidel, Raimund (1991), "A Simple and Fast Incremental Randomized Algorithm for Computing Trapezoidal Decompositions and for Triangulating Polygons", Computational Geometry , 1 : 51– 64, CiteSeerX 10.1.1.55.5877 , doi : 10.1016/0925-7721(91)90012-4 ^ a b Landau, Edmund (1909).

Handbuch der Lehre von der Verteilung der Primzahlen [ Handbook on the theory of the distribution of the primes ] (in German). Leipzig: B. G. Teubner. p. 61.

^ Thomas H. Cormen et al., 2001, Introduction to Algorithms, Second Edition, Ch. 3.1 Archived 2009-01-16 at the Wayback Machine ^ Baratchart, L.; Grimm, J.; LeBlond, J.; Partington, J.R. (2003).

"Asymptotic estimates for interpolation and constrained approximation in H2 by diagonalization of Toeplitz operators" .

Integral Equations and Operator Theory .

45 (3): 269– 29.

doi : 10.1007/s000200300005 .

^ Cormen TH, Leiserson CE, Rivest RL, Stein C (2009).

Introduction to algorithms (3rd ed.). Cambridge, Mass.: MIT Press. p. 48.

ISBN 978-0-262-27083-0 .

OCLC 676697295 .

^ a b c Hardy, G.H.

; Littlewood, J.E.

(1914).

"Some problems of diophantine approximation: Part II. The trigonometrical series associated with the elliptic θ functions" .

Acta Mathematica .

37 : 225.

doi : 10.1007/BF02401834 .

Archived from the original on 2018-12-12 . Retrieved 2017-03-14 .

^ a b Hardy, G.H.

; Littlewood, J.E.

(1916). "Contribution to the theory of the Riemann zeta-function and the theory of the distribution of primes".

Acta Mathematica .

41 : 119– 196.

doi : 10.1007/BF02422942 .

^ Landau, E.

(1924). "Über die Anzahl der Gitterpunkte in gewissen Bereichen. IV" [On the number of grid points in known regions].

Nachr. Gesell. Wiss. Gött. Math-phys.

(in German): 137– 150.

^ a b Ivić, A.

(1985).

The Riemann Zeta-Function . John Wiley & Sons. chapter 9.

^ Tenenbaum, G.

(2015).

Introduction to Analytic and Probabilistic Number Theory . Providence, RI: American Mathematical Society. § I.5.

^ a b c d e f Knuth, Donald (April–June 1976).

"Big Omicron and big Omega and big Theta" .

SIGACT News .

8 (2): 18– 24.

doi : 10.1145/1008328.1008329 .

S2CID 5230246 .

^ Balcázar, José L.; Gabarró, Joaquim.

"Nonuniform complexity classes specified by lower and upper bounds" (PDF) .

RAIRO – Theoretical Informatics and Applications – Informatique Théorique et Applications .

23 (2): 180.

ISSN 0988-3754 .

Archived (PDF) from the original on 14 March 2017 . Retrieved 14 March 2017 – via Numdam.

^ Cucker, Felipe; Bürgisser, Peter (2013).

"A.1 Big Oh, Little Oh, and Other Comparisons" .

Condition: The Geometry of Numerical Algorithms . Berlin, Heidelberg: Springer. pp.

467– 468.

doi : 10.1007/978-3-642-38896-5 .

ISBN 978-3-642-38896-5 .

^ a b c Vitányi, Paul ; Meertens, Lambert (April 1985).

"Big Omega versus the wild functions" (PDF) .

ACM SIGACT News .

16 (4): 56– 59.

CiteSeerX 10.1.1.694.3072 .

doi : 10.1145/382242.382835 .

S2CID 11700420 .

Archived (PDF) from the original on 2016-03-10 . Retrieved 2017-03-14 .

^ Cormen, Thomas H.

; Leiserson, Charles E.

; Rivest, Ronald L.

; Stein, Clifford (2001) [1990].

Introduction to Algorithms (2nd ed.). MIT Press and McGraw-Hill. pp.

41– 50.

ISBN 0-262-03293-7 .

^ a b Gérald Tenenbaum, Introduction to analytic and probabilistic number theory, « Notation », page xxiii. American Mathematical Society, Providence RI, 2015.

^ for example it is omitted in: Hildebrand, A.J.

"Asymptotic Notations" (PDF) . Department of Mathematics.

Asymptotic Methods in Analysis . Math 595, Fall 2009. Urbana, IL: University of Illinois.

Archived (PDF) from the original on 14 March 2017 . Retrieved 14 March 2017 .

^ Cormen et al. (2009) , p. 64: "Many people continue to use the O -notation where the Θ-notation is more technically precise." ^ Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L. (2009).

Introduction to Algorithms (3rd ed.). Cambridge/MA: MIT Press. p. 47.

ISBN 978-0-262-53305-8 .

When we have only an asymptotic upper bound, we use O-notation. For a given function g ( n ), we denote by O ( g ( n )) (pronounced "big-oh of g of n " or sometimes just "oh of g of n ") the set of functions O ( g ( n )) = { f ( n ) : there exist positive constants c and n 0 such that 0 ≤ f ( n ) ≤ cg ( n ) for all n ≥ n 0 } ^ Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L. (2009).

Introduction to Algorithms (3rd ed.). Cambridge/MA: MIT Press. p.

49 .

ISBN 978-0-262-53305-8 .

When the asymptotic notation stands alone (that is, not within a larger formula) on the right-hand side of an equation (or inequality), as in n = O(n 2 ), we have already defined the equal sign to mean set membership: n ∈ O(n 2 ). In general, however, when asymptotic notation appears in a formula, we interpret it as standing for some anonymous function that we do not care to name. For example, the formula 2 n 2 + 3 n + 1 = 2 n 2 + θ ( n ) means that 2 n 2 + 3 n + 1 = 2 n 2 + f ( n ), where f ( n ) is some function in the set θ ( n ). In this case, we let f ( n ) = 3 n + 1, which is indeed in θ ( n ). Using asymptotic notation in this manner can help eliminate inessential detail and clutter in an equation.

^ Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2022).

Introduction to Algorithms (4th ed.). Cambridge, Mass.: The MIT Press. pp.

74– 75.

ISBN 9780262046305 .

^ Andreas Björklund and Thore Husfeldt and Mikko Koivisto (2009).

"Set partitioning via inclusion-exclusion" (PDF) .

SIAM Journal on Computing .

39 (2): 546– 563.

doi : 10.1137/070683933 .

Archived (PDF) from the original on 2022-02-03 . Retrieved 2022-02-03 .

See sect.2.3, p.551.

^ Erdelyi, A. (1956).

Asymptotic Expansions . Courier Corporation.

ISBN 978-0-486-60318-6 .

{{ cite book }} : ISBN / Date incompatibility ( help ) .

^ E. C. Titchmarsh, The Theory of the Riemann Zeta-Function (Oxford; Clarendon Press, 1951) ^ Landau, Edmund (1909).

Handbuch der Lehre von der Verteilung der Primzahlen [ Handbook on the theory of the distribution of the primes ] (in German). Leipzig: B. G. Teubner. p. 62.

^ Hardy, G. H.

(1910).

Orders of Infinity: The 'Infinitärcalcül' of Paul du Bois-Reymond .

Cambridge University Press . p. 2.

^ Hardy, G. H.; Wright, E. M.

(2008) [1st ed. 1938]. "1.6. Some notations".

An Introduction to the Theory of Numbers . Revised by D. R. Heath-Brown and J. H. Silverman , with a foreword by Andrew Wiles (6th ed.). Oxford: Oxford University Press.

ISBN 978-0-19-921985-8 .

^ See for instance "A new estimate for G ( n ) in Waring's problem" (Russian). Doklady Akademii Nauk SSSR 5, No 5-6 (1934), 249–253. Translated in English in: Selected works / Ivan Matveevič Vinogradov; prepared by the Steklov Mathematical Institute of the Academy of Sciences of the USSR on the occasion of his 90th birthday. Springer-Verlag, 1985.

Notes [ edit ] ^ Note that the "size" of the input [data stream] is typically used as an indication of -- [that is, it is assumed to "reflect"] -- how challenging a given instance is, of the problem to be solved. The amount of [execution] time, and the amount of [memory] space required to compute the answer, (or to "solve' the problem, whatever it is), are seen as indicating -- or "reflecting" -- the difficulty of that instance of the problem (along with, in some cases, [the 'related' issue, of] the power of the algorithm that is used by a certain program). For purposes of Computational complexity theory , Big O notation is used for [the "order of magnitude" of] all 3 of those: the size of the input [data stream], the amount of [execution] time required, and the amount of [memory] space required.

Further reading [ edit ] Hardy, G. H.

(1910).

Orders of Infinity: The 'Infinitärcalcül' of Paul du Bois-Reymond .

Cambridge University Press .

Knuth, Donald (1997). "1.2.11: Asymptotic Representations".

Fundamental Algorithms . The Art of Computer Programming. Vol. 1 (3rd ed.). Addison-Wesley.

ISBN 978-0-201-89683-1 .

Cormen, Thomas H.

; Leiserson, Charles E.

; Rivest, Ronald L.

; Stein, Clifford (2001). "3.1: Asymptotic notation".

Introduction to Algorithms (2nd ed.). MIT Press and McGraw-Hill.

ISBN 978-0-262-03293-3 .

Sipser, Michael (1997).

Introduction to the Theory of Computation . PWS Publishing. pp.

226 –228.

ISBN 978-0-534-94728-6 .

Avigad, Jeremy; Donnelly, Kevin (2004).

Formalizing O notation in Isabelle/HOL (PDF) . International Joint Conference on Automated Reasoning.

doi : 10.1007/978-3-540-25984-8_27 .

Black, Paul E. (11 March 2005). Black, Paul E. (ed.).

"big-O notation" .

Dictionary of Algorithms and Data Structures . U.S. National Institute of Standards and Technology . Retrieved December 16, 2006 .

Black, Paul E. (17 December 2004). Black, Paul E. (ed.).

"little-o notation" .

Dictionary of Algorithms and Data Structures . U.S. National Institute of Standards and Technology . Retrieved December 16, 2006 .

Black, Paul E. (17 December 2004). Black, Paul E. (ed.).

"Ω" .

Dictionary of Algorithms and Data Structures . U.S. National Institute of Standards and Technology . Retrieved December 16, 2006 .

Black, Paul E. (17 December 2004). Black, Paul E. (ed.).

"ω" .

Dictionary of Algorithms and Data Structures . U.S. National Institute of Standards and Technology . Retrieved December 16, 2006 .

Black, Paul E. (17 December 2004). Black, Paul E. (ed.).

"Θ" .

Dictionary of Algorithms and Data Structures . U.S. National Institute of Standards and Technology . Retrieved December 16, 2006 .

External links [ edit ] The Wikibook Data Structures has a page on the topic of: Big-O Notation Wikiversity solved a MyOpenMath problem using Big-O Notation Growth of sequences — OEIS (Online Encyclopedia of Integer Sequences) Wiki Introduction to Asymptotic Notations Big-O Notation – What is it good for An example of Big O in accuracy of central divided difference scheme for first derivative [ usurped ] A Gentle Introduction to Algorithm Complexity Analysis NewPP limit report
Parsed by mw‐web.codfw.main‐5f4c8b576f‐w4vjc
Cached time: 20250814092128
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 1.274 seconds
Real time usage: 1.506 seconds
Preprocessor visited node count: 10234/1000000
Revision size: 70134/2097152 bytes
Post‐expand include size: 136590/2097152 bytes
Template argument size: 13659/2097152 bytes
Highest expansion depth: 13/100
Expensive parser function count: 12/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 185663/5000000 bytes
Lua time usage: 0.637/10.000 seconds
Lua memory usage: 8727769/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  995.991      1 -total
 41.56%  413.926      2 Template:Reflist
 25.30%  251.996     25 Template:Cite_book
 10.68%  106.419      1 Template:Short_description
  8.70%   86.613     75 Template:Math
  8.09%   80.562      1 Template:Order-of-approx
  8.02%   79.878      2 Template:Pagetype
  7.93%   78.989      1 Template:Sidebar
  7.10%   70.743      6 Template:Fix
  6.41%   63.808      9 Template:Cite_journal Saved in parser cache with key enwiki:pcache:44578:|#|:idhash:canonical and timestamp 20250814092128 and revision id 1305827482. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Big_O_notation&oldid=1305827482 " Categories : Mathematical notation Asymptotic analysis Analysis of algorithms Hidden categories: CS1 German-language sources (de) CS1 errors: ISBN date Webarchive template wayback links Articles with short description Short description is different from Wikidata All articles with unsourced statements Articles with unsourced statements from April 2021 All articles that may contain original research Articles that may contain original research from April 2021 Articles with unsourced statements from December 2018 Articles with unsourced statements from May 2017 This page was last edited on 14 August 2025, at 09:20 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Big O notation 37 languages Add topic

