Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Formal definition 2 Yoneda's lemma 3 Internal Hom functor 4 Properties 5 Other properties 6 See also 7 Notes 8 References 9 External links Toggle the table of contents Hom functor 8 languages Čeština Deutsch Ελληνικά Français 한국어 日本語 Русский Українська Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from Canonical bifunctor ) Functor mapping hom objects to an underlying category In mathematics , specifically in category theory , hom-sets (i.e. sets of morphisms between objects ) give rise to important functors to the category of sets . These functors are called hom-functors and have numerous applications in category theory and other branches of mathematics.

Formal definition [ edit ] Let C be a locally small category (i.e. a category for which hom-classes are actually sets and not proper classes ).

For all objects A and B in C we define two functors to the category of sets as follows: Hom( A , –) : C → Set Hom(–, B ) : C → Set [ 1 ] This is a covariant functor given by: Hom( A , –) maps each object X in C to the set of morphisms, Hom( A , X ) Hom( A , –) maps each morphism f : X → Y to the function Hom( A , f ) : Hom( A , X ) → Hom( A , Y ) given by g ↦ ↦ f ∘ ∘ g {\displaystyle g\mapsto f\circ g} for each g in Hom( A , X ).

This is a contravariant functor given by: Hom(–, B ) maps each object X in C to the set of morphisms, Hom( X , B ) Hom(–, B ) maps each morphism h : X → Y to the function Hom( h , B ) : Hom( Y , B ) → Hom( X , B ) given by g ↦ ↦ g ∘ ∘ h {\displaystyle g\mapsto g\circ h} for each g in Hom( Y , B ).

The functor Hom(–, B ) is also called the functor of points of the object B .

Note that fixing the first argument of Hom naturally gives rise to a covariant functor and fixing the second argument naturally gives a contravariant functor. This is an artifact of the way in which one must compose the morphisms.

The pair of functors Hom( A , –) and Hom(–, B ) are related in a natural manner . For any pair of morphisms f : B → B ′ and h : A ′ → A the following diagram commutes : Both paths send g : A → B to f ∘ g ∘ h : A ′ → B ′.

The commutativity of the above diagram implies that Hom(–, –) is a bifunctor from C × C to Set which is contravariant in the first argument and covariant in the second. Equivalently, we may say that Hom(–, –) is a bifunctor Hom(–, –) : C op × C → Set where C op is the opposite category to C .  The notation Hom C (–, –) is sometimes used for Hom(–, –) in order to emphasize the category forming the domain.

Yoneda's lemma [ edit ] Main article: Yoneda lemma Referring to the above commutative diagram, one observes that every morphism h : A ′ → A gives rise to a natural transformation Hom( h , –) : Hom( A , –) → Hom( A ′, –) and every morphism f : B → B ′ gives rise to a natural transformation Hom(–, f ) : Hom(–, B ) → Hom(–, B ′) Yoneda's lemma implies that every natural transformation between Hom functors is of this form. In other words, the Hom functors give rise to a full and faithful embedding of the category C into the functor category Set C op (covariant or contravariant depending on which Hom functor is used).

Internal Hom functor [ edit ] Some categories may possess a functor that behaves like a Hom functor, but takes values in the category C itself, rather than Set . Such a functor is referred to as the internal Hom functor , and is often written as [ − − − − ] : C op × × C → → C {\displaystyle \left[-\ -\right]:C^{\text{op}}\times C\to C} to emphasize its product-like nature, or as ⇒ ⇒ : C op × × C → → C {\displaystyle \mathop {\Rightarrow } :C^{\text{op}}\times C\to C} to emphasize its functorial nature, or sometimes merely in lower-case: hom ⁡ ⁡ ( − − , − − ) : C op × × C → → C .

{\displaystyle \operatorname {hom} (-,-):C^{\text{op}}\times C\to C.} For examples, see Category of relations .

Categories that possess an internal Hom functor are referred to as closed categories . One has that Hom ⁡ ⁡ ( I , hom ⁡ ⁡ ( − − , − − ) ) ≃ ≃ Hom ⁡ ⁡ ( − − , − − ) {\displaystyle \operatorname {Hom} (I,\operatorname {hom} (-,-))\simeq \operatorname {Hom} (-,-)} , where I is the unit object of the closed category. For the case of a closed monoidal category , this extends to the notion of currying , namely, that Hom ⁡ ⁡ ( X , Y ⇒ ⇒ Z ) ≃ ≃ Hom ⁡ ⁡ ( X ⊗ ⊗ Y , Z ) {\displaystyle \operatorname {Hom} (X,Y\Rightarrow Z)\simeq \operatorname {Hom} (X\otimes Y,Z)} where ⊗ ⊗ {\displaystyle \otimes } is a bifunctor , the internal product functor defining a monoidal category .  The isomorphism is natural in both X and Z . In other words, in a closed monoidal category, the internal Hom functor is an adjoint functor to the internal product functor.  The object Y ⇒ ⇒ Z {\displaystyle Y\Rightarrow Z} is called the internal Hom .  When ⊗ ⊗ {\displaystyle \otimes } is the Cartesian product × × {\displaystyle \times } , the object Y ⇒ ⇒ Z {\displaystyle Y\Rightarrow Z} is called the exponential object , and is often written as Z Y {\displaystyle Z^{Y}} .

Internal Homs, when chained together, form a language, called the internal language of the category. The most famous of these are simply typed lambda calculus , which is the internal language of Cartesian closed categories , and the linear type system , which is the internal language of closed symmetric monoidal categories .

Properties [ edit ] Note that a functor of the form Hom(–, A ) : C op → Set is a presheaf ; likewise, Hom( A , –) is a copresheaf .

A functor F : C → Set that is naturally isomorphic to Hom( A , –) for some A in C is called a representable functor (or representable copresheaf); likewise, a contravariant functor equivalent to Hom(–, A ) might be called corepresentable.

Note that Hom(–, –) : C op × C → Set is a profunctor , and, specifically, it is the identity profunctor id C : : C ↛ ↛ C {\displaystyle \operatorname {id} _{C}\colon C\nrightarrow C} .

The internal hom functor preserves limits ; that is, hom ⁡ ⁡ ( X , − − ) : : C → → C {\displaystyle \operatorname {hom} (X,-)\colon C\to C} sends limits to limits, while hom ⁡ ⁡ ( − − , X ) : : C op → → C {\displaystyle \operatorname {hom} (-,X)\colon C^{\text{op}}\to C} sends limits in C op {\displaystyle C^{\text{op}}} , that is colimits in C {\displaystyle C} , into limits. In a certain sense, this can be taken as the definition of a limit or colimit.

The endofunctor Hom( E , –) : Set → Set can be given the structure of a monad ; this monad is called the environment (or reader) monad .

Other properties [ edit ] If A is an abelian category and A is an object of A , then Hom A ( A , –) is a covariant left-exact functor from A to the category Ab of abelian groups . It is exact if and only if A is projective .

[ 2 ] Let R be a ring and M a left R - module . The functor Hom R ( M , –): Mod - R → Ab [ clarification needed ] is adjoint to the tensor product functor – ⊗ ⊗ {\displaystyle \otimes } R M : Ab → Mod - R .

See also [ edit ] Ext functor Functor category Representable functor Notes [ edit ] ^ Also commonly denoted C op → Set , where C op denotes the opposite category , and this encodes the arrow-reversing behaviour of Hom(–, B ).

^ Jacobson (2009), p. 149, Prop. 3.9.

References [ edit ] Mac Lane, Saunders (September 1998).

Categories for the Working Mathematician (Second ed.). Springer.

ISBN 0-387-98403-8 .

Goldblatt, Robert (2006) [1984].

Topoi, the Categorial Analysis of Logic (Revised ed.).

Dover Publications .

ISBN 978-0-486-45026-1 . Archived from the original on 2020-03-21 . Retrieved 2009-11-25 .

Jacobson, Nathan (2009).

Basic algebra . Vol. 2 (2nd ed.). Dover.

ISBN 978-0-486-47187-7 .

Herrlich, Horst; Strecker, George E. (1979). "V. Functors and Natural Transformations".

Category Theory . SSPM (Sigma Series in Pure Mathematics) 01. Heldermann.

ISBN 978-3-88538-001-6 .

External links [ edit ] Hom functor at the n Lab Internal Hom at the n Lab Retrieved from " https://en.wikipedia.org/w/index.php?title=Hom_functor&oldid=1278466099 " Categories : Functors Binary operations Hidden categories: Articles with short description Short description matches Wikidata Wikipedia articles needing clarification from February 2022 This page was last edited on 2 March 2025, at 17:03 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Hom functor 8 languages Add topic

