Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 History Toggle History subsection 1.1 Background 1.2 Development 2 Applications 3 Characteristics Toggle Characteristics subsection 3.1 User interfaces 3.2 Processors in embedded systems 3.2.1 Ready-made computer boards 3.2.2 ASIC and FPGA SoC solutions 3.3 Peripherals 3.4 Tools 4 Debugging Toggle Debugging subsection 4.1 Tracing 4.2 Reliability 4.3 High vs. low volume 5 Embedded software architectures Toggle Embedded software architectures subsection 5.1 Simple control loop 5.2 Interrupt-controlled system 5.3 Cooperative multitasking 5.4 Preemptive multitasking or multi-threading 5.5 Microkernels and exokernels 5.6 Monolithic kernels 5.7 Additional software components 5.8 Domain-specific architectures 6 See also 7 Notes 8 References 9 Further reading 10 External links Toggle the table of contents Embedded system 47 languages Alemannisch العربية Azərbaycanca বাংলা Български Català Čeština Dansk Deutsch Eesti Ελληνικά Español Euskara فارسی Français 한국어 हिन्दी Bahasa Indonesia Italiano עברית Lietuvių Magyar Македонски മലയാളം မြန်မာဘာသာ Nederlands 日本語 Norsk bokmål Norsk nynorsk Polski Português Română Русский Simple English Slovenčina Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska தமிழ் ไทย Türkçe Українська اردو Tiếng Việt 吴语 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Computer system with a dedicated function An embedded system on a plug-in card with processor, memory, power supply, and external interfaces An embedded system is a specialized computer system —a combination of a computer processor , computer memory , and input/output peripheral devices—that has a dedicated function within a larger mechanical or electronic system.

[ 1 ] [ 2 ] It is embedded as part of a complete device often including electrical or electronic hardware and mechanical parts. 
Because an embedded system typically controls physical operations of the machine that it is embedded within, it often has real-time computing constraints.  Embedded systems control many devices in common use.

[ 3 ] In 2009 [update] , it was estimated that ninety-eight percent of all microprocessors manufactured were used in embedded systems.

[ 4 ] [ needs update ] Modern embedded systems are often based on microcontrollers (i.e. microprocessors with integrated memory and peripheral interfaces), but ordinary microprocessors (using external chips for memory and peripheral interface circuits) are also common, especially in more complex systems. In either case, the processor(s) used may be types ranging from general purpose to those specialized in a certain class of computations, or even custom designed for the application at hand. A common standard class of dedicated processors is the digital signal processor (DSP).

Since the embedded system is dedicated to specific tasks, design engineers can optimize it to reduce the size and cost of the product and increase its reliability and performance. Some embedded systems are mass-produced, benefiting from economies of scale .

Embedded systems range in size from portable personal devices such as digital watches and MP3 players to bigger machines like home appliances , industrial assembly lines , robots , transport vehicles, traffic light controllers , and medical imaging systems. Often they constitute subsystems of other machines like avionics in aircraft and astrionics in spacecraft . Large installations like factories , pipelines , and electrical grids rely on multiple embedded systems networked together. Generalized through software customization, embedded systems such as programmable logic controllers frequently comprise their functional units.

Embedded systems range from those low in complexity, with a single microcontroller chip, to very high with multiple units, peripherals and networks, which may reside in equipment racks or across large geographical areas connected via long-distance communications lines.

History [ edit ] Background [ edit ] See also: Microprocessor chronology The origins of the microprocessor and the microcontroller can be traced back to the MOS integrated circuit , which is an integrated circuit chip fabricated from MOSFETs (metal–oxide–semiconductor field-effect transistors ) and was developed in the early 1960s. By 1964, MOS chips had reached higher transistor density and lower manufacturing costs than bipolar chips. MOS chips further increased in complexity at a rate predicted by Moore's law , leading to large-scale integration (LSI) with hundreds of transistors on a single MOS chip by the late 1960s. The application of MOS LSI chips to computing was the basis for the first microprocessors, as engineers began recognizing that a complete computer processor system could be contained on several MOS LSI chips.

[ 5 ] The first multi-chip microprocessors, the Four-Phase Systems AL1 in 1969 and the Garrett AiResearch MP944 in 1970, were developed with multiple MOS LSI chips. The first single-chip microprocessor was the Intel 4004 , released in 1971. It was developed by Federico Faggin , using his silicon-gate MOS technology, along with Intel engineers Marcian Hoff and Stan Mazor , and Busicom engineer Masatoshi Shima .

[ 6 ] Development [ edit ] One of the first recognizably modern embedded systems was the Apollo Guidance Computer , [ 7 ] developed ca. 1965 by Charles Stark Draper at the MIT Instrumentation Laboratory . At the project's inception, the Apollo guidance computer was considered the riskiest item in the Apollo project as it employed the then newly developed monolithic integrated circuits to reduce the computer's size and weight.

An early mass-produced embedded system was the Autonetics D-17 guidance computer for the Minuteman missile , released in 1961. When the Minuteman II went into production in 1966, the D-17 was replaced with a new computer that represented the first high-volume use of integrated circuits.

Since these early applications in the 1960s, embedded systems have come down in price and there has been a dramatic rise in processing power and functionality. An early microprocessor, the Intel 4004 (released in 1971), was designed for calculators and other small systems but still required external memory and support chips. By the early 1980s, memory, input and output system components had been integrated into the same chip as the processor forming a microcontroller. Microcontrollers find applications where a general-purpose computer would be too costly. As the cost of microprocessors and microcontrollers fell, the prevalence of embedded systems increased.

A comparatively low-cost microcontroller may be programmed to fulfill the same role as a large number of separate components. With microcontrollers, it became feasible to replace, even in consumer products, expensive knob-based analog components such as potentiometers and variable capacitors with up/down buttons or knobs read out by a microprocessor. Although in this context an embedded system is usually more complex than a traditional solution, most of the complexity is contained within the microcontroller itself. Very few additional components may be needed and most of the design effort is in the software. Software prototype and test can be quicker compared with the design and construction of a new circuit not using an embedded processor.

Applications [ edit ] Embedded Computer Sub-Assembly for Accupoll Electronic Voting Machine [ 8 ] Embedded systems are commonly found in consumer, industrial, automotive , home appliances , medical, telecommunication, commercial, aerospace and military applications.

Telecommunications systems employ numerous embedded systems from telephone switches for the network to cell phones at the end user . Computer networking uses dedicated routers and network bridges to route data.

Consumer electronics include MP3 players , television sets , mobile phones , video game consoles , digital cameras , GPS receivers , and printers . Household appliances, such as microwave ovens , washing machines and dishwashers , include embedded systems to provide flexibility, efficiency and features. Advanced heating, ventilation, and air conditioning (HVAC) systems use networked thermostats to more accurately and efficiently control temperature that can change by time of day and season .

Home automation uses wired and wireless networking that can be used to control lights, climate, security, audio/visual, surveillance, etc., all of which use embedded devices for sensing and controlling.

Transportation systems from flight to automobiles increasingly use embedded systems. New airplanes contain advanced avionics such as inertial guidance systems and GPS receivers that also have considerable safety requirements.

Spacecraft rely on astrionics systems for trajectory correction. Various electric motors — brushless DC motors , induction motors and DC motors — use electronic motor controllers .

Automobiles , electric vehicles , and hybrid vehicles increasingly use embedded systems to maximize efficiency and reduce pollution. Other automotive safety systems using embedded systems include anti-lock braking system (ABS), electronic stability control (ESC/ESP), traction control (TCS) and automatic four-wheel drive .

Medical equipment uses embedded systems for monitoring , and various medical imaging ( positron emission tomography (PET), single-photon emission computed tomography (SPECT), computed tomography (CT), and magnetic resonance imaging (MRI) for non-invasive internal inspections. Embedded systems within medical equipment are often powered by industrial computers.

[ 9 ] Embedded systems are used for safety-critical systems in aerospace and defense industries. Unless connected to wired or wireless networks via on-chip 3G cellular or other methods for IoT monitoring and control purposes, these systems can be isolated from hacking and thus be more secure.

[ citation needed ] For fire safety, the systems can be designed to have a greater ability to handle higher temperatures and continue to operate. In dealing with security, the embedded systems can be self-sufficient and be able to deal with cut electrical and communication systems.

Miniature wireless devices called motes are networked wireless sensors.

Wireless sensor networking makes use of miniaturization made possible by advanced integrated circuit (IC) design to couple full wireless subsystems to sophisticated sensors, enabling people and companies to measure a myriad of things in the physical world and act on this information through monitoring and control systems. These motes are completely self-contained and will typically run off a battery source for years before the batteries need to be changed or charged.

Characteristics [ edit ] Embedded systems are designed to perform a specific task, in contrast with general-purpose computers designed for multiple tasks. Some have real-time performance constraints that must be met, for reasons such as safety and usability; others may have low or no performance requirements, allowing the system hardware to be simplified to reduce costs.

Embedded systems are not always standalone devices. Many embedded systems are a small part within a larger device that serves a more general purpose. For example, the Gibson Robot Guitar features an embedded system for tuning the strings, but the overall purpose of the Robot Guitar is to play music.

[ 10 ] Similarly, an embedded system in an automobile provides a specific function as a subsystem of the car itself.

e-con Systems eSOM270 & eSOM300 Computer on Modules The program instructions written for embedded systems are referred to as firmware , and are stored in read-only memory or flash memory chips. They run with limited computer hardware resources: little memory, small or non-existent keyboard or screen.

User interfaces [ edit ] Embedded system text user interface using MicroVGA [ nb 1 ] Embedded systems range from no user interface at all, in systems dedicated to one task, to complex graphical user interfaces that resemble modern computer desktop operating systems. Simple embedded devices use buttons , light-emitting diodes (LED), graphic or character liquid-crystal displays (LCD) with a simple menu system . More sophisticated devices that use a graphical screen with touch sensing or screen-edge soft keys provide flexibility while minimizing space used: the meaning of the buttons can change with the screen, and selection involves the natural behavior of pointing at what is desired.

Some systems provide user interface remotely with the help of a serial (e.g.

RS-232 ) or network (e.g.

Ethernet ) connection. This approach extends the capabilities of the embedded system, avoids the cost of a display, simplifies the board support package (BSP) and allows designers to build a rich user interface on the PC. A good example of this is the combination of an embedded HTTP server running on an embedded device (such as an IP camera or a network router ). The user interface is displayed in a web browser on a PC connected to the device.

Processors in embedded systems [ edit ] Examples of properties of typical embedded computers when compared with general-purpose counterparts, are low power consumption, small size, rugged operating ranges, and low per-unit cost. This comes at the expense of limited processing resources.

Numerous microcontrollers have been developed for embedded systems use. General-purpose microprocessors are also used in embedded systems, but generally, require more support circuitry than microcontrollers.

Ready-made computer boards [ edit ] PC/104 and PC/104+ are examples of standards for ready-made computer boards intended for small, low-volume embedded and ruggedized systems. These are mostly x86-based and often physically small compared to a standard PC, although still quite large compared to most simple (8/16-bit) embedded systems. They may use DOS , FreeBSD , Linux , NetBSD , OpenHarmony or an embedded real-time operating system (RTOS) such as MicroC/OS-II , QNX or VxWorks .

In certain applications, where small size or power efficiency are not primary concerns, the components used may be compatible with those used in general-purpose x86 personal computers. Boards such as the VIA EPIA range help to bridge the gap by being PC-compatible but highly integrated, physically smaller or have other attributes making them attractive to embedded engineers. The advantage of this approach is that low-cost commodity components may be used along with the same software development tools used for general software development. Systems built in this way are still regarded as embedded since they are integrated into larger devices and fulfill a single role. Examples of devices that may adopt this approach are automated teller machines (ATM) and arcade machines , which contain code specific to the application.

However, most ready-made embedded systems boards are not PC-centered and do not use the ISA or PCI busses. When a system-on-a-chip processor is involved, there may be little benefit to having a standardized bus connecting discrete components, and the environment for both hardware and software tools may be very different.

One common design style uses a small system module, perhaps the size of a business card, holding high density BGA chips such as an ARM -based system-on-a-chip processor and peripherals, external flash memory for storage, and DRAM for runtime memory. The module vendor will usually provide boot software and make sure there is a selection of operating systems, usually including Linux and some real-time choices. These modules can be manufactured in high volume, by organizations familiar with their specialized testing issues, and combined with much lower volume custom mainboards with application-specific external peripherals. Prominent examples of this approach include Arduino and Raspberry Pi .

ASIC and FPGA SoC solutions [ edit ] A system on a chip (SoC) contains a complete system - consisting of multiple processors, multipliers, caches, even different types of memory and commonly various peripherals like interfaces for wired or wireless communication on a single chip. Often graphics processing units (GPU) and DSPs are included such chips. SoCs can be implemented as an application-specific integrated circuit (ASIC) or using a field-programmable gate array (FPGA) which typically can be reconfigured.

ASIC implementations are common for very-high-volume embedded systems like mobile phones and smartphones . ASIC or FPGA implementations may be used for not-so-high-volume embedded systems with special needs in kind of signal processing performance, interfaces and reliability, like in avionics.

Peripherals [ edit ] A close-up of the SMSC LAN91C110 (SMSC 91x) chip, an embedded Ethernet chip Embedded systems talk with the outside world via peripherals , such as: Serial communication interfaces (SCI): RS-232 , RS-422 , RS-485 , etc.

Synchronous Serial Interface : I2C , SPI , SSC and ESSI (Enhanced Synchronous Serial Interface) Universal Serial Bus (USB) Media cards ( SD cards , CompactFlash , etc.) Network interface controller : Ethernet , WiFi , etc.

Fieldbuses : CAN bus , LIN-Bus , PROFIBUS , etc.

Timers: Phase-locked loops , programmable interval timers General Purpose Input/Output (GPIO) Analog-to-digital and digital-to-analog converters Debugging: JTAG , In-system programming , background debug mode interface port, BITP, and DB9 ports.

Tools [ edit ] As with other software, embedded system designers use compilers , assemblers , and debuggers to develop embedded system software. However, they may also use more specific tools: In circuit debuggers or emulators (see next section ).

Utilities to add a checksum or CRC to a program, so the embedded system can check if the program is valid.

For systems using digital signal processing , developers may use a computational notebook to simulate the mathematics.

System-level modeling and simulation tools help designers to construct simulation models of a system with hardware components such as processors, memories , DMA , interfaces , buses and software behavior flow as a state diagram or flow diagram using configurable library blocks. Simulation is conducted to select the right components by performing power vs. performance trade-offs, reliability analysis and bottleneck analysis. Typical reports that help a designer to make architecture decisions include application latency, device throughput, device utilization, power consumption of the full system as well as device-level power consumption.

A model-based development tool creates and simulates graphical data flow and UML state chart diagrams of components like digital filters, motor controllers, communication protocol decoding and multi-rate tasks.

Custom compilers and linkers may be used to optimize specialized hardware.

An embedded system may have its own special language or design tool, or add enhancements to an existing language such as Forth or Basic .

Another alternative is to add a RTOS or embedded operating system Modeling and code generating tools often based on state machines Software tools can come from several sources: Software companies that specialize in the embedded market Ported from the GNU software development tools Sometimes, development tools for a personal computer can be used if the embedded processor is a close relative to a common PC processor Embedded software often requires a variety of development tools, including programming languages such as C++ , Rust , or Python , and frameworks like Qt for graphical interfaces. These tools enable developers to create efficient, scalable, and feature-rich applications tailored to the specific requirements of embedded systems. The choice of tools is driven by factors such as real-time performance, integration with hardware, or energy efficiency.

As the complexity of embedded systems grows, higher-level tools and operating systems are migrating into machinery where it makes sense. For example, cellphones , personal digital assistants and other consumer computers often need significant software that is purchased or provided by a person other than the manufacturer of the electronics. In these systems, an open programming environment such as Linux , NetBSD , FreeBSD , OSGi or Embedded Java is required so that the third-party software provider can sell to a large market.

Debugging [ edit ] Embedded debugging may be performed at different levels, depending on the facilities available. Considerations include: does it slow down the main application, how close is the debugged system or application to the actual system or application, how expressive are the triggers that can be set for debugging (e.g., inspecting the memory when a particular program counter value is reached), and what can be inspected in the debugging process (such as, only memory, or memory and registers, etc.).

From simplest to most sophisticated debugging techniques and systems are roughly grouped into the following areas: Interactive resident debugging, using the simple shell provided by the embedded operating system (e.g. Forth and Basic) Software-only debuggers have the benefit that they do not need any hardware modification but have to carefully control what they record in order to conserve time and storage space.

[ 11 ] External debugging using logging or serial port output to trace operation using either a monitor in flash or using a debug server like the Remedy Debugger that even works for heterogeneous multicore systems.

An in-circuit debugger (ICD), a hardware device that connects to the microprocessor via a JTAG or Nexus interface.

[ 12 ] This allows the operation of the microprocessor to be controlled externally, but is typically restricted to specific debugging capabilities in the processor.

An in-circuit emulator (ICE) replaces the microprocessor with a simulated equivalent, providing full control over all aspects of the microprocessor.

A complete emulator provides a simulation of all aspects of the hardware, allowing all of it to be controlled and modified, and allowing debugging on a normal PC. The downsides are expense and slow operation, in some cases up to 100 times slower than the final system.

For SoC designs, the typical approach is to verify and debug the design on an FPGA prototype board. Tools such as Certus [ 13 ] are used to insert probes in the FPGA implementation that make signals available for observation. This is used to debug hardware, firmware and software interactions across multiple FPGAs in an implementation with capabilities similar to a logic analyzer.

Unless restricted to external debugging, the programmer can typically load and run software through the tools, view the code running in the processor, and start or stop its operation. The view of the code may be as high-level programming language , assembly code or mixture of both.

Tracing [ edit ] Real-time operating systems often support tracing of operating system events. A graphical view is presented by a host PC tool, based on a recording of the system behavior. The trace recording can be performed in software, by the RTOS, or by special tracing hardware. RTOS tracing allows developers to understand timing and performance issues of the software system and gives a good understanding of the high-level system behaviors. Trace recording in embedded systems can be achieved using hardware or software solutions. Software-based trace recording does not require specialized debugging hardware and can be used to record traces in deployed devices, but it can have an impact on CPU and RAM usage.

[ 14 ] One example of a software-based tracing method used in RTOS environments is the use of empty macros which are invoked by the operating system at strategic places in the code, and can be implemented to serve as hooks .

Reliability [ edit ] Embedded systems often reside in machines that are expected to run continuously for years without error, and in some cases recover by themselves if an error occurs. Therefore, the software is usually developed and tested more carefully than that for personal computers, and unreliable mechanical moving parts such as disk drives, switches or buttons are avoided.

Specific reliability issues may include: The system cannot safely be shut down for repair, or it is too inaccessible to repair. Examples include space systems, undersea cables, navigational beacons, bore-hole systems, and automobiles.

The system must be kept running for safety reasons. Reduced functionality in the event of failure may be intolerable. Often backups are selected by an operator. Examples include aircraft navigation, reactor control systems, safety-critical chemical factory controls, train signals.

The system will lose large amounts of money when shut down: Telephone switches, factory controls, bridge and elevator controls, funds transfer and market making, automated sales and service.

A variety of techniques are used, sometimes in combination, to recover from errors—both software bugs such as memory leaks , and also soft errors in the hardware: watchdog timer that resets and restarts the system unless the software periodically notifies the watchdog subsystems Designing with a trusted computing base (TCB) architecture ensures a highly secure and reliable system environment [ 15 ] A hypervisor designed for embedded systems is able to provide secure encapsulation for any subsystem component so that a compromised software component cannot interfere with other subsystems, or privileged-level system software.

[ 16 ] This encapsulation keeps faults from propagating from one subsystem to another, thereby improving reliability. This may also allow a subsystem to be automatically shut down and restarted on fault detection.

Immunity-aware programming can help engineers produce more reliable embedded systems code.

[ 17 ] [ 18 ] Guidelines and coding rules such as MISRA C/C++ aim to assist developers produce reliable, portable firmware in a number of different ways: typically by advising or mandating against coding practices which may lead to run-time errors (memory leaks, invalid pointer uses), use of run-time checks and exception handling (range/sanity checks, divide-by-zero and buffer index validity checks, default cases in logic checks), loop bounding, production of human-readable, well commented and well structured code, and avoiding language ambiguities which may lead to compiler-induced inconsistencies or side-effects (expression evaluation ordering, recursion, certain types of macro). These rules can often be used in conjunction with code static checkers or bounded model checking for functional verification purposes, and also assist in determination of code timing properties .

[ 17 ] High vs. low volume [ edit ] For high-volume systems such as mobile phones , minimizing cost is usually the primary design consideration. Engineers typically select hardware that is just good enough to implement the necessary functions.

For low-volume or prototype embedded systems, general-purpose computers may be adapted by limiting the programs or by replacing the operating system with an RTOS.

Embedded software architectures [ edit ] Main article: Embedded software In 1978 National Electrical Manufacturers Association released ICS 3-1978, a standard for programmable microcontrollers, [ 19 ] including almost any computer-based controllers, such as single-board computers , numerical, and event-based controllers.

There are several different types of software architecture in common use.

Simple control loop [ edit ] In this design, the software simply has a loop which monitors the input devices. The loop calls subroutines , each of which manages a part of the hardware or software. Hence it is called a simple control loop or programmed input-output.

Interrupt-controlled system [ edit ] Some embedded systems are predominantly controlled by interrupts . This means that tasks performed by the system are triggered by different kinds of events; an interrupt could be generated, for example, by a timer at a predefined interval, or by a serial port controller receiving data.

This architecture is used if event handlers need low latency, and the event handlers are short and simple. These systems run a simple task in a main loop also, but this task is not very sensitive to unexpected delays. Sometimes the interrupt handler will add longer tasks to a queue structure. Later, after the interrupt handler has finished, these tasks are executed by the main loop. This method brings the system close to a multitasking kernel with discrete processes.

Cooperative multitasking [ edit ] Cooperative multitasking is very similar to the simple control loop scheme, except that the loop is hidden in an API .

[ 3 ] [ 1 ] The programmer defines a series of tasks, and each task gets its own environment to run in. When a task is idle, it calls an idle routine which passes control to another task.

The advantages and disadvantages are similar to that of the control loop, except that adding new software is easier, by simply writing a new task, or adding to the queue.

Preemptive multitasking or multi-threading [ edit ] In this type of system, a low-level piece of code switches between tasks or threads based on a timer invoking an interrupt. This is the level at which the system is generally considered to have an operating system kernel. Depending on how much functionality is required, it introduces more or less of the complexities of managing multiple tasks running conceptually in parallel.

As any code can potentially damage the data of another task (except in systems using a memory management unit ) programs must be carefully designed and tested, and access to shared data must be controlled by some synchronization strategy such as message queues , semaphores or a non-blocking synchronization scheme.

Because of these complexities, it is common for organizations to use an off-the-shelf RTOS, allowing the application programmers to concentrate on device functionality rather than operating system services. The choice to include an RTOS brings in its own issues, however, as the selection must be made prior to starting the application development process. This timing forces developers to choose the embedded operating system for their device based on current requirements and so restricts future options to a large extent.

[ 20 ] The level of complexity in embedded systems is continuously growing as devices are required to manage peripherals and tasks such as serial, USB, TCP/IP, Bluetooth , Wireless LAN , trunk radio, multiple channels, data and voice, enhanced graphics, multiple states, multiple threads, numerous wait states and so on. These trends are leading to the uptake of embedded middleware in addition to an RTOS.

Microkernels and exokernels [ edit ] A microkernel allocates memory and switches the CPU to different threads of execution. User-mode processes implement major functions such as file systems, network interfaces, etc.

Exokernels communicate efficiently by normal subroutine calls. The hardware and all the software in the system are available to and extensible by application programmers.

Monolithic kernels [ edit ] A monolithic kernel is a relatively large kernel with sophisticated capabilities adapted to suit an embedded environment. This gives programmers an environment similar to a desktop operating system like Linux or Microsoft Windows , and is therefore very productive for development. On the downside, it requires considerably more hardware resources, is often more expensive, and, because of the complexity of these kernels, can be less predictable and reliable.

Common examples of embedded monolithic kernels are embedded Linux , VXWorks and Windows CE .

Despite the increased cost in hardware, this type of embedded system is increasing in popularity, especially on the more powerful embedded devices such as wireless routers and GPS navigation systems .

Additional software components [ edit ] In addition to the core operating system, many embedded systems have additional upper-layer software components. These components include networking protocol stacks like CAN , TCP/IP , FTP , HTTP , and HTTPS , and storage capabilities like FAT and flash memory management systems. If the embedded device has audio and video capabilities, then the appropriate drivers and codecs will be present in the system. In the case of the monolithic kernels, many of these software layers may be included in the kernel. In the RTOS category, the availability of additional software components depends upon the commercial offering.

Domain-specific architectures [ edit ] In the automotive sector, AUTOSAR is a standard architecture for embedded software.

See also [ edit ] Electronics portal Communications server Cyber-physical system Electronic control unit Information appliance Integrated development environment Photonically Optimized Embedded Microprocessors Silicon compiler Software engineering System on module Ubiquitous computing Notes [ edit ] ^ For more details of MicroVGA see this PDF .

References [ edit ] ^ a b Michael Barr .

"Embedded Systems Glossary" .

Neutrino Technical Library . Retrieved 2007-04-21 .

^ Heath, Steve (2003).

Embedded systems design . EDN series for design engineers (2 ed.). Newnes. p.

2 .

ISBN 978-0-7506-5546-0 .

An embedded system is a microprocessor based system that is built to control a function or a range of functions.

^ a b Michael Barr; Anthony J. Massa (2006).

"Introduction" .

Programming embedded systems: with C and GNU development tools . O'Reilly. pp.

1– 2.

ISBN 978-0-596-00983-0 .

^ Barr, Michael (1 August 2009).

"Real men program in C" .

Embedded Systems Design . TechInsights (United Business Media). p. 2 . Retrieved 2009-12-23 .

^ Shirriff, Ken (30 August 2016).

"The Surprising Story of the First Microprocessors" .

IEEE Spectrum .

53 (9).

Institute of Electrical and Electronics Engineers : 48– 54.

doi : 10.1109/MSPEC.2016.7551353 .

S2CID 32003640 . Retrieved 13 October 2019 .

^ "1971: Microprocessor Integrates CPU Function onto a Single Chip" .

The Silicon Engine .

Computer History Museum . Retrieved 22 July 2019 .

^ "1962: Aerospace systems are the first applications for ICs in computers" .

Computer History Museum . 2025 . Retrieved March 13, 2025 .

^ "Electronic Frontier Foundation" .

Electronic Frontier Foundation .

^ Embedded Systems Dell OEM Solutions | Dell Archived 2013-01-27 at the Wayback Machine . Content.dell.com (2011-01-04). Retrieved on 2013-02-06.

^ David Carey (2008-04-22).

"Under the Hood: Robot Guitar embeds autotuning" .

Embedded Systems Design . Archived from the original on 2008-07-08.

^ Tancreti, Matthew; Sundaram, Vinaitheerthan; Bagchi, Saurabh; Eugster, Patrick (2015). "TARDIS".

Proceedings of the 14th International Conference on Information Processing in Sensor Networks . IPSN '15. New York, NY, USA: ACM. pp.

286– 297.

doi : 10.1145/2737095.2737096 .

ISBN 9781450334754 .

S2CID 10120929 .

^ Tancreti, Matthew; Hossain, Mohammad Sajjad; Bagchi, Saurabh; Raghunathan, Vijay (2011). "Aveksha".

Proceedings of the 9th ACM Conference on Embedded Networked Sensor Systems . SenSys '11. New York, NY, USA: ACM. pp.

288– 301.

doi : 10.1145/2070942.2070972 .

ISBN 9781450307185 .

S2CID 14769602 .

^ Morris, Kevin (2012-10-30).

"Tektronix Shakes Up Prototyping, Embedded Instrumentation Boosts Boards to Emulator Status" . Electronic Engineering Journal . Retrieved 2012-10-30 .

^ Kraft, Johan; Wall, Anders; Kienle, Holger (2010), Barringer, Howard; Falcone, Ylies; Finkbeiner, Bernd; Havelund, Klaus (eds.), "Trace Recording for Embedded Systems: Lessons Learned from Five Industrial Projects" , Runtime Verification , vol. 6418, Berlin, Heidelberg: Springer Berlin Heidelberg, pp.

315– 329, doi : 10.1007/978-3-642-16612-9_24 , ISBN 978-3-642-16611-2 , retrieved 2022-08-16 ^ Heiser, Gernot (December 2007).

"Your System is secure? Prove it!" (PDF) .

;login: .

2 (6): 35– 8.

Archived (PDF) from the original on 2014-11-29.

^ Moratelli, C; Johann, S; Neves, M; Hessel, F (2016).

"Embedded virtualization for the design of secure IoT applications" .

Proceedings of the 27th International Symposium on Rapid System Prototyping: Shortening the Path from Specification to Prototype . pp.

2– 6.

doi : 10.1145/2990299.2990301 .

ISBN 9781450345354 .

S2CID 17466572 . Retrieved 2 February 2018 .

^ a b Short, Michael (March 2008).

"Development guidelines for dependable real-time embedded systems" .

2008 IEEE/ACS International Conference on Computer Systems and Applications . pp.

1032– 1039.

doi : 10.1109/AICCSA.2008.4493674 .

ISBN 978-1-4244-1967-8 .

S2CID 14163138 .

^ Motor Industry Software Reliability Association.

"MISRA C:2012 Third Edition, First Revision" . Retrieved 2022-02-03 .

^ "FAQs: Programmable Controllers" (PDF) . Retrieved 2020-01-10 .

^ "Working across Multiple Embedded Platforms" (PDF) . clarinox.

Archived (PDF) from the original on 2011-02-19 . Retrieved 2010-08-17 .

Further reading [ edit ] John Catsoulis (May 2005).

Designing Embedded Hardware, 2nd Edition . O'Reilly.

ISBN 0-596-00755-8 .

James M. Conrad; Alexander G. Dean (September 2011).

Embedded Systems, An Introduction Using the Renesas RX62N Microcontroller . Micrium.

ISBN 978-1935-7729-96 .

Klaus Elk (August 2016).

Embedded Software Development for the Internet Of Things, The Basics, The Technologies and Best Practices . CreateSpace Independent Publishing Platform.

ISBN 978-1534602533 .

External links [ edit ] Wikimedia Commons has media related to Embedded systems .

Wikibooks has a book on the topic of: Embedded Systems Wikiversity has learning resources about Embedded System Engineering Embedded Systems course with mbed YouTube, ongoing from 2015 Trends in Cyber Security and Embedded Systems Dan Geer, November 2013 Modern Embedded Systems Programming Video Course YouTube, ongoing from 2013 Embedded Systems Week (ESWEEK) yearly event with conferences, workshops and tutorials covering all aspects of embedded systems and software Workshop on Embedded and Cyber-Physical Systems Education at the Wayback Machine (archived 2018-02-11), workshop covering educational aspects of embedded systems Developing Embedded Systems - A Tools Introduction v t e Computer sizes and classes Micro Static Appliances Arcade cabinet Diskless node Internet appliance Intelligent terminal Interactive kiosk Rich client Simulator Smart speaker Smart TV Thin client Video game console Home console Microconsole Computers By use Gaming Home Industrial Personal Personal super Public Server Home server Workstation By size All-in-one Panel Tabletop Surface Desktop Deskside Pizza box Tower Portable Small form factor Mini PC Plug Stick PC Rack Blade server Blade PC Mobile Laptop 2-in-1 Convertible Cloudbook Mobile workstation Notebook Subnotebook Netbook Smartbook Tablet Detachable Phablet Handheld Electronic organizer E-reader Handheld game console Handheld PC Mobile data terminal Mobile phone Camera Feature Smartphone Foldable Palmtop PC Personal digital assistant Pocket Portable data terminal Portable media player Siftable Ultra-mobile PC Calculator Graphing Programmable Scientific Wearable Fitness tracker Smart band Digital wristwatch Calculator watch Smartwatch Sportwatch Smartglasses Smart ring Midrange Mini Supermini Large Grid Mainframe Minisuper Super Others Embedded system Information appliance Microcontroller Nano Rugged Rugged smartphone Single-board Computer-on-module Smartdust Wireless sensor network Category v t e Computer science Note: This template roughly follows the 2012 ACM Computing Classification System .

Hardware Printed circuit board Peripheral Integrated circuit Very-large-scale integration System on a chip (SoC) Energy consumption (green computing) Electronic design automation Hardware acceleration Processor Size / Form Computer systems organization Computer architecture Computational complexity Dependability Embedded system Real-time computing Cyber-physical system Fault tolerance Wireless sensor network Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Control variable Software development process Requirements analysis Software design Software construction Software deployment Software engineering Software maintenance Programming team Open-source model Theory of computation Model of computation Stochastic Formal language Automata theory Computability theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Theoretical computer science Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security hacker Security services Intrusion detection system Hardware security Network security Information security Application security Human–centered computing Interaction design Augmented reality Virtual reality Social computing Ubiquitous computing Visualization Accessibility Human–computer interaction Mobile computing Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Photograph manipulation Graphics processing unit Image compression Solid modeling Applied computing Quantum computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Differentiable computing Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Category Outline Glossaries v t e Embedded systems General terms ASIC Board support package Bootloader Consumer electronics Cross compiler Embedded database Embedded hypervisor Embedded OS Embedded software FPGA IoT Memory footprint Microcontroller Single-board computer Raspberry Pi SoC Firmware and controls Firmware Custom firmware Proprietary firmware Closed platform Crippleware Defective by Design Hacking of consumer electronics Homebrew (video games) iOS jailbreaking PlayStation 3 Jailbreak Rooting (Android) UEFI Vendor lock-in Boot loaders U-Boot Barebox Software libraries uClibc dietlibc Embedded GLIBC lwIP musl Programming tools Almquist shell BitBake Buildroot BusyBox OpenEmbedded Stand-alone shell Toybox Yocto Project Operating systems Linux on embedded systems Linux for mobile devices Light-weight Linux distribution Real-time operating system Windows IoT Win CE Programming languages Ada Assembly language CAPL Embedded C Embedded C++ Embedded Java MISRA C MicroPython Lightweight browsers List of open-source hardware Open-source robotics Authority control databases National Germany United States France BnF data Japan Czech Republic Israel Other Yale LUX NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐s7t9m
Cached time: 20250811235444
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.642 seconds
Real time usage: 0.814 seconds
Preprocessor visited node count: 3302/1000000
Revision size: 43452/2097152 bytes
Post‐expand include size: 151689/2097152 bytes
Template argument size: 3438/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 8/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 116049/5000000 bytes
Lua time usage: 0.366/10.000 seconds
Lua memory usage: 7055719/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  627.154      1 -total
 36.78%  230.639      1 Template:Reflist
 18.95%  118.869      9 Template:Cite_web
 18.80%  117.886      7 Template:Navbox
 15.48%   97.094      1 Template:Computer_sizes
 10.09%   63.273      1 Template:Short_description
  9.65%   60.513      9 Template:Cite_book
  8.05%   50.512      3 Template:Sister_project
  7.79%   48.850      3 Template:Side_box
  7.46%   46.761      1 Template:Commons_category Saved in parser cache with key enwiki:pcache:46630:|#|:idhash:canonical and timestamp 20250811235444 and revision id 1300802105. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Embedded_system&oldid=1300802105 " Category : Embedded systems Hidden categories: Webarchive template wayback links Articles with short description Short description is different from Wikidata Use American English from December 2017 All Wikipedia articles written in American English Articles containing potentially dated statements from 2009 All articles containing potentially dated statements Wikipedia articles in need of updating from March 2022 All Wikipedia articles in need of updating All articles with unsourced statements Articles with unsourced statements from April 2021 Commons category link is on Wikidata This page was last edited on 16 July 2025, at 13:41 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Embedded system 47 languages Add topic

