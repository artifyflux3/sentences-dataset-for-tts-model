Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Examples 2 Soft and hard returns Toggle Soft and hard returns subsection 2.1 Unicode 3 Word boundaries, hyphenation, and hard spaces 4 Word wrapping in text containing Chinese, Japanese, and Korean 5 Algorithm Toggle Algorithm subsection 5.1 Minimum number of lines 5.2 Minimum raggedness 5.3 History 6 See also 7 References 8 External links Toggle the table of contents Wrapping (text) 9 languages Dansk Deutsch Esperanto 한국어 Қазақша Kiswahili Српски / srpski ไทย 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from Line wrap and word wrap ) Feature of continuing on a new line when a line is full Text wrapping , also known as line wrapping , word wrapping or line breaking , is breaking a section of text into lines so that it will fit into the available width of a page, window or other display area. In text display, line wrap is continuing on a new line when a line is full, so that each line fits into the viewable area without overflowing, allowing text to be read from top to bottom without any horizontal scrolling .

Word wrap is the additional feature of most text editors , word processors , and web browsers , of breaking lines between words rather than within words, where possible.  Word wrap makes it unnecessary to hard-code newline delimiters within paragraphs, and allows the display of text to adapt flexibly and dynamically to displays of varying sizes.

Examples [ edit ] With word wrap Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Without word wrap Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Hard coded newlines Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Soft and hard returns [ edit ] A soft return or soft wrap is the break resulting from line wrap or word wrap (whether automatic or manual), whereas a hard return or hard wrap is an intentional break, creating a new paragraph. With a hard return, paragraph-break formatting can (and should) be applied (either indenting or vertical whitespace). Soft wrapping allows line lengths to adjust automatically with adjustments to the width of the user's window or margin settings, and is a standard feature of all modern text editors, word processors, and email clients .  Manual soft breaks are unnecessary when word wrap is done automatically, so hitting the "Enter" key usually produces a hard return.

Alternatively, "soft return" can mean an intentional, stored line break that is not a paragraph break. For example, it is common to print postal addresses in a multiple-line format, but the several lines are understood to be a single paragraph.  Line breaks are needed to divide the words of the address into lines of the appropriate length.

In the contemporary graphical word processors Microsoft Word and Libreoffice Writer , users are expected to type a carriage return ( ↵ Enter ) between each paragraph. Formatting settings, such as first-line indentation or spacing between paragraphs, take effect where the carriage return marks the break. A non-paragraph line break, which is a soft return, is inserted using ⇧ Shift + ↵ Enter or via the menus, and is provided for cases when the text should start on a new line but none of the other side effects of starting a new paragraph are desired.

In text-oriented markup languages, a soft return is typically offered as a markup tag. For example, in HTML there is a <br> tag that has the same purpose as the soft return in word processors described above.

Unicode [ edit ] The Unicode Line Breaking Algorithm determines a set of positions, known as break opportunities , that are appropriate places in which to begin a new line. The actual line break positions are picked from among the break opportunities by the higher level software that calls the algorithm, not by the algorithm itself, because only the higher level software knows about the width of the display the text is displayed on and the width of the glyphs that make up the displayed text.

[ 1 ] The Unicode character set provides a line separator character as well as a paragraph separator to represent the semantics of the soft return and hard return.

U+2028 LINE SEPARATOR may be used to represent these semantics unambiguously U+2029 PARAGRAPH SEPARATOR may be used to represent these semantics unambiguously Word boundaries, hyphenation, and hard spaces [ edit ] The soft returns are usually placed after the ends of complete words, or after the punctuation that follows complete words. However, word wrap may also occur following a hyphen inside of a word.  This is sometimes not desired, and can be blocked by using a non-breaking hyphen , or hard hyphen , instead of a regular hyphen.

A word without hyphens can be made wrappable by having soft hyphens in it.  When the word isn't wrapped (i.e., isn't broken across lines), the soft hyphen isn't visible.  But if the word is wrapped across lines, this is done at the soft hyphen, at which point it is shown as a visible hyphen on the top line where the word is broken.  (In the rare case of a word that is meant to be wrappable by breaking it across lines but without making a hyphen ever appear, a zero-width space is put at the permitted breaking point(s) in the word.) Sometimes word wrap is undesirable between adjacent words.  In such cases, word wrap can usually be blocked by using a hard space or non-breaking space between the words, instead of regular spaces.

Word wrapping in text containing Chinese, Japanese, and Korean [ edit ] In Chinese , Japanese , and Korean , word wrapping can usually occur before and after any Han character , but certain punctuation characters are not allowed to begin a new line.

[ 2 ] Japanese kana are treated the same way as Han Characters ( Kanji ) by extension, meaning words can, and tend to be, broken without any explicit indication that a word continues on the next line.

Under certain circumstances, however, word wrapping is not desired. For instance, word wrapping might not be desired within personal names, and word wrapping might not be desired within any compound words (when the text is flush left but only in some styles).

Most existing word processors and typesetting software cannot handle either of the above scenarios.

CJK punctuation may or may not follow rules similar to the above-mentioned special circumstances. It is up to line breaking rules in CJK .

Algorithm [ edit ] Word wrapping is an optimization problem . Depending on what needs to be optimized for, different algorithms are used.

Minimum number of lines [ edit ] A simple way to do word wrapping is to use a greedy algorithm that puts as many words on a line as possible, then moving on to the next line to do the same until there are no more words left to place. This method is used by many modern word processors, such as Libreoffice Writer and Microsoft Word.

[ citation needed ] This algorithm always uses the minimum possible number of lines but may lead to lines of widely varying lengths. The following pseudocode implements this algorithm: SpaceLeft := LineWidth
for each Word in Text
    if (Width(Word) + SpaceWidth) > SpaceLeft
        insert line break before Word in Text
        SpaceLeft := LineWidth - Width(Word)
    else
        SpaceLeft := SpaceLeft - (Width(Word) + SpaceWidth) Where LineWidth is the width of a line, SpaceLeft is the remaining width of space on the line to fill, SpaceWidth is the width of a single space character, Text is the input text to iterate over and Word is a word in this text.

Minimum raggedness [ edit ] Main article: Knuth–Plass line-breaking algorithm A different algorithm, used in TeX , minimizes the sum of the squares of the lengths of the spaces at the end of lines to produce a more aesthetically pleasing result than the greedy algorithm, which does not always minimize squared space.

History [ edit ] A primitive line-breaking feature was used in 1955 in a "page printer control unit" developed by Western Union . This system used relays rather than programmable digital computers, and therefore needed a simple algorithm that could be implemented without data buffers . In the Western Union system, each line was broken at the first space character to appear after the 58th character, or at the 70th character if no space character was found.

[ 3 ] The greedy algorithm for line-breaking predates the dynamic programming method outlined by Donald Knuth in an unpublished 1977 memo describing his TeX typesetting system [ 4 ] and later published in more detail by Knuth & Plass (1981).

[ 5 ] See also [ edit ] Non-breaking space – Special character in text processing Typographic alignment – Setting of text flow or image placement relative to a page, column, table cell, or tab Zero-width space – Special character in text processing Word divider – Glyph that separates written words Word joiner – Character in text processing Characters per line – Max number of monospaced characters allowed on a line Line length – In typography, width of a block of typeset text References [ edit ] ^ Heninger, Andy, ed. (2013-01-25).

"Unicode Line Breaking Algorithm" (PDF) .

Technical Reports . Annex #14 (Proposed Update Unicode Standard): 2 . Retrieved 10 March 2015 .

WORD JOINER should be used if the intent is to merely prevent a line break ^ Lunde, Ken (1999), CJKV Information Processing: Chinese, Japanese, Korean & Vietnamese Computing , O'Reilly Media, Inc., p. 352, ISBN 9781565922242 .

^ Harris, Robert W. (January 1956), "Keyboard standardization" , Western Union Technical Review , 10 (1): 37– 42, archived from the original on 2015-08-03 , retrieved 2013-04-07 .

^ Knuth, Donald (1977), TEXDR.AFT , retrieved 2013-04-07 . Reprinted in Knuth, Donald (1999), Digital Typography , CSLI Lecture Notes, vol. 78, Stanford, California: Center for the Study of Language and Information, ISBN 1-57586-010-4 .

^ Knuth, Donald Ervin; Plass, Michael F (1981), "Breaking Paragraphs into Lines", Software: Practice and Experience , 11 (11): 1119– 84, doi : 10.1002/spe.4380111102 , S2CID 206508107 External links [ edit ] Unicode Line Breaking Algorithm NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐nhql2
Cached time: 20250818002521
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.350 seconds
Real time usage: 0.460 seconds
Preprocessor visited node count: 3152/1000000
Revision size: 11635/2097152 bytes
Post‐expand include size: 25899/2097152 bytes
Template argument size: 5426/2097152 bytes
Highest expansion depth: 24/100
Expensive parser function count: 4/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 28883/5000000 bytes
Lua time usage: 0.227/10.000 seconds
Lua memory usage: 21231968/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  435.002      1 -total
 29.00%  126.166      7 Template:Annotated_link
 25.07%  109.070      1 Template:Reflist
 14.51%   63.105      1 Template:Cite_journal
 14.25%   61.983      1 Template:Short_description
 12.43%   54.051      2 Template:Unichar
 11.79%   51.292      2 Template:Unichar/main
  7.78%   33.845      2 Template:Pagetype
  7.67%   33.366      5 Template:Citation
  6.63%   28.837      1 Template:Citation_needed Saved in parser cache with key enwiki:pcache:2446313:|#|:idhash:canonical and timestamp 20250818002521 and revision id 1303631208. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Wrapping_(text)&oldid=1303631208 " Categories : Text editor features Typography Dynamic programming Unicode algorithms Hidden categories: CS1: long volume value Articles with short description Short description matches Wikidata Wikipedia articles containing placeholders All articles with unsourced statements Articles with unsourced statements from January 2017 This page was last edited on 1 August 2025, at 03:50 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Wrapping (text) 9 languages Add topic

