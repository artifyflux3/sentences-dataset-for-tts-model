Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Standardization 2 History Toggle History subsection 2.1 ALGOL 60 implementations timeline 3 Properties Toggle Properties subsection 3.1 Language levels 3.2 ALGOL 60 Reserved words and restricted identifiers 3.2.1 Standard operators 4 Examples and portability issues Toggle Examples and portability issues subsection 4.1 Code sample comparisons 4.1.1 ALGOL 60 4.1.2 ALGOL 60 family 5 LEAP 6 See also 7 References Toggle References subsection 7.1 Bibliography 8 Further reading 9 External links Toggle the table of contents ALGOL 60 18 languages العربية Català Deutsch Eesti Esperanto Euskara فارسی Galego 한국어 Ido മലയാളം Nederlands Norsk bokmål ਪੰਜਾਬੀ Slovenčina Türkçe 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Member of the ALGOL family of computer programming languages This article is about the programming language. For other uses, see Algol (disambiguation) .

ALGOL 60 Paradigms procedural , imperative , structured Family ALGOL Designed by Backus , Bauer , Green , Katz , McCarthy , Naur , Perlis , Rutishauser , Samelson , van Wijngaarden , Vauquois , Wegstein , Woodger First appeared 1960 ; 65 years ago ( 1960 ) Typing discipline Static , strong Scope Lexical Influenced by ALGOL 58 Influenced Most subsequent imperative languages (so-called ALGOL-like languages), e.g., PL/I , Simula , CPL , Pascal , Ada , C ALGOL 60 (short for Algorithmic Language 1960 ) is a member of the ALGOL family of computer programming languages . It followed on from ALGOL 58 which had introduced code blocks and the begin and end pairs for delimiting them, representing a key advance in the rise of structured programming . ALGOL 60 was one of the first languages implementing function definitions (that could be invoked recursively). ALGOL 60 function definitions could be nested within one another (which was first introduced by any programming language [ clarification needed ] ), with lexical scope . It gave rise to many other languages, including CPL , PL/I , Simula , BCPL , B , Pascal , and C . Practically every computer of the era had a systems programming language based on ALGOL 60 concepts.

Niklaus Wirth based his own ALGOL W on ALGOL 60 before moving to develop Pascal . Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published. ALGOL 68 is substantially different from ALGOL 60 and was criticised partially for being so, so that in general "ALGOL" refers to dialects of ALGOL 60.

Standardization [ edit ] ALGOL 60 – with COBOL – were the first languages to seek standardization.

ISO 1538:1984 Programming languages – ALGOL 60 (stabilized) ISO/TR 1672:1977 Hardware representation of ALGOL basic symbols ... (now withdrawn) History [ edit ] ALGOL 60 was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.

John Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth 's suggestion renamed Backus–Naur form .

[ 1 ] Peter Naur: "As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960." [ 2 ] The following people attended the meeting in Paris (from January 11 to 16): Friedrich Ludwig Bauer , Peter Naur , Heinz Rutishauser , Klaus Samelson , Bernard Vauquois , Adriaan van Wijngaarden , and Michael Woodger (from Europe) John Warner Backus , Julien Green , Charles Katz , John McCarthy , Alan Jay Perlis , and Joseph Henry Wegstein (from the USA).

Alan Perlis gave a vivid description of the meeting: "The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent." The language originally did not include recursion . It was inserted into the specification at the last minute, against the wishes of some of the committee.

[ 3 ] ALGOL 60 inspired many languages that followed it.

Tony Hoare remarked: "Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors." [ 4 ] [ 5 ] ALGOL 60 implementations timeline [ edit ] To date there have been at least 70 augmentations, extensions, derivations and sublanguages of ALGOL 60.

[ 6 ] Name Year Author State Description Target CPU X1 ALGOL 60 August 1960 [ 7 ] Edsger W. Dijkstra and Jaap A. Zonneveld Netherlands First implementation of ALGOL 60 [ 8 ] Electrologica X1 Algol 1960 [ 9 ] Edgar T. Irons USA ALGOL 60 CDC 1604 Burroughs Algol (Several variants) 1961 Burroughs Corporation (with participation by Hoare , Dijkstra , and others) USA Basis of the Burroughs (and now Unisys MCP based) computers Burroughs Large Systems and midrange systems Case ALGOL 1961 USA Simula was originally contracted as a simulation extension of the Case ALGOL UNIVAC 1107 GOGOL 1961 William M. McKeeman USA For ODIN time-sharing system PDP-1 DASK ALGOL 1961 Peter Naur , Jørn Jensen Denmark ALGOL 60 DASK at Regnecentralen SMIL ALGOL 1962 Torgil Ekman , Carl-Erik Fröberg Sweden ALGOL 60 SMIL at Lund University GIER ALGOL 1962 Peter Naur , Jørn Jensen Denmark ALGOL 60 GIER at Regnecentralen Dartmouth ALGOL 30 [ 10 ] 1962 Thomas Eugene Kurtz , Stephen J. Garland , Robert F. Hargraves, Anthony W. Knapp , Jorge LLacer USA ALGOL 60 LGP-30 Alcor Mainz 2002 1962 Ursula Hill-Samelson, Hans Langmaack Germany Siemens 2002 ALCOR-Illinois 7090 1962 [ 11 ] [ 12 ] Manfred Paul , Hans Rüdiger Wiehle, David Gries , and Rudolf Bayer USA , West Germany ALGOL 60 Implemented at Illinois and the TH München , 1962-1964 IBM 7090 USS 90 Algol 1962 L. Petrone Italy Elliott ALGOL 1962 C. A. R. Hoare UK Discussed in his 1980 Turing Award lecture Elliott 803 & the Elliott 503 ALGOL 60 1962 Roland Strobel [ 13 ] East Germany Implemented by the Institute for Applied Mathematics, German Academy of Sciences at Berlin Zeiss-Rechenautomat ZRA 1 ALGOL 60 1962 Bernard Vauquois , Louis Bolliet [ 14 ] France Institut d'Informatique et Mathématiques Appliquées de Grenoble (IMAG) and Compagnie des Machines Bull Bull Gamma 60 Algol Translator 1962 G. van der Mey and W.L. van der Poel Netherlands Staatsbedrijf der Posterijen, Telegrafie en Telefonie ZEBRA Kidsgrove Algol 1963 F. G. Duncan UK English Electric Company KDF9 SCALP [ 15 ] 1963 Stephen J. Garland , Anthony W. Knapp , Thomas Eugene Kurtz USA Self-Contained ALgol Processor for a subset of ALGOL 60 LGP-30 VALGOL 1963 Val Schorre USA A test of the META II compiler compiler FP6000 Algol 1963 Roger Moore Canada written for Saskatchewan Power Corp FP6000 Whetstone 1964 Brian Randell and Lawford John Russell UK Atomic Power Division of English Electric Company. Precursor to Ferranti Pegasus , National Physical Laboratories ACE and English Electric DEUCE implementations English Electric Company KDF9 ALGOL 60 1964 Jean-Claude Boussard [ 16 ] France Institut d'informatique et mathématiques appliquées de Grenoble [ fr ] IBM 7090 ALGOL-GENIUS 1964 Börje Langefors Sweden Added COBOL -inspired data records and I/O Datasaab D-21 ALGOL 60 1965 Claude Pair [ fr ] [ 17 ] France Centre de calcul de la Faculté des Sciences de Nancy IBM 1620 Dartmouth ALGOL 1965 Stephen J. Garland , Sarr Blumson, Ron Martin USA ALGOL 60 Dartmouth Time-Sharing System for the GE 235 NU ALGOL 1965 Norway UNIVAC ALGOL 60 1965 [ 18 ] F.E.J. Kruseman Aretz Netherlands MC compiler for the EL-X8 Electrologica X8 ALGEK 1965 Soviet Union Minsk-22 АЛГЭК, based on ALGOL 60 and COBOL support, for economical tasks MALGOL 1966 publ. A. Viil, M Kotli & M. Rakhendi, Estonian SSR Minsk-22 ALGAMS 1967 GAMS group (ГАМС, группа автоматизации программирования для машин среднего класса), cooperation of Comecon Academies of Science Comecon Minsk-22 , later ES EVM , BESM ALGOL/ZAM 1967 Poland Polish ZAM computer Chinese Algol 1972 China Chinese characters, expressed via the Symbol system DG/L 1972 USA DG Eclipse family of Computers NASE 1990 Erik Schoenfelder Germany Interpreter Linux and MS Windows MARST 2000 Andrew Makhorin Russia ALGOL 60 to C translator All CPUs supported by the GNU Compiler Collection; MARST is part of the GNU project The Burroughs dialects included special system programming dialects such as ESPOL and NEWP .

Properties [ edit ] ALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput (ALGOL 68 parlance for input/output) facilities.

ALGOL 60 provided two evaluation strategies for parameter passing: the common call-by-value , and call-by-name . The procedure declaration specified, for each formal parameter, which was to be used: value specified for call-by-value, and omitted for call-by-name. Call-by-name has certain effects in contrast to call-by-reference . For example, without specifying the parameters as value or reference , it is impossible to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.

[ 19 ] Think of passing a pointer to swap(i, A[i]) in to a function. Now that every time swap is referenced, it's reevaluated. Say i := 1 and A[i] := 2, so every time swap is referenced it'll return the other combination of the values ([1,2], [2,1], [1,2] and so on). A similar situation occurs with a random function passed as actual argument.

Call-by-name is known by many compiler designers for the interesting " thunks " that are used to implement it.

Donald Knuth devised the " man or boy test " to separate compilers that correctly implemented " recursion and non-local references." This test contains an example of call-by-name.

Language levels [ edit ] The ALGOL 60 reports recognize three different levels of language, i.e., a Reference Language, a Publication Language, and several Hardware Representations. The Reference and Publication languages have no reserved words, however the reports do recommend [ 20 ] reserving some identifiers for standard functions.

The reports briefly describe hardware representations. Implementations differ in their hardware representations of underlined independent basic symbols [ 21 ] Reserved words Stropping ALGOL 60 Reserved words and restricted identifiers [ edit ] There are 24 reserved words in the Modified Report: ARRAY BEGIN BOOLEAN COMMENT DO ELSE END FALSE FOR GOTO IF INTEGER LABEL OWN PROCEDURE REAL STEP STRING SWITCH THEN TRUE UNTIL VALUE WHILE There are 35 such reserved words in the standard Burroughs Large Systems sub-language: ALPHA ARRAY BEGIN BOOLEAN COMMENT CONTINUE DIRECT DO DOUBLE ELSE END EVENT FALSE FILE FOR FORMAT GO IF INTEGER LABEL LIST LONG OWN POINTER PROCEDURE REAL STEP SWITCH TASK THEN TRUE UNTIL VALUE WHILE ZIP There are 71 such restricted identifiers in the standard Burroughs Large Systems sub-language: ACCEPT AND ATTACH BY CALL CASE CAUSE CLOSE DEALLOCATE DEFINE DETACH DISABLE DISPLAY DIV DUMP ENABLE EQL EQV EXCHANGE EXTERNAL FILL FORWARD GEQ GTR IMP IN INTERRUPT IS LB LEQ LIBERATE LINE LOCK LSS MERGE MOD MONITOR MUX NEQ NO NOT ON OPEN OR OUT PICTURE PROCESS PROCURE PROGRAMDUMP RB READ RELEASE REPLACE RESET RESIZE REWIND RUN SCAN SEEK SET SKIP SORT SPACE SWAP THRU TIMES TO WAIT WHEN WITH WRITE and also the names of all the intrinsic functions.

Standard operators [ edit ] Priority Operator first arithmetic first ↑ (power) second ×, / (real), ÷ (integer) third +, - second <, ≤, =, ≥, >, ≠ third ¬ (not) fourth ∧ (and) fifth ∨ (or) sixth ⊃ (implication) seventh ≡ (equivalence) Examples and portability issues [ edit ] Code sample comparisons [ edit ] ALGOL 60 [ edit ] procedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k); value n, m; array a; integer n, m, i, k; real y; comment The absolute greatest element of the matrix a, of size n by m,
    is copied to y, and the subscripts of this element to i and k; begin integer p, q;
    y := 0; i := k := 1; for p := 1 step 1 until n do for q := 1 step 1 until m do if abs(a[p, q]) > y then begin y := abs(a[p, q]);
                    i := p; k := q end end Absmax; Implementations differ in how the text in bold must be written. The word 'INTEGER', including the quotation marks, must be used in some implementations in place of integer , above, thereby designating it as a special keyword.

Following is an example of how to produce a table using Elliott 803 ALGOL: [ 22 ] FLOATING POINT ALGOL TEST'
 BEGIN REAL A,B,C,D'

 READ D'

 FOR A:= 0.0 STEP D UNTIL 6.3 DO
 BEGIN
   PRINT PUNCH(3) ,££L??'
   B := SIN(A)'
   C := COS(A)'
   PRINT PUNCH(3) , SAMELINE , ALIGNED(1,6) ,A,B,C'
 END'
 END' ALGOL 60 family [ edit ] Since ALGOL 60 had no I/O facilities, there is no portable hello world program in ALGOL. The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from The Language Guide [ 23 ] at the University of Michigan -Dearborn Computer and Information
Science Department Hello world! ALGOL Example Program page.

[ 24 ] BEGIN
  FILE F(KIND=REMOTE); EBCDIC ARRAY E[0:11];
  REPLACE E BY "HELLO WORLD!";
  WRITE(F, *, E);
END.

Where * etc. represented a format specification as used in FORTRAN, e.g.

[ 25 ] A simpler program using an inline format: BEGIN FILE F ( KIND = REMOTE ); WRITE ( F , < "HELLO WORLD!" > ); END .

An even simpler program using the Display statement: BEGIN DISPLAY ( "HELLO WORLD!" ) END .

An alternative example, using Elliott Algol I/O is as follows. Elliott Algol used different characters for "open-string-quote" and "close-string-quote", represented here by ‘ and ’ .

program HiFolks ; begin print ‘ Hello world ’ end ; Here's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5-hole paper tape and thus only had upper case. The code lacked any quote characters so £ (pound sign) was used for open quote and ?

(question mark) for close quote. Special sequences were placed in double quotes (e.g., £L?? produced a new line on the teleprinter).

HIFOLKS'
  BEGIN
     PRINT £HELLO WORLD£L??'
  END' The ICT 1900 series Algol I/O version allowed input from paper tape or punched card. Paper tape 'full' mode allowed lower case. Output was to a line printer. Note use of '(', ')', and %.

[ 26 ] 'PROGRAM' (HELLO)
  'BEGIN'
     'COMMENT' OPEN QUOTE IS '(', CLOSE IS ')', PRINTABLE SPACE HAS TO
               BE WRITTEN AS % BECAUSE SPACES ARE IGNORED;
     WRITE TEXT('('HELLO%WORLD')');
  'END'
  'FINISH' LEAP [ edit ] LEAP is an extension to the ALGOL 60 programming language which provides an associative memory of triples. The three items in a triple denote the association that an Attribute of an Object has a specific Value. LEAP was created by Jerome Feldman (University of California Berkeley) and Paul Rovner (MIT Lincoln Lab) in 1967. LEAP was also implemented in SAIL.

See also [ edit ] ABC ALGOL ALGOL ALGOL 58 ALGOL N ALGOL 68 ALGOL W ALGOL X Atlas Autocode Coral 66 Edinburgh IMP Jensen's Device ISWIM JOVIAL NELIAC Simula S-algol Scheme (programming language) References [ edit ] ^ Knuth, Donald E.

(December 1964).

"Backus normal Form vs Backus Naur Form" .

Communications of the ACM .

7 (12): 735– 6.

doi : 10.1145/355588.365140 .

S2CID 47537431 .

^ ACM Award Citation / Peter Naur , 2005 ^ van Emden, Maarten (2014).

"How recursion got into programming: a tale of intrigue, betrayal, and advanced programming-language semantics" .

A Programmer's Place .

^ Hoare, C.A.R.

(December 1973).

"Hints on Programming Language Design" (PDF) . p. 27.

(This statement is sometimes erroneously attributed to Edsger W. Dijkstra , also involved in implementing the first ALGOL 60 compiler .) ^ Abelson, Hal ; Dybvig, R. K.

; et al. Rees, Jonathan; Clinger, William (eds.).

"Revised(3) Report on the Algorithmic Language Scheme (Dedicated to the Memory of ALGOL 60)" . Retrieved 2009-10-20 .

^ The Encyclopedia of Computer Languages Archived September 27, 2011, at the Wayback Machine ^ Daylight, E. G. (2011).

"Dijkstra's Rallying Cry for Generalization: the Advent of the Recursive Procedure, late 1950s – early 1960s" .

The Computer Journal .

54 (11): 1756– 1772.

doi : 10.1093/comjnl/bxr002 .

^ Kruseman Aretz, F.E.J. (30 June 2003).

"The Dijkstra-Zonneveld ALGOL 60 compiler for the Electrologica X1" (PDF) .

Software Engineering . History of Computer Science. Amsterdam: Centrum Wiskunde & Informatica.

ISSN 1386-3711 . Archived from the original (PDF) on 2004-01-17.

^ Irons, Edgar T.

, A syntax directed compiler for ALGOL 60, Communications of the ACM, Vol. 4, p. 51. (Jan. 1961) ^ Kurtz 1978 .

^ Gries, D.; Paul, M.; Wiehle, H. R (1965).

"Some techniques used in the ALCOR Illinois 7090" .

Communications of the ACM .

8 (8): 496– 500.

doi : 10.1145/365474.365511 .

S2CID 18365024 .

^ Bayer, R.; Gries, D.; Paul, M.; Wiehle, H. R. (1967).

"The ALCOR Illinois 7090/7094 post mortem dump" .

Communications of the ACM .

10 (12): 804– 808.

doi : 10.1145/363848.363866 .

S2CID 3783605 .

^ Rechenautomaten mit Trommelspeicher , Förderverein der Technischen Sammlung Dresden ^ Mounier-Kuhn, Pierre (2014).

"Algol in France: From Universal Project to Embedded Culture" .

IEEE Annals of the History of Computing .

36 (4): 6– 25.

doi : 10.1109/MAHC.2014.50 .

ISSN 1058-6180 .

^ Kurtz 1978 , p. 517.

^ Boussard, Jean-Claude (June 1964).

Etude et réalisation d'un compilateur Algol60 sur calculateur éléctronique du type IBM 7090/94 et 7040/44 [ Design and implementation of a compiler Algol60 on electronic calculator IBM 7090/94 and 7040/44 ] (PhD) (in French). Université Joseph-Fourier - Grenoble I.

^ Claude Pair (27 April 1965).

Description d'un compilateur ALGOL .

European Région 1620 Users Group . IBM.

^ Kruseman Aretz, F.E.J. (1973).

An Algol 60 compiler in Algol 60 . Mathematical Centre Tracts. Amsterdam: Mathematisch Centrum.

^ Aho, Alfred V.

; Sethi, Ravi ; Ullman, Jeffrey D.

(1986).

Compilers: Principles, Techniques, and Tools (1st ed.). Addison-Wesley.

ISBN 978-0-201-10194-2 .

, Section 7.5, and references therein ^ Naur et al. 1963 , 3.2.4. Standard functions ^ Naur et al. 1963 , 2.1. Letters: (1) It should be particularly noted that throughout the reference language underlining [here this looks like underlined; N.L.] is used for defining independent basic symbols (see sections 2.2.2 and 2.3). These are understood to have no relation to the individual letters of which they are composed. Within the present report underlining will be used for no other purposes.

^ "803 ALGOL" , the manual for Elliott 803 ALGOL ^ "The ALGOL Programming Language" .

www.engin.umd.umich.edu . Archived from the original on 10 February 2010 . Retrieved 11 January 2022 .

^ "Hello world! Example Program" .

www.engin.umd.umich.edu . Archived from the original on 4 February 2010 . Retrieved 11 January 2022 .

^ Fortran#"Hello, World!" example ^ "ICL 1900 series: Algol Language" . ICL Technical Publication 3340. 1965.

Bibliography [ edit ] Backus, John W.

; Bauer, Friedrich L.

; Green, J.; Katz, C.; J. McCarthy ; P. Naur ; A.J. Perlis ; H. Rutishauser ; K. Samuelson; B. Vauquois ; J.H. Wegstein ; A. van Wijngaarden ; M. Woodger (January 1963).

Peter Naur (ed.).

"Revised Report on the Algorithmic Language Algol 60" .

Communications of the ACM .

6 (1). Association for Computing Machinery.

doi : 10.1145/366193.366201 .

S2CID 7853511 .

Kurtz, Thomas E. (1978). "BASIC".

History of programming languages . pp.

515– 537.

doi : 10.1145/800025.1198404 .

ISBN 0127450408 .

Further reading [ edit ] Dijkstra, Edsger W.

(1961).

"ALGOL 60 Translation: An ALGOL 60 Translator for the X1 and Making a Translator for ALGOL 60 (PDF) (Technical report). Amsterdam: Mathematisch Centrum. 35.

Randell, Brian ; Russell, Lawford John (1964).

ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer . Academic Press.

OCLC 526731 .

The design of the Whetstone Compiler . One of the early published descriptions of implementing a compiler. See the related papers: Whetstone Algol Revisited , and The Whetstone KDF9 ALGOL Translator by Brian Randell Goos, Gerhard [in German] (2017-08-07).

Geschichte der deutschsprachigen Informatik - Programmiersprachen und Übersetzerbau [ History of informatics in German-speaking countries - Programming languages and compiler design ] (PDF) (in German). Karlsruhe, Germany: Fakultät für Informatik, Karlsruhe Institute of Technology (KIT).

Archived (PDF) from the original on 2022-05-19 . Retrieved 2022-11-14 .

(11 pages) External links [ edit ] Revised Report on the Algorithmic Language ALGOL 60 by Peter Naur, et al. ALGOL definition A BNF syntax summary of ALGOL 60 "The Emperor's Old Clothes" – Hoare's 1980 ACM Turing Award speech, which discusses ALGOL history and his involvement MARST , a free ALGOL-to-C translator An Implementation of ALGOL 60 for the FP6000 Archived 2020-07-25 at the Wayback Machine Discussion of some implementation issues.

Naur, Peter (August 1978).

"The European Side of the Last Phase of the Development of ALGOL 60" .

ACM SIGPLAN Notices .

13 (8): 15– 44.

doi : 10.1145/960118.808370 .

S2CID 15552479 .

Edinburgh University wrote compilers for Algol60 (later updated for Algol60M) based on their Atlas Autocode compilers initially bootstrapped from the Atlas to the KDF-9. The Edinburgh compilers generated code for the ICL1900, the ICL4/75 (an IBM360 clone), and the ICL2900. Here is the BNF for Algol60 Archived 2020-05-15 at the Wayback Machine and the ICL2900 compiler source Archived 2020-05-15 at the Wayback Machine , library documentation Archived 2020-05-15 at the Wayback Machine , and a considerable test suite Archived 2020-05-15 at the Wayback Machine including Brian Wichmann's tests.

Archived 2020-05-15 at the Wayback Machine Also there is a rather superficial Algol60 to Atlas Autocode source-level translator Archived 2020-05-15 at the Wayback Machine .

Eric S. Raymond 's Retrocomputing Museum , among others a link to the NASE ALGOL 60 interpreter written in C.

The NASE interpreter Stories of the B5000 and People Who Were There: a dedicated ALGOL computer [1] , [2] Bottenbruch, Hermann (1961).

Structure and Use of ALGOL 60 (Report).

doi : 10.2172/4020495 .

OSTI 4020495 .

NUMAL A Library of Numerical Procedures in ALGOL 60 developed at The Stichting Centrum Wiskunde & Informatica ( legal successor of Stichting Mathematisch Centrum) legal owner .

ALGOL 60 resources: translators, documentation, programs ALGOL 60 included in Racket v t e ALGOL Implementations Technical standards ALGOL 58 ALGOL 60 ALGOL 68 Dialects ABC ALGOL ALCOR ALGO ALGOL 68C ALGOL 68-R ALGOL 68RS ( ELLA ) ALGOL 68S ALGOL N ALGOL W ALGOL X Atlas Autocode ( Edinburgh IMP ) Burroughs ALGOL CORAL 66 Dartmouth ALGOL 30 DASK ALGOL DG/L Elliott ALGOL Executive Systems Problem Oriented Language (ESPOL) → New Executive Programming Language ( NEWP ) FLACC IMP JOVIAL Kidsgrove Algol MAD Mary NELIAC RTL/2 S-algol , PS-algol , Napier88 Simula Small Machine ALGOL Like Language ( SMALL ) SMIL ALGOL Formalisms Jensen's device Van Wijngaarden grammar Community Organizations Professional associations ALCOR Group Association for Computing Machinery (ACM) BSI Group Euro-Asian Council for Standardization, Metrology and Certification (EASC) International Federation for Information Processing (IFIP) IFIP Working Group 2.1 Society of Applied Mathematics and Mechanics (GAMM) Business Burroughs Corporation Elliott Brothers Regnecentralen Education Case Institute of Technology University of Edinburgh University of St Andrews Manchester University Massachusetts Institute of Technology (MIT) Government Royal Radar Establishment (RRE) People ALGOL 58 John Backus Friedrich L. Bauer Hermann Bottenbruch Charles Katz Alan Perlis Heinz Rutishauser Klaus Samelson Joseph Henry Wegstein MAD Bruce Arden Bernard Galler Robert M. Graham ALGOL 60 Backus^ Roland Carl Backhouse Bauer^ Richard Bird Stephen R. Bourne Edsger W. Dijkstra Andrey Ershov Robert W. Floyd Jeremy Gibbons Julien Green David Gries Eric Hehner Tony Hoare Jørn Jensen Katz^ Peter Landin Tom Maibaum Conor McBride John McCarthy Carroll Morgan Peter Naur Maurice Nivat John E. L. Peck Perlis^ Brian Randell Rutishauser^ Samelson^ Jacob T. Schwartz Micha Sharir David Turner Bernard Vauquois Eiiti Wada Wegstein^ Adriaan van Wijngaarden Mike Woodger Simula Ole-Johan Dahl Kristen Nygaard ALGOL 68 Bauer^ Susan G. Bond Bourne^ Robert Dewar Dijkstra^ Gerhard Goos Michael Guy Hoare^ Cornelis H. A. Koster Peter Landin Charles H. Lindsey Barry J. Mailloux McCarthy^ Lambert Meertens Naur^ Peck^ Willem van der Poel Randell^ Douglas T. Ross Samelson^ Michel Sintzoff van Wijngaarden^ Niklaus Wirth Woodger^ Philip Woodward Nobuo Yoneda Hal Abelson John Barnes Tony Brooker Ron Morrison Peter O'Hearn John C. Reynolds ALGOL Bulletin Comparison ALGOL 58 influence on ALGOL 60 ALGOL 68 to other languages ^ = full name and link in prior ALGOL version above Category: ALGOL Category: ALGOL 60 v t e International Organization for Standardization (ISO) standards List of ISO standards – ISO romanizations – IEC standards 1–9999 1 2 3 4 6 7 9 16 17 31 -0 -1 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 68-1 128 216 217 226 228 233 259 261 262 302 306 361 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1073-2 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 2921 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6373 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9496 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10279 10303 -11 -21 -22 -28 -238 10383 10585 10589 10628 10646 10664 10746 10861 10957 10962 10967 11073 11170 11172 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 ( -2 ) 11941 11941 (TR) 11992 12006 12052 12182 12207 12234-2 12620 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 13816 13818 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14617 14644 14649 14651 14698 14764 14882 14971 15022 15189 15288 15291 15398 15408 15444 -3 -9 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 15938 16023 16262 16355-1 16485 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17506 17799 18004 18014 18181 18245 18629 18760 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000–29999 20000 20022 20121 20400 20802 20830 21000 21001 21047 21122 21500 21778 21827 22000 22275 22300 22301 22395 22537 23000 23003 23008 23009 23090-3 23092 23094-1 23094-2 23270 23271 23360 23941 24517 24613 24617 24707 24728 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30000+ 30170 31000 32000 37001 38500 39075 40314 40500 42010 45001 50001 55000 56000 80000 Category Authority control databases : National Germany NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐rhzlw
Cached time: 20250817045044
Cache expiry: 1278571
Reduced expiry: true
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.720 seconds
Real time usage: 0.889 seconds
Preprocessor visited node count: 7131/1000000
Revision size: 36709/2097152 bytes
Post‐expand include size: 177461/2097152 bytes
Template argument size: 8675/2097152 bytes
Highest expansion depth: 14/100
Expensive parser function count: 10/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 105440/5000000 bytes
Lua time usage: 0.340/10.000 seconds
Lua memory usage: 8610617/52428800 bytes
Number of Wikibase entities loaded: 1/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  674.706      1 -total
 29.52%  199.180      1 Template:Reflist
 16.06%  108.335      7 Template:Cite_journal
 14.51%   97.882      8 Template:Navbox
 11.80%   79.639      1 Template:ALGOL_programming
  8.91%   60.122      1 Template:Short_description
  7.61%   51.372      1 Template:Infobox_programming_language
  7.17%   48.351     35 Template:Flag
  7.07%   47.669      1 Template:Infobox
  6.21%   41.897      2 Template:Sfn Saved in parser cache with key enwiki:pcache:692878:|#|:idhash:canonical and timestamp 20250817045044 and revision id 1291935618. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=ALGOL_60&oldid=1291935618 " Categories : ALGOL 60 Algol programming language family Academic programming languages Procedural programming languages Structured programming languages Systems programming languages Programming languages created in 1960 Programming languages with an ISO standard Hidden categories: Webarchive template wayback links CS1 French-language sources (fr) Articles with short description Short description matches Wikidata Wikipedia articles needing clarification from December 2024 CS1 interwiki-linked names CS1 German-language sources (de) Articles with example ALGOL 60 code This page was last edited on 24 May 2025, at 08:28 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents ALGOL 60 18 languages Add topic

