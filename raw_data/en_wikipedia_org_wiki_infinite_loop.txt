Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Overview 2 Details 3 Intended vs unintended looping Toggle Intended vs unintended looping subsection 3.1 Intentional looping 3.1.1 Spinlocks 3.1.2 Multi-threading 3.2 Unintentional looping 4 Interruption 5 Language support 6 Examples of intentional infinite loops 7 Examples of unintentional infinite loops Toggle Examples of unintentional infinite loops subsection 7.1 Mathematical errors 7.2 Rounding errors 8 Multi-party loops 9 Pseudo-infinite loops Toggle Pseudo-infinite loops subsection 9.1 Very large numbers 9.2 Impossible termination condition 9.3 Infinite recursion 9.4 Break statement 9.5 Alderson loop 10 See also 11 References 12 External links Toggle the table of contents Infinite loop 27 languages العربية Azərbaycanca Català Čeština Dansk Deutsch Español فارسی Français 한국어 Bahasa Indonesia Italiano Қазақша Nederlands 日本語 Polski Português Русский Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska Türkçe Українська Tiếng Việt 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Programming idiom This article is about the programming term and is not to be confused with Infinite Loop (street) or Infinite Loop (book) .

"Endless loop" redirects here; not to be confused with Endless Loop (album) .

Loop constructs Do while loop While loop For loop Foreach loop Infinite loop Control flow v t e In computer programming , an infinite loop (or endless loop ) [ 1 ] [ 2 ] is a sequence of instructions that, as written, will continue endlessly, unless an external intervention occurs, such as turning off power via a switch or pulling a plug. It may be intentional.

There is no general algorithm to determine whether a computer program contains an infinite loop or not; this is the halting problem .

Overview [ edit ] This differs from "a type of computer program that runs the same instructions continuously until it is either stopped or interrupted".

[ 3 ] Consider the following pseudocode : how_many = 0 while is_there_more_data () do how_many = how_many + 1 end display "the number of items counted = " how_many The same instructions were run continuously until it was stopped or interrupted . . . by the FALSE returned at some point by the function is_there_more_data .

By contrast, the following loop will not end by itself: birds = 1 fish = 2 while birds + fish > 1 do birds = 3 - birds fish = 3 - fish end birds will alternate being 1 or 2, while fish will alternate being 2 or 1. The loop will not stop unless an external intervention occurs ("pull the plug").

Details [ edit ] An infinite loop is a sequence of instructions in a computer program which loops endlessly, either due to the loop having no terminating condition, [ 4 ] having one that can never be met, or one that causes the loop to start over. In older operating systems with cooperative multitasking , [ 5 ] infinite loops normally caused the entire system to become unresponsive. With the now-prevalent preemptive multitasking model, infinite loops usually cause the program to consume all available processor time, but can usually be terminated by a user.

Busy wait loops are also sometimes called "infinite loops". Infinite loops are one possible cause for a computer hanging or freezing ; others include thrashing , deadlock , and access violations .

Intended vs unintended looping [ edit ] Looping is repeating a set of instructions until a specific condition is met. An infinite loop occurs when the condition will never be met due to some inherent characteristic of the loop.

Intentional looping [ edit ] There are a few situations when this is desired behavior. For example, the games on cartridge-based game consoles typically have no exit condition in their main loop, as there is no operating system for the program to exit to; the loop runs until the console is powered off.

Modern interactive computers require that the computer constantly be monitoring for user input or device activity, so at some fundamental level there is an infinite processing idle loop that must continue until the device is turned off or reset. In the Apollo Guidance Computer , for example, this outer loop was contained in the Exec program, [ 6 ] and if the computer had absolutely no other work to do, it would loop run a dummy job that would simply turn off the "computer activity" indicator light.

Modern computers also typically do not halt the processor or motherboard circuit-driving clocks when they crash. Instead they fall back to an error condition displaying messages to the operator (such as the blue screen of death ), and enter an infinite loop waiting for the user to either respond to a prompt to continue, or reset the device.

Spinlocks [ edit ] Spinlocks are low-level synchronization mechanisms used in concurrent programming to protect shared resources. Unlike traditional locks that put a thread to sleep when it can't acquire the lock, spinlocks repeatedly "spin" in an infinite loop until the lock becomes available. This intentional infinite looping is a deliberate design choice aimed at minimizing the time a thread spends waiting for the lock and avoiding the overhead of higher level synchronisation mechanisms such as mutexes .

Multi-threading [ edit ] In multi-threaded programs some threads can be executing inside infinite loops without causing the entire program to be stuck in an infinite loop. If the main thread exits, all threads of the process are forcefully stopped, thus all execution ends and the process/program terminates. The threads inside the infinite loops can perform "housekeeping" tasks or they can be in a blocked state waiting for input (from socket/queue) and resume execution every time input is received.

Unintentional looping [ edit ] A blue screen of death on Windows XP . "The device driver got stuck in an infinite loop." Most often, the term is used for those situations when this is not the intended result; that is, when this is a bug .

[ 7 ] Such errors are most common by novice programmers, but can be made by experienced programmers also, because their causes can be quite subtle.

One common cause, for example, is that a programmer intends to iterate over sequence of nodes in a data structure such as a linked list or tree , executing the loop code once for each node. Improperly formed links can create a reference loop in the data structure, where one node links to another that occurs earlier in the sequence. This makes part of the data structure into a ring , causing naive code to loop forever.

While most infinite loops can be found by close inspection of the code, there is no general method to determine whether a given program will ever halt or will run forever; this is the undecidability of the halting problem .

[ 8 ] Interruption [ edit ] As long as the system is responsive, infinite loops can often be interrupted by sending a signal to the process (such as SIGINT in Unix), or an interrupt to the processor, causing the current process to be aborted. This can be done in a task manager , in a terminal with the Control-C command, [ 9 ] or by using the kill command or system call . However, this does not always work, as the process may not be responding to signals or the processor may be in an uninterruptible state, such as in the Cyrix coma bug (caused by overlapping uninterruptible instructions in an instruction pipeline ). In some cases other signals such as SIGKILL can work, as they do not require the process to be responsive, while in other cases the loop cannot be terminated short of system shutdown.

Language support [ edit ] See also: Control flow Infinite loops can be implemented using various control flow constructs. Most commonly, in unstructured programming this is jump back up ( goto ), while in structured programming this is an indefinite loop ( while loop ) set to never end, either by omitting the condition or explicitly setting it to true, as while (true) ...

.

Some languages have special constructs for infinite loops, typically by omitting the condition from an indefinite loop. Examples include Ada ( loop ... end loop ), [ 10 ] Fortran ( DO ... END DO ), Go ( for { ... } ), Ruby ( loop do ... end ), and Rust ( loop { ... } ).

Examples of intentional infinite loops [ edit ] A simple example (in C ): #include <stdio.h> int main () { for (;;) // or equivalently, while (1) printf ( "Infinite Loop \n " ); return 0 ; } The form for (;;) for an infinite loop is traditional, appearing in the standard reference The C Programming Language , and is often punningly pronounced "forever".

[ 11 ] This is a loop that will print "Infinite Loop" without halting.

A similar example in 1980s-era BASIC : 10 PRINT "INFINITE LOOP" 20 GOTO 10 A similar example in MS-DOS compatible batch files: : A echo Infinite Loop goto : A In Java : while ( true ) { System .

out .

println ( "Infinite Loop" ); } The while loop never terminates because its condition is always true.

In Bourne Again Shell : for (( ;; )) ; do echo "Infinite Loop" done In Rust : loop { println!

( "Infinite loop" ); } Examples of unintentional infinite loops [ edit ] Mathematical errors [ edit ] Here is one example of an infinite loop in Visual Basic : dim x as integer do while x < 5 x = 1 x = x + 1 loop This creates a situation where x will never be greater than 5, since at the start of the loop code, x is assigned the value of 1 (regardless of any previous value) before it is changed to x + 1. Thus the loop will always result in x = 2 and will never break. This could be fixed by moving the x = 1 instruction outside the loop so that its initial value is set only once.

In some languages, programmer confusion about mathematical symbols may lead to an unintentional infinite loop. For example, here is a snippet in C : #include <stdio.h> int main ( void ) { int a = 0 ; while ( a < 10 ) { printf ( "%d \n " , a ); if ( a = 5 ) printf ( "a equals 5!

\n " ); a ++ ; } return 0 ; } The expected output is the numbers 0 through 9, with an interjected "a equals 5!" between 5 and 6. However, in the line " if (a = 5) " above, the = (assignment) operator was confused with the == (equality test) operator. Instead, this will assign the value of 5 to a at this point in the program. Thus, a will never be able to advance to 10, and this loop cannot terminate.

Rounding errors [ edit ] C output on an AMD Turion processor: x = 0.10000000149011611938 x = 0.20000000298023223877 x = 0.30000001192092895508 x = 0.40000000596046447754 x = 0.50000000000000000000 x = 0.60000002384185791016 x = 0.70000004768371582031 x = 0.80000007152557373047 x = 0.90000009536743164062 x = 1.00000011920928955078 x = 1.10000014305114746094 x = 1.20000016689300537109 ...

Unexpected behavior in evaluating the terminating condition can also cause this problem. Here is an example in C : float x = 0.1 ; while ( x != 1.1 ) { printf ( "x = %22.20f \n " , x ); x += 0.1 ; } On some systems, this loop will execute ten times as expected, but on other systems it will never terminate. The problem is that the loop terminating condition (x != 1.1) tests for exact equality of two floating point values, and the way floating point values are represented in many computers will make this test fail, because they cannot represent the value 0.1 exactly, thus introducing rounding errors on each increment (cf. box).

The same can happen in Python : x = 0.1 while x != 1 : print ( x ) x += 0.1 Because of the likelihood of tests for equality or not-equality failing unexpectedly, it is safer to use greater-than or less-than tests when dealing with floating-point values. For example, instead of testing whether x equals 1.1, one might test whether (x <= 1.0) , or (x < 1.1) , either of which would be certain to exit after a finite number of iterations. Another way to fix this particular example would be to use an integer as a loop index , counting the number of iterations that have been performed.

A similar problem occurs frequently in numerical analysis : in order to compute a certain result, an iteration is intended to be carried out until the error is smaller than a chosen tolerance. However, because of rounding errors during the iteration, the specified tolerance can never be reached, resulting in an infinite loop.

Multi-party loops [ edit ] An infinite loop may be caused by several entities interacting. Consider a server that always replies with an error message if it does not understand the request. Even if there is no possibility for an infinite loop within the server itself, a system comprising two of them ( A and B ) may loop endlessly: if A receives a message of unknown type from B , then A replies with an error message to B ; if B does not understand the error message, it replies to A with its own error message; if A does not understand the error message from B , it sends yet another error message, and so on.

One common example of such situation is an email loop. An example of an email loop is if someone receives mail from a no reply inbox, but their auto-response is on. They will reply to the no reply inbox, triggering the "this is a no reply inbox" response. This will be sent to the user, who then sends an auto reply to the no-reply inbox, and so on and so forth.

Pseudo-infinite loops [ edit ] A pseudo-infinite loop is a loop that appears infinite but is really just a very long loop.

Very large numbers [ edit ] An example in bash : for x in $( seq 1000000000 ) ; do #loop code done Impossible termination condition [ edit ] An example for loop in C : unsigned int i ; for ( i = 1 ; i != 0 ; i ++ ) { /* loop code */ } It appears that this will go on indefinitely, but in fact the value of i will eventually reach the maximum value storable in an unsigned int and adding 1 to that number will wrap-around to 0, breaking the loop. The actual limit of i depends on the details of the system and compiler used. With arbitrary-precision arithmetic , this loop would continue until the computer's memory could no longer hold i . If i was a signed integer, rather than an unsigned integer, overflow would be undefined. In this case, the compiler could optimize the code into an infinite loop.

Infinite recursion [ edit ] Main article: Recursion (computer science) § Infinite recursion Infinite recursion is a special case of an infinite loop that is caused by recursion .

The following example in Visual Basic for Applications (VBA) returns a stack overflow error: Sub Test1 () Call Test1 End Sub Break statement [ edit ] A " while (true) " loop looks infinite at first glance, but there may be a way to escape the loop through a break statement or return statement .
Example in PHP : while ( true ) { if ( $foo -> bar ()) { return ; } } Alderson loop [ edit ] Alderson loop is a rare slang or jargon term for an infinite loop where there is an exit condition available, but inaccessible in an implementation of the code, typically due to a programmer error. These are most common and visible while debugging user interface code.

A C-like pseudocode example of an Alderson loop, where the program is supposed to sum numbers given by the user until zero is given, but where the wrong operator is used: int sum = 0 ; int i ; while ( true ) { printf ( "Input a number to add to the sum or 0 to quit" ); i = getUserInput (); if ( i * 0 ) { // if i times 0 is true, add i to the sum. Note: ZERO means FALSE, Non-Zero means TRUE. "i * 0" is ZERO (FALSE)!

sum += i ; // sum never changes because (i * 0) is 0 for any i; it would change if we had != in the condition instead of * } if ( sum > 100 ) { break ; // terminate the loop; exit condition exists but is never reached because sum is never added to } } The term allegedly received its name from a programmer (whose last name is Alderson) who in 1996 [ 12 ] had coded a modal dialog box in Microsoft Access without either an OK or Cancel button, thereby disabling the entire program whenever the box came up.

[ 13 ] See also [ edit ] Mathematics portal Cycle detection Divergence (computer science) Fork bomb (an infinite loop is one of two key components) Infinite regress References [ edit ] ^ "Endless loop dictionary definition" .

Archived from the original on 2020-08-01 . Retrieved 2020-01-22 .

^ "What is infinite loop (endless loop)" .

Archived from the original on 2019-07-15 . Retrieved 2020-01-22 .

^ Caruso, Denise (August 16, 1999).

"Overload of Hangers-On Creates Bumpy Ride for Internet Stocks" .

The New York Times .

Archived from the original on December 27, 2019 . Retrieved December 27, 2019 .

^ "Codes and Modes: The Character of Documentary Culture" .

Flow Journal . November 2014.

Archived from the original on 2020-08-01 . Retrieved 2020-01-23 .

an infinite loop is one that lacks .. an exit condition ^ also known as non-preemptive-multitasking: "Non-preemptive Multitasking" .

PC Magazine .

Archived from the original on July 26, 2019 . Retrieved February 7, 2024 .

^ David Hoag (September 1976).

"The History of Apollo On-board Guidance, Navigation, and Control" (PDF) . Charles Stark Draper Laboratory.

Archived (PDF) from the original on 2016-11-05 . Retrieved 2020-01-23 .

^ "New York Times Crossword Answers" . October 13, 2013.

Archived from the original on August 2, 2020 . Retrieved January 22, 2020 .

computing .. a defect .. which .. to loop ^ "Halting Problem in Theory of Computation" . 3 October 2018.

Archived from the original on 9 August 2020 . Retrieved 22 January 2020 .

^ "A Buffer Overflow Exploit Against the DameWare Remote Control software" . December 19, 2003.

Archived from the original on July 24, 2020 . Retrieved January 22, 2020 .

As soon as the command shell is closed with a control-c combination ...

^ Ada Programming: Control: Endless Loop ^ "Endless loop in C/C++" .

Archived from the original on 2016-08-03.

^ Lee Dohm (May 24, 2013).

"Alderson loop" .

Archived from the original on June 19, 2020 . Retrieved January 22, 2020 .

^ "Alderson Loop" .

The Jargon File , Version 4.4.7 .

Archived from the original on 2006-05-15 . Retrieved 2006-05-21 .

External links [ edit ] Make an infinite loop in several languages, on programming-idioms.org .

NewPP limit report
Parsed by mw‐web.codfw.main‐6cc77c66b8‐9sx9f
Cached time: 20250812000433
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.346 seconds
Real time usage: 0.425 seconds
Preprocessor visited node count: 1112/1000000
Revision size: 22880/2097152 bytes
Post‐expand include size: 26868/2097152 bytes
Template argument size: 634/2097152 bytes
Highest expansion depth: 11/100
Expensive parser function count: 25/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 72052/5000000 bytes
Lua time usage: 0.202/10.000 seconds
Lua memory usage: 5734287/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  368.498      1 -total
 41.36%  152.422      1 Template:Reflist
 31.95%  117.727      9 Template:Cite_web
 21.47%   79.120      1 Template:Loop_constructs
 21.07%   77.655      1 Template:Sidebar
 18.47%   68.059      1 Template:Short_description
 11.72%   43.196      2 Template:Pagetype
  7.67%   28.280      1 Template:Flatlist
  5.86%   21.585      1 Template:About-distinguish
  5.61%   20.688      1 Template:Portal Saved in parser cache with key enwiki:pcache:45273:|#|:idhash:canonical and timestamp 20250812000433 and revision id 1303662663. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=Infinite_loop&oldid=1303662663 " Categories : Control flow Iteration in programming Programming language comparisons Recursion Software bugs Hidden categories: Articles with short description Short description matches Wikidata Articles with example BASIC code Articles with example C code Articles with example Java code Articles with example PHP code Articles with example Python (programming language) code Articles with example Rust code This page was last edited on 1 August 2025, at 09:45 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Infinite loop 27 languages Add topic

