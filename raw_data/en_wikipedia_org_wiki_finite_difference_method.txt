Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Derive difference quotient from Taylor's polynomial 2 Accuracy and order 3 Example: ordinary differential equation 4 Example: The heat equation Toggle Example: The heat equation subsection 4.1 Explicit method 4.2 Implicit method 4.3 Crank–Nicolson method 4.4 Comparison 5 Example: The Laplace operator Toggle Example: The Laplace operator subsection 5.1 Consistency 5.2 Properties 5.2.1 Subharmonic 5.2.2 Mean value 5.2.3 Maximum principle 6 The SBP-SAT method 7 See also 8 References 9 Further reading Toggle the table of contents Finite difference method 22 languages العربية Català الدارجة Deutsch Español فارسی Français 한국어 हिन्दी Italiano Nederlands 日本語 Norsk nynorsk Polski Português Русский Suomi Svenska Türkçe Українська 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Class of numerical techniques Differential equations Scope Fields Natural sciences Engineering Astronomy Physics Chemistry Biology Geology Applied mathematics Continuum mechanics Chaos theory Dynamical systems Social sciences Economics Population dynamics List of named differential equations Classification Types Ordinary Partial Differential-algebraic Integro-differential Fractional Linear Non-linear By variable type Dependent and independent variables Autonomous Coupled / Decoupled Exact Homogeneous / Nonhomogeneous Features Order Operator Notation Relation to processes Difference (discrete analogue) Stochastic Stochastic partial Delay Solution Existence and uniqueness Picard–Lindelöf theorem Peano existence theorem Carathéodory's existence theorem Cauchy–Kowalevski theorem General topics Initial conditions Boundary values Dirichlet Neumann Robin Cauchy problem Wronskian Phase portrait Lyapunov / Asymptotic / Exponential stability Rate of convergence Series / Integral solutions Numerical integration Dirac delta function Solution methods Inspection Method of characteristics Euler Exponential response formula Finite difference ( Crank–Nicolson ) Finite element Infinite element Finite volume Galerkin Petrov–Galerkin Green's function Integrating factor Integral transforms Perturbation theory Runge–Kutta Separation of variables Undetermined coefficients Variation of parameters People List Isaac Newton Gottfried Leibniz Jacob Bernoulli Leonhard Euler Joseph-Louis Lagrange Józef Maria Hoene-Wroński Joseph Fourier Augustin-Louis Cauchy George Green Carl David Tolmé Runge Martin Kutta Rudolf Lipschitz Ernst Lindelöf Émile Picard Phyllis Nicolson John Crank v t e In numerical analysis , finite-difference methods ( FDM ) are a class of numerical techniques for solving differential equations by approximating derivatives with finite differences . Both the spatial domain and time domain (if applicable) are discretized , or broken into a finite number of intervals, and the values of the solution at the end points of the intervals are approximated by solving algebraic equations containing finite differences and values from nearby points.

Finite difference methods convert ordinary differential equations (ODE) or partial differential equations (PDE), which may be nonlinear , into a system of linear equations that can be solved by matrix algebra techniques. Modern computers can perform these linear algebra computations efficiently, and this, along with their relative ease of implementation, has led to the widespread use of FDM in modern numerical analysis.

[ 1 ] Today, FDMs are one of the most common approaches to the numerical solution of PDE, along with finite element methods .

[ 1 ] Derive difference quotient from Taylor's polynomial [ edit ] For a n -times differentiable function, by Taylor's theorem the Taylor series expansion is given as f ( x 0 + h ) = f ( x 0 ) + f ′ ( x 0 ) 1 !

h + f ( 2 ) ( x 0 ) 2 !

h 2 + ⋯ ⋯ + f ( n ) ( x 0 ) n !

h n + R n ( x ) , {\displaystyle f(x_{0}+h)=f(x_{0})+{\frac {f'(x_{0})}{1!}}h+{\frac {f^{(2)}(x_{0})}{2!}}h^{2}+\cdots +{\frac {f^{(n)}(x_{0})}{n!}}h^{n}+R_{n}(x),} Where n ! denotes the factorial of n , and R n ( x ) is a remainder term, denoting the difference between the Taylor polynomial of degree n and the original function.

Following is the process to derive an approximation for the first derivative of the function f by first truncating the Taylor polynomial plus remainder: f ( x 0 + h ) = f ( x 0 ) + f ′ ( x 0 ) h + R 1 ( x ) .

{\displaystyle f(x_{0}+h)=f(x_{0})+f'(x_{0})h+R_{1}(x).} Dividing across by h gives: f ( x 0 + h ) h = f ( x 0 ) h + f ′ ( x 0 ) + R 1 ( x ) h {\displaystyle {f(x_{0}+h) \over h}={f(x_{0}) \over h}+f'(x_{0})+{R_{1}(x) \over h}} Solving for f ′ ( x 0 ) {\displaystyle f'(x_{0})} : f ′ ( x 0 ) = f ( x 0 + h ) − − f ( x 0 ) h − − R 1 ( x ) h .

{\displaystyle f'(x_{0})={f(x_{0}+h)-f(x_{0}) \over h}-{R_{1}(x) \over h}.} Assuming that R 1 ( x ) {\displaystyle R_{1}(x)} is sufficiently small, the approximation of the first derivative of f is: f ′ ( x 0 ) ≈ ≈ f ( x 0 + h ) − − f ( x 0 ) h .

{\displaystyle f'(x_{0})\approx {f(x_{0}+h)-f(x_{0}) \over h}.} This is similar to the definition of derivative, which is: f ′ ( x 0 ) = lim h → → 0 f ( x 0 + h ) − − f ( x 0 ) h .

{\displaystyle f'(x_{0})=\lim _{h\to 0}{\frac {f(x_{0}+h)-f(x_{0})}{h}}.} except for the limit towards zero (the method is named after this).

Accuracy and order [ edit ] See also: Finite difference coefficient The error in a method's solution is defined as the difference between the approximation and the exact analytical solution. The two sources of error in finite difference methods are round-off error , the loss of precision due to computer rounding of decimal quantities, and truncation error or discretization error , the difference between the exact solution of the original differential equation and the exact quantity assuming perfect arithmetic (no round-off).

The finite difference method relies on discretizing a function on a grid.

To use a finite difference method to approximate the solution to a problem, one must first discretize the problem's domain. This is usually done by dividing the domain into a uniform grid (see image). This means that finite-difference methods produce sets of discrete numerical approximations to the derivative, often in a "time-stepping" manner.

An expression of general interest is the local truncation error of a method. Typically expressed using Big-O notation , local truncation error refers to the error from a single application of a method. That is, it is the quantity f ′ ( x i ) − − f i ′ {\displaystyle f'(x_{i})-f'_{i}} if f ′ ( x i ) {\displaystyle f'(x_{i})} refers to the exact value and f i ′ {\displaystyle f'_{i}} to the numerical approximation. The remainder term of the Taylor polynomial can be used to analyze local truncation error . Using the Lagrange form of the remainder from the Taylor polynomial for f ( x 0 + h ) {\displaystyle f(x_{0}+h)} , which is R n ( x 0 + h ) = f ( n + 1 ) ( ξ ξ ) ( n + 1 ) !

( h ) n + 1 , x 0 < ξ ξ < x 0 + h , {\displaystyle R_{n}(x_{0}+h)={\frac {f^{(n+1)}(\xi )}{(n+1)!}}(h)^{n+1}\,,\quad x_{0}<\xi <x_{0}+h,} the dominant term of the local truncation error can be discovered. For example, again using the forward-difference formula for the first derivative, knowing that f ( x i ) = f ( x 0 + i h ) {\displaystyle f(x_{i})=f(x_{0}+ih)} , f ( x 0 + i h ) = f ( x 0 ) + f ′ ( x 0 ) i h + f ″ ( ξ ξ ) 2 !

( i h ) 2 , {\displaystyle f(x_{0}+ih)=f(x_{0})+f'(x_{0})ih+{\frac {f''(\xi )}{2!}}(ih)^{2},} and with some algebraic manipulation, this leads to f ( x 0 + i h ) − − f ( x 0 ) i h = f ′ ( x 0 ) + f ″ ( ξ ξ ) 2 !

i h , {\displaystyle {\frac {f(x_{0}+ih)-f(x_{0})}{ih}}=f'(x_{0})+{\frac {f''(\xi )}{2!}}ih,} and further noting that the quantity on the left is the approximation from the finite difference method and that the quantity on the right is the exact quantity of interest plus a remainder, clearly that remainder is the local truncation error. A final expression of this example and its order is: f ( x 0 + i h ) − − f ( x 0 ) i h = f ′ ( x 0 ) + O ( h ) .

{\displaystyle {\frac {f(x_{0}+ih)-f(x_{0})}{ih}}=f'(x_{0})+O(h).} In this case, the local truncation error is proportional to the step sizes. The quality and duration of simulated FDM solution depends on the discretization equation selection and the step sizes (time and space steps). The data quality and simulation duration increase significantly with smaller step size.

[ 2 ] Therefore, a reasonable balance between data quality and simulation duration is necessary for practical usage. Large time steps are useful for increasing simulation speed in practice. However, time steps which are too large may create instabilities and affect the data quality.

[ 3 ] [ 4 ] The von Neumann and Courant-Friedrichs-Lewy criteria are often evaluated to determine the numerical model stability.

[ 3 ] [ 4 ] [ 5 ] [ 6 ] Example: ordinary differential equation [ edit ] For example, consider the ordinary differential equation u ′ ( x ) = 3 u ( x ) + 2.

{\displaystyle u'(x)=3u(x)+2.} The Euler method for solving this equation uses the finite difference quotient u ( x + h ) − − u ( x ) h ≈ ≈ u ′ ( x ) {\displaystyle {\frac {u(x+h)-u(x)}{h}}\approx u'(x)} to approximate the differential equation by first substituting it for u'(x) then applying a little algebra (multiplying both sides by h, and then adding u(x) to both sides) to get u ( x + h ) ≈ ≈ u ( x ) + h ( 3 u ( x ) + 2 ) .

{\displaystyle u(x+h)\approx u(x)+h(3u(x)+2).} The last equation is a finite-difference equation, and solving this equation gives an approximate solution to the differential equation.

Example: The heat equation [ edit ] Consider the normalized heat equation in one dimension, with homogeneous Dirichlet boundary conditions { U t = U x x U ( 0 , t ) = U ( 1 , t ) = 0 (boundary condition) U ( x , 0 ) = U 0 ( x ) (initial condition) {\displaystyle {\begin{cases}U_{t}=U_{xx}\\U(0,t)=U(1,t)=0&{\text{(boundary condition)}}\\U(x,0)=U_{0}(x)&{\text{(initial condition)}}\end{cases}}} One way to numerically solve this equation is to approximate all the derivatives by finite differences. First partition the domain in space using a mesh x 0 , … … , x J {\displaystyle x_{0},\dots ,x_{J}} and in time using a mesh t 0 , … … , t N {\displaystyle t_{0},\dots ,t_{N}} . Assume a uniform partition both in space and in time, so the difference between two consecutive space points will be h and between two consecutive time points will be k . The points u ( x j , t n ) = u j n {\displaystyle u(x_{j},t_{n})=u_{j}^{n}} will represent the numerical approximation of u ( x j , t n ) .

{\displaystyle u(x_{j},t_{n}).} Explicit method [ edit ] The stencil for the most common explicit method for the heat equation.

Using a forward difference at time t n {\displaystyle t_{n}} and a second-order central difference for the space derivative at position x j {\displaystyle x_{j}} ( FTCS ) gives the recurrence equation: u j n + 1 − − u j n k = u j + 1 n − − 2 u j n + u j − − 1 n h 2 .

{\displaystyle {\frac {u_{j}^{n+1}-u_{j}^{n}}{k}}={\frac {u_{j+1}^{n}-2u_{j}^{n}+u_{j-1}^{n}}{h^{2}}}.} This is an explicit method for solving the one-dimensional heat equation .

One can obtain u j n + 1 {\displaystyle u_{j}^{n+1}} from the other values this way: u j n + 1 = ( 1 − − 2 r ) u j n + r u j − − 1 n + r u j + 1 n {\displaystyle u_{j}^{n+1}=(1-2r)u_{j}^{n}+ru_{j-1}^{n}+ru_{j+1}^{n}} where r = k / h 2 .

{\displaystyle r=k/h^{2}.} So, with this recurrence relation, and knowing the values at time n , one can obtain the corresponding values at time n +1.

u 0 n {\displaystyle u_{0}^{n}} and u J n {\displaystyle u_{J}^{n}} must be replaced by the boundary conditions, in this example they are both 0.

This explicit method is known to be numerically stable and convergent whenever r ≤ ≤ 1 / 2 {\displaystyle r\leq 1/2} .

[ 7 ] The numerical errors are proportional to the time step and the square of the space step: Δ Δ u = O ( k ) + O ( h 2 ) {\displaystyle \Delta u=O(k)+O(h^{2})} Implicit method [ edit ] The implicit method stencil.

Using the backward difference at time t n + 1 {\displaystyle t_{n+1}} and a second-order central difference for the space derivative at position x j {\displaystyle x_{j}} (The Backward Time, Centered Space Method "BTCS") gives the recurrence equation: u j n + 1 − − u j n k = u j + 1 n + 1 − − 2 u j n + 1 + u j − − 1 n + 1 h 2 .

{\displaystyle {\frac {u_{j}^{n+1}-u_{j}^{n}}{k}}={\frac {u_{j+1}^{n+1}-2u_{j}^{n+1}+u_{j-1}^{n+1}}{h^{2}}}.} This is an implicit method for solving the one-dimensional heat equation .

One can obtain u j n + 1 {\displaystyle u_{j}^{n+1}} from solving a system of linear equations: ( 1 + 2 r ) u j n + 1 − − r u j − − 1 n + 1 − − r u j + 1 n + 1 = u j n {\displaystyle (1+2r)u_{j}^{n+1}-ru_{j-1}^{n+1}-ru_{j+1}^{n+1}=u_{j}^{n}} The scheme is always numerically stable and convergent but usually more numerically intensive than the explicit method as it requires solving a system of numerical equations on each time step. The errors are  linear over the time step and quadratic over the space step: Δ Δ u = O ( k ) + O ( h 2 ) .

{\displaystyle \Delta u=O(k)+O(h^{2}).} Crank–Nicolson method [ edit ] Finally, using the central difference at time t n + 1 / 2 {\displaystyle t_{n+1/2}} and a second-order central difference for the space derivative at position x j {\displaystyle x_{j}} ("CTCS") gives the recurrence equation: u j n + 1 − − u j n k = 1 2 ( u j + 1 n + 1 − − 2 u j n + 1 + u j − − 1 n + 1 h 2 + u j + 1 n − − 2 u j n + u j − − 1 n h 2 ) .

{\displaystyle {\frac {u_{j}^{n+1}-u_{j}^{n}}{k}}={\frac {1}{2}}\left({\frac {u_{j+1}^{n+1}-2u_{j}^{n+1}+u_{j-1}^{n+1}}{h^{2}}}+{\frac {u_{j+1}^{n}-2u_{j}^{n}+u_{j-1}^{n}}{h^{2}}}\right).} This formula is known as the Crank–Nicolson method .

The Crank–Nicolson stencil.

One can obtain u j n + 1 {\displaystyle u_{j}^{n+1}} from solving a system of linear equations: ( 2 + 2 r ) u j n + 1 − − r u j − − 1 n + 1 − − r u j + 1 n + 1 = ( 2 − − 2 r ) u j n + r u j − − 1 n + r u j + 1 n {\displaystyle (2+2r)u_{j}^{n+1}-ru_{j-1}^{n+1}-ru_{j+1}^{n+1}=(2-2r)u_{j}^{n}+ru_{j-1}^{n}+ru_{j+1}^{n}} The scheme is always numerically stable and convergent but usually more numerically intensive as it requires solving a system of numerical equations on each time step. The errors are quadratic over both the time step and the space step: Δ Δ u = O ( k 2 ) + O ( h 2 ) .

{\displaystyle \Delta u=O(k^{2})+O(h^{2}).} Comparison [ edit ] To summarize, usually the Crank–Nicolson scheme is the most accurate scheme for small time steps. For larger time steps, the implicit scheme works better since it is less computationally demanding. The explicit scheme is the least accurate and can be unstable, but is also the easiest to implement and the least numerically intensive.

Here is an example. The figures below present the solutions given by the above methods to approximate the heat equation U t = α α U x x , α α = 1 π π 2 , {\displaystyle U_{t}=\alpha U_{xx},\quad \alpha ={\frac {1}{\pi ^{2}}},} with the boundary condition U ( 0 , t ) = U ( 1 , t ) = 0.

{\displaystyle U(0,t)=U(1,t)=0.} The exact solution is U ( x , t ) = 1 π π 2 e − − t sin ⁡ ⁡ ( π π x ) .

{\displaystyle U(x,t)={\frac {1}{\pi ^{2}}}e^{-t}\sin(\pi x).} Comparison of Finite Difference Methods Explicit method ( not stable) Implicit method (stable) Crank-Nicolson method (stable) Example: The Laplace operator [ edit ] The (continuous) Laplace operator in n {\displaystyle n} -dimensions is given by Δ Δ u ( x ) = ∑ ∑ i = 1 n ∂ ∂ i 2 u ( x ) {\displaystyle \Delta u(x)=\sum _{i=1}^{n}\partial _{i}^{2}u(x)} .
The discrete Laplace operator Δ Δ h u {\displaystyle \Delta _{h}u} depends on the dimension n {\displaystyle n} .

In 1D the Laplace operator is approximated as Δ Δ u ( x ) = u ″ ( x ) ≈ ≈ u ( x − − h ) − − 2 u ( x ) + u ( x + h ) h 2 =: Δ Δ h u ( x ) .

{\displaystyle \Delta u(x)=u''(x)\approx {\frac {u(x-h)-2u(x)+u(x+h)}{h^{2}}}=:\Delta _{h}u(x)\,.} This approximation is usually expressed via the following stencil Δ Δ h = 1 h 2 [ 1 − − 2 1 ] {\displaystyle \Delta _{h}={\frac {1}{h^{2}}}{\begin{bmatrix}1&-2&1\end{bmatrix}}} and which represents a symmetric, tridiagonal matrix. 
For an equidistant grid one gets a Toeplitz matrix .

The 2D case shows all the characteristics of the more general n-dimensional case. Each second partial derivative needs to be approximated similar to the 1D case Δ Δ u ( x , y ) = u x x ( x , y ) + u y y ( x , y ) ≈ ≈ u ( x − − h , y ) − − 2 u ( x , y ) + u ( x + h , y ) h 2 + u ( x , y − − h ) − − 2 u ( x , y ) + u ( x , y + h ) h 2 = u ( x − − h , y ) + u ( x + h , y ) − − 4 u ( x , y ) + u ( x , y − − h ) + u ( x , y + h ) h 2 =: Δ Δ h u ( x , y ) , {\displaystyle {\begin{aligned}\Delta u(x,y)&=u_{xx}(x,y)+u_{yy}(x,y)\\&\approx {\frac {u(x-h,y)-2u(x,y)+u(x+h,y)}{h^{2}}}+{\frac {u(x,y-h)-2u(x,y)+u(x,y+h)}{h^{2}}}\\&={\frac {u(x-h,y)+u(x+h,y)-4u(x,y)+u(x,y-h)+u(x,y+h)}{h^{2}}}\\&=:\Delta _{h}u(x,y)\,,\end{aligned}}} which is usually given by the following stencil Δ Δ h = 1 h 2 [ 1 1 − − 4 1 1 ] .

{\displaystyle \Delta _{h}={\frac {1}{h^{2}}}{\begin{bmatrix}&1\\1&-4&1\\&1\end{bmatrix}}\,.} Consistency [ edit ] Consistency of the above-mentioned approximation can be shown for highly regular functions, such as u ∈ ∈ C 4 ( Ω Ω ) {\displaystyle u\in C^{4}(\Omega )} .
The statement is Δ Δ u − − Δ Δ h u = O ( h 2 ) .

{\displaystyle \Delta u-\Delta _{h}u={\mathcal {O}}(h^{2})\,.} To prove this, one needs to substitute Taylor Series expansions up to order 3 into the discrete Laplace operator.

Properties [ edit ] Subharmonic [ edit ] Similar to continuous subharmonic functions one can define subharmonic functions for finite-difference approximations u h {\displaystyle u_{h}} − − Δ Δ h u h ≤ ≤ 0 .

{\displaystyle -\Delta _{h}u_{h}\leq 0\,.} Mean value [ edit ] One can define a general stencil of positive type via [ α α N α α W − − α α C α α E α α S ] , α α i > 0 , α α C = ∑ ∑ i ∈ ∈ { N , E , S , W } α α i .

{\displaystyle {\begin{bmatrix}&\alpha _{N}\\\alpha _{W}&-\alpha _{C}&\alpha _{E}\\&\alpha _{S}\end{bmatrix}}\,,\quad \alpha _{i}>0\,,\quad \alpha _{C}=\sum _{i\in \{N,E,S,W\}}\alpha _{i}\,.} If u h {\displaystyle u_{h}} is (discrete) subharmonic then the following mean value property holds u h ( x C ) ≤ ≤ ∑ ∑ i ∈ ∈ { N , E , S , W } α α i u h ( x i ) ∑ ∑ i ∈ ∈ { N , E , S , W } α α i , {\displaystyle u_{h}(x_{C})\leq {\frac {\sum _{i\in \{N,E,S,W\}}\alpha _{i}u_{h}(x_{i})}{\sum _{i\in \{N,E,S,W\}}\alpha _{i}}}\,,} where the approximation is evaluated on points of the grid, and the stencil is assumed to be of positive type.

A similar mean value property also holds for the continuous case.

Maximum principle [ edit ] For a (discrete) subharmonic function u h {\displaystyle u_{h}} the following holds max Ω Ω h u h ≤ ≤ max ∂ ∂ Ω Ω h u h , {\displaystyle \max _{\Omega _{h}}u_{h}\leq \max _{\partial \Omega _{h}}u_{h}\,,} where Ω Ω h , ∂ ∂ Ω Ω h {\displaystyle \Omega _{h},\partial \Omega _{h}} are discretizations of the continuous domain Ω Ω {\displaystyle \Omega } , respectively the boundary ∂ ∂ Ω Ω {\displaystyle \partial \Omega } .

A similar maximum principle also holds for the continuous case.

The SBP-SAT method [ edit ] The SBP-SAT ( summation by parts - simultaneous approximation term ) method is a stable and accurate technique for discretizing and imposing boundary conditions of a well-posed partial differential equation using high order finite differences.

[ 8 ] [ 9 ] The method is based on finite differences where the differentiation operators exhibit summation-by-parts properties. Typically, these operators consist of differentiation matrices with central difference stencils in the interior with carefully chosen one-sided boundary stencils designed to mimic integration-by-parts in the discrete setting. Using the SAT technique, the boundary conditions of the PDE are imposed weakly, where the boundary values are "pulled" towards the desired conditions rather than exactly fulfilled. If the tuning parameters (inherent to the SAT technique) are chosen properly, the resulting system of ODE's will exhibit similar energy behavior as the continuous PDE, i.e. the system has no non-physical energy growth. This guarantees stability if an integration scheme with a stability region that includes parts of the imaginary axis, such as the fourth order Runge-Kutta method , is used. This makes the SAT technique an attractive method of imposing boundary conditions for higher order finite difference methods, in contrast to for example the injection method, which typically will not be stable if high order differentiation operators are used.

See also [ edit ] Finite element method Finite difference Finite difference time domain Infinite difference method Stencil (numerical analysis) Finite difference coefficients Five-point stencil Lax–Richtmyer theorem Finite difference methods for option pricing Upwind differencing scheme for convection Central differencing scheme Discrete Poisson equation Discrete Laplace operator References [ edit ] ^ a b Christian Grossmann; Hans-G. Roos; Martin Stynes (2007).

Numerical Treatment of Partial Differential Equations . Springer Science & Business Media. p.

23 .

ISBN 978-3-540-71584-9 .

^ Arieh Iserles (2008).

A first course in the numerical analysis of differential equations . Cambridge University Press. p.

23 .

ISBN 9780521734905 .

^ a b Hoffman JD; Frankel S (2001).

Numerical methods for engineers and scientists . CRC Press, Boca Raton.

^ a b Jaluria Y; Atluri S (1994). "Computational heat transfer".

Computational Mechanics .

14 (5): 385– 386.

Bibcode : 1994CompM..14..385J .

doi : 10.1007/BF00377593 .

S2CID 119502676 .

^ Majumdar P (2005).

Computational methods for heat and mass transfer (1st ed.). Taylor and Francis, New York.

^ Smith GD (1985).

Numerical solution of partial differential equations: finite difference methods (3rd ed.). Oxford University Press.

^ Crank, J.

The Mathematics of Diffusion . 2nd Edition, Oxford, 1975, p. 143.

^ Bo Strand (1994). "Summation by Parts for Finite Difference Approximations for d/dx".

Journal of Computational Physics .

110 (1): 47– 67.

Bibcode : 1994JCoPh.110...47S .

doi : 10.1006/jcph.1994.1005 .

^ Mark H. Carpenter; David I. Gottlieb; Saul S. Abarbanel (1994). "Time-stable boundary conditions for finite-difference schemes solving hyperbolic systems: Methodology and application to high-order compact schemes".

Journal of Computational Physics .

111 (2): 220– 236.

Bibcode : 1994JCoPh.111..220C .

doi : 10.1006/jcph.1994.1057 .

hdl : 2060/19930013937 .

Further reading [ edit ] K.W. Morton and D.F. Mayers, Numerical Solution of Partial Differential Equations, An Introduction . Cambridge University Press, 2005.

Autar Kaw and E. Eric Kalu, Numerical Methods with Applications , (2008) [1] . Contains a brief, engineering-oriented introduction to FDM (for ODEs) in Chapter 08.07 .

John Strikwerda (2004).

Finite Difference Schemes and Partial Differential Equations (2nd ed.). SIAM.

ISBN 978-0-89871-639-9 .

Smith, G. D. (1985), Numerical Solution of Partial Differential Equations: Finite Difference Methods, 3rd ed.

, Oxford University Press Peter Olver (2013).

Introduction to Partial Differential Equations . Springer. Chapter 5: Finite differences.

ISBN 978-3-319-02099-0 .

.

Randall J. LeVeque , Finite Difference Methods for Ordinary and Partial Differential Equations , SIAM, 2007.

Sergey Lemeshevsky, Piotr Matus, Dmitriy Poliakov(Eds): "Exact Finite-Difference Schemes", De Gruyter (2016). DOI: https://doi.org/10.1515/9783110491326 .

Mikhail Shashkov: Conservative Finite-Difference Methods on General Grids , CRC Press, ISBN 0-8493-7375-1 (1996).

v t e Numerical methods for partial differential equations Finite difference Parabolic Forward-time central-space (FTCS) Crank–Nicolson Hyperbolic Lax–Friedrichs Lax–Wendroff MacCormack Upwind Method of characteristics Others Alternating direction-implicit (ADI) Finite-difference frequency-domain (FDFD) Finite-difference time-domain (FDTD) Finite volume Godunov High-resolution Monotonic upstream-centered (MUSCL) Advection upstream-splitting (AUSM) Riemann solver Essentially non-oscillatory (ENO) Weighted essentially non-oscillatory (WENO) Finite element hp-FEM Extended (XFEM) Discontinuous Galerkin (DG) Spectral element (SEM) Mortar Gradient discretisation (GDM) Loubignac iteration Smoothed (S-FEM) Meshless/Meshfree Smoothed-particle hydrodynamics (SPH) Peridynamics (PD) Moving particle semi-implicit method (MPS) Material point method (MPM) Particle-in-cell (PIC) Domain decomposition Schur complement Fictitious domain Schwarz alternating additive abstract additive Neumann–Dirichlet Neumann–Neumann Poincaré–Steklov operator Balancing (BDD) Balancing by constraints (BDDC) Tearing and interconnect (FETI) FETI-DP Others Spectral Pseudospectral (DVR) Method of lines Multigrid Collocation Level-set Boundary element Method of moments Immersed boundary Analytic element Isogeometric analysis Infinite difference method Infinite element method Galerkin method Petrov–Galerkin method Validated numerics Computer-assisted proof Integrable algorithm Method of fundamental solutions Related Numerical methods for ordinary differential equations Numerical integration Authority control databases National Germany United States France BnF data Japan Israel Other Yale LUX Retrieved from " https://en.wikipedia.org/w/index.php?title=Finite_difference_method&oldid=1291248732 " Categories : Finite differences Numerical differential equations Hidden categories: Articles with short description Short description is different from Wikidata Pages that use a deprecated format of the math tags This page was last edited on 20 May 2025, at 00:59 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Finite difference method 22 languages Add topic

