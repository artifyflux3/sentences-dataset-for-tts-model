Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Definition 2 Equivalent formulations 3 Examples 4 Properties 5 Remarks 6 See also 7 References Toggle the table of contents Computably enumerable set 12 languages العربية Чӑвашла Deutsch Español Français 한국어 Italiano עברית 日本語 Português Русский 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Mathematical logic concept "Enumerable set" redirects here. For the set-theoretic concept, see Countable set .

In computability theory , a set S of natural numbers is called computably enumerable (c.e.) , recursively enumerable (r.e.) , semidecidable , partially decidable , listable , provable or Turing-recognizable if: There is an algorithm such that the set of input numbers for which the algorithm halts is exactly S .

Or, equivalently, There is an algorithm that enumerates the members of S .  That means that its output is a list of all the members of S : s 1 , s 2 , s 3 , ... .  If S is infinite, this algorithm will run forever, but each element of S will be returned after a finite amount of time. Note that these elements do not have to be listed in a particular way, say from smallest to largest.

The first condition suggests why the term semidecidable is sometimes used. More precisely, if a number is in the set, one can decide this by running the algorithm, but if the number is not in the set, the algorithm can run forever, and no information is returned. A set that is "completely decidable" is a computable set .  The second condition suggests why computably enumerable is used. The abbreviations c.e.

and r.e.

are often used, even in print, instead of the full phrase.

In computational complexity theory , the complexity class containing all computably enumerable sets is RE . In recursion theory, the lattice of c.e. sets under inclusion is denoted E {\displaystyle {\mathcal {E}}} .

Definition [ edit ] A set S of natural numbers is called computably enumerable if there is a partial computable function whose domain is exactly S , meaning that the function is defined if and only if its input is a member of S .

Equivalent formulations [ edit ] The following are all equivalent properties of a set S of natural numbers: Semidecidability: The set S is computably enumerable. That is, S is the domain (co-range) of a partial computable function.

The set S is Σ Σ 1 0 {\displaystyle \Sigma _{1}^{0}} (referring to the arithmetical hierarchy ).

[ 1 ] There is a partial computable function f such that: f ( x ) = { 1 if x ∈ ∈ S undefined/does not halt if x ∉ ∉ S {\displaystyle f(x)={\begin{cases}1&{\mbox{if}}\ x\in S\\{\mbox{undefined/does not halt}}\ &{\mbox{if}}\ x\notin S\end{cases}}} Enumerability: The set S is the range of a partial computable function.

The set S is the range of a total computable function, or empty. If S is infinite, the function can be chosen to be injective .

The set S is the range of a primitive recursive function or empty. Even if S is infinite, repetition of values may be necessary in this case.

Diophantine: There is a polynomial p with integer coefficients and variables x , a , b , c , d , e , f , g , h , i ranging over the natural numbers such that x ∈ ∈ S ⇔ ⇔ ∃ ∃ a , b , c , d , e , f , g , h , i ( p ( x , a , b , c , d , e , f , g , h , i ) = 0 ) .

{\displaystyle x\in S\Leftrightarrow \exists a,b,c,d,e,f,g,h,i\ (p(x,a,b,c,d,e,f,g,h,i)=0).} (The number of bound variables in this definition is the best known so far; it might be that a lower number can be used to define all Diophantine sets.) There is a polynomial from the integers to the integers such that the set S contains exactly the non-negative numbers in its range.

The equivalence of semidecidability and enumerability can be obtained by the technique of dovetailing .

The Diophantine characterizations of a computably enumerable set, while not as straightforward or intuitive as the first definitions, were found by Yuri Matiyasevich as part of the negative solution to Hilbert's Tenth Problem . Diophantine sets predate recursion theory and are therefore historically the first way to describe these sets (although this equivalence was only remarked more than three decades after the introduction of computably enumerable sets).

A computable enumeration of the set of all Turing machines halting on a fixed input: Simulate all Turing machines (enumerated on vertical axis) step by step (horizontal axis), using the shown diagonalization scheduling. If a machine terminates, print its number. This way, the number of each terminating machine is eventually printed. In the example, the algorithm prints "9, 13, 4, 15, 12, 18, 6, 2, 8, 0, ..." Examples [ edit ] Every computable set is computably enumerable, but it is not true that every computably enumerable set is computable. For computable sets, the algorithm must also say if an input is not in the set – this is not required of computably enumerable sets.

A recursively enumerable language is a computably enumerable subset of a formal language .

The set of all provable sentences in an effectively presented axiomatic system is a computably enumerable set.

Matiyasevich's theorem states that every computably enumerable set is a Diophantine set (the converse is trivially true).

The simple sets are computably enumerable but not computable.

The creative sets are computably enumerable but not computable.

Any productive set is not computably enumerable.

Given a Gödel numbering ϕ ϕ {\displaystyle \phi } of the computable functions, the set { ⟨ ⟨ i , x ⟩ ⟩ ∣ ∣ ϕ ϕ i ( x ) ↓ ↓ } {\displaystyle \{\langle i,x\rangle \mid \phi _{i}(x)\downarrow \}} (where ⟨ ⟨ i , x ⟩ ⟩ {\displaystyle \langle i,x\rangle } is the Cantor pairing function and ϕ ϕ i ( x ) ↓ ↓ {\displaystyle \phi _{i}(x)\downarrow } indicates ϕ ϕ i ( x ) {\displaystyle \phi _{i}(x)} is defined) is computably enumerable (cf. picture for a fixed x ). This set encodes the halting problem as it describes  the input parameters for which each Turing machine halts.

Given a Gödel numbering ϕ ϕ {\displaystyle \phi } of the computable functions, the set { ⟨ x , y , z ⟩ ∣ ∣ ϕ ϕ x ( y ) = z } {\displaystyle \{\left\langle x,y,z\right\rangle \mid \phi _{x}(y)=z\}} is computably enumerable. This set encodes the problem of deciding a function value.

Given a partial function f from the natural numbers into the natural numbers, f is a partial computable function if and only if the graph of f ,  that is, the set of all pairs ⟨ ⟨ x , f ( x ) ⟩ ⟩ {\displaystyle \langle x,f(x)\rangle } such that f ( x ) is defined, is computably enumerable.

Properties [ edit ] If A and B are computably enumerable sets then A ∩ B , A ∪ B and A × B (with the ordered pair of natural numbers mapped to a single natural number with the Cantor pairing function ) are computably enumerable sets. The preimage of a computably enumerable set under a partial computable function is a computably enumerable set.

A set T {\displaystyle T} is called co-computably-enumerable or co-c.e.

if its complement N ∖ ∖ T {\displaystyle \mathbb {N} \setminus T} is computably enumerable. Equivalently, a set is co-r.e. if and only if it is at level Π Π 1 0 {\displaystyle \Pi _{1}^{0}} of the arithmetical hierarchy. The complexity class of co-computably-enumerable sets is denoted co-RE.

A set A is computable if and only if both A and the complement of A are computably enumerable.

Some pairs of computably enumerable sets are effectively separable and some are not.

Remarks [ edit ] According to the Church–Turing thesis , any effectively calculable function is calculable by a Turing machine , and thus a set S is computably enumerable if and only if there is some algorithm which yields an enumeration of S .  This cannot be taken as a formal definition, however, because the Church–Turing thesis is an informal conjecture rather than a formal axiom.

The definition of a computably enumerable set as the domain of a partial function, rather than the range of a total computable function, is common in contemporary texts.  This choice is motivated by the fact that in generalized recursion theories, such as α-recursion theory , the definition corresponding to domains has been found to be more natural.  Other texts use the definition in terms of enumerations, which is equivalent for computably enumerable sets.

See also [ edit ] RE (complexity) Recursively enumerable language Arithmetical hierarchy References [ edit ] ^ Downey, Rodney G.; Hirschfeldt, Denis R. (29 October 2010).

Algorithmic Randomness and Complexity . Springer Science & Business Media. p. 23.

ISBN 978-0-387-68441-3 .

Rogers, H.

The Theory of Recursive Functions and Effective Computability , MIT Press .

ISBN 0-262-68052-1 ; ISBN 0-07-053522-1 .

Soare, R. Recursively enumerable sets and degrees.

Perspectives in Mathematical Logic.

Springer-Verlag , Berlin, 1987.

ISBN 3-540-15299-7 .

Soare, Robert I. Recursively enumerable sets and degrees.

Bull. Amer. Math. Soc.

84 (1978), no. 6, 1149–1181.

v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal Retrieved from " https://en.wikipedia.org/w/index.php?title=Computably_enumerable_set&oldid=1290102661 " Categories : Computability theory Theory of computation Hidden categories: Articles with short description Short description is different from Wikidata This page was last edited on 12 May 2025, at 20:47 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Computably enumerable set 12 languages Add topic

