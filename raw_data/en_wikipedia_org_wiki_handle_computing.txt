Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Comparison to pointers 2 Security 3 Examples 4 See also 5 References 6 External links Toggle the table of contents Handle (computing) 12 languages Català Čeština Deutsch Español فارسی 한국어 Polski Português Русский Slovenščina Українська 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Abstract reference to a system resource in computing Not to be confused with Handlers . For the element in a graphical user interface that is dragged to resize or reshape, see Adjustment handle .

This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Handle" computing – news · newspapers · books · scholar · JSTOR ( April 2014 ) ( Learn how and when to remove this message ) In computer programming , a handle is an abstract reference to a resource that is used when application software references blocks of memory or objects that are managed by another system like a database or an operating system .

A resource handle can be an opaque identifier , in which case it is often an integer number (often an array index in an array or "table" that is used to manage that type of resource), or it can be a pointer that allows access to further information. Common resource handles include file descriptors , network sockets , database connections , process identifiers (PIDs), and job IDs . PIDs and job IDs are explicitly visible integers; while file descriptors and sockets (which are often implemented as a form of file descriptor) are represented as integers, they are typically considered opaque. In traditional implementations, file descriptors are indices into a (per-process) file descriptor table , thence a (system-wide) file table .

Comparison to pointers [ edit ] While a pointer contains the address of the item to which it refers, a handle is an abstraction of a reference which is managed externally; its opacity allows the referent to be relocated in memory by the system without invalidating the handle, making it similar to virtual memory for pointers, but even more abstracted. Similarly, the extra layer of indirection also increases the control that the managing system has over the operations performed on the referent. Typically the handle is an index or a pointer into a global array of tombstones .

A handle leak is a type of software bug that occurs when a computer program does not free a handle that it previously allocated. This is a form of resource leak , analogous to a memory leak for previously allocated memory.

Security [ edit ] In secure computing terms, because access to a resource via a handle is mediated by another system, a handle functions as a capability : it not only identifies an object, but also associates access rights . For example, while a filename is forgeable (it is just a guessable identifier), a handle is given to a user by an external system, and thus represents not just identity, but also granted access.

For example, if a program wishes to read the system password file ( /etc/passwd ) in read/write mode ( O_RDWR ), it could try to open the file via the following call: int fd = open ( "/etc/passwd" , O_RDWR ); This call asks the operating system to open the specified file with the specified access rights. If the OS allows this, then it opens the file (creates an entry in the per-process file descriptor table ) and returns a handle (file descriptor, index into this table) to the user: the actual access is controlled by the OS, and the handle is a token of that. Conversely, the OS may deny access, and thus neither open the file nor return a handle.

In a capability-based system, handles can be passed between processes, with associated access rights. Note that in these cases the handle must be something other than a systemwide-unique small integer, otherwise it is forgeable. Such an integer may nevertheless be used to identify a capability inside a process; e.g., file descriptor in Linux is unforgeable because its numerical value alone is meaningless, and only in the process context may refer to anything. Transferring such a handle requires special care though, as its value often has to be different in the sending and receiving processes.

In non-capability-based systems, on the other hand, each process must acquire its own separate handle, by specifying the identity of the resource and the desired access rights (e.g., each process must open a file itself, by giving the filename and access mode). Such usage is more common even in modern systems that do support passing handles, but it is subject to vulnerabilities like the confused deputy problem .

Examples [ edit ] Handles were a popular solution to memory management in operating systems of the 1990s, such as Mac OS [ 1 ] and Windows . The FILE data structure in the C standard I/O library is a file handle , abstracting from the underlying file representation (on Unix these are file descriptors ). Like other desktop environments , the Windows API heavily uses handles to represent objects in the system and to provide a communication pathway between the operating system and user space . For example, a window on the desktop is represented by a handle of type HWND (handle, window).

Doubly indirect handles (where the handle is not necessarily a pointer but might be, for example, an integer) have fallen out of favor in recent times, as increases in available memory and improved virtual memory algorithms have made the use of the simpler pointer more attractive. However, many operating systems still apply the term to pointers to opaque, "private" data structures — opaque pointers —or to indexes into internal arrays passed from one process to its client .

See also [ edit ] Memory pool Weak reference Handle System References [ edit ] ^ Hertzfeld, Andy (January 1982), The Original Macintosh: Hungarian , retrieved 2010-05-10 External links [ edit ] Pushing the Limits of Windows: Handles Retrieved from " https://en.wikipedia.org/w/index.php?title=Handle_(computing)&oldid=1282394999 " Category : Data types Hidden categories: Articles with short description Short description is different from Wikidata Articles needing additional references from April 2014 All articles needing additional references This page was last edited on 26 March 2025, at 04:11 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Handle (computing) 12 languages Add topic

