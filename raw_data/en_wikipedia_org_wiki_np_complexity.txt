Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Formal definition 2 Background Toggle Background subsection 2.1 Verifier-based definition 2.2 Machine-definition 3 Properties 4 Why some NP problems are hard to solve 5 Equivalence of definitions 6 Relationship to other classes 7 Other characterizations 8 Examples Toggle Examples subsection 8.1 P 8.2 Integer factorization 8.3 NP-complete problems 8.3.1 Boolean satisfiability 8.3.2 Travelling salesman 8.3.3 Subgraph isomorphism 9 See also 10 Notes 11 References 12 Further reading 13 External links Toggle the table of contents NP (complexity) 30 languages العربية Български Bosanski Català Čeština Dansk Deutsch Español فارسی Français 한국어 Italiano עברית Nederlands 日本語 Norsk bokmål Norsk nynorsk Polski Português Română Русский Српски / srpski Suomi Svenska ไทย Türkçe Українська Tiếng Việt 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia Complexity class used to classify decision problems This article includes a list of general references , but it lacks sufficient corresponding inline citations .

Please help to improve this article by introducing more precise citations.

( October 2015 ) ( Learn how and when to remove this message ) Unsolved problem in computer science P = ?

N P {\displaystyle {\mathsf {P\ {\overset {?}{=}}\ NP}}} More unsolved problems in computer science Euler diagram for P , NP, NP-complete , and NP-hard set of problems. Under the assumption that P ≠ NP, the existence of problems within NP but outside both P and NP-complete was established by Ladner .

[ 1 ] In computational complexity theory , NP ( nondeterministic polynomial time ) is a complexity class used to classify decision problems .  NP is the set of decision problems for which the problem instances , where the answer is "yes", have proofs verifiable in polynomial time by a deterministic Turing machine , or alternatively the set of problems that can be solved in polynomial time by a nondeterministic Turing machine .

[ 2 ] [ Note 1 ] NP is the set of decision problems solvable in polynomial time by a nondeterministic Turing machine .

NP is the set of decision problems verifiable in polynomial time by a deterministic Turing machine .

The first definition is the basis for the abbreviation NP; " nondeterministic , polynomial time". These two definitions are equivalent because the algorithm based on the Turing machine consists of two phases, the first of which consists of a guess about the solution, which is generated in a nondeterministic way, while the second phase consists of a deterministic algorithm that verifies whether the guess is a solution to the problem.

[ 3 ] The complexity class P (all problems solvable, deterministically, in polynomial time) is contained in NP (problems where solutions can be verified in polynomial time), because if a problem is solvable in polynomial time, then a solution is also verifiable in polynomial time by simply solving the problem. It is widely believed, but not proven, that P is smaller than NP , in other words, that decision problems exist that cannot be solved in polynomial time even though their solutions can be checked in polynomial time. The hardest problems in NP are called NP-complete problems. An algorithm solving such a problem in polynomial time is also able to solve any other NP problem in polynomial time. If P were in fact equal to NP, then a polynomial-time algorithm would exist for solving NP-complete, and by corollary, all NP problems.

[ 4 ] The complexity class NP is related to the complexity class co-NP , for which the answer "no" can be verified in polynomial time. Whether or not NP = co-NP is another outstanding question in complexity theory.

[ 5 ] Formal definition [ edit ] The complexity class NP can be defined in terms of NTIME as follows: N P = ⋃ ⋃ k ∈ ∈ N N T I M E ( n k ) , {\displaystyle {\mathsf {NP}}=\bigcup _{k\in \mathbb {N} }{\mathsf {NTIME}}(n^{k}),} where N T I M E ( n k ) {\displaystyle {\mathsf {NTIME}}(n^{k})} is the set of decision problems that can be solved by a nondeterministic Turing machine in O ( n k ) {\displaystyle O(n^{k})} time.

Equivalently, NP can be defined using deterministic Turing machines as verifiers. A language L is in NP if and only if there exist polynomials p and q , and a deterministic Turing machine M , such that For all x and y , the machine M runs in time p (| x |) on input ⁠ ( x , y ) {\displaystyle (x,y)} ⁠ .

For all x in L , there exists a string y of length q (| x |) such that ⁠ M ( x , y ) = 1 {\displaystyle M(x,y)=1} ⁠ .

For all x not in L and all strings y of length q (| x |), ⁠ M ( x , y ) = 0 {\displaystyle M(x,y)=0} ⁠ .

Background [ edit ] Many computer science problems are contained in NP, like decision versions of many search and optimization problems.

Verifier-based definition [ edit ] In order to explain the verifier-based definition of NP, consider the subset sum problem :
Assume that we are given some integers , {−7, −3, −2, 5, 8}, and we wish to know whether some of these integers sum up to zero. Here the answer is "yes", since the integers {−3, −2, 5} corresponds to the sum (−3) + (−2) + 5 = 0.

To answer whether some of the integers add to zero we can create an algorithm that obtains all the possible subsets. As the number of integers that we feed into the algorithm becomes larger, both the number of subsets and the computation time grows exponentially.

But notice that if we are given a particular subset, we can efficiently verify whether the subset sum is zero, by summing the integers of the subset. If the sum is zero, that subset is a proof or witness for the answer is "yes". An algorithm that verifies whether a given subset has sum zero is a verifier . Clearly, summing the integers of a subset can be done in polynomial time, and the subset sum problem is therefore in NP.

The above example can be generalized for any decision problem. Given any instance I of problem Π Π {\displaystyle \Pi } and witness W, if there exists a verifier V so that given the ordered pair (I, W) as input, V returns "yes" in polynomial time if the witness proves that the answer is "yes" or "no" in polynomial time otherwise, then Π Π {\displaystyle \Pi } is in NP.

The "no"-answer version of this problem is stated as: "given a finite set of integers, does every non-empty subset have a nonzero sum?". The verifier-based definition of NP does not require an efficient verifier for the "no"-answers. The class of problems with such verifiers for the "no"-answers is called co-NP. In fact, it is an open question whether all problems in NP also have verifiers for the "no"-answers and thus are in co-NP.

In some literature the verifier is called the "certifier", and the witness the " certificate ".

[ 2 ] Machine-definition [ edit ] Equivalent to the verifier-based definition is the following characterization: NP is the class of decision problems solvable by a nondeterministic Turing machine that runs in polynomial time . That is to say, a decision problem Π Π {\displaystyle \Pi } is in NP whenever Π Π {\displaystyle \Pi } is recognized by some polynomial-time nondeterministic Turing machine M {\displaystyle M} with an existential acceptance condition , meaning that w ∈ ∈ Π Π {\displaystyle w\in \Pi } if and only if some computation path of M ( w ) {\displaystyle M(w)} leads to an accepting state. This definition is equivalent to the verifier-based definition because a nondeterministic Turing machine could solve an NP problem in polynomial time by nondeterministically selecting a certificate and running the verifier on the certificate.  Similarly, if such a machine exists, then a polynomial time verifier can naturally be constructed from it.

In this light, we can define co-NP dually as the class of decision problems recognizable by polynomial-time nondeterministic Turing machines with an existential rejection condition.  Since an existential rejection condition is exactly the same thing as a universal acceptance condition , we can understand the NP vs. co-NP question as asking whether the existential and universal acceptance conditions have the same expressive power for the class of polynomial-time nondeterministic Turing machines.

Properties [ edit ] NP is closed under union , intersection , concatenation , Kleene star and reversal . It is not known whether NP is closed under complement (this question is the so-called "NP versus co-NP" question).

Why some NP problems are hard to solve [ edit ] Because of the many important problems in this class, there have been extensive efforts to find polynomial-time algorithms for problems in NP. However, there remain a large number of problems in NP that defy such attempts, seeming to require super-polynomial time . Whether these problems are not decidable in polynomial time is one of the greatest open questions in computer science (see P versus NP ("P = NP") problem for an in-depth discussion).

An important notion in this context is the set of NP-complete decision problems, which is a subset of NP and might be informally described as the "hardest" problems in NP. If there is a polynomial-time algorithm for even one of them, then there is a polynomial-time algorithm for all the problems in NP. Because of this, and because dedicated research has failed to find a polynomial algorithm for any NP-complete problem, once a problem has been proven to be NP-complete, this is widely regarded as a sign that a polynomial algorithm for this problem is unlikely to exist.

However, in practical uses, instead of spending computational resources looking for an optimal solution, a good enough (but potentially suboptimal) solution may often be found in polynomial time. Also, the real-life applications of some problems are easier than their theoretical equivalents.

Equivalence of definitions [ edit ] The two definitions of NP as the class of problems solvable by a nondeterministic Turing machine (TM) in polynomial time and the class of problems verifiable by a deterministic Turing machine in polynomial time are equivalent. The proof is described by many textbooks, for example, Sipser's Introduction to the Theory of Computation , section 7.3.

To show this, first, suppose we have a deterministic verifier. A non-deterministic machine can simply nondeterministically run the verifier on all possible proof strings (this requires only polynomially many steps because it can nondeterministically choose the next character in the proof string in each step, and the length of the proof string must be polynomially bounded). If any proof is valid, some path will accept; if no proof is valid, the string is not in the language and it will reject.

Conversely, suppose we have a non-deterministic TM called A accepting a given language L. At each of its polynomially many steps, the machine's computation tree branches in at most a finite number of directions. There must be at least one accepting path, and the string describing this path is the proof supplied to the verifier. The verifier can then deterministically simulate A, following only the accepting path, and verifying that it accepts at the end. If A rejects the input, there is no accepting path, and the verifier will always reject.

Relationship to other classes [ edit ] This section needs additional citations for verification .

Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.

( May 2025 ) ( Learn how and when to remove this message ) A representation of the relation among complexity classes Inclusions of complexity classes including P , NP, co-NP , BPP , P/poly , PH , and PSPACE NP contains all problems in P , since one can verify any instance of the problem by simply ignoring the proof and solving it. NP is contained in PSPACE —to show this, it suffices to construct a PSPACE machine that loops over all proof strings and feeds each one to a polynomial-time verifier. Since a polynomial-time machine can only read polynomially many bits, it cannot use more than polynomial space, nor can it read a proof string occupying more than polynomial space (so we do not have to consider proofs longer than this). NP is also contained in EXPTIME , since the same algorithm operates in exponential time.

co-NP contains those problems that have a simple proof for no instances, sometimes called counterexamples. For example, primality testing trivially lies in co-NP, since one can refute the primality of an integer by merely supplying a nontrivial factor. NP and co-NP together form the first level in the polynomial hierarchy , higher only than P.

NP is defined using only deterministic machines. If we permit the verifier to be probabilistic (this, however, is not necessarily a BPP machine [ 6 ] ), we get the class MA solvable using an Arthur–Merlin protocol with no communication from Arthur to Merlin.

The relationship between BPP and NP is unknown: it is not known whether BPP is a subset of NP , NP is a subset of BPP or neither. If NP is contained in BPP , which is considered unlikely since it would imply practical solutions for NP-complete problems, then NP = RP and PH ⊆ BPP .

[ 7 ] NP is a class of decision problems ; the analogous class of function problems is FNP .

The only known strict inclusions come from the time hierarchy theorem and the space hierarchy theorem , and respectively they are N P ⊊ ⊊ N E X P T I M E {\displaystyle {\mathsf {NP\subsetneq NEXPTIME}}} and N P ⊊ ⊊ E X P S P A C E {\displaystyle {\mathsf {NP\subsetneq EXPSPACE}}} .

Other characterizations [ edit ] In terms of descriptive complexity theory , NP corresponds precisely to the set of languages definable by existential second-order logic ( Fagin's theorem ).

NP can be seen as a very simple type of interactive proof system , where the prover comes up with the proof certificate and the verifier is a deterministic polynomial-time machine that checks it. It is complete because the right proof string will make it accept if there is one, and it is sound because the verifier cannot accept if there is no acceptable proof string.

A major result of complexity theory is that NP can be characterized as the problems solvable by probabilistically checkable proofs where the verifier uses O(log n ) random bits and examines only a constant number of bits of the proof string (the class PCP (log n , 1)). More informally, this means that the NP verifier described above can be replaced with one that just "spot-checks" a few places in the proof string, and using a limited number of coin flips can determine the correct answer with high probability. This allows several results about the hardness of approximation algorithms to be proven.

Examples [ edit ] P [ edit ] All problems in P , denoted P ⊆ ⊆ N P {\displaystyle {\mathsf {P\subseteq NP}}} . Given a certificate for a problem in P , we can ignore the certificate and just solve the problem in polynomial time.

Integer factorization [ edit ] The decision problem version of the integer factorization problem : given integers n and k , is there a factor f with 1 < f < k and f dividing n ?

[ 8 ] NP-complete problems [ edit ] Main article: List of NP-complete problems Every NP-complete problem is in NP.

Boolean satisfiability [ edit ] The Boolean satisfiability problem ( SAT ), where we want to know whether or not a certain formula in propositional logic with Boolean variables is true for some value of the variables.

[ 9 ] Travelling salesman [ edit ] The decision version of the travelling salesman problem is in NP. Given an input matrix of distances between n cities, the problem is to determine if there is a route visiting all cities with total distance less than k .

A proof can simply be a list of the cities. Then verification can clearly be done in polynomial time. It simply adds the matrix entries corresponding to the paths between the cities.

A nondeterministic Turing machine can find such a route as follows: At each city it visits it will "guess" the next city to visit, until it has visited every vertex. If it gets stuck, it stops immediately.

At the end it verifies that the route it has taken has cost less than k in O ( n ) time.

One can think of each guess as " forking " a new copy of the Turing machine to follow each of the possible paths forward, and if at least one machine finds a route of distance less than k , that machine accepts the input. (Equivalently, this can be thought of as a single Turing machine that always guesses correctly) A binary search on the range of possible distances can convert the decision version of Traveling Salesman to the optimization version, by calling the decision version repeatedly (a polynomial number of times).

[ 10 ] [ 8 ] Subgraph isomorphism [ edit ] The subgraph isomorphism problem of determining whether graph G contains a subgraph that is isomorphic to graph H .

[ 11 ] See also [ edit ] Turing machine – Computation model defining an abstract machine Notes [ edit ] ^ Polynomial time refers to how quickly the number of operations needed by an algorithm, relative to the size of the problem, grows. It is therefore a measure of efficiency of an algorithm.

References [ edit ] ^ Ladner, R. E. (1975).

"On the structure of polynomial time reducibility" .

J. ACM .

22 : 151– 171.

doi : 10.1145/321864.321877 .

S2CID 14352974 .

Corollary 1.1.

^ a b Kleinberg, Jon; Tardos, Éva (2006).

Algorithm Design (2nd ed.). Addison-Wesley. p.

464 .

ISBN 0-321-37291-3 .

^ Alsuwaiyel, M. H.: Algorithms: Design Techniques and Analysis , p. 283 .

^ William Gasarch (June 2002).

"The P=?NP poll" (PDF) .

SIGACT News .

33 (2): 34– 47.

doi : 10.1145/1052796.1052804 .

S2CID 18759797 . Retrieved 2008-12-29 .

^ Kleinberg, Jon; Tardos, Éva (2006).

Algorithm Design (2nd ed.). Pearson/Addison-Wesley. p.

496 .

ISBN 0-321-37291-3 .

^ "Complexity Zoo:E" .

Complexity Zoo . Archived from the original on 2020-11-11 . Retrieved 23 March 2018 .

^ Lance Fortnow, Pulling Out The Quantumness ,  December 20, 2005 ^ a b Wigderson, Avi.

"P, NP and mathematics – a computational complexity perspective" (PDF) . Retrieved 13 Apr 2021 .

^ Karp, Richard (1972).

"Reducibility among Combinatorial Problems" (PDF) .

Complexity of Computer Computations . pp.

85– 103.

doi : 10.1007/978-1-4684-2001-2_9 .

ISBN 978-1-4684-2003-6 .

^ Aaronson, Scott.

"P=? NP" (PDF) . Retrieved 13 Apr 2021 .

^ Garey, Michael R.; Johnson, David S. (1979).

Computers and Intractability: A Guide to the Theory of NP-Completeness . W.H. Freeman.

ISBN 0-7167-1045-5 .

Further reading [ edit ] Thomas H. Cormen , Charles E. Leiserson , Ronald L. Rivest , and Clifford Stein .

Introduction to Algorithms , Second Edition. MIT Press and McGraw-Hill, 2001.

ISBN 0-262-03293-7 . Section 34.2: Polynomial-time verification, pp. 979–983.

Michael Sipser (1997).

Introduction to the Theory of Computation . PWS Publishing.

ISBN 0-534-94728-X .

Sections 7.3–7.5 (The Class NP, NP-completeness, Additional NP-complete Problems), pp. 241–271.

David Harel , Yishai Feldman . Algorithmics: The Spirit of Computing,  Addison-Wesley, Reading, MA, 3rd edition, 2004.

External links [ edit ] Complexity Zoo : NP American Scientist primer on traditional and recent complexity theory research: "Accidental Algorithms" v t e Complexity classes Considered feasible DLOGTIME AC 0 ACC 0 TC TC 0 L SL RL FL NL NL-complete NC SC CC P P-complete ZPP RP BPP BQP APX FP Suspected infeasible UP NP NP-complete NP-hard co-NP co-NP-complete TFNP FNP AM QMA PH ⊕P PP #P #P-complete IP PSPACE PSPACE-complete Considered infeasible EXPTIME NEXPTIME EXPSPACE 2-EXPTIME ELEMENTARY PR R RE ALL Class hierarchies Polynomial hierarchy Exponential hierarchy Grzegorczyk hierarchy Arithmetical hierarchy Boolean hierarchy Families of classes DTIME NTIME DSPACE NSPACE Probabilistically checkable proof Interactive proof system List of complexity classes v t e Mathematical logic General Axiom list Cardinality First-order logic Formal proof Formal semantics Foundations of mathematics Information theory Lemma Logical consequence Model Theorem Theory Type theory Theorems ( list ) and paradoxes Gödel's completeness and incompleteness theorems Tarski's undefinability Banach–Tarski paradox Cantor's theorem, paradox and diagonal argument Compactness Halting problem Lindström's Löwenheim–Skolem Russell's paradox Logics Traditional Classical logic Logical truth Tautology Proposition Inference Logical equivalence Consistency Equiconsistency Argument Soundness Validity Syllogism Square of opposition Venn diagram Propositional Boolean algebra Boolean functions Logical connectives Propositional calculus Propositional formula Truth tables Many-valued logic 3 finite ∞ Predicate First-order list Second-order Monadic Higher-order Fixed-point Free Quantifiers Predicate Monadic predicate calculus Set theory Set hereditary Class ( Ur- ) Element Ordinal number Extensionality Forcing Relation equivalence partition Set operations: intersection union complement Cartesian product power set identities Types of sets Countable Uncountable Empty Inhabited Singleton Finite Infinite Transitive Ultrafilter Recursive Fuzzy Universal Universe constructible Grothendieck Von Neumann Maps and cardinality Function / Map domain codomain image In / Sur / Bi -jection Schröder–Bernstein theorem Isomorphism Gödel numbering Enumeration Large cardinal inaccessible Aleph number Operation binary Set theories Zermelo–Fraenkel axiom of choice continuum hypothesis General Kripke–Platek Morse–Kelley Naive New Foundations Tarski–Grothendieck Von Neumann–Bernays–Gödel Ackermann Constructive Formal systems ( list ), language and syntax Alphabet Arity Automata Axiom schema Expression ground Extension by definition conservative Relation Formation rule Grammar Formula atomic closed ground open Free/bound variable Language Metalanguage Logical connective ¬ ∨ ∧ → ↔ = Predicate functional variable propositional variable Proof Quantifier ∃ !

∀ rank Sentence atomic spectrum Signature String Substitution Symbol function logical/constant non-logical variable Term Theory list Example axiomatic systems ( list ) of arithmetic : Peano second-order elementary function primitive recursive Robinson Skolem of the real numbers Tarski's axiomatization of Boolean algebras canonical minimal axioms of geometry : Euclidean : Elements Hilbert's Tarski's non-Euclidean Principia Mathematica Proof theory Formal proof Natural deduction Logical consequence Rule of inference Sequent calculus Theorem Systems axiomatic deductive Hilbert list Complete theory Independence ( from ZFC ) Proof of impossibility Ordinal analysis Reverse mathematics Self-verifying theories Model theory Interpretation function of models Model equivalence finite saturated spectrum submodel Non-standard model of arithmetic Diagram elementary Categorical theory Model complete theory Satisfiability Semantics of logic Strength Theories of truth semantic Tarski's Kripke's T-schema Transfer principle Truth predicate Truth value Type Ultraproduct Validity Computability theory Church encoding Church–Turing thesis Computably enumerable Computable function Computable set Decision problem decidable undecidable P NP P versus NP problem Kolmogorov complexity Lambda calculus Primitive recursive function Recursion Recursive set Turing machine Type theory Related Abstract logic Algebraic logic Automated theorem proving Category theory Concrete / Abstract category Category of sets History of logic History of mathematical logic timeline Logicism Mathematical object Philosophy of mathematics Supertask Mathematics portal NewPP limit report
Parsed by mw‐web.codfw.main‐7c956d68b4‐5c8z5
Cached time: 20250817140537
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.480 seconds
Real time usage: 0.696 seconds
Preprocessor visited node count: 1886/1000000
Revision size: 21053/2097152 bytes
Post‐expand include size: 104350/2097152 bytes
Template argument size: 1597/2097152 bytes
Highest expansion depth: 15/100
Expensive parser function count: 5/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 61829/5000000 bytes
Lua time usage: 0.295/10.000 seconds
Lua memory usage: 15902411/52428800 bytes
Number of Wikibase entities loaded: 0/500 Transclusion expansion time report (%,ms,calls,template)
100.00%  475.878      1 -total
 27.74%  132.012      2 Template:Reflist
 20.57%   97.889      5 Template:Navbox
 18.76%   89.272      1 Template:Annotated_link
 16.25%   77.311      2 Template:Cite_journal
 13.72%   65.306      1 Template:ComplexityClasses
 11.92%   56.742      1 Template:Short_description
  9.61%   45.720      1 Template:More_footnotes_needed
  9.18%   43.673      2 Template:Ambox
  7.02%   33.401      2 Template:Pagetype Saved in parser cache with key enwiki:pcache:21562:|#|:idhash:canonical and timestamp 20250817140537 and revision id 1293548763. Rendering was triggered because: page-view Retrieved from " https://en.wikipedia.org/w/index.php?title=NP_(complexity)&oldid=1293548763 " Category : Complexity classes Hidden categories: Articles with short description Short description is different from Wikidata Articles lacking in-text citations from October 2015 All articles lacking in-text citations Articles needing additional references from May 2025 All articles needing additional references This page was last edited on 2 June 2025, at 09:34 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents NP (complexity) 30 languages Add topic

