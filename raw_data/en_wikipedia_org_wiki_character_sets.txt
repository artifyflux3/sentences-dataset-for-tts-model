Title: Character encoding

URL Source: https://en.wikipedia.org/wiki/Character_sets

Published Time: 2001-09-20T00:01:17Z

Markdown Content:
[![Image 1](https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Papertape-Wikipedia-example-dark1-2000px.png/250px-Papertape-Wikipedia-example-dark1-2000px.png)](https://en.wikipedia.org/wiki/File:Papertape-Wikipedia-example-dark1-2000px.png)

[Punched tape](https://en.wikipedia.org/wiki/Punched_tape "Punched tape") with the word "Wikipedia" encoded in [ASCII](https://en.wikipedia.org/wiki/ASCII "ASCII"). Presence and absence of a hole represents 1 and 0, respectively; for example, W is encoded as `1010111`.

**Character encoding** is a convention of using a numeric value to represent each [character](https://en.wikipedia.org/wiki/Character_(computing) "Character (computing)") of a [writing script](https://en.wikipedia.org/wiki/Writing_system "Writing system"). Not only can a character set include [natural language](https://en.wikipedia.org/wiki/Natural_language "Natural language")[symbols](https://en.wikipedia.org/wiki/Character_(symbol) "Character (symbol)"), but it can also include codes that have meanings or functions outside of language, such as [control characters](https://en.wikipedia.org/wiki/Control_character "Control character") and [whitespace](https://en.wikipedia.org/wiki/Whitespace "Whitespace"). Character encodings have also been defined for some [constructed languages](https://en.wikipedia.org/wiki/Constructed_language "Constructed language"). When encoded, character data can be stored, transmitted, and transformed by a [computer](https://en.wikipedia.org/wiki/Computer "Computer").[[1]](https://en.wikipedia.org/wiki/Character_sets#cite_note-1) The numerical values that make up a character encoding are known as [code points](https://en.wikipedia.org/wiki/Code_point "Code point") and collectively comprise a code space or a [code page](https://en.wikipedia.org/wiki/Code_page "Code page").

Early character encodings that originated with optical or electrical [telegraphy](https://en.wikipedia.org/wiki/Telegraphy "Telegraphy") and in early computers could only represent a subset of the characters used in languages, sometimes restricted to [upper case letters](https://en.wikipedia.org/wiki/Letter_case "Letter case"), [numerals](https://en.wikipedia.org/wiki/Numeral_system "Numeral system") and limited [punctuation](https://en.wikipedia.org/wiki/Punctuation "Punctuation"). Over time, encodings capable of representing more characters were created, such as [ASCII](https://en.wikipedia.org/wiki/ASCII "ASCII"), [ISO/IEC 8859](https://en.wikipedia.org/wiki/ISO/IEC_8859 "ISO/IEC 8859"), and [Unicode](https://en.wikipedia.org/wiki/Unicode "Unicode") encodings such as [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8") and [UTF-16](https://en.wikipedia.org/wiki/UTF-16 "UTF-16").

The [most popular character encoding](https://en.wikipedia.org/wiki/Popularity_of_text_encodings "Popularity of text encodings") on the [World Wide Web](https://en.wikipedia.org/wiki/World_Wide_Web "World Wide Web") is UTF-8, which is used in 98.2% of surveyed web sites, as of May 2024.[[2]](https://en.wikipedia.org/wiki/Character_sets#cite_note-W3TechsWebEncoding-2) In [application programs](https://en.wikipedia.org/wiki/Application_software "Application software") and [operating system](https://en.wikipedia.org/wiki/Operating_system "Operating system") tasks, both UTF-8 and UTF-16 are popular options.[[3]](https://en.wikipedia.org/wiki/Character_sets#cite_note-:0-3)

The history of character codes illustrates the evolving need for machine-mediated character-based symbolic information over a distance, using once-novel electrical means. The earliest codes were based upon manual and hand-written encoding and cyphering systems, such as [Bacon's cipher](https://en.wikipedia.org/wiki/Bacon%27s_cipher "Bacon's cipher"), [Braille](https://en.wikipedia.org/wiki/Braille "Braille"), [international maritime signal flags](https://en.wikipedia.org/wiki/International_maritime_signal_flags "International maritime signal flags"), and the 4-digit encoding of Chinese characters for a [Chinese telegraph code](https://en.wikipedia.org/wiki/Chinese_telegraph_code "Chinese telegraph code") ([Hans Schjellerup](https://en.wikipedia.org/wiki/Hans_Schjellerup "Hans Schjellerup"), 1869). With the adoption of electrical and electro-mechanical techniques these earliest codes were adapted to the new capabilities and limitations of the early machines. The earliest well-known electrically transmitted character code, [Morse code](https://en.wikipedia.org/wiki/Morse_code "Morse code"), introduced in the 1840s, used a system of four "symbols" (short signal, long signal, short space, long space) to generate codes of variable length. Though some commercial use of Morse code was via machinery, it was often used as a manual code, generated by hand on a [telegraph key](https://en.wikipedia.org/wiki/Telegraph_key "Telegraph key") and decipherable by ear, and persists in [amateur radio](https://en.wikipedia.org/wiki/Amateur_radio "Amateur radio") and [aeronautical](https://en.wikipedia.org/wiki/Non-directional_beacon "Non-directional beacon") use. Most codes are of fixed per-character length or variable-length sequences of fixed-length codes (e.g. [Unicode](https://en.wikipedia.org/wiki/Unicode "Unicode")).[[4]](https://en.wikipedia.org/wiki/Character_sets#cite_note-4)

Common examples of character encoding systems include Morse code, the [Baudot code](https://en.wikipedia.org/wiki/Baudot_code "Baudot code"), the [American Standard Code for Information Interchange](https://en.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange "American Standard Code for Information Interchange") (ASCII) and Unicode. Unicode, a well-defined and extensible encoding system, has replaced most earlier character encodings, but the path of code development to the present is fairly well known.

The Baudot code, a five-[bit](https://en.wikipedia.org/wiki/Bit "Bit") encoding, was created by [Émile Baudot](https://en.wikipedia.org/wiki/%C3%89mile_Baudot "Émile Baudot") in 1870, patented in 1874, modified by Donald Murray in 1901, and standardized by CCITT as International Telegraph Alphabet No.2 (ITA2) in 1930. The name _baudot_ has been erroneously applied to ITA2 and its many variants. ITA2 suffered from many shortcomings and was often improved by many equipment manufacturers, sometimes creating compatibility issues.

[![Image 2](https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Blue-punch-card-front-horiz.png/250px-Blue-punch-card-front-horiz.png)](https://en.wikipedia.org/wiki/File:Blue-punch-card-front-horiz.png)

Hollerith 80-column punch card with EBCDIC character set

[Herman Hollerith](https://en.wikipedia.org/wiki/Herman_Hollerith "Herman Hollerith") invented punch card data encoding in the late 19th century to analyze census data. Initially, each hole position represented a different data element, but later, numeric information was encoded by numbering the lower rows 0 to 9, with a punch in a column representing its row number. Later alphabetic data was encoded by allowing more than one punch per column. Electromechanical [tabulating machines](https://en.wikipedia.org/wiki/Tabulating_machine "Tabulating machine") represented date internally by the timing of pulses relative to the motion of the cards through the machine.

When [IBM](https://en.wikipedia.org/wiki/IBM "IBM") went to electronic processing, starting with the [IBM 603](https://en.wikipedia.org/wiki/IBM_603 "IBM 603") Electronic Multiplier, it used a variety of binary encoding schemes that were tied to the punch card code. IBM used several [binary-coded decimal](https://en.wikipedia.org/wiki/BCD_(character_encoding) "BCD (character encoding)") (BCD) six-bit character encoding schemes, starting as early as 1953 in its [702](https://en.wikipedia.org/wiki/IBM_702 "IBM 702")[[5]](https://en.wikipedia.org/wiki/Character_sets#cite_note-5) and [704](https://en.wikipedia.org/wiki/IBM_704 "IBM 704") computers, and in its later [7000 Series](https://en.wikipedia.org/wiki/IBM_700/7000_series "IBM 700/7000 series") and [1400 series](https://en.wikipedia.org/wiki/IBM_1400_series "IBM 1400 series"), as well as in associated peripherals. Since the punched card code then in use was limited to digits, upper-case English letters and a few special characters, six bits were sufficient. These BCD encodings extended existing simple four-bit numeric encoding to include alphabetic and special characters, mapping them easily to punch-card encoding which was already in widespread use. IBM's codes were used primarily with IBM equipment. Other computer vendors of the era had their own character codes, often six-bit, such as the encoding used by the [UNIVAC I](https://en.wikipedia.org/wiki/UNIVAC_I "UNIVAC I").[[6]](https://en.wikipedia.org/wiki/Character_sets#cite_note-6) They usually had the ability to read tapes produced on IBM equipment. IBM's BCD encodings were the precursors of their [Extended Binary-Coded Decimal Interchange Code](https://en.wikipedia.org/wiki/Extended_Binary-Coded_Decimal_Interchange_Code "Extended Binary-Coded Decimal Interchange Code") (usually abbreviated as EBCDIC), an eight-bit encoding scheme developed in 1963 for the [IBM System/360](https://en.wikipedia.org/wiki/IBM_System/360 "IBM System/360") that featured a larger character set, including lower case letters.

In 1959 the U.S. military defined its [Fieldata](https://en.wikipedia.org/wiki/Fieldata "Fieldata") code, a six-or seven-bit code, introduced by the U.S. Army Signal Corps. While Fieldata addressed many of the then-modern issues (e.g. letter and digit codes arranged for machine collation), it fell short of its goals and was short-lived. In 1963 the first ASCII code was released (X3.4-1963) by the ASCII committee (which contained at least one member of the Fieldata committee, W. F. Leubbert), which addressed most of the shortcomings of Fieldata, using a simpler seven-bit code. Many of the changes were subtle, such as collatable character sets within certain numeric ranges. ASCII63 was a success, widely adopted by industry, and with the follow-up issue of the 1967 ASCII code (which added lower-case letters and fixed some "control code" issues) ASCII67 was adopted fairly widely. ASCII67's American-centric nature was somewhat addressed in the European [ECMA-6](https://en.wikipedia.org/wiki/ECMA-6 "ECMA-6") standard.[[7]](https://en.wikipedia.org/wiki/Character_sets#cite_note-7) Eight-bit [extended ASCII](https://en.wikipedia.org/wiki/Extended_ASCII "Extended ASCII") encodings, such as various vendor extensions and the [ISO/IEC 8859](https://en.wikipedia.org/wiki/ISO/IEC_8859 "ISO/IEC 8859") series, supported all ASCII characters as well as additional non-ASCII characters.

While trying to develop universally interchangeable character encodings, researchers in the 1980s faced the dilemma that, on the one hand, it seemed necessary to add more bits to accommodate additional characters, but on the other hand, for the users of the relatively small character set of the Latin alphabet (who still constituted the majority of computer users), those additional bits were a colossal waste of then-scarce and expensive computing resources (as they would always be zeroed out for such users). In 1985, the average personal computer user's [hard disk drive](https://en.wikipedia.org/wiki/Hard_disk_drive "Hard disk drive") could store only about 10 megabytes, and it cost approximately US$250 on the wholesale market (and much higher if purchased separately at retail),[[8]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Strelho-8) so it was very important at the time to make every bit count.

The compromise solution that was eventually found and developed into Unicode[_[vague](https://en.wikipedia.org/wiki/Wikipedia:Vagueness "Wikipedia:Vagueness")_] was to break the assumption (dating back to telegraph codes) that each character should always directly correspond to a particular sequence of bits. Instead, characters would first be mapped to a universal intermediate representation in the form of abstract numbers called [code points](https://en.wikipedia.org/wiki/Code_point "Code point"). Code points would then be represented in a variety of ways and with various default numbers of bits per character (code units) depending on context. To encode code points higher than the length of the code unit, such as above 256 for eight-bit units, the solution was to implement [variable-length encodings](https://en.wikipedia.org/wiki/Variable-width_encoding "Variable-width encoding") where an escape sequence would signal that subsequent bits should be parsed as a higher code point.

The various terms related to character encoding are often used inconsistently or incorrectly.[[9]](https://en.wikipedia.org/wiki/Character_sets#cite_note-SteeleMSDN-9) Historically, the same standard would specify a repertoire of characters and how they were to be encoded into a stream of code units — usually with a single character per code unit. However, due to the emergence of more sophisticated character encodings, the distinction between terms has become important.

A character is the smallest unit of text that has semantic value.[[9]](https://en.wikipedia.org/wiki/Character_sets#cite_note-SteeleMSDN-9)[[10]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Unicode_glossary-10)

What constitutes a character varies between character encodings. For example, for letters with [diacritics](https://en.wikipedia.org/wiki/Diacritic "Diacritic"), there are two distinct approaches that can be taken to encode them. They can be encoded either as a single unified character (known as a precomposed character), or as separate characters that combine into a single [glyph](https://en.wikipedia.org/wiki/Glyph "Glyph"). The former simplifies the text handling system, but the latter allows any letter/diacritic combination to be used in text. [Ligatures](https://en.wikipedia.org/wiki/Typographic_ligature "Typographic ligature") pose similar problems. Some writing systems, such as Arabic and Hebrew, need to accommodate things like [graphemes](https://en.wikipedia.org/wiki/Grapheme "Grapheme") that are joined in different ways in different contexts, but represent the same semantic character.

A character set is a collection of characters used to represent text.[[9]](https://en.wikipedia.org/wiki/Character_sets#cite_note-SteeleMSDN-9)[[10]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Unicode_glossary-10) For example, the [Latin alphabet](https://en.wikipedia.org/wiki/Latin_alphabet "Latin alphabet") and [Greek alphabet](https://en.wikipedia.org/wiki/Greek_alphabet "Greek alphabet") are character sets.

### Coded character set

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=5 "Edit section: Coded character set")]

A coded character set is a character set with each item uniquely mapped to a numberic value.[[10]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Unicode_glossary-10)

This is also known as a [code page](https://en.wikipedia.org/wiki/Code_page "Code page"),[[9]](https://en.wikipedia.org/wiki/Character_sets#cite_note-SteeleMSDN-9) although that term is generally antiquated. Originally, _code page_ referred to a [page number](https://en.wikipedia.org/wiki/Page_number "Page number") in an IBM manual that defined a particular character encoding.[[11]](https://en.wikipedia.org/wiki/Character_sets#cite_note-DEC_VT510-11) Other vendors, including [Microsoft](https://en.wikipedia.org/wiki/Microsoft "Microsoft"), [SAP](https://en.wikipedia.org/wiki/SAP_AG "SAP AG"), and [Oracle Corporation](https://en.wikipedia.org/wiki/Oracle_Corporation "Oracle Corporation"), also published their own code pages, including notable [Windows code page](https://en.wikipedia.org/wiki/Windows_code_page "Windows code page") and [code page 437](https://en.wikipedia.org/wiki/Code_page_437 "Code page 437"). Despite no longer referring to specific pages in a manual, many character encodings are still identified to by the same number. Likewise, the term _code page_ is still used to refer to character encoding.

In [Unix](https://en.wikipedia.org/wiki/Unix "Unix") and [Unix-like](https://en.wikipedia.org/wiki/Unix-like "Unix-like") systems, the term _charmap_ is commonly used; usually in the larger context of locales.

IBM's Character Data Representation Architecture (CDRA) designates each entity with a [coded character set identifier (CCSID)](https://en.wikipedia.org/wiki/CCSID "CCSID"), which is variously called a _charset_, _character set_, _code page_, or _CHARMAP_.[[12]](https://en.wikipedia.org/wiki/Character_sets#cite_note-utr17-12)

### Character repertoire

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=6 "Edit section: Character repertoire")]

A character repertoire is a set of characters that can be represented by a particular coded character set.[[10]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Unicode_glossary-10)[[13]](https://en.wikipedia.org/wiki/Character_sets#cite_note-unicode15-13) The repertoire may be closed, meaning that no additions are allowed without creating a new standard (as is the case with ASCII and most of the ISO-8859 series); or it may be open, allowing additions (as is the case with Unicode and to a limited extent [Windows code pages](https://en.wikipedia.org/wiki/Windows_code_page "Windows code page")).[[13]](https://en.wikipedia.org/wiki/Character_sets#cite_note-unicode15-13)

A [code point](https://en.wikipedia.org/wiki/Code_point "Code point") is the value or position of a character in a coded character set.[[10]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Unicode_glossary-10) A code point is represented by a sequence of code units. The mapping is defined by the encoding. Thus, the number of code units required to represent a code point depends on the encoding:

*   UTF-8: code points map to a sequence of one, two, three or four code units.
*   UTF-16: code units are twice as long as 8-bit code units. Therefore, any code point with a scalar value less than U+10000 is encoded with a single code unit. Code points with a value U+10000 or higher require two code units each. These pairs of code units have a unique term in UTF-16: ["Unicode surrogate pairs".](https://en.wikipedia.org/wiki/UTF-16#Code_points_from_U+010000_to_U+10FFFF "UTF-16")
*   UTF-32: the 32-bit code unit is large enough that every code point is represented as a single code unit.
*   GB 18030: multiple code units per code point are common, because of the small code units. Code points are mapped to one, two, or four code units.[[14]](https://en.wikipedia.org/wiki/Character_sets#cite_note-14)

Code space is the range of numerical values spanned by a coded character set.[[10]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Unicode_glossary-10)[[12]](https://en.wikipedia.org/wiki/Character_sets#cite_note-utr17-12)

A code unit is the minimum bit combination that can represent a character in a character encoding (in [computer science](https://en.wikipedia.org/wiki/Computer_science "Computer science") terms, it is the [word](https://en.wikipedia.org/wiki/Word_(computer_architecture) "Word (computer architecture)") size of the character encoding).[[10]](https://en.wikipedia.org/wiki/Character_sets#cite_note-Unicode_glossary-10)[[12]](https://en.wikipedia.org/wiki/Character_sets#cite_note-utr17-12) Common code units include 7-bit, 8-bit, 16-bit, and 32-bit. In some encodings, some characters are encoded as [multiple code units](https://en.wikipedia.org/wiki/Variable-width_encoding "Variable-width encoding").

For example:

*   [ASCII](https://en.wikipedia.org/wiki/ASCII "ASCII"): 7 bits
*   [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8"), [EBCDIC](https://en.wikipedia.org/wiki/EBCDIC "EBCDIC") and [GB 18030](https://en.wikipedia.org/wiki/GB_18030 "GB 18030"): 8 bits
*   [UTF-16](https://en.wikipedia.org/wiki/UTF-16 "UTF-16"): 16 bits
*   [UTF-32](https://en.wikipedia.org/wiki/UTF-32 "UTF-32"): 32 bits

[Unicode](https://en.wikipedia.org/wiki/Unicode "Unicode") and its parallel standard, the ISO/IEC 10646 [Universal Character Set](https://en.wikipedia.org/wiki/Universal_Character_Set "Universal Character Set"), together constitute a unified standard for character encoding. Rather than mapping characters directly to [bytes](https://en.wikipedia.org/wiki/Byte "Byte"), Unicode separately defines a coded character set that maps characters to unique natural numbers ([code points](https://en.wikipedia.org/wiki/Code_point "Code point")), how those code points are mapped to a series of fixed-size natural numbers (code units), and finally how those units are encoded as a stream of octets (bytes). The purpose of this decomposition is to establish a universal set of characters that can be encoded in a variety of ways. To describe the model precisely, Unicode uses existing terms and defines new terms.[[12]](https://en.wikipedia.org/wiki/Character_sets#cite_note-utr17-12)

### Abstract character repertoire

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=11 "Edit section: Abstract character repertoire")]

An abstract character repertoire (ACR) is the full set of abstract characters that a system supports. Unicode has an open repertoire, meaning that new characters will be added to the repertoire over time.

### Coded character set

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=12 "Edit section: Coded character set")]

A coded character set (CCS) is a [function](https://en.wikipedia.org/wiki/Function_(mathematics) "Function (mathematics)") that maps characters to _[code points](https://en.wikipedia.org/wiki/Code\_point "Code point")_ (each code point represents one character). For example, in a given repertoire, the capital letter "A" in the Latin alphabet might be represented by the code point 65, the character "B" by 66, and so on. Multiple coded character sets may share the same character repertoire; for example [ISO/IEC 8859-1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1 "ISO/IEC 8859-1") and IBM code pages 037 and 500 all cover the same repertoire but map them to different code points.

### Character encoding form

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=13 "Edit section: Character encoding form")]

A character encoding form (CEF) is the mapping of code points to _code units_ to facilitate storage in a system that represents numbers as bit sequences of fixed length (i.e. practically any computer system). For example, a system that stores numeric information in 16-bit units can only directly represent code points 0 to 65,535 in each unit, but larger code points (say, 65,536 to 1.4 million) could be represented by using multiple 16-bit units. This correspondence is defined by a CEF.

### Character encoding scheme

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=14 "Edit section: Character encoding scheme")]

A character encoding scheme (CES) is the mapping of code units to a sequence of octets to facilitate storage on an octet-based file system or transmission over an octet-based network. Simple character encoding schemes include [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8"), [UTF-16BE](https://en.wikipedia.org/wiki/UTF-16BE "UTF-16BE"), [UTF-32BE](https://en.wikipedia.org/wiki/UTF-32BE "UTF-32BE"), [UTF-16LE](https://en.wikipedia.org/wiki/UTF-16LE "UTF-16LE"), and [UTF-32LE](https://en.wikipedia.org/wiki/UTF-32LE "UTF-32LE"); compound character encoding schemes, such as [UTF-16](https://en.wikipedia.org/wiki/UTF-16 "UTF-16"), [UTF-32](https://en.wikipedia.org/wiki/UTF-32 "UTF-32") and [ISO/IEC 2022](https://en.wikipedia.org/wiki/ISO/IEC_2022 "ISO/IEC 2022"), switch between several simple schemes by using a [byte order mark](https://en.wikipedia.org/wiki/Byte_order_mark "Byte order mark") or [escape sequences](https://en.wikipedia.org/wiki/Escape_sequence "Escape sequence"); compressing schemes try to minimize the number of bytes used per code unit (such as [SCSU](https://en.wikipedia.org/wiki/Standard_Compression_Scheme_for_Unicode "Standard Compression Scheme for Unicode") and [BOCU](https://en.wikipedia.org/wiki/Binary_Ordered_Compression_for_Unicode "Binary Ordered Compression for Unicode")).

Although [UTF-32BE](https://en.wikipedia.org/wiki/UTF-32BE "UTF-32BE") and [UTF-32LE](https://en.wikipedia.org/wiki/UTF-32LE "UTF-32LE") are simpler CESes, most systems working with Unicode use either [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8"), which is [backward compatible](https://en.wikipedia.org/wiki/Backward_compatibility "Backward compatibility") with fixed-length ASCII and maps Unicode code points to variable-length sequences of octets, or [UTF-16BE](https://en.wikipedia.org/wiki/UTF-16BE "UTF-16BE"),[_[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation\_needed "Wikipedia:Citation needed")_] which is [backward compatible](https://en.wikipedia.org/wiki/Backward_compatibility "Backward compatibility") with fixed-length UCS-2BE and maps Unicode code points to variable-length sequences of 16-bit words. See [comparison of Unicode encodings](https://en.wikipedia.org/wiki/Comparison_of_Unicode_encodings "Comparison of Unicode encodings") for a detailed discussion.

### Higher-level protocol

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=15 "Edit section: Higher-level protocol")]

There may be a higher-level protocol which supplies additional information to select the particular variant of a [Unicode](https://en.wikipedia.org/wiki/Unicode "Unicode") character, particularly where there are regional variants that have been 'unified' in Unicode as the same character. An example is the [XML](https://en.wikipedia.org/wiki/XML "XML") attribute xml:lang.

The Unicode model uses the term "character map" for other systems which directly assign a sequence of characters to a sequence of bytes, covering all of the CCS, CEF and CES layers.[[12]](https://en.wikipedia.org/wiki/Character_sets#cite_note-utr17-12)

### Code point documentation

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=16 "Edit section: Code point documentation")]

A character is commonly documented as 'U+' followed by its code point value in [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal "Hexadecimal"). The range of valid code points (the code space) for the Unicode standard is U+0000 to U+10FFFF, inclusive, divided in 17 [planes](https://en.wikipedia.org/wiki/Plane_(Unicode) "Plane (Unicode)"), identified by the numbers 0 to 16. Characters in the range U+0000 to U+FFFF are in plane 0, called the [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane "Plane (Unicode)") (BMP). This plane contains the most commonly used characters. Characters in the range U+10000 to U+10FFFF in the other planes are called [supplementary characters](https://en.wikipedia.org/wiki/Supplementary_characters "Supplementary characters").

The following table includes examples of code points:

| Character | Code point | Glyph |
| --- | --- | --- |
| Latin A | U+0041 | Α |
| Latin sharp S | U+00DF | ß |
| Han for East | U+6771 | 東 |
| Ampersand | U+0026 | & |
| Inverted exclamation mark | U+00A1 | ¡ |
| Section sign | U+00A7 | § |

Consider, "ab̲c𐐀" – a string containing a Unicode combining character (U+0332̲COMBINING LOW LINE) as well as a supplementary character (U+10400 𐐀 DESERET CAPITAL LETTER LONG I). This string has several Unicode representations which are logically equivalent, yet while each is suited to a diverse set of circumstances or range of requirements:

*   Four [composed characters](https://en.wikipedia.org/wiki/Character_(computing) "Character (computing)"): `a`, `b̲`, `c`, `𐐀`
*   Five [graphemes](https://en.wikipedia.org/wiki/Grapheme "Grapheme"): `a`, `b`, `_`, `c`, `𐐀`
*   Five Unicode [code points](https://en.wikipedia.org/wiki/Code_point "Code point"): `U+0061`, `U+0062`, `U+0332`, `U+0063`, `U+10400`
*   Five UTF-32 code units (32-bit integer values): `0x00000061`, `0x00000062`, `0x00000332`, `0x00000063`, `0x00010400`
*   Six UTF-16 code units (16-bit integers) `0x0061`, `0x0062`, `0x0332`, `0x0063`, `0xD801`, `0xDC00`
*   Nine UTF-8 code units (8-bit values, or [bytes](https://en.wikipedia.org/wiki/Byte "Byte")) `0x61`, `0x62`, `0xCC`, `0xB2`, `0x63`, `0xF0`, `0x90`, `0x90`, `0x80`

Note in particular that 𐐀 is represented with either one 32-bit value (UTF-32), two 16-bit values (UTF-16), or four 8-bit values (UTF-8). Although each of those forms uses the same total number of bits (32) to represent the glyph, it is not obvious how the actual numeric byte values are related.

To support environments using multiple character encodings, software has been developed to translate text between character encoding schemes; a process known as [transcoding](https://en.wikipedia.org/wiki/Transcoding "Transcoding"). Notable software includes:

*   [Web browser](https://en.wikipedia.org/wiki/Web_browser "Web browser") – Modern browsers feature automatic [character encoding detection](https://en.wikipedia.org/wiki/Character_encoding_detection "Character encoding detection")
*   [iconv](https://en.wikipedia.org/wiki/Iconv "Iconv") – Program and standardized API to convert encodings
*   [luit](https://en.wikipedia.org/wiki/Luit "Luit") – Program that converts encoding of input and output to programs running interactively
*   [International Components for Unicode](https://en.wikipedia.org/wiki/International_Components_for_Unicode "International Components for Unicode") – A set of C and Java libraries for charset conversion
*   Encoding.Convert – [.NET](https://en.wikipedia.org/wiki/.NET ".NET") API[[15]](https://en.wikipedia.org/wiki/Character_sets#cite_note-15)
*   MultiByteToWideChar/WideCharToMultiByte – [Windows API](https://en.wikipedia.org/wiki/Windows_API "Windows API") functions for converting between ANSI and Unicode[[16]](https://en.wikipedia.org/wiki/Character_sets#cite_note-16)[[17]](https://en.wikipedia.org/wiki/Character_sets#cite_note-17)

Common character encodings
--------------------------

[[edit](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=19 "Edit section: Common character encodings")]

[![Image 3: [icon]](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/20px-Wiki_letter_w_cropped.svg.png)](https://en.wikipedia.org/wiki/File:Wiki_letter_w_cropped.svg)This section **needs expansion** with: Popularity and comparison:

*   Statistics on popularity
*   Especially, a comparison of the advantages and disadvantages of the few 3-5 most common character encodings (e.g. UTF-8, UTF-16 and UTF-32). You can help by [adding to it](https://en.wikipedia.org/w/index.php?title=Character_encoding&action=edit&section=). _(June 2024)_

The [most used character encoding](https://en.wikipedia.org/wiki/Popularity_of_text_encodings "Popularity of text encodings") on the [web](https://en.wikipedia.org/wiki/World_Wide_Web "World Wide Web") is [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8"), used in 98.2% of surveyed web sites, as of May 2024.[[2]](https://en.wikipedia.org/wiki/Character_sets#cite_note-W3TechsWebEncoding-2) In [application programs](https://en.wikipedia.org/wiki/Application_software "Application software") and [operating system](https://en.wikipedia.org/wiki/Operating_system "Operating system") tasks, both UTF-8 and [UTF-16](https://en.wikipedia.org/wiki/UTF-16 "UTF-16") are popular options.[[3]](https://en.wikipedia.org/wiki/Character_sets#cite_note-:0-3)[[18]](https://en.wikipedia.org/wiki/Character_sets#cite_note-:1-18)

*   [ISO 646](https://en.wikipedia.org/wiki/ISO/IEC_646 "ISO/IEC 646")
    *   [ASCII](https://en.wikipedia.org/wiki/ASCII "ASCII")

*   [EBCDIC](https://en.wikipedia.org/wiki/EBCDIC "EBCDIC")
*   [ISO 8859](https://en.wikipedia.org/wiki/ISO/IEC_8859 "ISO/IEC 8859"): 
    *   [ISO 8859-1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1 "ISO/IEC 8859-1") Western Europe
    *   [ISO 8859-2](https://en.wikipedia.org/wiki/ISO/IEC_8859-2 "ISO/IEC 8859-2") Western and Central Europe
    *   [ISO 8859-3](https://en.wikipedia.org/wiki/ISO/IEC_8859-3 "ISO/IEC 8859-3") Western Europe and South European (Turkish, Maltese plus Esperanto)
    *   [ISO 8859-4](https://en.wikipedia.org/wiki/ISO/IEC_8859-4 "ISO/IEC 8859-4") Western Europe and Baltic countries (Lithuania, Estonia, Latvia and Lapp)
    *   [ISO 8859-5](https://en.wikipedia.org/wiki/ISO/IEC_8859-5 "ISO/IEC 8859-5") Cyrillic alphabet
    *   [ISO 8859-6](https://en.wikipedia.org/wiki/ISO/IEC_8859-6 "ISO/IEC 8859-6") Arabic
    *   [ISO 8859-7](https://en.wikipedia.org/wiki/ISO/IEC_8859-7 "ISO/IEC 8859-7") Greek
    *   [ISO 8859-8](https://en.wikipedia.org/wiki/ISO/IEC_8859-8 "ISO/IEC 8859-8") Hebrew
    *   [ISO 8859-9](https://en.wikipedia.org/wiki/ISO/IEC_8859-9 "ISO/IEC 8859-9") Western Europe with amended Turkish character set
    *   [ISO 8859-10](https://en.wikipedia.org/wiki/ISO/IEC_8859-10 "ISO/IEC 8859-10") Western Europe with rationalised character set for Nordic languages, including complete Icelandic set
    *   [ISO 8859-11](https://en.wikipedia.org/wiki/ISO/IEC_8859-11 "ISO/IEC 8859-11") Thai
    *   [ISO 8859-13](https://en.wikipedia.org/wiki/ISO/IEC_8859-13 "ISO/IEC 8859-13") Baltic languages plus Polish
    *   [ISO 8859-14](https://en.wikipedia.org/wiki/ISO/IEC_8859-14 "ISO/IEC 8859-14") Celtic languages (Irish Gaelic, Scottish, Welsh)
    *   [ISO 8859-15](https://en.wikipedia.org/wiki/ISO/IEC_8859-15 "ISO/IEC 8859-15") Added the Euro sign and other rationalisations to ISO 8859-1
    *   [ISO 8859-16](https://en.wikipedia.org/wiki/ISO/IEC_8859-16 "ISO/IEC 8859-16") Central, Eastern and Southern European languages (Albanian, Bosnian, Croatian, Hungarian, Polish, Romanian, Serbian and Slovenian, but also French, German, Italian and Irish Gaelic)

*   [CP437](https://en.wikipedia.org/wiki/Code_page_437 "Code page 437"), CP720, [CP737](https://en.wikipedia.org/wiki/Code_page_737 "Code page 737"), [CP850](https://en.wikipedia.org/wiki/Code_page_850 "Code page 850"), CP852, CP855, CP857, [CP858](https://en.wikipedia.org/wiki/Code_page_858 "Code page 858"), CP860, [CP861](https://en.wikipedia.org/wiki/Code_page_861 "Code page 861"), [CP862](https://en.wikipedia.org/wiki/Code_page_862 "Code page 862"), [CP863](https://en.wikipedia.org/wiki/Code_page_863 "Code page 863"), [CP865](https://en.wikipedia.org/wiki/Code_page_865 "Code page 865"), [CP866](https://en.wikipedia.org/wiki/Code_page_866 "Code page 866"), [CP869](https://en.wikipedia.org/wiki/Code_page_869 "Code page 869"), [CP872](https://en.wikipedia.org/w/index.php?title=Code_page_872&action=edit&redlink=1 "Code page 872 (page does not exist)")
*   [MS-Windows character sets](https://en.wikipedia.org/wiki/Windows_code_page "Windows code page"): 
    *   [Windows-1250](https://en.wikipedia.org/wiki/Windows-1250 "Windows-1250") for Central European languages that use Latin script, (Polish, Czech, Slovak, Hungarian, Slovene, Serbian, Croatian, Bosnian, Romanian and Albanian)
    *   [Windows-1251](https://en.wikipedia.org/wiki/Windows-1251 "Windows-1251") for Cyrillic alphabets
    *   [Windows-1252](https://en.wikipedia.org/wiki/Windows-1252 "Windows-1252") for Western languages
    *   [Windows-1253](https://en.wikipedia.org/wiki/Windows-1253 "Windows-1253") for Greek
    *   [Windows-1254](https://en.wikipedia.org/wiki/Windows-1254 "Windows-1254") for Turkish
    *   [Windows-1255](https://en.wikipedia.org/wiki/Windows-1255 "Windows-1255") for Hebrew
    *   [Windows-1256](https://en.wikipedia.org/wiki/Windows-1256 "Windows-1256") for Arabic
    *   [Windows-1257](https://en.wikipedia.org/wiki/Windows-1257 "Windows-1257") for Baltic languages
    *   [Windows-1258](https://en.wikipedia.org/wiki/Windows-1258 "Windows-1258") for Vietnamese

*   [Mac OS Roman](https://en.wikipedia.org/wiki/Mac_OS_Roman "Mac OS Roman")
*   [KOI8-R](https://en.wikipedia.org/wiki/KOI8-R "KOI8-R"), [KOI8-U](https://en.wikipedia.org/wiki/KOI8-U "KOI8-U"), [KOI7](https://en.wikipedia.org/wiki/KOI7 "KOI7")
*   [MIK](https://en.wikipedia.org/wiki/MIK_Code_page "MIK Code page")
*   [ISCII](https://en.wikipedia.org/wiki/Indian_Script_Code_for_Information_Interchange "Indian Script Code for Information Interchange")
*   [TSCII](https://en.wikipedia.org/wiki/Tamil_Script_Code_for_Information_Interchange "Tamil Script Code for Information Interchange")
*   [VISCII](https://en.wikipedia.org/wiki/Vietnamese_Standard_Code_for_Information_Interchange "Vietnamese Standard Code for Information Interchange")
*   [JIS X 0208](https://en.wikipedia.org/wiki/JIS_X_0208 "JIS X 0208") is a widely deployed standard for Japanese character encoding that has several encoding forms. 
    *   [Shift JIS](https://en.wikipedia.org/wiki/Shift_JIS "Shift JIS") (Microsoft [Code page 932](https://en.wikipedia.org/wiki/Code_page_932_(Microsoft_Windows) "Code page 932 (Microsoft Windows)") is a dialect of Shift_JIS)
    *   [EUC-JP](https://en.wikipedia.org/wiki/Extended_Unix_Code "Extended Unix Code")
    *   [ISO-2022-JP](https://en.wikipedia.org/wiki/ISO/IEC_2022 "ISO/IEC 2022")

*   [JIS X 0213](https://en.wikipedia.org/wiki/JIS_X_0213 "JIS X 0213") is an extended version of JIS X 0208. 
    *   [Shift_JIS-2004](https://en.wikipedia.org/wiki/Shift_JIS "Shift JIS")
    *   [EUC-JIS-2004](https://en.wikipedia.org/wiki/Extended_Unix_Code "Extended Unix Code")
    *   [ISO-2022-JP-2004](https://en.wikipedia.org/wiki/ISO/IEC_2022 "ISO/IEC 2022")

*   Chinese [Guobiao](https://en.wikipedia.org/wiki/List_of_GB_standards "List of GB standards")
    *   [GB 2312](https://en.wikipedia.org/wiki/GB_2312 "GB 2312")
    *   [GBK](https://en.wikipedia.org/wiki/GBK_(character_encoding) "GBK (character encoding)") (Microsoft Code page 936)
    *   [GB 18030](https://en.wikipedia.org/wiki/GB_18030 "GB 18030")

*   Taiwan [Big5](https://en.wikipedia.org/wiki/Big5 "Big5") (a more famous variant is Microsoft [Code page 950](https://en.wikipedia.org/wiki/Code_page_950 "Code page 950")) 
    *   Hong Kong [HKSCS](https://en.wikipedia.org/wiki/HKSCS "HKSCS")

*   Korean 
    *   [KS X 1001](https://en.wikipedia.org/wiki/KS_X_1001 "KS X 1001") is a Korean double-byte character encoding standard
    *   [EUC-KR](https://en.wikipedia.org/wiki/Extended_Unix_Code#EUC-KR "Extended Unix Code")
    *   [ISO-2022-KR](https://en.wikipedia.org/wiki/ISO/IEC_2022 "ISO/IEC 2022")

*   [Unicode](https://en.wikipedia.org/wiki/Unicode "Unicode") (and subsets thereof, such as the 16-bit 'Basic Multilingual Plane') 
    *   [UTF-8](https://en.wikipedia.org/wiki/UTF-8 "UTF-8")
    *   [UTF-16](https://en.wikipedia.org/wiki/UTF-16 "UTF-16")
    *   [UTF-32](https://en.wikipedia.org/wiki/UTF-32 "UTF-32")

*   [ANSEL](https://en.wikipedia.org/wiki/ANSEL "ANSEL") or [ISO/IEC 6937](https://en.wikipedia.org/wiki/ISO/IEC_6937 "ISO/IEC 6937")

*   [Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding "Percent-encoding")– Method of encoding characters in a URI
*   [Alt code](https://en.wikipedia.org/wiki/Alt_code "Alt code")– Input method
*   [Character encodings in HTML](https://en.wikipedia.org/wiki/Character_encodings_in_HTML "Character encodings in HTML")– Use of encoding systems for international characters in HTML
*   [Charset sniffing](https://en.wikipedia.org/wiki/Charset_sniffing "Charset sniffing")– Practice of deducing the file type of a bitstream
*   [Category:Character encoding](https://en.wikipedia.org/wiki/Category:Character_encoding "Category:Character encoding") – articles related to character encoding in general
*   [Category:Character sets](https://en.wikipedia.org/wiki/Category:Character_sets "Category:Character sets") – articles detailing specific character encodings
*   [Hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal "Hexadecimal")– Base-16 numeric representation
*   [Mojibake](https://en.wikipedia.org/wiki/Mojibake "Mojibake")– Garbled text as a result of incorrect character encodings
*   [Mojikyō](https://en.wikipedia.org/wiki/Mojiky%C5%8D "Mojikyō")– Character encoding scheme
*   [Presentation layer](https://en.wikipedia.org/wiki/Presentation_layer "Presentation layer")– Sixth layer of the OSI model of telecommunications
*   [TRON (encoding)](https://en.wikipedia.org/wiki/TRON_(encoding) "TRON (encoding)")– Multi-byte character encoding
*   [Universal Character Set characters](https://en.wikipedia.org/wiki/Universal_Character_Set_characters "Universal Character Set characters")– Complete list of the characters available on most computers

1.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-1)**["Character Encoding Definition"](http://techterms.com/definition/characterencoding). _The Tech Terms Dictionary_. 24 September 2010.
2.   ^ [_**a**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-W3TechsWebEncoding_2-0)[_**b**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-W3TechsWebEncoding_2-1)["Usage Survey of Character Encodings broken down by Ranking"](https://w3techs.com/technologies/cross/character_encoding/ranking). _W3Techs_. Retrieved 29 April 2024.
3.   ^ [_**a**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-:0_3-0)[_**b**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-:0_3-1)["Charset"](https://developer.android.com/reference/java/nio/charset/Charset). _Android Developers_. Retrieved 2 January 2021. Android note: The Android platform default is always UTF-8.
4.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-4)**Tom Henderson (17 April 2014). ["Ancient Computer Character Code Tables – and Why They're Still Relevant"](https://web.archive.org/web/20140430000312/http://blog.smartbear.com/development/ancient-computer-character-code-tables-and-why-theyre-still-relevant/). Smartbear. Archived from [the original](https://blog.smartbear.com/development/ancient-computer-character-code-tables-and-why-theyre-still-relevant/) on 30 April 2014. Retrieved 29 April 2014.
5.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-5)**["IBM Electronic Data-Processing Machines Type 702 Preliminary Manual of Information"](http://www.bitsavers.org/pdf/ibm/702/22-6173-1_702prelim_Feb56.pdf)(PDF). 1954. p.80. 22-6173-1. [Archived](https://ghostarchive.org/archive/20221009/http://www.bitsavers.org/pdf/ibm/702/22-6173-1_702prelim_Feb56.pdf)(PDF) from the original on 9 October 2022 – via bitsavers.org.
6.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-6)**["UNIVAC System"](http://www.bitsavers.org/pdf/univac/univac1/UnivacI_RefCard.pdf)(PDF) (reference card).
7.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-7)**Tom Jennings (20 April 2016). ["An annotated history of some character codes"](https://www.sr-ix.com/Archive/CharCodeHist/index.html). _Sensitive Research_. Retrieved 1 November 2018.
8.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Strelho_8-0)**Strelho, Kevin (15 April 1985). ["IBM Drives Hard Disks to New Standards"](https://books.google.com/books?id=zC4EAAAAMBAJ&pg=PA29). _InfoWorld_. Popular Computing Inc. pp.29–33. Retrieved 10 November 2020.
9.   ^ [_**a**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-SteeleMSDN_9-0)[_**b**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-SteeleMSDN_9-1)[_**c**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-SteeleMSDN_9-2)[_**d**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-SteeleMSDN_9-3)Shawn Steele (15 March 2005). ["What's the difference between an Encoding, Code Page, Character Set and Unicode?"](https://learn.microsoft.com/en-us/archive/blogs/shawnste/whats-the-difference-between-an-encoding-code-page-character-set-and-unicode). _Microsoft Docs_.
10.   ^ [_**a**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Unicode_glossary_10-0)[_**b**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Unicode_glossary_10-1)[_**c**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Unicode_glossary_10-2)[_**d**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Unicode_glossary_10-3)[_**e**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Unicode_glossary_10-4)[_**f**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Unicode_glossary_10-5)[_**g**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-Unicode_glossary_10-6)["Glossary of Unicode Terms"](https://unicode.org/glossary/). Unicode Consortium.
11.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-DEC_VT510_11-0)**["VT510 Video Terminal Programmer Information"](http://www.vt100.net/docs/vt510-rm/chapter7.html#S7.1). [Digital Equipment Corporation](https://en.wikipedia.org/wiki/Digital_Equipment_Corporation "Digital Equipment Corporation") (DEC). 7.1. Character Sets - Overview. [Archived](https://web.archive.org/web/20160126192029/http://www.vt100.net/docs/vt510-rm/chapter7.html#S7.1) from the original on 26 January 2016. Retrieved 15 February 2017. In addition to traditional [DEC](https://en.wikipedia.org/wiki/Digital_Equipment_Corporation "Digital Equipment Corporation") and [ISO](https://en.wikipedia.org/wiki/ISO "ISO") character sets, which conform to the structure and rules of [ISO 2022](https://en.wikipedia.org/wiki/ISO_2022 "ISO 2022"), the [VT510](https://en.wikipedia.org/wiki/VT510 "VT510") supports a number of IBM PC code pages ([page numbers](https://en.wikipedia.org/wiki/Page_number "Page number") in IBM's standard character set manual) in [PCTerm](https://en.wikipedia.org/w/index.php?title=PCTerm&action=edit&redlink=1 "PCTerm (page does not exist)") mode to emulate the [console terminal](https://en.wikipedia.org/wiki/Console_terminal "Console terminal") of industry-standard PCs.
12.   ^ [_**a**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-utr17_12-0)[_**b**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-utr17_12-1)[_**c**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-utr17_12-2)[_**d**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-utr17_12-3)[_**e**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-utr17_12-4)Whistler, Ken; Freytag, Asmus (11 November 2022). ["UTR#17: Unicode Character Encoding Model"](https://www.unicode.org/reports/tr17/). Unicode Consortium. Retrieved 12 August 2023.
13.   ^ [_**a**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-unicode15_13-0)[_**b**_](https://en.wikipedia.org/wiki/Character_sets#cite_ref-unicode15_13-1)"Chapter 3: Conformance". [_The Unicode Standard Version 15.0 – Core Specification_](https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf)(PDF). Unicode Consortium. September 2022. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-1-936213-32-0](https://en.wikipedia.org/wiki/Special:BookSources/978-1-936213-32-0 "Special:BookSources/978-1-936213-32-0").
14.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-14)**["Terminology (The Java Tutorials)"](https://docs.oracle.com/javase/tutorial/i18n/text/terminology.html). Oracle. Retrieved 25 March 2018.
15.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-15)**["Encoding.Convert Method"](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.convert?redirectedfrom=MSDN&view=net-6.0#overloads). _Microsoft .NET Framework Class Library_.
16.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-16)**["MultiByteToWideChar function (stringapiset.h)"](https://learn.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar). _Microsoft Docs_. 13 October 2021.
17.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-17)**["WideCharToMultiByte function (stringapiset.h)"](https://learn.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte). _Microsoft Docs_. 9 August 2022.
18.   **[^](https://en.wikipedia.org/wiki/Character_sets#cite_ref-:1_18-0)**Galloway, Matt (9 October 2012). ["Character encoding for iOS developers. Or UTF-8 what now?"](https://www.galloway.me.uk/2012/10/character-encoding-for-ios-developers-utf8/). _Matt Galloway_. Retrieved 2 January 2021. in reality, you usually just assume UTF-8 since that is by far the most common encoding.

*   Mackenzie, Charles E. (1980). [_Coded Character Sets, History and Development_](https://textfiles.meulie.net/bitsaved/Books/Mackenzie_CodedCharSets.pdf)(PDF). The Systems Programming Series (1 ed.). [Addison-Wesley Publishing Company, Inc.](https://en.wikipedia.org/wiki/Addison-Wesley_Publishing_Company,_Inc. "Addison-Wesley Publishing Company, Inc.")[ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[978-0-201-14460-4](https://en.wikipedia.org/wiki/Special:BookSources/978-0-201-14460-4 "Special:BookSources/978-0-201-14460-4"). [LCCN](https://en.wikipedia.org/wiki/LCCN_(identifier) "LCCN (identifier)")[77-90165](https://lccn.loc.gov/77-90165). [Archived](https://web.archive.org/web/20160526172151/https://textfiles.meulie.net/bitsaved/Books/Mackenzie_CodedCharSets.pdf)(PDF) from the original on May 26, 2016. Retrieved August 25, 2019.

[![Image 4](https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/40px-Commons-logo.svg.png)](https://en.wikipedia.org/wiki/File:Commons-logo.svg)

Wikimedia Commons has media related to [Encodings](https://commons.wikimedia.org/wiki/Category:Encodings "commons:Category:Encodings").

*   [Character sets registered by Internet Assigned Numbers Authority (IANA)](https://www.iana.org/assignments/character-sets)
*   [Characters and encodings](https://jkorpela.fi/chars/), by Jukka Korpela
*   [Unicode Technical Report #17: Character Encoding Model](https://www.unicode.org/unicode/reports/tr17/)
*   [Decimal, Hexadecimal Character Codes in HTML Unicode – Encoding converter](http://code.cside.com/3rdpage/us/unicode/converter.html)
*   [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/) by Joel Spolsky (Oct 10, 2003)
