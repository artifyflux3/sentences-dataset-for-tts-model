Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Contribute Help Learn to edit Community portal Recent changes Upload file Special pages Search Search Appearance Donate Create account Log in Personal tools Donate Create account Log in Pages for logged out editors learn more Contributions Talk CentralNotice Contents move to sidebar hide (Top) 1 Parity 2 Error detection 3 Usage Toggle Usage subsection 3.1 RAID array 4 History 5 See also 6 References 7 External links Toggle the table of contents Parity bit 37 languages Afrikaans العربية বাংলা Català Čeština Dansk Deutsch Eesti Español Esperanto Euskara فارسی Français Gaeilge 한국어 Hrvatski Italiano עברית Latviešu Magyar മലയാളം Nederlands Norsk nynorsk Polski Português Русский Slovenčina Српски / srpski Suomi Svenska ไทย Türkçe Українська اردو Tiếng Việt 粵語 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Permanent link Page information Cite this page Get shortened URL Download QR code Print/export Download as PDF Printable version In other projects Wikidata item Appearance move to sidebar hide From Wikipedia, the free encyclopedia (Redirected from Check bit ) Bit added to a binary string for error detection For broader coverage of this topic, see Parity (mathematics) .

This article needs additional citations for verification .

Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed.

Find sources: "Parity bit" – news · newspapers · books · scholar · JSTOR ( January 2022 ) ( Learn how and when to remove this message ) 7 bits of data (count of 1-bits) 8 bits including parity even odd 0000000 0 0000000 0 0000000 1 1010001 3 1010001 1 1010001 0 1101001 4 1101001 0 1101001 1 1111111 7 1111111 1 1111111 0 A parity bit , or check bit , is a bit added to a string of binary code . Parity bits are a simple form of error detecting code . Parity bits are generally applied to the smallest units of a communication protocol, typically 8-bit octets (bytes), although they can also be applied separately to an entire message string of bits.

The parity bit ensures that the total number of 1-bits in the string is even or odd .

[ 1 ] Accordingly, there are two variants of parity bits: even parity bit and odd parity bit . In the case of even parity, for a given set of bits, the bits whose value is 1 are counted. If that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1s in the whole set (including the parity bit) an even number. If the count of 1s in a given set of bits is already even, the parity bit's value is 0. In the case of odd parity, the coding is reversed. For a given set of bits, if the count of bits with a value of 1 is even, the parity bit value is set to 1 making the total count of 1s in the whole set (including the parity bit) an odd number. If the count of bits with a value of 1 is odd, the count is already odd so the parity bit's value is 0. Parity is a special case of a cyclic redundancy check (CRC), where the 1-bit CRC is generated by the polynomial x +1.

Parity [ edit ] In mathematics parity can refer to the evenness or oddness of an integer, which, when written in its binary form , can be determined just by examining only its least significant bit .

In information technology parity refers to the evenness or oddness, given any set of binary digits, of the number of those bits with value one. Because parity is determined by the state of every one of the bits, this property of parity—being dependent upon all the bits and changing its value from even to odd parity if any one bit changes—allows for its use in error detection and correction schemes.

In telecommunications the parity referred to by some protocols is for error- detection . The transmission medium is preset, at both end points, to agree on either odd parity or even parity. For each string of bits ready to transmit (data packet) the sender calculates its parity bit, zero or one, to make it conform to the agreed parity, even or odd. The receiver of that packet first checks that the parity of the packet as a whole is in accordance with the preset agreement, then, if there was a parity error in that packet, requests a retransmission of that packet.

In computer science the parity stripe or parity disk in a RAID provides error- correction . Parity bits are written at the rate of one parity bit per n bits, where n is the number of disks in the array. When a read error occurs, each bit in the error region is recalculated from its set of n bits. In this way, using one parity bit creates "redundancy" for a region from the size of one bit to the size of one disk. See § RAID array below.

In electronics, transcoding data with parity can be very efficient, as XOR gates output what is equivalent to a check bit that creates an even parity, and XOR logic design easily scales to any number of inputs. XOR and AND structures comprise the bulk of most integrated circuitry.

Error detection [ edit ] Diagrammatic oscilloscope trace of voltage levels for a RS232 transmission of a 7 bit ASCII "K" character (4Bh = 1001011b) framed as 1 start bit, 7 data bits (least significant bit first), even parity, and 1 stop bit: 7E1.

If an odd number of bits (including the parity bit) are transmitted incorrectly, the parity bit will be incorrect, thus indicating that a parity error occurred in the transmission. The parity bit is suitable only for detecting errors; it cannot correct any errors, as there is no way to determine the particular bit that is corrupted. The data must be discarded entirely, and retransmitted from scratch . On a noisy transmission medium, successful transmission can therefore take a long time or even never occur. However, parity has the advantage that it uses only a single bit and requires only a number of XOR gates to generate. See Hamming code for an example of an error-correcting code.

Parity bit checking is used occasionally for transmitting ASCII characters, which have 7 bits, leaving the 8th bit as a parity bit.

For example, the parity bit can be computed as follows. Assume Alice and Bob are communicating and Alice wants to send Bob the simple 4-bit message 1001.

Type of bit parity Successful transmission scenario Even parity Alice wants to transmit:          1001 and 1011 Alice computes parity bit value: 1+0+0+1 (mod 2) = 0 1+0+1+1 (mod 2) = 1 Alice adds parity bit and sends: 1001 0 and 1011 1 Bob receives:                   10010 and 10111 Bob computes parity: 1+0+0+1+0 (mod 2) = 0 1+0+1+1+1 (mod 2) = 0 Bob reports correct transmission after observing expected even result.

Odd parity Alice wants to transmit:          1001 and 1011 Alice computes parity bit value: 1+0+0+1 (+ 1 mod 2) = 1 1+0+1+1 (+ 1 mod 2) = 0 Alice adds parity bit and sends: 1001 1 and 1011 0 Bob receives:                   10011 and 10110 Bob computes overall parity: 1+0+0+1+1 (mod 2) = 1 1+0+1+1+0 (mod 2) = 1 Bob reports correct transmission after observing expected odd result.

This mechanism enables the detection of single bit errors, because if one bit gets flipped due to line noise, there will be an incorrect number of ones in the received data. In the two examples above, Bob's calculated parity value matches the parity bit in its received value, indicating there are no single bit errors. Consider the following example with a transmission error in the second bit using XOR: Type of bit parity error Failed transmission scenario Even parity Error in the second bit Alice wants to transmit:          1001 Alice computes parity bit value: 1^0^0^1 = 0 Alice adds parity bit and sends: 10010 ...TRANSMISSION ERROR...

Bob receives:                   1 1 010 Bob computes overall parity:    1^1^0^1^0 = 1 Bob reports incorrect transmission after observing unexpected odd result.

Even parity Error in the parity bit Alice wants to transmit:          1001 Alice computes even parity value: 1^0^0^1 = 0 Alice sends:                      10010 ...TRANSMISSION ERROR...

Bob receives:                   1001 1 Bob computes overall parity:    1^0^0^1^1 = 1 Bob reports incorrect transmission after observing unexpected odd result.

There is a limitation to parity schemes. A parity bit is guaranteed to detect only an odd number of bit errors. If an even number of bits have errors, the parity bit records the correct number of ones even though the data is corrupt. (See also error detection and correction .) Consider the same example as before but with an even number of corrupted bits: Type of bit parity error Failed transmission scenario Even parity Two corrupted bits Alice wants to transmit:          1001 Alice computes even parity value: 1^0^0^1 = 0 Alice sends:                      10010 ...TRANSMISSION ERROR...

Bob receives:                   1 1 01 1 Bob computes overall parity:    1^1^0^1^1 = 0 Bob reports correct transmission though actually incorrect.

Bob observes even parity, as expected, thereby failing to catch the two bit errors.

Usage [ edit ] Because of its simplicity, parity is used in many hardware applications in which an operation can be repeated in case of difficulty, or simply detecting the error is helpful. For example, the SCSI and PCI buses use parity to detect transmission errors, and many microprocessor instruction caches include parity protection. Because the Instruction cache data is just a copy of the main memory , it can be disregarded and refetched if it is found to be corrupted.

In serial data transmission , a common format is 7 data bits, an even parity bit, and one or two stop bits . That format accommodates all the 7-bit ASCII characters in an 8-bit byte. Other formats are possible; 8 bits of data plus a parity bit can convey all 8-bit byte values.

In serial communication contexts, parity is usually generated and checked by interface hardware (such as a UART ) and, on reception, the result made available to a processor such as the CPU (and so too, for instance, the operating system ) via a status bit in a hardware register in the interface hardware. Recovery from the error is usually done by retransmitting the data, the details of which are usually handled by software (such as the operating system I/O routines).

When the total number of transmitted bits, including the parity bit, is even, odd parity has the advantage that both all-zeros and all-ones patterns are detected as errors. If the total number of bits is odd, only one of the patterns is detected as an error, and the choice can be made based on what the more common error is expected to be.

RAID array [ edit ] Parity data is used by RAID arrays ( redundant array of independent/inexpensive disks ) to achieve redundancy . If a drive in the array fails, remaining data on the other drives can be combined with the parity data (using the Boolean XOR function) to reconstruct the missing data.

For example, suppose two drives in a three-drive RAID 4 array contained the following data: Drive 1: 01101101 Drive 2: 11010100 To calculate parity data for the two drives, an XOR is performed on their data: 01101101 XOR 11010100 10111001 The resulting parity data, 10111001 , is then stored on Drive 3.

Should any of the three drives fail, the contents of the failed drive can be reconstructed on a replacement drive by subjecting the data from the remaining drives to the same XOR operation. If Drive 2 were to fail, its data could be rebuilt using the XOR results of the contents of the two remaining drives, Drive 1 and Drive 3: Drive 1: 01101101 Drive 3: 10111001 as follows: 01101101 Drive 1 XOR 10111001 Drive 3 11010100 Reconstructed Drive 2 The result of that XOR calculation yields Drive 2's contents.

11010100 is then stored on Drive 2, fully repairing the array.

XOR logic is also equivalent to even parity (because a XOR b XOR c XOR ... may be treated as XOR( a , b , c ,...), which is an n-ary operator that is true if and only if an odd number of arguments is true). So the same XOR concept above applies similarly to larger RAID arrays with parity, using any number of disks. In the case of a RAID 3 array of 12 drives, 11 drives participate in the XOR calculation shown above and yield a value that is then stored on the dedicated parity drive.

Extensions and variations on the parity bit mechanism "double," "dual," or "diagonal" parity, are used in RAID-DP .

History [ edit ] A parity track was present on the first magnetic-tape data storage in 1951. Parity in this form, applied across multiple parallel signals, is known as a transverse redundancy check . This can be combined with parity computed over multiple bits sent on a single signal, a longitudinal redundancy check . In a parallel bus, there is one longitudinal redundancy check bit per parallel signal.

Parity was also used on at least some paper-tape ( punched tape ) data entry systems (which preceded magnetic-tape systems). On the systems sold by British company ICL (formerly ICT) the 1-inch-wide (25 mm) paper tape had 8 hole positions running across it, with the 8th being for parity. 7 positions were used for the data, e.g., 7-bit ASCII. The 8th position had a hole punched in it depending on the number of data holes punched.

See also [ edit ] BIP-8 Parity function Single-event upset Check digit Thue–Morse sequence References [ edit ] ^ Ziemer, RodgerE.; Tranter, William H. (17 March 2014).

Principles of communication : systems, modulation, and noise (Seventh ed.). Hoboken, New Jersey.

ISBN 9781118078914 .

OCLC 856647730 .

{{ cite book }} :  CS1 maint: location missing publisher ( link ) External links [ edit ] Different methods of generating the parity bit, among other bit operations Retrieved from " https://en.wikipedia.org/w/index.php?title=Parity_bit&oldid=1297682637 " Categories : Binary arithmetic Data transmission Error detection and correction Parity (mathematics) RAID Hidden categories: CS1 maint: location missing publisher Articles with short description Short description is different from Wikidata Articles needing additional references from January 2022 All articles needing additional references This page was last edited on 27 June 2025, at 20:23 (UTC) .

Text is available under the Creative Commons Attribution-ShareAlike 4.0 License ;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.

, a non-profit organization.

Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Search Search Toggle the table of contents Parity bit 37 languages Add topic

