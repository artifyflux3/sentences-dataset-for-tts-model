Title: Computational geometry

URL Source: https://en.wikipedia.org/wiki/Computational_geometry

Published Time: 2003-01-31T00:33:37Z

Markdown Content:
[![Image 1: Listen to this article](https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/20px-Sound-icon.svg.png)](https://en.wikipedia.org/wiki/File:En-ComputationalGeometry.ogg "Listen to this article")

From Wikipedia, the free encyclopedia

**Computational geometry** is a branch of [computer science](https://en.wikipedia.org/wiki/Computer_science "Computer science") devoted to the study of [algorithms](https://en.wikipedia.org/wiki/Algorithm "Algorithm") that can be stated in terms of [geometry](https://en.wikipedia.org/wiki/Geometry "Geometry"). Some purely geometrical problems arise out of the study of computational geometric algorithms, and such problems are also considered to be part of computational geometry. While modern computational geometry is a recent development, it is one of the oldest fields of computing with a history stretching back to antiquity.

[Computational complexity](https://en.wikipedia.org/wiki/Analysis_of_algorithms "Analysis of algorithms") is central to computational geometry, with great practical significance if algorithms are used on very large datasets containing tens or hundreds of millions of points. For such sets, the difference between _O_(_n_ 2) and _O_(_n_ log _n_) may be the difference between days and seconds of computation.

The main impetus for the development of computational geometry as a discipline was progress in [computer graphics](https://en.wikipedia.org/wiki/Computer_graphics "Computer graphics") and computer-aided design and manufacturing ([CAD](https://en.wikipedia.org/wiki/Computer-aided_design "Computer-aided design")/[CAM](https://en.wikipedia.org/wiki/Computer-aided_manufacturing "Computer-aided manufacturing")), but many problems in computational geometry are classical in nature, and may come from [mathematical visualization](https://en.wikipedia.org/wiki/Mathematical_visualization "Mathematical visualization").

Other important applications of computational geometry include [robotics](https://en.wikipedia.org/wiki/Robotics "Robotics") ([motion planning](https://en.wikipedia.org/wiki/Motion_planning "Motion planning") and visibility problems), [geographic information systems](https://en.wikipedia.org/wiki/Geographic_information_system "Geographic information system") (GIS) (geometrical location and search, route planning), [integrated circuit](https://en.wikipedia.org/wiki/Integrated_circuit "Integrated circuit") design (IC geometry design and verification), [computer-aided engineering](https://en.wikipedia.org/wiki/Computer-aided_engineering "Computer-aided engineering") (CAE) (mesh generation), and [computer vision](https://en.wikipedia.org/wiki/Computer_vision "Computer vision") ([3D reconstruction](https://en.wikipedia.org/wiki/3D_reconstruction "3D reconstruction")).

The main branches of computational geometry are:

*   _Combinatorial computational geometry_, also called _algorithmic geometry_, which deals with geometric objects as [discrete](https://en.wikipedia.org/wiki/Discrete_mathematics "Discrete mathematics") entities. A groundlaying book in the subject by [Preparata](https://en.wikipedia.org/wiki/Franco_P._Preparata "Franco P. Preparata") and [Shamos](https://en.wikipedia.org/wiki/Michael_Ian_Shamos "Michael Ian Shamos") dates the first use of the term "computational geometry" in this sense by 1975.[[1]](https://en.wikipedia.org/wiki/Computational_geometry#cite_note-PS-1)
*   _Numerical computational geometry_, also called _machine geometry_, _[computer-aided geometric design](https://en.wikipedia.org/wiki/Computer-aided\_geometric\_design "Computer-aided geometric design")_ (CAGD), or _[geometric modeling](https://en.wikipedia.org/wiki/Geometric\_modeling "Geometric modeling")_, which deals primarily with representing real-world objects in forms suitable for computer computations in CAD/CAM systems. This branch may be seen as a further development of [descriptive geometry](https://en.wikipedia.org/wiki/Descriptive_geometry "Descriptive geometry") and is often considered a branch of computer graphics or CAD. The term "computational geometry" in this meaning has been in use since 1971.[[2]](https://en.wikipedia.org/wiki/Computational_geometry#cite_note-2)

Although most algorithms of computational geometry have been developed (and are being developed) for electronic computers, some algorithms were developed for unconventional computers (e.g. optical computers [[3]](https://en.wikipedia.org/wiki/Computational_geometry#cite_note-YK-3))

Combinatorial computational geometry
------------------------------------

[[edit](https://en.wikipedia.org/w/index.php?title=Computational_geometry&action=edit&section=1 "Edit section: Combinatorial computational geometry")]

The primary goal of research in combinatorial computational geometry is to develop efficient [algorithms](https://en.wikipedia.org/wiki/Algorithm "Algorithm") and [data structures](https://en.wikipedia.org/wiki/Data_structure "Data structure") for solving problems stated in terms of basic geometrical objects: points, line segments, [polygons](https://en.wikipedia.org/wiki/Polygon "Polygon"), [polyhedra](https://en.wikipedia.org/wiki/Polyhedron "Polyhedron"), etc.

Some of these problems seem so simple that they were not regarded as problems at all until the advent of [computers](https://en.wikipedia.org/wiki/Computer "Computer"). Consider, for example, the _[closest pair problem](https://en.wikipedia.org/wiki/Closest\_pair\_problem "Closest pair problem")_:

*   Given _n_ points in the plane, find the two with the smallest distance from each other.

One could compute the distances between all the pairs of points, of which there are _n_(_n_ âˆ’ 1)/2, then pick the pair with the smallest distance. This [brute-force](https://en.wikipedia.org/wiki/Brute-force_search "Brute-force search") algorithm takes [_O_](https://en.wikipedia.org/wiki/Big_O_notation "Big O notation")(_n_ 2) time; i.e. its execution time is proportional to the square of the number of points. A classic result in computational geometry was the formulation of an algorithm that takes _O_(_n_ log _n_). [Randomized algorithms](https://en.wikipedia.org/wiki/Randomized_algorithm "Randomized algorithm") that take _O_(_n_) expected time,[[4]](https://en.wikipedia.org/wiki/Computational_geometry#cite_note-4) as well as a deterministic algorithm that takes _O_(_n_ log log _n_) time,[[5]](https://en.wikipedia.org/wiki/Computational_geometry#cite_note-5) have also been discovered.

The core problems in computational geometry may be classified in different ways, according to various criteria. The following general classes may be distinguished.

In the problems of this category, some input is given and the corresponding output needs to be constructed or found. Some fundamental problems of this type are:

*   [Convex hull](https://en.wikipedia.org/wiki/Convex_hull "Convex hull"): Given a set of points, find the smallest convex polyhedron/polygon containing all the points.
*   [Line segment intersection](https://en.wikipedia.org/wiki/Line_segment_intersection "Line segment intersection"): Find the intersections between a given set of line segments.
*   [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation "Delaunay triangulation")
*   [Voronoi diagram](https://en.wikipedia.org/wiki/Voronoi_diagram "Voronoi diagram"): Given a set of points, partition the space according to which points are closest to the given points.
*   [Linear programming](https://en.wikipedia.org/wiki/Linear_programming "Linear programming")
*   [Closest pair of points](https://en.wikipedia.org/wiki/Closest_pair_of_points "Closest pair of points"): Given a set of points, find the two with the smallest distance from each other.
*   Farthest pair of points
*   [Largest empty circle](https://en.wikipedia.org/wiki/Largest_empty_circle "Largest empty circle"): Given a set of points, find a largest circle with its center inside of their convex hull and enclosing none of them.
*   [Euclidean shortest path](https://en.wikipedia.org/wiki/Euclidean_shortest_path "Euclidean shortest path"): Connect two points in a Euclidean space (with polyhedral obstacles) by a shortest path.
*   [Polygon triangulation](https://en.wikipedia.org/wiki/Polygon_triangulation "Polygon triangulation"): Given a polygon, partition its interior into triangles
*   [Mesh generation](https://en.wikipedia.org/wiki/Mesh_generation "Mesh generation")
*   [Boolean operations on polygons](https://en.wikipedia.org/wiki/Boolean_operations_on_polygons "Boolean operations on polygons")

The computational complexity for this class of problems is estimated by the time and space (computer memory) required to solve a given problem instance.

#### Geometric query problems

[[edit](https://en.wikipedia.org/w/index.php?title=Computational_geometry&action=edit&section=4 "Edit section: Geometric query problems")]

In _geometric query problems_, commonly known as _geometric search problems_, the input consists of two parts: the search space part and the [query](https://en.wikipedia.org/wiki/Query_(complexity) "Query (complexity)") part, which varies over the problem instances. The search space typically needs to be [preprocessed](https://en.wikipedia.org/wiki/Data_pre-processing "Data pre-processing"), in a way that multiple queries can be answered efficiently.

Some fundamental geometric query problems are:

*   [Range searching](https://en.wikipedia.org/wiki/Range_searching "Range searching"): Preprocess a set of points, in order to efficiently count the number of points inside a query region.
*   [Point location problem](https://en.wikipedia.org/wiki/Point_location_problem "Point location problem"): Given a partitioning of the space into cells, produce a data structure that efficiently tells in which cell a query point is located.
*   [Nearest neighbor](https://en.wikipedia.org/wiki/Nearest_neighbour_search "Nearest neighbour search"): Preprocess a set of points, in order to efficiently find which point is closest to a query point.
*   [Ray tracing](https://en.wikipedia.org/wiki/Ray_tracing_(graphics) "Ray tracing (graphics)"): Given a set of objects in space, produce a data structure that efficiently tells which object a query ray intersects first.

If the search space is fixed, the computational complexity for this class of problems is usually estimated by:

*   the time and space required to construct the data structure to be searched in
*   the time (and sometimes an extra space) to answer queries.

For the case when the search space is allowed to vary, see _[Â§Dynamic problems](https://en.wikipedia.org/wiki/Computational\_geometry#Dynamic\_problems)_.

Yet another major class is the [dynamic problems](https://en.wikipedia.org/wiki/Dynamic_problem_(algorithms) "Dynamic problem (algorithms)"), in which the goal is to find an efficient algorithm for finding a solution repeatedly after each incremental modification of the input data (addition or deletion input geometric elements). Algorithms for problems of this type typically involve [dynamic data structures](https://en.wikipedia.org/wiki/Dynamic_data_structures "Dynamic data structures"). Any of the computational geometric problems may be converted into a dynamic one, at the cost of increased processing time. For example, the [range searching](https://en.wikipedia.org/wiki/Range_searching "Range searching") problem may be converted into the [dynamic range searching](https://en.wikipedia.org/w/index.php?title=Dynamic_range_searching&action=edit&redlink=1 "Dynamic range searching (page does not exist)") problem by providing for addition and/or deletion of the points. The [dynamic convex hull](https://en.wikipedia.org/wiki/Dynamic_convex_hull "Dynamic convex hull") problem is to keep track of the convex hull, e.g., for the dynamically changing set of points, i.e., while the input points are inserted or deleted.

The computational complexity for this class of problems is estimated by:

*   the time and space required to construct the data structure to be searched in
*   the time and space to modify the searched data structure after an incremental change in the search space
*   the time (and sometimes an extra space) to answer a query.

Some problems may be treated as belonging to either of the categories, depending on the context. For example, consider the following problem.

*   [Point in polygon](https://en.wikipedia.org/wiki/Point_in_polygon "Point in polygon"): Decide whether a point is inside or outside a given polygon.

In many applications this problem is treated as a single-shot one, i.e., belonging to the first class. For example, in many applications of [computer graphics](https://en.wikipedia.org/wiki/Computer_graphics "Computer graphics") a common problem is to find which area on the screen is clicked by a [pointer](https://en.wikipedia.org/wiki/Pointer_(graphical_user_interfaces) "Pointer (graphical user interfaces)"). However, in some applications, the polygon in question is invariant, while the point represents a query. For example, the input polygon may represent a border of a country and a point is a position of an aircraft, and the problem is to determine whether the aircraft violated the border. Finally, in the previously mentioned example of computer graphics, in [CAD](https://en.wikipedia.org/wiki/Computer-aided_design "Computer-aided design") applications the changing input data are often stored in dynamic data structures, which may be exploited to speed-up the point-in-polygon queries.

In some contexts of query problems there are reasonable expectations on the sequence of the queries, which may be exploited either for efficient data structures or for tighter computational complexity estimates. For example, in some cases it is important to know the worst case for the total time for the whole sequence of _N_ queries, rather than for a single query. See also _[Amortized analysis](https://en.wikipedia.org/wiki/Amortized\_analysis "Amortized analysis")_.

Numerical computational geometry
--------------------------------

[[edit](https://en.wikipedia.org/w/index.php?title=Computational_geometry&action=edit&section=7 "Edit section: Numerical computational geometry")]

This branch is also known as **geometric modelling** and **computer-aided geometric design** (CAGD).

Core problems are curve and surface modelling and representation.

The most important instruments here are [parametric curves](https://en.wikipedia.org/wiki/Parametric_curve "Parametric curve") and [parametric surfaces](https://en.wikipedia.org/wiki/Parametric_surface "Parametric surface"), such as [BÃ©zier curves](https://en.wikipedia.org/wiki/B%C3%A9zier_curve "BÃ©zier curve"), [spline](https://en.wikipedia.org/wiki/Spline_(mathematics) "Spline (mathematics)") curves and surfaces. An important non-parametric approach is the [level-set method](https://en.wikipedia.org/wiki/Level-set_method "Level-set method").

Application areas of computational geometry include shipbuilding, aircraft, and automotive industries.

*   [Closest pair problem](https://en.wikipedia.org/wiki/Closest_pair_problem "Closest pair problem"): find the pair of points (from a set of points) with the smallest distance between them
*   [Collision detection](https://en.wikipedia.org/wiki/Collision_detection "Collision detection") algorithms: check for the collision or intersection of two given solids
*   [Cone algorithm](https://en.wikipedia.org/wiki/Cone_algorithm "Cone algorithm"): identify surface points
*   [Convex hull algorithms](https://en.wikipedia.org/wiki/Convex_hull_algorithms "Convex hull algorithms"): determining the [convex hull](https://en.wikipedia.org/wiki/Convex_hull "Convex hull") of a [set](https://en.wikipedia.org/wiki/Set_(mathematics) "Set (mathematics)") of points 
    *   [Chan's algorithm](https://en.wikipedia.org/wiki/Chan%27s_algorithm "Chan's algorithm")
    *   [Gift wrapping algorithm](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm "Gift wrapping algorithm") or Jarvis march
    *   [Graham scan](https://en.wikipedia.org/wiki/Graham_scan "Graham scan")
    *   [Kirkpatrickâ€“Seidel algorithm](https://en.wikipedia.org/wiki/Kirkpatrick%E2%80%93Seidel_algorithm "Kirkpatrickâ€“Seidel algorithm")
    *   [Quickhull](https://en.wikipedia.org/wiki/Quickhull "Quickhull")

*   [Euclidean distance transform](https://en.wikipedia.org/wiki/Euclidean_distance_map "Euclidean distance map"): computes the distance between every point in a grid and a discrete collection of points.
*   [Geometric hashing](https://en.wikipedia.org/wiki/Geometric_hashing "Geometric hashing"): a method for efficiently finding two-dimensional objects represented by discrete points that have undergone an [affine transformation](https://en.wikipedia.org/wiki/Affine_transformation "Affine transformation")
*   [Gilbertâ€“Johnsonâ€“Keerthi distance algorithm](https://en.wikipedia.org/wiki/Gilbert%E2%80%93Johnson%E2%80%93Keerthi_distance_algorithm "Gilbertâ€“Johnsonâ€“Keerthi distance algorithm"): determining the smallest distance between two [convex](https://en.wikipedia.org/wiki/Convex_set "Convex set") shapes.
*   [Jump-and-Walk algorithm](https://en.wikipedia.org/wiki/Jump-and-Walk_algorithm "Jump-and-Walk algorithm"): an algorithm for point location in triangulations
*   [Laplacian smoothing](https://en.wikipedia.org/wiki/Laplacian_smoothing "Laplacian smoothing"): an algorithm to smooth a polygonal mesh
*   [Line segment intersection](https://en.wikipedia.org/wiki/Line_segment_intersection "Line segment intersection"): finding whether lines intersect, usually with a [sweep line algorithm](https://en.wikipedia.org/wiki/Sweep_line_algorithm "Sweep line algorithm")
    *   [Bentleyâ€“Ottmann algorithm](https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm "Bentleyâ€“Ottmann algorithm")
    *   [Shamosâ€“Hoey algorithm](https://en.wikipedia.org/w/index.php?title=Shamos%E2%80%93Hoey_algorithm&action=edit&redlink=1 "Shamosâ€“Hoey algorithm (page does not exist)")

*   [Minimum bounding box algorithms](https://en.wikipedia.org/wiki/Minimum_bounding_box_algorithms "Minimum bounding box algorithms"): find the [oriented minimum bounding box](https://en.wikipedia.org/wiki/Minimum_bounding_box#Arbitrarily_oriented_minimum_bounding_box "Minimum bounding box") enclosing a set of points
*   [Nearest neighbor search](https://en.wikipedia.org/wiki/Nearest_neighbor_search "Nearest neighbor search"): find the nearest point or points to a query point
*   [Nesting algorithm](https://en.wikipedia.org/wiki/Nesting_algorithm "Nesting algorithm"): make the most efficient use of material or space
*   [Point in polygon](https://en.wikipedia.org/wiki/Point_in_polygon "Point in polygon") algorithms: tests whether a given point lies within a given polygon
*   [Point set registration](https://en.wikipedia.org/wiki/Point_set_registration "Point set registration") algorithms: finds the transformation between two [point sets](https://en.wikipedia.org/wiki/Point_cloud "Point cloud") to optimally align them.
*   [Rotating calipers](https://en.wikipedia.org/wiki/Rotating_calipers "Rotating calipers"): determine all [antipodal](https://en.wikipedia.org/wiki/Antipodal_point "Antipodal point") pairs of points and vertices on a [convex polygon](https://en.wikipedia.org/wiki/Convex_polygon "Convex polygon") or [convex hull](https://en.wikipedia.org/wiki/Convex_hull "Convex hull").
*   [Shoelace algorithm](https://en.wikipedia.org/wiki/Shoelace_algorithm "Shoelace algorithm"): determine the area of a polygon whose vertices are described by ordered pairs in the plane
*   [Triangulation](https://en.wikipedia.org/wiki/Triangulation_(geometry) "Triangulation (geometry)")
    *   [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation "Delaunay triangulation")
        *   [Chew's second algorithm](https://en.wikipedia.org/wiki/Chew%27s_second_algorithm "Chew's second algorithm"): create quality [constrained Delaunay triangulations](https://en.wikipedia.org/wiki/Constrained_Delaunay_triangulation "Constrained Delaunay triangulation")
        *   [Ruppert's algorithm](https://en.wikipedia.org/wiki/Ruppert%27s_algorithm "Ruppert's algorithm") (also known as Delaunay refinement): create quality Delaunay triangulations

    *   [Marching triangles](https://en.wikipedia.org/wiki/Marching_triangles "Marching triangles"): reconstruct two-dimensional surface geometry from an unstructured [point cloud](https://en.wikipedia.org/wiki/Point_cloud "Point cloud")
    *   [Polygon triangulation](https://en.wikipedia.org/wiki/Polygon_triangulation "Polygon triangulation") algorithms: decompose a polygon into a set of triangles
    *   [Quasitriangulation](https://en.wikipedia.org/wiki/Quasitriangulation "Quasitriangulation")
    *   [Voronoi diagrams](https://en.wikipedia.org/wiki/Voronoi_diagram "Voronoi diagram"), geometric [dual](https://en.wikipedia.org/wiki/Duality_(mathematics) "Duality (mathematics)") of [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation "Delaunay triangulation")
        *   [Bowyerâ€“Watson algorithm](https://en.wikipedia.org/wiki/Bowyer%E2%80%93Watson_algorithm "Bowyerâ€“Watson algorithm"): create voronoi diagram in any number of dimensions
        *   [Fortune's Algorithm](https://en.wikipedia.org/wiki/Fortune%27s_Algorithm "Fortune's Algorithm"): create voronoi diagram

*   [List of combinatorial computational geometry topics](https://en.wikipedia.org/wiki/List_of_combinatorial_computational_geometry_topics "List of combinatorial computational geometry topics")
*   [List of interactive geometry software](https://en.wikipedia.org/wiki/List_of_interactive_geometry_software "List of interactive geometry software")
*   [List of information graphics software](https://en.wikipedia.org/wiki/List_of_information_graphics_software "List of information graphics software")
*   [List of numerical computational geometry topics](https://en.wikipedia.org/wiki/List_of_numerical_computational_geometry_topics "List of numerical computational geometry topics")
*   [List of uniform polyhedra](https://en.wikipedia.org/wiki/List_of_uniform_polyhedra "List of uniform polyhedra")
*   [CAD](https://en.wikipedia.org/wiki/Computer-aided_design "Computer-aided design")/[CAM](https://en.wikipedia.org/wiki/Computer-aided_manufacturing "Computer-aided manufacturing")/[CAE](https://en.wikipedia.org/wiki/Computer-aided_engineering "Computer-aided engineering")
*   [Solid modeling](https://en.wikipedia.org/wiki/Solid_modeling "Solid modeling")
*   [Computational topology](https://en.wikipedia.org/wiki/Computational_topology "Computational topology")
*   [Computer representation of surfaces](https://en.wikipedia.org/wiki/Computer_representation_of_surfaces "Computer representation of surfaces")
*   [Digital geometry](https://en.wikipedia.org/wiki/Digital_geometry "Digital geometry")
*   [Discrete geometry](https://en.wikipedia.org/wiki/Discrete_geometry "Discrete geometry") (combinatorial geometry)
*   [Space partitioning](https://en.wikipedia.org/wiki/Space_partitioning "Space partitioning")
*   [Tricomplex number](https://en.wikipedia.org/wiki/Multicomplex_number "Multicomplex number")
*   [Robust geometric computation](https://en.wikipedia.org/wiki/Robust_geometric_computation "Robust geometric computation")
*   [Wikiversity:Topic:Computational geometry](https://en.wikiversity.org/wiki/Topic:Computational_geometry "wikiversity:Topic:Computational geometry")
*   [Wikiversity:Computer-aided geometric design](https://en.wikiversity.org/wiki/CAGD "wikiversity:CAGD")

1.   **[^](https://en.wikipedia.org/wiki/Computational_geometry#cite_ref-PS_1-0)**[Franco P. Preparata](https://en.wikipedia.org/wiki/Franco_P._Preparata "Franco P. Preparata") and [Michael Ian Shamos](https://en.wikipedia.org/wiki/Michael_Ian_Shamos "Michael Ian Shamos") (1985). _Computational Geometry â€“ An Introduction_. [Springer-Verlag](https://en.wikipedia.org/wiki/Springer-Verlag "Springer-Verlag"). [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[0-387-96131-3](https://en.wikipedia.org/wiki/Special:BookSources/0-387-96131-3 "Special:BookSources/0-387-96131-3"). 1st edition; 2nd printing, corrected and expanded, 1988.
2.   **[^](https://en.wikipedia.org/wiki/Computational_geometry#cite_ref-2)**A.R. Forrest, "Computational geometry", _Proc. Royal Society London_, 321, series 4, 187â€“195 (1971)
3.   **[^](https://en.wikipedia.org/wiki/Computational_geometry#cite_ref-YK_3-0)**[Yevgeny B. Karasik](https://en.wikipedia.org/w/index.php?title=Yevgeny_B._Karasik&action=edit&redlink=1 "Yevgeny B. Karasik (page does not exist)") (2019). _Optical Computational Geometry_. [ISBN](https://en.wikipedia.org/wiki/ISBN_(identifier) "ISBN (identifier)")[979-8511243344](https://en.wikipedia.org/wiki/Special:BookSources/979-8511243344 "Special:BookSources/979-8511243344").
4.   **[^](https://en.wikipedia.org/wiki/Computational_geometry#cite_ref-4)**S. Khuller and Y. Matias. [A simple randomized sieve algorithm for the closest-pair problem](https://www.sciencedirect.com/science/article/pii/S0890540185710498/pdf?md5=aef3739b6ce3d0a18f11ef1915827ffe&pid=1-s2.0-S0890540185710498-main.pdf&_valck=1). Inf. Comput., 118(1):34â€“37, 1995 ([PDF](https://en.wikipedia.org/wiki/PDF "PDF"))
5.   **[^](https://en.wikipedia.org/wiki/Computational_geometry#cite_ref-5)**S. Fortune and J.E. Hopcroft. "A note on Rabin's nearest-neighbor algorithm". Information Processing Letters, 8(1), pp. 20â€“23, 1979

*   [List of books in computational geometry](https://en.wikipedia.org/wiki/List_of_books_in_computational_geometry "List of books in computational geometry")

#### Combinatorial/algorithmic computational geometry

[[edit](https://en.wikipedia.org/w/index.php?title=Computational_geometry&action=edit&section=13 "Edit section: Combinatorial/algorithmic computational geometry")]

Below is the list of the major journals that have been publishing research in geometric algorithms. Please notice with the appearance of journals specifically dedicated to computational geometry, the share of geometric publications in general-purpose computer science and computer graphics journals decreased.

*   _[ACM Computing Surveys](https://en.wikipedia.org/wiki/ACM\_Computing\_Surveys "ACM Computing Surveys")_
*   _[ACM Transactions on Graphics](https://en.wikipedia.org/wiki/ACM\_Transactions\_on\_Graphics "ACM Transactions on Graphics")_
*   _[Acta Informatica](https://en.wikipedia.org/wiki/Acta\_Informatica "Acta Informatica")_
*   _[Advances in Geometry](https://en.wikipedia.org/wiki/Advances\_in\_Geometry "Advances in Geometry")_
*   _[Algorithmica](https://en.wikipedia.org/wiki/Algorithmica "Algorithmica")_
*   _[Ars Combinatoria](https://en.wikipedia.org/wiki/Ars\_Combinatoria\_(journal) "Ars Combinatoria (journal)")_
*   _[Computational Geometry: Theory and Applications](https://en.wikipedia.org/wiki/Computational\_Geometry\_(journal) "Computational Geometry (journal)")_
*   _[Communications of the ACM](https://en.wikipedia.org/wiki/Communications\_of\_the\_ACM "Communications of the ACM")_
*   _[Computer Aided Geometric Design](https://web.archive.org/web/20111122080921/http://www.journals.elsevier.com/computer-aided-geometric-design/#description)_
*   _[Computer Graphics and Applications](https://en.wikipedia.org/w/index.php?title=Computer\_Graphics\_and\_Applications&action=edit&redlink=1 "Computer Graphics and Applications (page does not exist)")_
*   _[Computer Graphics World](https://en.wikipedia.org/w/index.php?title=Computer\_Graphics\_World&action=edit&redlink=1 "Computer Graphics World (page does not exist)")_
*   _[Computing in Geometry and Topology](https://www.cgt-journal.org/index.php/cgt/index)_
*   _[Discrete & Computational Geometry](https://en.wikipedia.org/wiki/Discrete\_%26\_Computational\_Geometry "Discrete & Computational Geometry")_
*   _[Geombinatorics](https://en.wikipedia.org/wiki/Geombinatorics "Geombinatorics")_
*   _[Geometriae Dedicata](https://en.wikipedia.org/wiki/Geometriae\_Dedicata "Geometriae Dedicata")_
*   _[IEEE Transactions on Graphics](https://en.wikipedia.org/w/index.php?title=IEEE\_Transactions\_on\_Graphics&action=edit&redlink=1 "IEEE Transactions on Graphics (page does not exist)")_
*   _[IEEE Transactions on Computers](https://en.wikipedia.org/wiki/IEEE\_Transactions\_on\_Computers "IEEE Transactions on Computers")_
*   _[IEEE Transactions on Pattern Analysis and Machine Intelligence](https://en.wikipedia.org/wiki/IEEE\_Transactions\_on\_Pattern\_Analysis\_and\_Machine\_Intelligence "IEEE Transactions on Pattern Analysis and Machine Intelligence")_
*   _[Information Processing Letters](https://en.wikipedia.org/wiki/Information\_Processing\_Letters "Information Processing Letters")_
*   _[International Journal of Computational Geometry and Applications](https://en.wikipedia.org/wiki/International\_Journal\_of\_Computational\_Geometry\_and\_Applications "International Journal of Computational Geometry and Applications")_
*   _[Journal of Combinatorial Theory](https://en.wikipedia.org/wiki/Journal\_of\_Combinatorial\_Theory "Journal of Combinatorial Theory"), Series B_
*   _[Journal of Computational Geometry](https://en.wikipedia.org/wiki/Journal\_of\_Computational\_Geometry "Journal of Computational Geometry")_
*   _[Journal of Differential Geometry](http://intlpress.com/site/pub/pages/journals/items/jdg/\_home/\_main)_
*   _[Journal of the ACM](https://en.wikipedia.org/wiki/Journal\_of\_the\_ACM "Journal of the ACM")_
*   _[Journal of Algorithms](https://en.wikipedia.org/wiki/Journal\_of\_Algorithms "Journal of Algorithms")_
*   _[Journal of Computer and System Sciences](https://en.wikipedia.org/wiki/Journal\_of\_Computer\_and\_System\_Sciences "Journal of Computer and System Sciences")_
*   _[Management Science](https://en.wikipedia.org/wiki/Management\_Science\_(journal) "Management Science (journal)")_
*   _[Pattern Recognition](https://en.wikipedia.org/wiki/Pattern\_Recognition\_(journal) "Pattern Recognition (journal)")_
*   _[Pattern Recognition Letters](https://en.wikipedia.org/wiki/Pattern\_Recognition\_Letters "Pattern Recognition Letters")_
*   _[SIAM Journal on Computing](https://en.wikipedia.org/wiki/SIAM\_Journal\_on\_Computing "SIAM Journal on Computing")_
*   _[SIGACT News](https://en.wikipedia.org/wiki/SIGACT\_News "SIGACT News")_; featured the "Computational Geometry Column" by [Joseph O'Rourke](https://en.wikipedia.org/wiki/Joseph_O%27Rourke_(professor) "Joseph O'Rourke (professor)")
*   _[Theoretical Computer Science](https://en.wikipedia.org/wiki/Theoretical\_Computer\_Science\_(journal) "Theoretical Computer Science (journal)")_
*   _[The Visual Computer](https://en.wikipedia.org/wiki/The\_Visual\_Computer "The Visual Computer")_

*   [Computational Geometry](http://www.computational-geometry.org/)
*   [Computational Geometry Pages](https://web.archive.org/web/20111106212300/http://compgeom.cs.uiuc.edu/~jeffe/compgeom/)
*   [Geometry In Action](http://www.ics.uci.edu/~eppstein/geom.html)
*   ["Strategic Directions in Computational Geometry â€“ Working Group Report" (1996)](http://www.cs.brown.edu/people/rt/sdcr/report/report.html)
*   [Journal of Computational Geometry](http://jocg.org/)
*   [(Annual) Winter School on Computational Geometry](https://web.archive.org/web/20140106103137/http://cg.aut.ac.ir/wscg)
*   [Computational Geometry Lab](https://cglab.ca/)

![Image 2: Spoken Wikipedia icon](https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Sound-icon.svg/60px-Sound-icon.svg.png)

[This audio file](https://en.wikipedia.org/wiki/File:En-ComputationalGeometry.ogg "File:En-ComputationalGeometry.ogg") was created from a revision of this article dated 17 September 2013, and does not reflect subsequent edits.
